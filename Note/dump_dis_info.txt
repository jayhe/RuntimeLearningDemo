RuntimeLearning:
(__TEXT,__text) section
+[UIViewController(Test) load]:
100001bb0:	55 	pushq	%rbp
100001bb1:	48 89 e5 	movq	%rsp, %rbp
100001bb4:	48 83 ec 30 	subq	$48, %rsp
100001bb8:	48 8b 05 61 84 01 00 	movq	99425(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100001bbf:	48 89 45 d8 	movq	%rax, -40(%rbp)
100001bc3:	b8 00 00 00 c2 	movl	$3254779904, %eax
100001bc8:	48 89 45 e0 	movq	%rax, -32(%rbp)
100001bcc:	48 8d 05 fa 52 00 00 	leaq	"___30+[UIViewController(Test) load]_block_invoke"(%rip), %rax
100001bd3:	48 89 45 e8 	movq	%rax, -24(%rbp)
100001bd7:	48 8d 05 c2 93 01 00 	leaq	___block_descriptor_tmp(%rip), %rax
100001bde:	48 89 45 f0 	movq	%rax, -16(%rbp)
100001be2:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100001be6:	48 83 3d 22 0a 02 00 ff 	cmpq	$-1, 133666(%rip)
100001bee:	75 06 	jne	0x100001bf6
100001bf0:	48 83 c4 30 	addq	$48, %rsp
100001bf4:	5d 	popq	%rbp
100001bf5:	c3 	retq
100001bf6:	48 8d 3d 13 0a 02 00 	leaq	_load.onceToken(%rip), %rdi
100001bfd:	48 8d 75 d8 	leaq	-40(%rbp), %rsi
100001c01:	e8 c6 20 01 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100001c06:	eb e8 	jmp	0x100001bf0
+[UIFont(Test) load]:
100001c08:	55 	pushq	%rbp
100001c09:	48 89 e5 	movq	%rsp, %rbp
100001c0c:	48 83 ec 30 	subq	$48, %rsp
100001c10:	48 8b 05 09 84 01 00 	movq	99337(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100001c17:	48 89 45 d8 	movq	%rax, -40(%rbp)
100001c1b:	b8 00 00 00 c2 	movl	$3254779904, %eax
100001c20:	48 89 45 e0 	movq	%rax, -32(%rbp)
100001c24:	48 8d 05 9c 5e 00 00 	leaq	"___20+[UIFont(Test) load]_block_invoke"(%rip), %rax
100001c2b:	48 89 45 e8 	movq	%rax, -24(%rbp)
100001c2f:	48 8d 05 ca 93 01 00 	leaq	___block_descriptor_tmp(%rip), %rax
100001c36:	48 89 45 f0 	movq	%rax, -16(%rbp)
100001c3a:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100001c3e:	48 83 3d d2 09 02 00 ff 	cmpq	$-1, 133586(%rip)
100001c46:	75 06 	jne	0x100001c4e
100001c48:	48 83 c4 30 	addq	$48, %rsp
100001c4c:	5d 	popq	%rbp
100001c4d:	c3 	retq
100001c4e:	48 8d 3d c3 09 02 00 	leaq	_load.onceToken(%rip), %rdi
100001c55:	48 8d 75 d8 	leaq	-40(%rbp), %rsi
100001c59:	e8 6e 20 01 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100001c5e:	eb e8 	jmp	0x100001c48
+[SubTestUnsafeSwizzle load]:
100001c60:	55 	pushq	%rbp
100001c61:	48 89 e5 	movq	%rsp, %rbp
100001c64:	41 57 	pushq	%r15
100001c66:	41 56 	pushq	%r14
100001c68:	41 54 	pushq	%r12
100001c6a:	53 	pushq	%rbx
100001c6b:	48 89 fb 	movq	%rdi, %rbx
100001c6e:	4c 8b 35 2b f2 01 00 	movq	127531(%rip), %r14 ## Objc selector ref: class
100001c75:	4c 8b 25 ec 83 01 00 	movq	99308(%rip), %r12 ## Objc message: -[%rdi class]
100001c7c:	4c 89 f6 	movq	%r14, %rsi
100001c7f:	41 ff d4 	callq	*%r12
100001c82:	48 8b 35 1f f2 01 00 	movq	127519(%rip), %rsi ## Objc selector ref: testMethod
100001c89:	48 89 c7 	movq	%rax, %rdi
100001c8c:	e8 db 1f 01 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100001c91:	49 89 c7 	movq	%rax, %r15
100001c94:	48 89 df 	movq	%rbx, %rdi
100001c97:	4c 89 f6 	movq	%r14, %rsi
100001c9a:	41 ff d4 	callq	*%r12
100001c9d:	48 8b 35 0c f2 01 00 	movq	127500(%rip), %rsi ## Objc selector ref: test_testMethod
100001ca4:	48 89 c7 	movq	%rax, %rdi
100001ca7:	e8 c0 1f 01 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100001cac:	4c 89 ff 	movq	%r15, %rdi
100001caf:	48 89 c6 	movq	%rax, %rsi
100001cb2:	5b 	popq	%rbx
100001cb3:	41 5c 	popq	%r12
100001cb5:	41 5e 	popq	%r14
100001cb7:	41 5f 	popq	%r15
100001cb9:	5d 	popq	%rbp
100001cba:	e9 7f 20 01 00 	jmp	0x100013d3e ## symbol stub for: _method_exchangeImplementations
+[TestCategorySwizzle(Log) load]:
100001cbf:	48 83 3d f9 08 02 00 ff 	cmpq	$-1, 133369(%rip)
100001cc7:	75 01 	jne	0x100001cca
100001cc9:	c3 	retq
100001cca:	55 	pushq	%rbp
100001ccb:	48 89 e5 	movq	%rsp, %rbp
100001cce:	48 8d 3d eb 08 02 00 	leaq	_load.onceToken(%rip), %rdi
100001cd5:	48 8d 35 44 87 01 00 	leaq	___block_literal_global(%rip), %rsi
100001cdc:	e8 eb 1f 01 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100001ce1:	5d 	popq	%rbp
100001ce2:	c3 	retq
+[TestCategorySwizzle(EventTrack) load]:
100001ce3:	48 83 3d dd 08 02 00 ff 	cmpq	$-1, 133341(%rip)
100001ceb:	75 01 	jne	0x100001cee
100001ced:	c3 	retq
100001cee:	55 	pushq	%rbp
100001cef:	48 89 e5 	movq	%rsp, %rbp
100001cf2:	48 8d 3d cf 08 02 00 	leaq	_load.onceToken.12(%rip), %rdi
100001cf9:	48 8d 35 60 87 01 00 	leaq	___block_literal_global.14(%rip), %rsi
100001d00:	e8 c7 1f 01 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100001d05:	5d 	popq	%rbp
100001d06:	c3 	retq
+[TestCategorySwizzle(ClassMethod) load]:
100001d07:	55 	pushq	%rbp
100001d08:	48 89 e5 	movq	%rsp, %rbp
100001d0b:	48 83 ec 30 	subq	$48, %rsp
100001d0f:	48 8b 05 0a 83 01 00 	movq	99082(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100001d16:	48 89 45 d8 	movq	%rax, -40(%rbp)
100001d1a:	b8 00 00 00 c2 	movl	$3254779904, %eax
100001d1f:	48 89 45 e0 	movq	%rax, -32(%rbp)
100001d23:	48 8d 05 c4 05 00 00 	leaq	"___40+[TestCategorySwizzle(ClassMethod) load]_block_invoke"(%rip), %rax
100001d2a:	48 89 45 e8 	movq	%rax, -24(%rbp)
100001d2e:	48 8d 05 4b 87 01 00 	leaq	___block_descriptor_tmp.23(%rip), %rax
100001d35:	48 89 45 f0 	movq	%rax, -16(%rbp)
100001d39:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100001d3d:	48 83 3d 8b 08 02 00 ff 	cmpq	$-1, 133259(%rip)
100001d45:	75 06 	jne	0x100001d4d
100001d47:	48 83 c4 30 	addq	$48, %rsp
100001d4b:	5d 	popq	%rbp
100001d4c:	c3 	retq
100001d4d:	48 8d 3d 7c 08 02 00 	leaq	_load.onceToken.18(%rip), %rdi
100001d54:	48 8d 75 d8 	leaq	-40(%rbp), %rsi
100001d58:	e8 6f 1f 01 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100001d5d:	eb e8 	jmp	0x100001d47
+[NSObject(RLSafe) load]:
100001d5f:	55 	pushq	%rbp
100001d60:	48 89 e5 	movq	%rsp, %rbp
100001d63:	5d 	popq	%rbp
100001d64:	c3 	retq
-[AppDelegate application:didFinishLaunchingWithOptions:]:
100001d65:	55 	pushq	%rbp
100001d66:	48 89 e5 	movq	%rsp, %rbp
100001d69:	41 56 	pushq	%r14
100001d6b:	53 	pushq	%rbx
100001d6c:	48 8b 3d 05 fa 01 00 	movq	129541(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSBundle
100001d73:	48 8b 35 fe f4 01 00 	movq	128254(%rip), %rsi ## Objc selector ref: bundleWithPath:
100001d7a:	48 8d 15 07 a7 01 00 	leaq	108295(%rip), %rdx ## Objc cfstring ref: @"/Applications/InjectionIII.app/Contents/Resources/iOSInjection10.bundle"
100001d81:	4c 8b 35 e0 82 01 00 	movq	99040(%rip), %r14 ## Objc message: +[NSBundle bundleWithPath:]
100001d88:	41 ff d6 	callq	*%r14
100001d8b:	48 89 c7 	movq	%rax, %rdi
100001d8e:	e8 41 20 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100001d93:	48 89 c3 	movq	%rax, %rbx
100001d96:	48 8b 35 8b f3 01 00 	movq	127883(%rip), %rsi ## Objc selector ref: load
100001d9d:	48 89 df 	movq	%rbx, %rdi
100001da0:	41 ff d6 	callq	*%r14
100001da3:	48 89 df 	movq	%rbx, %rdi
100001da6:	ff 15 c4 82 01 00 	callq	*99012(%rip) ## literal pool symbol address: _objc_release
100001dac:	48 8d 3d 55 94 01 00 	leaq	103509(%rip), %rdi ## Objc cfstring ref: @"%s"
100001db3:	48 8d 35 5a 3e 01 00 	leaq	81498(%rip), %rsi ## literal pool for: "-[AppDelegate application:didFinishLaunchingWithOptions:]"
100001dba:	31 c0 	xorl	%eax, %eax
100001dbc:	e8 51 1e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100001dc1:	b0 01 	movb	$1, %al
100001dc3:	5b 	popq	%rbx
100001dc4:	41 5e 	popq	%r14
100001dc6:	5d 	popq	%rbp
100001dc7:	c3 	retq
-[AppDelegate applicationWillResignActive:]:
100001dc8:	55 	pushq	%rbp
100001dc9:	48 89 e5 	movq	%rsp, %rbp
100001dcc:	5d 	popq	%rbp
100001dcd:	c3 	retq
-[AppDelegate applicationDidEnterBackground:]:
100001dce:	55 	pushq	%rbp
100001dcf:	48 89 e5 	movq	%rsp, %rbp
100001dd2:	5d 	popq	%rbp
100001dd3:	c3 	retq
-[AppDelegate applicationWillEnterForeground:]:
100001dd4:	55 	pushq	%rbp
100001dd5:	48 89 e5 	movq	%rsp, %rbp
100001dd8:	5d 	popq	%rbp
100001dd9:	c3 	retq
-[AppDelegate applicationDidBecomeActive:]:
100001dda:	55 	pushq	%rbp
100001ddb:	48 89 e5 	movq	%rsp, %rbp
100001dde:	48 8d 3d 23 94 01 00 	leaq	103459(%rip), %rdi ## Objc cfstring ref: @"%s"
100001de5:	48 8d 35 62 3e 01 00 	leaq	81506(%rip), %rsi ## literal pool for: "-[AppDelegate applicationDidBecomeActive:]"
100001dec:	31 c0 	xorl	%eax, %eax
100001dee:	e8 1f 1e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100001df3:	5d 	popq	%rbp
100001df4:	c3 	retq
-[AppDelegate applicationWillTerminate:]:
100001df5:	55 	pushq	%rbp
100001df6:	48 89 e5 	movq	%rsp, %rbp
100001df9:	5d 	popq	%rbp
100001dfa:	c3 	retq
-[AppDelegate window]:
100001dfb:	55 	pushq	%rbp
100001dfc:	48 89 e5 	movq	%rsp, %rbp
100001dff:	48 8b 05 0a fb 01 00 	movq	_OBJC_IVAR_$_AppDelegate._window(%rip), %rax
100001e06:	48 8b 04 07 	movq	(%rdi,%rax), %rax
100001e0a:	5d 	popq	%rbp
100001e0b:	c3 	retq
-[AppDelegate setWindow:]:
100001e0c:	55 	pushq	%rbp
100001e0d:	48 89 e5 	movq	%rsp, %rbp
100001e10:	48 03 3d f9 fa 01 00 	addq	_OBJC_IVAR_$_AppDelegate._window(%rip), %rdi
100001e17:	48 89 d6 	movq	%rdx, %rsi
100001e1a:	5d 	popq	%rbp
100001e1b:	e9 d2 1f 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[AppDelegate .cxx_destruct]:
100001e20:	55 	pushq	%rbp
100001e21:	48 89 e5 	movq	%rsp, %rbp
100001e24:	48 03 3d e5 fa 01 00 	addq	_OBJC_IVAR_$_AppDelegate._window(%rip), %rdi
100001e2b:	31 f6 	xorl	%esi, %esi
100001e2d:	5d 	popq	%rbp
100001e2e:	e9 bf 1f 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[AttributeUsage dealloc]:
100001e33:	55 	pushq	%rbp
100001e34:	48 89 e5 	movq	%rsp, %rbp
100001e37:	53 	pushq	%rbx
100001e38:	48 83 ec 18 	subq	$24, %rsp
100001e3c:	48 89 fb 	movq	%rdi, %rbx
100001e3f:	48 8d 3d c2 93 01 00 	leaq	103362(%rip), %rdi ## Objc cfstring ref: @"%s"
100001e46:	48 8d 35 6a 25 01 00 	leaq	75114(%rip), %rsi ## literal pool for: "-[AttributeUsage dealloc]"
100001e4d:	31 c0 	xorl	%eax, %eax
100001e4f:	e8 be 1d 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100001e54:	48 8d 7d e8 	leaq	-24(%rbp), %rdi
100001e58:	48 89 1f 	movq	%rbx, (%rdi)
100001e5b:	48 8b 05 7e f9 01 00 	movq	129406(%rip), %rax ## Objc class ref: AttributeUsage
100001e62:	48 89 47 08 	movq	%rax, 8(%rdi)
100001e66:	48 8b 35 f3 ef 01 00 	movq	126963(%rip), %rsi ## Objc selector ref: dealloc
100001e6d:	e8 4a 1f 01 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] dealloc]
100001e72:	48 83 c4 18 	addq	$24, %rsp
100001e76:	5b 	popq	%rbx
100001e77:	5d 	popq	%rbp
100001e78:	c3 	retq
-[AttributeUsage init]:
100001e79:	55 	pushq	%rbp
100001e7a:	48 89 e5 	movq	%rsp, %rbp
100001e7d:	41 56 	pushq	%r14
100001e7f:	53 	pushq	%rbx
100001e80:	48 83 ec 10 	subq	$16, %rsp
100001e84:	48 8d 45 e0 	leaq	-32(%rbp), %rax
100001e88:	48 89 38 	movq	%rdi, (%rax)
100001e8b:	48 8b 0d 4e f9 01 00 	movq	129358(%rip), %rcx ## Objc class ref: AttributeUsage
100001e92:	48 89 48 08 	movq	%rcx, 8(%rax)
100001e96:	48 8b 35 cb ef 01 00 	movq	126923(%rip), %rsi ## Objc selector ref: init
100001e9d:	48 89 c7 	movq	%rax, %rdi
100001ea0:	e8 17 1f 01 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100001ea5:	48 89 c3 	movq	%rax, %rbx
100001ea8:	48 85 db 	testq	%rbx, %rbx
100001eab:	74 3a 	je	0x100001ee7
100001ead:	48 8b 3d b4 f7 01 00 	movq	128948(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSLock
100001eb4:	48 8b 35 b5 ef 01 00 	movq	126901(%rip), %rsi ## Objc selector ref: new
100001ebb:	4c 8b 35 a6 81 01 00 	movq	98726(%rip), %r14 ## Objc message: +[NSLock new]
100001ec2:	41 ff d6 	callq	*%r14
100001ec5:	48 8b 0d a4 f9 01 00 	movq	_OBJC_IVAR_$_AttributeUsage._lock(%rip), %rcx
100001ecc:	48 8b 3c 0b 	movq	(%rbx,%rcx), %rdi
100001ed0:	48 89 04 0b 	movq	%rax, (%rbx,%rcx)
100001ed4:	ff 15 96 81 01 00 	callq	*98710(%rip) ## literal pool symbol address: _objc_release
100001eda:	48 8b 35 97 ef 01 00 	movq	126871(%rip), %rsi ## Objc selector ref: testUsages
100001ee1:	48 89 df 	movq	%rbx, %rdi
100001ee4:	41 ff d6 	callq	*%r14
100001ee7:	48 89 d8 	movq	%rbx, %rax
100001eea:	48 83 c4 10 	addq	$16, %rsp
100001eee:	5b 	popq	%rbx
100001eef:	41 5e 	popq	%r14
100001ef1:	5d 	popq	%rbp
100001ef2:	c3 	retq
-[AttributeUsage testUsages]:
100001ef3:	55 	pushq	%rbp
100001ef4:	48 89 e5 	movq	%rsp, %rbp
100001ef7:	41 56 	pushq	%r14
100001ef9:	53 	pushq	%rbx
100001efa:	48 89 fb 	movq	%rdi, %rbx
100001efd:	48 8b 35 7c ef 01 00 	movq	126844(%rip), %rsi ## Objc selector ref: cleanupUsage
100001f04:	4c 8b 35 5d 81 01 00 	movq	98653(%rip), %r14 ## Objc message: -[%rdi cleanupUsage]
100001f0b:	41 ff d6 	callq	*%r14
100001f0e:	48 8b 35 73 ef 01 00 	movq	126835(%rip), %rsi ## Objc selector ref: testNoReturn:
100001f15:	31 d2 	xorl	%edx, %edx
100001f17:	48 89 df 	movq	%rbx, %rdi
100001f1a:	4c 89 f0 	movq	%r14, %rax
100001f1d:	5b 	popq	%rbx
100001f1e:	41 5e 	popq	%r14
100001f20:	5d 	popq	%rbp
100001f21:	ff e0 	jmpq	*%rax
-[AttributeUsage cleanupUsage]:
100001f23:	55 	pushq	%rbp
100001f24:	48 89 e5 	movq	%rsp, %rbp
100001f27:	41 57 	pushq	%r15
100001f29:	41 56 	pushq	%r14
100001f2b:	41 54 	pushq	%r12
100001f2d:	53 	pushq	%rbx
100001f2e:	48 83 ec 30 	subq	$48, %rsp
100001f32:	49 89 ff 	movq	%rdi, %r15
100001f35:	4c 8b 35 54 ef 01 00 	movq	126804(%rip), %r14 ## Objc selector ref: lock
100001f3c:	4c 8b 25 25 81 01 00 	movq	98597(%rip), %r12 ## Objc message: -[%rdi lock]
100001f43:	4c 89 f6 	movq	%r14, %rsi
100001f46:	41 ff d4 	callq	*%r12
100001f49:	48 89 c7 	movq	%rax, %rdi
100001f4c:	e8 83 1e 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100001f51:	48 89 c3 	movq	%rax, %rbx
100001f54:	48 89 df 	movq	%rbx, %rdi
100001f57:	4c 89 f6 	movq	%r14, %rsi
100001f5a:	41 ff d4 	callq	*%r12
100001f5d:	48 89 df 	movq	%rbx, %rdi
100001f60:	ff 15 0a 81 01 00 	callq	*98570(%rip) ## literal pool symbol address: _objc_release
100001f66:	48 8b 05 b3 80 01 00 	movq	98483(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100001f6d:	48 8d 7d b8 	leaq	-72(%rbp), %rdi
100001f71:	48 89 07 	movq	%rax, (%rdi)
100001f74:	b8 00 00 00 c2 	movl	$3254779904, %eax
100001f79:	48 89 47 08 	movq	%rax, 8(%rdi)
100001f7d:	48 8d 05 64 00 00 00 	leaq	"___30-[AttributeUsage cleanupUsage]_block_invoke"(%rip), %rax
100001f84:	48 89 47 10 	movq	%rax, 16(%rdi)
100001f88:	48 8d 05 11 84 01 00 	leaq	___block_descriptor_tmp(%rip), %rax
100001f8f:	48 89 47 18 	movq	%rax, 24(%rdi)
100001f93:	4c 89 7f 20 	movq	%r15, 32(%rdi)
100001f97:	e8 3e 1e 01 00 	callq	0x100013dda ## symbol stub for: _objc_retainBlock
100001f9c:	48 89 c3 	movq	%rax, %rbx
100001f9f:	48 8d 3d 62 92 01 00 	leaq	103010(%rip), %rdi ## Objc cfstring ref: @"%s"
100001fa6:	48 8d 35 2a 24 01 00 	leaq	74794(%rip), %rsi ## literal pool for: "-[AttributeUsage cleanupUsage]"
100001fad:	31 c0 	xorl	%eax, %eax
100001faf:	e8 5e 1c 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100001fb4:	48 89 df 	movq	%rbx, %rdi
100001fb7:	ff 53 10 	callq	*16(%rbx)
100001fba:	48 89 df 	movq	%rbx, %rdi
100001fbd:	ff 15 ad 80 01 00 	callq	*98477(%rip) ## literal pool symbol address: _objc_release
100001fc3:	48 83 c4 30 	addq	$48, %rsp
100001fc7:	5b 	popq	%rbx
100001fc8:	41 5c 	popq	%r12
100001fca:	41 5e 	popq	%r14
100001fcc:	41 5f 	popq	%r15
100001fce:	5d 	popq	%rbp
100001fcf:	c3 	retq
100001fd0:	49 89 c6 	movq	%rax, %r14
100001fd3:	48 89 df 	movq	%rbx, %rdi
100001fd6:	ff 53 10 	callq	*16(%rbx)
100001fd9:	4c 89 f7 	movq	%r14, %rdi
100001fdc:	e8 61 1c 01 00 	callq	0x100013c42 ## symbol stub for: __Unwind_Resume
100001fe1:	0f 0b 	ud2
100001fe3:	e8 22 1e 01 00 	callq	0x100013e0a ## symbol stub for: _objc_terminate
___30-[AttributeUsage cleanupUsage]_block_invoke:
100001fe8:	55 	pushq	%rbp
100001fe9:	48 89 e5 	movq	%rsp, %rbp
100001fec:	41 56 	pushq	%r14
100001fee:	53 	pushq	%rbx
100001fef:	48 8b 7f 20 	movq	32(%rdi), %rdi
100001ff3:	48 8b 35 96 ee 01 00 	movq	126614(%rip), %rsi ## Objc selector ref: lock
100001ffa:	4c 8b 35 67 80 01 00 	movq	98407(%rip), %r14 ## Objc message: -[%rdi lock]
100002001:	41 ff d6 	callq	*%r14
100002004:	48 89 c7 	movq	%rax, %rdi
100002007:	e8 c8 1d 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000200c:	48 89 c3 	movq	%rax, %rbx
10000200f:	48 8b 35 82 ee 01 00 	movq	126594(%rip), %rsi ## Objc selector ref: unlock
100002016:	48 89 df 	movq	%rbx, %rdi
100002019:	41 ff d6 	callq	*%r14
10000201c:	48 89 df 	movq	%rbx, %rdi
10000201f:	5b 	popq	%rbx
100002020:	41 5e 	popq	%r14
100002022:	5d 	popq	%rbp
100002023:	ff 25 47 80 01 00 	jmpq	*98375(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_:
100002029:	55 	pushq	%rbp
10000202a:	48 89 e5 	movq	%rsp, %rbp
10000202d:	48 8b 7e 20 	movq	32(%rsi), %rdi
100002031:	5d 	popq	%rbp
100002032:	ff 25 40 80 01 00 	jmpq	*98368(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_:
100002038:	55 	pushq	%rbp
100002039:	48 89 e5 	movq	%rsp, %rbp
10000203c:	48 8b 7f 20 	movq	32(%rdi), %rdi
100002040:	5d 	popq	%rbp
100002041:	ff 25 29 80 01 00 	jmpq	*98345(%rip) ## literal pool symbol address: _objc_release
_AttributeUsageConstructor1:
100002047:	55 	pushq	%rbp
100002048:	48 89 e5 	movq	%rsp, %rbp
10000204b:	48 8d 3d d6 91 01 00 	leaq	102870(%rip), %rdi ## Objc cfstring ref: @"Excute before main"
100002052:	31 c0 	xorl	%eax, %eax
100002054:	e8 b9 1b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002059:	5d 	popq	%rbp
10000205a:	c3 	retq
_AttributeUsageConstructor:
10000205b:	55 	pushq	%rbp
10000205c:	48 89 e5 	movq	%rsp, %rbp
10000205f:	48 8d 3d c2 91 01 00 	leaq	102850(%rip), %rdi ## Objc cfstring ref: @"Excute before main"
100002066:	31 c0 	xorl	%eax, %eax
100002068:	e8 a5 1b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000206d:	5d 	popq	%rbp
10000206e:	c3 	retq
_AttributeUsageDestructor:
10000206f:	55 	pushq	%rbp
100002070:	48 89 e5 	movq	%rsp, %rbp
100002073:	48 8d 3d ce 91 01 00 	leaq	102862(%rip), %rdi ## Objc cfstring ref: @"Excute after main"
10000207a:	31 c0 	xorl	%eax, %eax
10000207c:	e8 91 1b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002081:	5d 	popq	%rbp
100002082:	c3 	retq
-[AttributeUsage testNoReturn:]:
100002083:	85 d2 	testl	%edx, %edx
100002085:	75 03 	jne	0x10000208a
100002087:	31 c0 	xorl	%eax, %eax
100002089:	c3 	retq
10000208a:	55 	pushq	%rbp
10000208b:	48 89 e5 	movq	%rsp, %rbp
10000208e:	e8 00 00 00 00 	callq	_unexcept
_unexcept:
100002093:	55 	pushq	%rbp
100002094:	48 89 e5 	movq	%rsp, %rbp
100002097:	bf 01 00 00 00 	movl	$1, %edi
10000209c:	e8 6d 1c 01 00 	callq	0x100013d0e ## symbol stub for: _exit
-[AttributeUsage lock]:
1000020a1:	55 	pushq	%rbp
1000020a2:	48 89 e5 	movq	%rsp, %rbp
1000020a5:	48 8b 05 c4 f7 01 00 	movq	_OBJC_IVAR_$_AttributeUsage._lock(%rip), %rax
1000020ac:	48 8b 04 07 	movq	(%rdi,%rax), %rax
1000020b0:	5d 	popq	%rbp
1000020b1:	c3 	retq
-[AttributeUsage setLock:]:
1000020b2:	55 	pushq	%rbp
1000020b3:	48 89 e5 	movq	%rsp, %rbp
1000020b6:	48 03 3d b3 f7 01 00 	addq	_OBJC_IVAR_$_AttributeUsage._lock(%rip), %rdi
1000020bd:	48 89 d6 	movq	%rdx, %rsi
1000020c0:	5d 	popq	%rbp
1000020c1:	e9 2c 1d 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[AttributeUsage .cxx_destruct]:
1000020c6:	55 	pushq	%rbp
1000020c7:	48 89 e5 	movq	%rsp, %rbp
1000020ca:	48 03 3d 9f f7 01 00 	addq	_OBJC_IVAR_$_AttributeUsage._lock(%rip), %rdi
1000020d1:	31 f6 	xorl	%esi, %esi
1000020d3:	5d 	popq	%rbp
1000020d4:	e9 19 1d 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[TestUnsafeSwizzle testMethod]:
1000020d9:	55 	pushq	%rbp
1000020da:	48 89 e5 	movq	%rsp, %rbp
1000020dd:	48 8d 3d 24 91 01 00 	leaq	102692(%rip), %rdi ## Objc cfstring ref: @"%s"
1000020e4:	48 8d 35 4b 23 01 00 	leaq	74571(%rip), %rsi ## literal pool for: "-[TestUnsafeSwizzle testMethod]"
1000020eb:	31 c0 	xorl	%eax, %eax
1000020ed:	e8 20 1b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000020f2:	5d 	popq	%rbp
1000020f3:	c3 	retq
-[SubTestUnsafeSwizzle test_testMethod]:
1000020f4:	55 	pushq	%rbp
1000020f5:	48 89 e5 	movq	%rsp, %rbp
1000020f8:	48 8b 35 b1 ed 01 00 	movq	126385(%rip), %rsi ## Objc selector ref: test_testMethod
1000020ff:	ff 15 63 7f 01 00 	callq	*98147(%rip) ## Objc message: -[%rdi test_testMethod]
100002105:	48 8d 3d 5c 91 01 00 	leaq	102748(%rip), %rdi ## Objc cfstring ref: @"swizzle~test"
10000210c:	31 c0 	xorl	%eax, %eax
10000210e:	e8 ff 1a 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002113:	5d 	popq	%rbp
100002114:	c3 	retq
+[DispatchOnceTest sharedInstance]:
100002115:	48 83 3d 8b 04 02 00 00 	cmpq	$0, 132235(%rip)
10000211d:	7e 0f 	jle	0x10000212e
10000211f:	48 c7 05 86 04 02 00 00 00 00 00 	movq	$0, 132230(%rip)
10000212a:	31 c0 	xorl	%eax, %eax
10000212c:	eb 0b 	jmp	0x100002139
10000212e:	48 83 3d 7a 04 02 00 ff 	cmpq	$-1, 132218(%rip)
100002136:	0f 94 c0 	sete	%al
100002139:	55 	pushq	%rbp
10000213a:	48 89 e5 	movq	%rsp, %rbp
10000213d:	48 83 ec 30 	subq	$48, %rsp
100002141:	48 8b 0d d8 7e 01 00 	movq	98008(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100002148:	48 89 4d d8 	movq	%rcx, -40(%rbp)
10000214c:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100002151:	48 89 4d e0 	movq	%rcx, -32(%rbp)
100002155:	48 8d 0d 41 00 00 00 	leaq	"___34+[DispatchOnceTest sharedInstance]_block_invoke"(%rip), %rcx
10000215c:	48 89 4d e8 	movq	%rcx, -24(%rbp)
100002160:	48 8d 0d 69 82 01 00 	leaq	___block_descriptor_tmp(%rip), %rcx
100002167:	48 89 4d f0 	movq	%rcx, -16(%rbp)
10000216b:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000216f:	84 c0 	testb	%al, %al
100002171:	74 18 	je	0x10000218b
100002173:	48 ff 05 2e 04 02 00 	incq	_sharedInstance.callCount(%rip)
10000217a:	48 8b 3d 37 04 02 00 	movq	_sharedInstance._instance(%rip), %rdi
100002181:	48 83 c4 30 	addq	$48, %rsp
100002185:	5d 	popq	%rbp
100002186:	e9 43 1c 01 00 	jmp	0x100013dce ## symbol stub for: _objc_retainAutoreleaseReturnValue
10000218b:	48 8d 3d 1e 04 02 00 	leaq	_sharedInstance.onceToken(%rip), %rdi
100002192:	48 8d 75 d8 	leaq	-40(%rbp), %rsi
100002196:	e8 31 1b 01 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
10000219b:	eb d6 	jmp	0x100002173
___34+[DispatchOnceTest sharedInstance]_block_invoke:
10000219d:	55 	pushq	%rbp
10000219e:	48 89 e5 	movq	%rsp, %rbp
1000021a1:	53 	pushq	%rbx
1000021a2:	50 	pushq	%rax
1000021a3:	48 8b 7f 20 	movq	32(%rdi), %rdi
1000021a7:	48 8b 35 0a ed 01 00 	movq	126218(%rip), %rsi ## Objc selector ref: alloc
1000021ae:	48 8b 1d b3 7e 01 00 	movq	97971(%rip), %rbx ## Objc message: -[%rdi alloc]
1000021b5:	ff d3 	callq	*%rbx
1000021b7:	48 8b 35 aa ec 01 00 	movq	126122(%rip), %rsi ## Objc selector ref: init
1000021be:	48 89 c7 	movq	%rax, %rdi
1000021c1:	ff d3 	callq	*%rbx
1000021c3:	48 8b 3d ee 03 02 00 	movq	_sharedInstance._instance(%rip), %rdi
1000021ca:	48 89 05 e7 03 02 00 	movq	%rax, _sharedInstance._instance(%rip)
1000021d1:	48 83 c4 08 	addq	$8, %rsp
1000021d5:	5b 	popq	%rbx
1000021d6:	5d 	popq	%rbp
1000021d7:	ff 25 93 7e 01 00 	jmpq	*97939(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_:
1000021dd:	55 	pushq	%rbp
1000021de:	48 89 e5 	movq	%rsp, %rbp
1000021e1:	5d 	popq	%rbp
1000021e2:	c3 	retq
___destroy_helper_block_:
1000021e3:	55 	pushq	%rbp
1000021e4:	48 89 e5 	movq	%rsp, %rbp
1000021e7:	5d 	popq	%rbp
1000021e8:	c3 	retq
-[TestCategorySwizzle testCategorySwizzle]:
1000021e9:	55 	pushq	%rbp
1000021ea:	48 89 e5 	movq	%rsp, %rbp
1000021ed:	48 8d 3d 14 90 01 00 	leaq	102420(%rip), %rdi ## Objc cfstring ref: @"%s"
1000021f4:	48 8d 35 68 22 01 00 	leaq	74344(%rip), %rsi ## literal pool for: "-[TestCategorySwizzle testCategorySwizzle]"
1000021fb:	31 c0 	xorl	%eax, %eax
1000021fd:	e8 10 1a 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002202:	5d 	popq	%rbp
100002203:	c3 	retq
+[TestCategorySwizzle testClassMethod]:
100002204:	55 	pushq	%rbp
100002205:	48 89 e5 	movq	%rsp, %rbp
100002208:	5d 	popq	%rbp
100002209:	c3 	retq
___32+[TestCategorySwizzle(Log) load]_block_invoke:
10000220a:	55 	pushq	%rbp
10000220b:	48 89 e5 	movq	%rsp, %rbp
10000220e:	41 56 	pushq	%r14
100002210:	53 	pushq	%rbx
100002211:	48 8b 1d 58 f4 01 00 	movq	128088(%rip), %rbx ## Objc class ref: MethodSwizzleUtil
100002218:	48 8b 3d 59 f4 01 00 	movq	128089(%rip), %rdi ## Objc class ref: TestCategorySwizzle
10000221f:	48 8b 35 7a ec 01 00 	movq	126074(%rip), %rsi ## Objc selector ref: class
100002226:	4c 8b 35 3b 7e 01 00 	movq	97851(%rip), %r14 ## Objc message: +[TestCategorySwizzle class]
10000222d:	41 ff d6 	callq	*%r14
100002230:	48 8b 0d 89 ec 01 00 	movq	126089(%rip), %rcx ## Objc selector ref: testCategorySwizzle
100002237:	4c 8b 05 8a ec 01 00 	movq	126090(%rip), %r8 ## Objc selector ref: log_testCategorySwizzle
10000223e:	48 8b 35 8b ec 01 00 	movq	126091(%rip), %rsi ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
100002245:	48 89 df 	movq	%rbx, %rdi
100002248:	48 89 c2 	movq	%rax, %rdx
10000224b:	4c 89 f0 	movq	%r14, %rax
10000224e:	5b 	popq	%rbx
10000224f:	41 5e 	popq	%r14
100002251:	5d 	popq	%rbp
100002252:	ff e0 	jmpq	*%rax
-[TestCategorySwizzle(Log) log_testCategorySwizzle]:
100002254:	55 	pushq	%rbp
100002255:	48 89 e5 	movq	%rsp, %rbp
100002258:	48 8b 35 69 ec 01 00 	movq	126057(%rip), %rsi ## Objc selector ref: log_testCategorySwizzle
10000225f:	ff 15 03 7e 01 00 	callq	*97795(%rip) ## Objc message: -[%rdi log_testCategorySwizzle]
100002265:	48 8d 3d 9c 8f 01 00 	leaq	102300(%rip), %rdi ## Objc cfstring ref: @"%s"
10000226c:	48 8d 35 1b 22 01 00 	leaq	74267(%rip), %rsi ## literal pool for: "-[TestCategorySwizzle(Log) log_testCategorySwizzle]"
100002273:	31 c0 	xorl	%eax, %eax
100002275:	e8 98 19 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000227a:	5d 	popq	%rbp
10000227b:	c3 	retq
___39+[TestCategorySwizzle(EventTrack) load]_block_invoke:
10000227c:	55 	pushq	%rbp
10000227d:	48 89 e5 	movq	%rsp, %rbp
100002280:	41 56 	pushq	%r14
100002282:	53 	pushq	%rbx
100002283:	48 8b 1d e6 f3 01 00 	movq	127974(%rip), %rbx ## Objc class ref: MethodSwizzleUtil
10000228a:	48 8b 3d e7 f3 01 00 	movq	127975(%rip), %rdi ## Objc class ref: TestCategorySwizzle
100002291:	48 8b 35 08 ec 01 00 	movq	125960(%rip), %rsi ## Objc selector ref: class
100002298:	4c 8b 35 c9 7d 01 00 	movq	97737(%rip), %r14 ## Objc message: +[TestCategorySwizzle class]
10000229f:	41 ff d6 	callq	*%r14
1000022a2:	48 8b 0d 17 ec 01 00 	movq	125975(%rip), %rcx ## Objc selector ref: testCategorySwizzle
1000022a9:	4c 8b 05 28 ec 01 00 	movq	125992(%rip), %r8 ## Objc selector ref: track_testCategorySwizzle
1000022b0:	48 8b 35 19 ec 01 00 	movq	125977(%rip), %rsi ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
1000022b7:	48 89 df 	movq	%rbx, %rdi
1000022ba:	48 89 c2 	movq	%rax, %rdx
1000022bd:	4c 89 f0 	movq	%r14, %rax
1000022c0:	5b 	popq	%rbx
1000022c1:	41 5e 	popq	%r14
1000022c3:	5d 	popq	%rbp
1000022c4:	ff e0 	jmpq	*%rax
-[TestCategorySwizzle(EventTrack) track_testCategorySwizzle]:
1000022c6:	55 	pushq	%rbp
1000022c7:	48 89 e5 	movq	%rsp, %rbp
1000022ca:	48 8b 35 07 ec 01 00 	movq	125959(%rip), %rsi ## Objc selector ref: track_testCategorySwizzle
1000022d1:	ff 15 91 7d 01 00 	callq	*97681(%rip) ## Objc message: -[%rdi track_testCategorySwizzle]
1000022d7:	48 8d 3d 2a 8f 01 00 	leaq	102186(%rip), %rdi ## Objc cfstring ref: @"%s"
1000022de:	48 8d 35 dd 21 01 00 	leaq	74205(%rip), %rsi ## literal pool for: "-[TestCategorySwizzle(EventTrack) track_testCategorySwizzle]"
1000022e5:	31 c0 	xorl	%eax, %eax
1000022e7:	e8 26 19 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000022ec:	5d 	popq	%rbp
1000022ed:	c3 	retq
___40+[TestCategorySwizzle(ClassMethod) load]_block_invoke:
1000022ee:	55 	pushq	%rbp
1000022ef:	48 89 e5 	movq	%rsp, %rbp
1000022f2:	41 57 	pushq	%r15
1000022f4:	41 56 	pushq	%r14
1000022f6:	41 55 	pushq	%r13
1000022f8:	41 54 	pushq	%r12
1000022fa:	53 	pushq	%rbx
1000022fb:	50 	pushq	%rax
1000022fc:	49 89 fc 	movq	%rdi, %r12
1000022ff:	49 8b 7c 24 20 	movq	32(%r12), %rdi
100002304:	48 8b 35 d5 eb 01 00 	movq	125909(%rip), %rsi ## Objc selector ref: testClassMethod
10000230b:	e8 56 19 01 00 	callq	0x100013c66 ## symbol stub for: _class_getClassMethod
100002310:	49 89 c7 	movq	%rax, %r15
100002313:	49 8b 7c 24 20 	movq	32(%r12), %rdi
100002318:	48 8b 35 c9 eb 01 00 	movq	125897(%rip), %rsi ## Objc selector ref: class_testClassMethod
10000231f:	e8 42 19 01 00 	callq	0x100013c66 ## symbol stub for: _class_getClassMethod
100002324:	48 89 c3 	movq	%rax, %rbx
100002327:	49 8b 7c 24 20 	movq	32(%r12), %rdi
10000232c:	e8 df 1a 01 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
100002331:	49 89 c6 	movq	%rax, %r14
100002334:	48 89 df 	movq	%rbx, %rdi
100002337:	e8 0e 1a 01 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
10000233c:	49 89 c5 	movq	%rax, %r13
10000233f:	48 89 df 	movq	%rbx, %rdi
100002342:	e8 0f 1a 01 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100002347:	4c 89 f7 	movq	%r14, %rdi
10000234a:	48 8b 35 8f eb 01 00 	movq	125839(%rip), %rsi ## Objc selector ref: testClassMethod
100002351:	4c 89 ea 	movq	%r13, %rdx
100002354:	48 89 c1 	movq	%rax, %rcx
100002357:	e8 fe 18 01 00 	callq	0x100013c5a ## symbol stub for: _class_addMethod
10000235c:	84 c0 	testb	%al, %al
10000235e:	75 19 	jne	0x100002379
100002360:	4c 89 ff 	movq	%r15, %rdi
100002363:	48 89 de 	movq	%rbx, %rsi
100002366:	48 83 c4 08 	addq	$8, %rsp
10000236a:	5b 	popq	%rbx
10000236b:	41 5c 	popq	%r12
10000236d:	41 5d 	popq	%r13
10000236f:	41 5e 	popq	%r14
100002371:	41 5f 	popq	%r15
100002373:	5d 	popq	%rbp
100002374:	e9 c5 19 01 00 	jmp	0x100013d3e ## symbol stub for: _method_exchangeImplementations
100002379:	4d 8b 74 24 20 	movq	32(%r12), %r14
10000237e:	4c 89 ff 	movq	%r15, %rdi
100002381:	e8 c4 19 01 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100002386:	48 89 c3 	movq	%rax, %rbx
100002389:	4c 89 ff 	movq	%r15, %rdi
10000238c:	e8 c5 19 01 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100002391:	4c 89 f7 	movq	%r14, %rdi
100002394:	48 8b 35 4d eb 01 00 	movq	125773(%rip), %rsi ## Objc selector ref: class_testClassMethod
10000239b:	48 89 da 	movq	%rbx, %rdx
10000239e:	48 89 c1 	movq	%rax, %rcx
1000023a1:	48 83 c4 08 	addq	$8, %rsp
1000023a5:	5b 	popq	%rbx
1000023a6:	41 5c 	popq	%r12
1000023a8:	41 5d 	popq	%r13
1000023aa:	41 5e 	popq	%r14
1000023ac:	41 5f 	popq	%r15
1000023ae:	5d 	popq	%rbp
1000023af:	e9 d0 18 01 00 	jmp	0x100013c84 ## symbol stub for: _class_replaceMethod
___copy_helper_block_:
1000023b4:	55 	pushq	%rbp
1000023b5:	48 89 e5 	movq	%rsp, %rbp
1000023b8:	5d 	popq	%rbp
1000023b9:	c3 	retq
___destroy_helper_block_:
1000023ba:	55 	pushq	%rbp
1000023bb:	48 89 e5 	movq	%rsp, %rbp
1000023be:	5d 	popq	%rbp
1000023bf:	c3 	retq
+[TestCategorySwizzle(ClassMethod) class_testClassMethod]:
1000023c0:	55 	pushq	%rbp
1000023c1:	48 89 e5 	movq	%rsp, %rbp
1000023c4:	5d 	popq	%rbp
1000023c5:	c3 	retq
+[MethodSwizzleUtil swizzleInstanceMethodWithClass:originalSel:replacementSel:]:
1000023c6:	55 	pushq	%rbp
1000023c7:	48 89 e5 	movq	%rsp, %rbp
1000023ca:	41 57 	pushq	%r15
1000023cc:	41 56 	pushq	%r14
1000023ce:	41 55 	pushq	%r13
1000023d0:	41 54 	pushq	%r12
1000023d2:	53 	pushq	%rbx
1000023d3:	50 	pushq	%rax
1000023d4:	4c 89 c3 	movq	%r8, %rbx
1000023d7:	49 89 cd 	movq	%rcx, %r13
1000023da:	49 89 d4 	movq	%rdx, %r12
1000023dd:	4c 89 e7 	movq	%r12, %rdi
1000023e0:	4c 89 ee 	movq	%r13, %rsi
1000023e3:	e8 84 18 01 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
1000023e8:	49 89 c7 	movq	%rax, %r15
1000023eb:	4c 89 e7 	movq	%r12, %rdi
1000023ee:	48 89 5d d0 	movq	%rbx, -48(%rbp)
1000023f2:	48 89 de 	movq	%rbx, %rsi
1000023f5:	e8 72 18 01 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
1000023fa:	48 89 c3 	movq	%rax, %rbx
1000023fd:	48 89 df 	movq	%rbx, %rdi
100002400:	e8 45 19 01 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100002405:	49 89 c6 	movq	%rax, %r14
100002408:	48 89 df 	movq	%rbx, %rdi
10000240b:	e8 46 19 01 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100002410:	4c 89 e7 	movq	%r12, %rdi
100002413:	4c 89 ee 	movq	%r13, %rsi
100002416:	4c 89 f2 	movq	%r14, %rdx
100002419:	48 89 c1 	movq	%rax, %rcx
10000241c:	e8 39 18 01 00 	callq	0x100013c5a ## symbol stub for: _class_addMethod
100002421:	84 c0 	testb	%al, %al
100002423:	75 19 	jne	0x10000243e
100002425:	4c 89 ff 	movq	%r15, %rdi
100002428:	48 89 de 	movq	%rbx, %rsi
10000242b:	48 83 c4 08 	addq	$8, %rsp
10000242f:	5b 	popq	%rbx
100002430:	41 5c 	popq	%r12
100002432:	41 5d 	popq	%r13
100002434:	41 5e 	popq	%r14
100002436:	41 5f 	popq	%r15
100002438:	5d 	popq	%rbp
100002439:	e9 00 19 01 00 	jmp	0x100013d3e ## symbol stub for: _method_exchangeImplementations
10000243e:	4c 89 ff 	movq	%r15, %rdi
100002441:	e8 04 19 01 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100002446:	48 89 c3 	movq	%rax, %rbx
100002449:	4c 89 ff 	movq	%r15, %rdi
10000244c:	e8 05 19 01 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100002451:	4c 89 e7 	movq	%r12, %rdi
100002454:	48 8b 75 d0 	movq	-48(%rbp), %rsi
100002458:	48 89 da 	movq	%rbx, %rdx
10000245b:	48 89 c1 	movq	%rax, %rcx
10000245e:	48 83 c4 08 	addq	$8, %rsp
100002462:	5b 	popq	%rbx
100002463:	41 5c 	popq	%r12
100002465:	41 5d 	popq	%r13
100002467:	41 5e 	popq	%r14
100002469:	41 5f 	popq	%r15
10000246b:	5d 	popq	%rbp
10000246c:	e9 13 18 01 00 	jmp	0x100013c84 ## symbol stub for: _class_replaceMethod
-[NSObject(Injection) setInjectExcuteBlock:]:
100002471:	55 	pushq	%rbp
100002472:	48 89 e5 	movq	%rsp, %rbp
100002475:	41 56 	pushq	%r14
100002477:	53 	pushq	%rbx
100002478:	49 89 fe 	movq	%rdi, %r14
10000247b:	48 89 d7 	movq	%rdx, %rdi
10000247e:	e8 57 19 01 00 	callq	0x100013dda ## symbol stub for: _objc_retainBlock
100002483:	48 89 c3 	movq	%rax, %rbx
100002486:	48 8d 35 4b 01 02 00 	leaq	_kInjectExcuteBlockKey(%rip), %rsi
10000248d:	b9 03 00 00 00 	movl	$3, %ecx
100002492:	4c 89 f7 	movq	%r14, %rdi
100002495:	48 89 da 	movq	%rbx, %rdx
100002498:	e8 43 19 01 00 	callq	0x100013de0 ## symbol stub for: _objc_setAssociatedObject
10000249d:	48 89 df 	movq	%rbx, %rdi
1000024a0:	5b 	popq	%rbx
1000024a1:	41 5e 	popq	%r14
1000024a3:	5d 	popq	%rbp
1000024a4:	ff 25 c6 7b 01 00 	jmpq	*97222(%rip) ## literal pool symbol address: _objc_release
-[NSObject(Injection) injectExcuteBlock]:
1000024aa:	55 	pushq	%rbp
1000024ab:	48 89 e5 	movq	%rsp, %rbp
1000024ae:	48 8d 35 23 01 02 00 	leaq	_kInjectExcuteBlockKey(%rip), %rsi
1000024b5:	5d 	popq	%rbp
1000024b6:	e9 dd 18 01 00 	jmp	0x100013d98 ## symbol stub for: _objc_getAssociatedObject
-[NSObject(Injection) injected]:
1000024bb:	55 	pushq	%rbp
1000024bc:	48 89 e5 	movq	%rsp, %rbp
1000024bf:	41 57 	pushq	%r15
1000024c1:	41 56 	pushq	%r14
1000024c3:	53 	pushq	%rbx
1000024c4:	50 	pushq	%rax
1000024c5:	49 89 ff 	movq	%rdi, %r15
1000024c8:	4c 8b 35 21 ea 01 00 	movq	125473(%rip), %r14 ## Objc selector ref: injectExcuteBlock
1000024cf:	4c 89 f6 	movq	%r14, %rsi
1000024d2:	ff 15 90 7b 01 00 	callq	*97168(%rip) ## Objc message: -[%rdi injectExcuteBlock]
1000024d8:	48 89 c7 	movq	%rax, %rdi
1000024db:	e8 f4 18 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000024e0:	48 89 c3 	movq	%rax, %rbx
1000024e3:	48 89 df 	movq	%rbx, %rdi
1000024e6:	ff 15 84 7b 01 00 	callq	*97156(%rip) ## literal pool symbol address: _objc_release
1000024ec:	48 85 db 	testq	%rbx, %rbx
1000024ef:	74 30 	je	0x100002521
1000024f1:	4c 89 ff 	movq	%r15, %rdi
1000024f4:	4c 89 f6 	movq	%r14, %rsi
1000024f7:	ff 15 6b 7b 01 00 	callq	*97131(%rip) ## Objc message: -[%rdi injectExcuteBlock]
1000024fd:	48 89 c7 	movq	%rax, %rdi
100002500:	e8 cf 18 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100002505:	48 89 c3 	movq	%rax, %rbx
100002508:	48 89 df 	movq	%rbx, %rdi
10000250b:	ff 53 10 	callq	*16(%rbx)
10000250e:	48 89 df 	movq	%rbx, %rdi
100002511:	48 83 c4 08 	addq	$8, %rsp
100002515:	5b 	popq	%rbx
100002516:	41 5e 	popq	%r14
100002518:	41 5f 	popq	%r15
10000251a:	5d 	popq	%rbp
10000251b:	ff 25 4f 7b 01 00 	jmpq	*97103(%rip) ## literal pool symbol address: _objc_release
100002521:	48 83 c4 08 	addq	$8, %rsp
100002525:	5b 	popq	%rbx
100002526:	41 5e 	popq	%r14
100002528:	41 5f 	popq	%r15
10000252a:	5d 	popq	%rbp
10000252b:	c3 	retq
-[TestCode init]:
10000252c:	55 	pushq	%rbp
10000252d:	48 89 e5 	movq	%rsp, %rbp
100002530:	53 	pushq	%rbx
100002531:	48 83 ec 18 	subq	$24, %rsp
100002535:	48 8d 45 e8 	leaq	-24(%rbp), %rax
100002539:	48 89 38 	movq	%rdi, (%rax)
10000253c:	48 8b 0d a5 f2 01 00 	movq	127653(%rip), %rcx ## Objc class ref: TestCode
100002543:	48 89 48 08 	movq	%rcx, 8(%rax)
100002547:	48 8b 35 1a e9 01 00 	movq	125210(%rip), %rsi ## Objc selector ref: init
10000254e:	48 89 c7 	movq	%rax, %rdi
100002551:	e8 66 18 01 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100002556:	48 89 c3 	movq	%rax, %rbx
100002559:	48 85 db 	testq	%rbx, %rbx
10000255c:	74 10 	je	0x10000256e
10000255e:	48 8b 35 93 e9 01 00 	movq	125331(%rip), %rsi ## Objc selector ref: test
100002565:	48 89 df 	movq	%rbx, %rdi
100002568:	ff 15 fa 7a 01 00 	callq	*97018(%rip) ## Objc message: -[%rdi test]
10000256e:	48 89 d8 	movq	%rbx, %rax
100002571:	48 83 c4 18 	addq	$24, %rsp
100002575:	5b 	popq	%rbx
100002576:	5d 	popq	%rbp
100002577:	c3 	retq
-[TestCode test]:
100002578:	55 	pushq	%rbp
100002579:	48 89 e5 	movq	%rsp, %rbp
10000257c:	41 56 	pushq	%r14
10000257e:	53 	pushq	%rbx
10000257f:	48 89 fb 	movq	%rdi, %rbx
100002582:	e8 73 16 01 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
100002587:	48 89 c1 	movq	%rax, %rcx
10000258a:	4c 8d 35 f7 8c 01 00 	leaq	101623(%rip), %r14 ## Objc cfstring ref: @"%ld"
100002591:	31 c0 	xorl	%eax, %eax
100002593:	4c 89 f7 	movq	%r14, %rdi
100002596:	48 89 ce 	movq	%rcx, %rsi
100002599:	e8 74 16 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000259e:	48 89 df 	movq	%rbx, %rdi
1000025a1:	e8 54 16 01 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
1000025a6:	48 89 c1 	movq	%rax, %rcx
1000025a9:	31 c0 	xorl	%eax, %eax
1000025ab:	4c 89 f7 	movq	%r14, %rdi
1000025ae:	48 89 ce 	movq	%rcx, %rsi
1000025b1:	e8 5c 16 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000025b6:	5b 	popq	%rbx
1000025b7:	41 5e 	popq	%r14
1000025b9:	5d 	popq	%rbp
1000025ba:	c3 	retq
-[CopyUsage init]:
1000025bb:	55 	pushq	%rbp
1000025bc:	48 89 e5 	movq	%rsp, %rbp
1000025bf:	48 83 ec 10 	subq	$16, %rsp
1000025c3:	48 8d 45 f0 	leaq	-16(%rbp), %rax
1000025c7:	48 89 38 	movq	%rdi, (%rax)
1000025ca:	48 8b 0d 1f f2 01 00 	movq	127519(%rip), %rcx ## Objc class ref: CopyUsage
1000025d1:	48 89 48 08 	movq	%rcx, 8(%rax)
1000025d5:	48 8b 35 8c e8 01 00 	movq	125068(%rip), %rsi ## Objc selector ref: init
1000025dc:	48 89 c7 	movq	%rax, %rdi
1000025df:	e8 d8 17 01 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
1000025e4:	48 83 c4 10 	addq	$16, %rsp
1000025e8:	5d 	popq	%rbp
1000025e9:	c3 	retq
-[CopyUsage testCopyAndMutableCopy]:
1000025ea:	55 	pushq	%rbp
1000025eb:	48 89 e5 	movq	%rsp, %rbp
1000025ee:	48 8b 35 0b e9 01 00 	movq	125195(%rip), %rsi ## Objc selector ref: testNSMutableDictionaryCopy
1000025f5:	5d 	popq	%rbp
1000025f6:	ff 25 6c 7a 01 00 	jmpq	*96876(%rip) ## Objc message: -[%rdi testNSMutableDictionaryCopy]
-[CopyUsage testNSStringCopy]:
1000025fc:	55 	pushq	%rbp
1000025fd:	48 89 e5 	movq	%rsp, %rbp
100002600:	41 57 	pushq	%r15
100002602:	41 56 	pushq	%r14
100002604:	41 55 	pushq	%r13
100002606:	41 54 	pushq	%r12
100002608:	53 	pushq	%rbx
100002609:	50 	pushq	%rax
10000260a:	49 89 fc 	movq	%rdi, %r12
10000260d:	48 8d 3d 94 8c 01 00 	leaq	101524(%rip), %rdi ## Objc cfstring ref: @"========NSString========"
100002614:	31 c0 	xorl	%eax, %eax
100002616:	e8 f7 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000261b:	48 8b 35 e6 e8 01 00 	movq	125158(%rip), %rsi ## Objc selector ref: setPCopyStr:
100002622:	48 8d 1d 9f 8c 01 00 	leaq	101535(%rip), %rbx ## Objc cfstring ref: @"111"
100002629:	4c 8b 3d 38 7a 01 00 	movq	96824(%rip), %r15 ## Objc message: -[%rdi setPCopyStr:]
100002630:	4c 89 e7 	movq	%r12, %rdi
100002633:	48 89 da 	movq	%rbx, %rdx
100002636:	41 ff d7 	callq	*%r15
100002639:	48 8b 35 d0 e8 01 00 	movq	125136(%rip), %rsi ## Objc selector ref: setPStrongStr:
100002640:	4c 89 e7 	movq	%r12, %rdi
100002643:	48 89 da 	movq	%rbx, %rdx
100002646:	41 ff d7 	callq	*%r15
100002649:	48 8b 35 c8 e8 01 00 	movq	125128(%rip), %rsi ## Objc selector ref: copy
100002650:	48 89 df 	movq	%rbx, %rdi
100002653:	41 ff d7 	callq	*%r15
100002656:	49 89 c6 	movq	%rax, %r14
100002659:	48 8b 35 c0 e8 01 00 	movq	125120(%rip), %rsi ## Objc selector ref: mutableCopy
100002660:	48 89 df 	movq	%rbx, %rdi
100002663:	41 ff d7 	callq	*%r15
100002666:	49 89 c7 	movq	%rax, %r15
100002669:	48 8d 3d 78 8c 01 00 	leaq	101496(%rip), %rdi ## Objc cfstring ref: @"original str address:%p"
100002670:	31 c0 	xorl	%eax, %eax
100002672:	48 89 de 	movq	%rbx, %rsi
100002675:	e8 98 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000267a:	48 8d 3d 87 8c 01 00 	leaq	101511(%rip), %rdi ## Objc cfstring ref: @"str by copy address:%p"
100002681:	31 c0 	xorl	%eax, %eax
100002683:	4c 89 f6 	movq	%r14, %rsi
100002686:	e8 87 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000268b:	48 8d 3d 96 8c 01 00 	leaq	101526(%rip), %rdi ## Objc cfstring ref: @"str by mutableCopy address:%p"
100002692:	31 c0 	xorl	%eax, %eax
100002694:	4c 89 fe 	movq	%r15, %rsi
100002697:	e8 76 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000269c:	48 8b 1d d5 f1 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyStr(%rip), %rbx
1000026a3:	49 8b 34 1c 	movq	(%r12,%rbx), %rsi
1000026a7:	48 8d 3d 9a 8c 01 00 	leaq	101530(%rip), %rdi ## Objc cfstring ref: @"property str by copy address:%p"
1000026ae:	31 c0 	xorl	%eax, %eax
1000026b0:	e8 5d 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000026b5:	4c 8b 2d c4 f1 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongStr(%rip), %r13
1000026bc:	4b 8b 34 2c 	movq	(%r12,%r13), %rsi
1000026c0:	48 8d 3d a1 8c 01 00 	leaq	101537(%rip), %rdi ## Objc cfstring ref: @"property str by strong address:%p"
1000026c7:	31 c0 	xorl	%eax, %eax
1000026c9:	e8 44 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000026ce:	48 8d 3d b3 8c 01 00 	leaq	101555(%rip), %rdi ## Objc cfstring ref: @"========NSString Changed========"
1000026d5:	31 c0 	xorl	%eax, %eax
1000026d7:	e8 36 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000026dc:	48 8d 3d e5 8c 01 00 	leaq	101605(%rip), %rdi ## Objc cfstring ref: @"original str:%@ and address:%p"
1000026e3:	48 8d 35 be 8c 01 00 	leaq	101566(%rip), %rsi ## Objc cfstring ref: @"222"
1000026ea:	31 c0 	xorl	%eax, %eax
1000026ec:	48 89 f2 	movq	%rsi, %rdx
1000026ef:	e8 1e 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000026f4:	48 8d 3d ed 8c 01 00 	leaq	101613(%rip), %rdi ## Objc cfstring ref: @"str by copy:%@ and address:%p"
1000026fb:	31 c0 	xorl	%eax, %eax
1000026fd:	4c 89 f6 	movq	%r14, %rsi
100002700:	4c 89 f2 	movq	%r14, %rdx
100002703:	e8 0a 15 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002708:	48 8d 3d f9 8c 01 00 	leaq	101625(%rip), %rdi ## Objc cfstring ref: @"str by mutableCopy:%@ and address:%p"
10000270f:	31 c0 	xorl	%eax, %eax
100002711:	4c 89 fe 	movq	%r15, %rsi
100002714:	4c 89 fa 	movq	%r15, %rdx
100002717:	e8 f6 14 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000271c:	49 8b 34 1c 	movq	(%r12,%rbx), %rsi
100002720:	48 8d 3d 01 8d 01 00 	leaq	101633(%rip), %rdi ## Objc cfstring ref: @"property str by copy:%@ and address:%p"
100002727:	31 c0 	xorl	%eax, %eax
100002729:	48 89 f2 	movq	%rsi, %rdx
10000272c:	e8 e1 14 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002731:	4b 8b 34 2c 	movq	(%r12,%r13), %rsi
100002735:	48 8d 3d 0c 8d 01 00 	leaq	101644(%rip), %rdi ## Objc cfstring ref: @"property str by strong:%@ and address:%p"
10000273c:	31 c0 	xorl	%eax, %eax
10000273e:	48 89 f2 	movq	%rsi, %rdx
100002741:	e8 cc 14 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002746:	48 8b 1d 23 79 01 00 	movq	96547(%rip), %rbx ## literal pool symbol address: _objc_release
10000274d:	4c 89 ff 	movq	%r15, %rdi
100002750:	ff d3 	callq	*%rbx
100002752:	4c 89 f7 	movq	%r14, %rdi
100002755:	48 89 d8 	movq	%rbx, %rax
100002758:	48 83 c4 08 	addq	$8, %rsp
10000275c:	5b 	popq	%rbx
10000275d:	41 5c 	popq	%r12
10000275f:	41 5d 	popq	%r13
100002761:	41 5e 	popq	%r14
100002763:	41 5f 	popq	%r15
100002765:	5d 	popq	%rbp
100002766:	ff e0 	jmpq	*%rax
-[CopyUsage testNSMutableStringCopy]:
100002768:	55 	pushq	%rbp
100002769:	48 89 e5 	movq	%rsp, %rbp
10000276c:	41 57 	pushq	%r15
10000276e:	41 56 	pushq	%r14
100002770:	41 55 	pushq	%r13
100002772:	41 54 	pushq	%r12
100002774:	53 	pushq	%rbx
100002775:	50 	pushq	%rax
100002776:	49 89 fe 	movq	%rdi, %r14
100002779:	48 8d 3d e8 8c 01 00 	leaq	101608(%rip), %rdi ## Objc cfstring ref: @"========NSMutableString========"
100002780:	31 c0 	xorl	%eax, %eax
100002782:	e8 8b 14 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002787:	48 8b 3d f2 ee 01 00 	movq	126706(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableString
10000278e:	48 8b 35 23 e7 01 00 	movq	124707(%rip), %rsi ## Objc selector ref: alloc
100002795:	4c 8b 2d cc 78 01 00 	movq	96460(%rip), %r13 ## Objc message: +[NSMutableString alloc]
10000279c:	41 ff d5 	callq	*%r13
10000279f:	48 8b 35 82 e7 01 00 	movq	124802(%rip), %rsi ## Objc selector ref: initWithString:
1000027a6:	48 8d 15 1b 8b 01 00 	leaq	101147(%rip), %rdx ## Objc cfstring ref: @"111"
1000027ad:	48 89 c7 	movq	%rax, %rdi
1000027b0:	41 ff d5 	callq	*%r13
1000027b3:	48 89 c3 	movq	%rax, %rbx
1000027b6:	48 8b 35 5b e7 01 00 	movq	124763(%rip), %rsi ## Objc selector ref: copy
1000027bd:	48 89 df 	movq	%rbx, %rdi
1000027c0:	41 ff d5 	callq	*%r13
1000027c3:	49 89 c7 	movq	%rax, %r15
1000027c6:	48 8b 35 3b e7 01 00 	movq	124731(%rip), %rsi ## Objc selector ref: setPCopyStr:
1000027cd:	4c 89 f7 	movq	%r14, %rdi
1000027d0:	48 89 da 	movq	%rbx, %rdx
1000027d3:	41 ff d5 	callq	*%r13
1000027d6:	48 8b 35 33 e7 01 00 	movq	124723(%rip), %rsi ## Objc selector ref: setPStrongStr:
1000027dd:	4c 89 f7 	movq	%r14, %rdi
1000027e0:	48 89 da 	movq	%rbx, %rdx
1000027e3:	41 ff d5 	callq	*%r13
1000027e6:	48 8b 35 33 e7 01 00 	movq	124723(%rip), %rsi ## Objc selector ref: mutableCopy
1000027ed:	48 89 df 	movq	%rbx, %rdi
1000027f0:	41 ff d5 	callq	*%r13
1000027f3:	49 89 c4 	movq	%rax, %r12
1000027f6:	48 8d 3d eb 8a 01 00 	leaq	101099(%rip), %rdi ## Objc cfstring ref: @"original str address:%p"
1000027fd:	31 c0 	xorl	%eax, %eax
1000027ff:	48 89 de 	movq	%rbx, %rsi
100002802:	e8 0b 14 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002807:	48 8d 3d fa 8a 01 00 	leaq	101114(%rip), %rdi ## Objc cfstring ref: @"str by copy address:%p"
10000280e:	31 c0 	xorl	%eax, %eax
100002810:	4c 89 fe 	movq	%r15, %rsi
100002813:	e8 fa 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002818:	48 8d 3d 09 8b 01 00 	leaq	101129(%rip), %rdi ## Objc cfstring ref: @"str by mutableCopy address:%p"
10000281f:	31 c0 	xorl	%eax, %eax
100002821:	4c 89 e6 	movq	%r12, %rsi
100002824:	e8 e9 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002829:	48 8b 05 48 f0 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyStr(%rip), %rax
100002830:	49 8b 34 06 	movq	(%r14,%rax), %rsi
100002834:	48 8d 3d 0d 8b 01 00 	leaq	101133(%rip), %rdi ## Objc cfstring ref: @"property str by copy address:%p"
10000283b:	31 c0 	xorl	%eax, %eax
10000283d:	e8 d0 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002842:	48 8b 05 37 f0 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongStr(%rip), %rax
100002849:	49 8b 34 06 	movq	(%r14,%rax), %rsi
10000284d:	48 8d 3d 14 8b 01 00 	leaq	101140(%rip), %rdi ## Objc cfstring ref: @"property str by strong address:%p"
100002854:	31 c0 	xorl	%eax, %eax
100002856:	e8 b7 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000285b:	48 8d 3d 26 8c 01 00 	leaq	101414(%rip), %rdi ## Objc cfstring ref: @"========NSMutableString Changed========"
100002862:	31 c0 	xorl	%eax, %eax
100002864:	e8 a9 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002869:	48 8b 35 c0 e6 01 00 	movq	124608(%rip), %rsi ## Objc selector ref: appendString:
100002870:	48 8d 15 31 8b 01 00 	leaq	101169(%rip), %rdx ## Objc cfstring ref: @"222"
100002877:	48 89 df 	movq	%rbx, %rdi
10000287a:	41 ff d5 	callq	*%r13
10000287d:	48 8d 3d 44 8b 01 00 	leaq	101188(%rip), %rdi ## Objc cfstring ref: @"original str:%@ and address:%p"
100002884:	31 c0 	xorl	%eax, %eax
100002886:	48 89 de 	movq	%rbx, %rsi
100002889:	48 89 da 	movq	%rbx, %rdx
10000288c:	e8 81 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002891:	48 8d 3d 50 8b 01 00 	leaq	101200(%rip), %rdi ## Objc cfstring ref: @"str by copy:%@ and address:%p"
100002898:	31 c0 	xorl	%eax, %eax
10000289a:	4c 89 fe 	movq	%r15, %rsi
10000289d:	4c 89 fa 	movq	%r15, %rdx
1000028a0:	e8 6d 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000028a5:	48 8d 3d 5c 8b 01 00 	leaq	101212(%rip), %rdi ## Objc cfstring ref: @"str by mutableCopy:%@ and address:%p"
1000028ac:	31 c0 	xorl	%eax, %eax
1000028ae:	4c 89 e6 	movq	%r12, %rsi
1000028b1:	4c 89 e2 	movq	%r12, %rdx
1000028b4:	e8 59 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000028b9:	48 8b 05 b8 ef 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyStr(%rip), %rax
1000028c0:	49 8b 34 06 	movq	(%r14,%rax), %rsi
1000028c4:	48 8d 3d 5d 8b 01 00 	leaq	101213(%rip), %rdi ## Objc cfstring ref: @"property str by copy:%@ and address:%p"
1000028cb:	31 c0 	xorl	%eax, %eax
1000028cd:	48 89 f2 	movq	%rsi, %rdx
1000028d0:	e8 3d 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000028d5:	48 8b 05 a4 ef 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongStr(%rip), %rax
1000028dc:	49 8b 34 06 	movq	(%r14,%rax), %rsi
1000028e0:	48 8d 3d 61 8b 01 00 	leaq	101217(%rip), %rdi ## Objc cfstring ref: @"property str by strong:%@ and address:%p"
1000028e7:	31 c0 	xorl	%eax, %eax
1000028e9:	48 89 f2 	movq	%rsi, %rdx
1000028ec:	e8 21 13 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000028f1:	4c 8b 35 78 77 01 00 	movq	96120(%rip), %r14 ## literal pool symbol address: _objc_release
1000028f8:	4c 89 e7 	movq	%r12, %rdi
1000028fb:	41 ff d6 	callq	*%r14
1000028fe:	4c 89 ff 	movq	%r15, %rdi
100002901:	41 ff d6 	callq	*%r14
100002904:	48 89 df 	movq	%rbx, %rdi
100002907:	4c 89 f0 	movq	%r14, %rax
10000290a:	48 83 c4 08 	addq	$8, %rsp
10000290e:	5b 	popq	%rbx
10000290f:	41 5c 	popq	%r12
100002911:	41 5d 	popq	%r13
100002913:	41 5e 	popq	%r14
100002915:	41 5f 	popq	%r15
100002917:	5d 	popq	%rbp
100002918:	ff e0 	jmpq	*%rax
-[CopyUsage testNSArrayCopy]:
10000291a:	55 	pushq	%rbp
10000291b:	48 89 e5 	movq	%rsp, %rbp
10000291e:	41 57 	pushq	%r15
100002920:	41 56 	pushq	%r14
100002922:	41 55 	pushq	%r13
100002924:	41 54 	pushq	%r12
100002926:	53 	pushq	%rbx
100002927:	48 83 ec 28 	subq	$40, %rsp
10000292b:	48 89 7d d0 	movq	%rdi, -48(%rbp)
10000292f:	48 8d 3d 72 8b 01 00 	leaq	101234(%rip), %rdi ## Objc cfstring ref: @"========NSArray========"
100002936:	31 c0 	xorl	%eax, %eax
100002938:	e8 d5 12 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000293d:	48 8b 3d 44 ed 01 00 	movq	126276(%rip), %rdi ## Objc class ref: TestObj
100002944:	48 8b 1d 25 e5 01 00 	movq	124197(%rip), %rbx ## Objc selector ref: new
10000294b:	4c 8b 3d 16 77 01 00 	movq	96022(%rip), %r15 ## Objc message: +[TestObj new]
100002952:	48 89 de 	movq	%rbx, %rsi
100002955:	41 ff d7 	callq	*%r15
100002958:	49 89 c4 	movq	%rax, %r12
10000295b:	4c 8b 2d d6 e5 01 00 	movq	124374(%rip), %r13 ## Objc selector ref: setName:
100002962:	4c 8d 35 5f 89 01 00 	leaq	100703(%rip), %r14 ## Objc cfstring ref: @"111"
100002969:	4c 89 e7 	movq	%r12, %rdi
10000296c:	4c 89 65 c0 	movq	%r12, -64(%rbp)
100002970:	4c 89 ee 	movq	%r13, %rsi
100002973:	4c 89 f2 	movq	%r14, %rdx
100002976:	41 ff d7 	callq	*%r15
100002979:	48 8b 3d 08 ed 01 00 	movq	126216(%rip), %rdi ## Objc class ref: TestObj
100002980:	48 89 de 	movq	%rbx, %rsi
100002983:	41 ff d7 	callq	*%r15
100002986:	48 89 c3 	movq	%rax, %rbx
100002989:	48 89 df 	movq	%rbx, %rdi
10000298c:	48 89 5d b8 	movq	%rbx, -72(%rbp)
100002990:	4c 89 ee 	movq	%r13, %rsi
100002993:	4c 89 f2 	movq	%r14, %rdx
100002996:	41 ff d7 	callq	*%r15
100002999:	4d 89 fd 	movq	%r15, %r13
10000299c:	48 8b 3d ed ec 01 00 	movq	126189(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSArray
1000029a3:	48 8b 35 0e e5 01 00 	movq	124174(%rip), %rsi ## Objc selector ref: alloc
1000029aa:	41 ff d5 	callq	*%r13
1000029ad:	48 89 c1 	movq	%rax, %rcx
1000029b0:	48 8b 35 89 e5 01 00 	movq	124297(%rip), %rsi ## Objc selector ref: initWithObjects:
1000029b7:	45 31 c0 	xorl	%r8d, %r8d
1000029ba:	31 c0 	xorl	%eax, %eax
1000029bc:	48 89 cf 	movq	%rcx, %rdi
1000029bf:	48 89 da 	movq	%rbx, %rdx
1000029c2:	4c 89 e1 	movq	%r12, %rcx
1000029c5:	41 ff d5 	callq	*%r13
1000029c8:	49 89 c6 	movq	%rax, %r14
1000029cb:	48 8b 35 46 e5 01 00 	movq	124230(%rip), %rsi ## Objc selector ref: copy
1000029d2:	4c 89 f7 	movq	%r14, %rdi
1000029d5:	41 ff d5 	callq	*%r13
1000029d8:	49 89 c7 	movq	%rax, %r15
1000029db:	48 8b 35 3e e5 01 00 	movq	124222(%rip), %rsi ## Objc selector ref: mutableCopy
1000029e2:	4c 89 f7 	movq	%r14, %rdi
1000029e5:	41 ff d5 	callq	*%r13
1000029e8:	49 89 c4 	movq	%rax, %r12
1000029eb:	48 8b 35 56 e5 01 00 	movq	124246(%rip), %rsi ## Objc selector ref: setPCopyArray:
1000029f2:	48 8b 5d d0 	movq	-48(%rbp), %rbx
1000029f6:	48 89 df 	movq	%rbx, %rdi
1000029f9:	4c 89 f2 	movq	%r14, %rdx
1000029fc:	41 ff d5 	callq	*%r13
1000029ff:	48 8b 35 4a e5 01 00 	movq	124234(%rip), %rsi ## Objc selector ref: setPStrongArray:
100002a06:	48 89 df 	movq	%rbx, %rdi
100002a09:	4c 89 f2 	movq	%r14, %rdx
100002a0c:	41 ff d5 	callq	*%r13
100002a0f:	48 8d 3d b2 8a 01 00 	leaq	101042(%rip), %rdi ## Objc cfstring ref: @"original array:%@ and address:%p"
100002a16:	31 c0 	xorl	%eax, %eax
100002a18:	4c 89 f6 	movq	%r14, %rsi
100002a1b:	4c 89 f2 	movq	%r14, %rdx
100002a1e:	e8 ef 11 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002a23:	48 8d 3d be 8a 01 00 	leaq	101054(%rip), %rdi ## Objc cfstring ref: @"array by copy:%@ and address:%p"
100002a2a:	31 c0 	xorl	%eax, %eax
100002a2c:	4c 89 7d c8 	movq	%r15, -56(%rbp)
100002a30:	4c 89 fe 	movq	%r15, %rsi
100002a33:	4c 89 fa 	movq	%r15, %rdx
100002a36:	e8 d7 11 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002a3b:	48 8d 3d c6 8a 01 00 	leaq	101062(%rip), %rdi ## Objc cfstring ref: @"array by mutableCopy:%@ and address:%p"
100002a42:	31 c0 	xorl	%eax, %eax
100002a44:	4c 89 e6 	movq	%r12, %rsi
100002a47:	4c 89 e2 	movq	%r12, %rdx
100002a4a:	e8 c3 11 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002a4f:	48 8b 05 32 ee 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rax
100002a56:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002a5a:	48 8d 3d c7 8a 01 00 	leaq	101063(%rip), %rdi ## Objc cfstring ref: @"property array by copy:%@ and address:%p"
100002a61:	31 c0 	xorl	%eax, %eax
100002a63:	48 89 f2 	movq	%rsi, %rdx
100002a66:	e8 a7 11 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002a6b:	48 8b 05 1e ee 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rax
100002a72:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002a76:	48 8d 3d cb 8a 01 00 	leaq	101067(%rip), %rdi ## Objc cfstring ref: @"property array by strong:%@ and address:%p"
100002a7d:	31 c0 	xorl	%eax, %eax
100002a7f:	48 89 f2 	movq	%rsi, %rdx
100002a82:	e8 8b 11 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002a87:	48 8d 3d da 8a 01 00 	leaq	101082(%rip), %rdi ## Objc cfstring ref: @"========NSArray Changed========"
100002a8e:	31 c0 	xorl	%eax, %eax
100002a90:	e8 7d 11 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002a95:	48 8b 3d f4 eb 01 00 	movq	125940(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSArray
100002a9c:	48 8b 35 15 e4 01 00 	movq	123925(%rip), %rsi ## Objc selector ref: alloc
100002aa3:	41 ff d5 	callq	*%r13
100002aa6:	48 89 c3 	movq	%rax, %rbx
100002aa9:	48 8b 3d e8 eb 01 00 	movq	125928(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSObject
100002ab0:	48 8b 35 b9 e3 01 00 	movq	123833(%rip), %rsi ## Objc selector ref: new
100002ab7:	41 ff d5 	callq	*%r13
100002aba:	4d 89 e8 	movq	%r13, %r8
100002abd:	49 89 c5 	movq	%rax, %r13
100002ac0:	31 c9 	xorl	%ecx, %ecx
100002ac2:	31 c0 	xorl	%eax, %eax
100002ac4:	48 89 df 	movq	%rbx, %rdi
100002ac7:	48 8b 35 72 e4 01 00 	movq	124018(%rip), %rsi ## Objc selector ref: initWithObjects:
100002ace:	4c 89 ea 	movq	%r13, %rdx
100002ad1:	41 ff d0 	callq	*%r8
100002ad4:	49 89 c7 	movq	%rax, %r15
100002ad7:	4c 89 f7 	movq	%r14, %rdi
100002ada:	ff 15 90 75 01 00 	callq	*95632(%rip) ## literal pool symbol address: _objc_release
100002ae0:	4c 89 ef 	movq	%r13, %rdi
100002ae3:	ff 15 87 75 01 00 	callq	*95623(%rip) ## literal pool symbol address: _objc_release
100002ae9:	31 c0 	xorl	%eax, %eax
100002aeb:	48 8d 3d d6 89 01 00 	leaq	100822(%rip), %rdi ## Objc cfstring ref: @"original array:%@ and address:%p"
100002af2:	4c 89 fe 	movq	%r15, %rsi
100002af5:	4c 89 fa 	movq	%r15, %rdx
100002af8:	e8 15 11 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002afd:	31 c0 	xorl	%eax, %eax
100002aff:	48 8d 3d e2 89 01 00 	leaq	100834(%rip), %rdi ## Objc cfstring ref: @"array by copy:%@ and address:%p"
100002b06:	4c 8b 6d c8 	movq	-56(%rbp), %r13
100002b0a:	4c 89 ee 	movq	%r13, %rsi
100002b0d:	4c 89 ea 	movq	%r13, %rdx
100002b10:	e8 fd 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002b15:	31 c0 	xorl	%eax, %eax
100002b17:	48 8d 3d ea 89 01 00 	leaq	100842(%rip), %rdi ## Objc cfstring ref: @"array by mutableCopy:%@ and address:%p"
100002b1e:	4c 89 e6 	movq	%r12, %rsi
100002b21:	4c 89 e2 	movq	%r12, %rdx
100002b24:	e8 e9 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002b29:	48 8b 5d d0 	movq	-48(%rbp), %rbx
100002b2d:	48 8b 05 54 ed 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rax
100002b34:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002b38:	31 c0 	xorl	%eax, %eax
100002b3a:	48 8d 3d e7 89 01 00 	leaq	100839(%rip), %rdi ## Objc cfstring ref: @"property array by copy:%@ and address:%p"
100002b41:	48 89 f2 	movq	%rsi, %rdx
100002b44:	e8 c9 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002b49:	48 8b 05 40 ed 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rax
100002b50:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002b54:	31 c0 	xorl	%eax, %eax
100002b56:	48 8d 3d eb 89 01 00 	leaq	100843(%rip), %rdi ## Objc cfstring ref: @"property array by strong:%@ and address:%p"
100002b5d:	48 89 f2 	movq	%rsi, %rdx
100002b60:	e8 ad 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002b65:	48 8d 3d 1c 8a 01 00 	leaq	100892(%rip), %rdi ## Objc cfstring ref: @"========NSArray element Changed========"
100002b6c:	31 c0 	xorl	%eax, %eax
100002b6e:	e8 9f 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002b73:	48 8d 15 2e 88 01 00 	leaq	100398(%rip), %rdx ## Objc cfstring ref: @"222"
100002b7a:	4c 8b 75 c0 	movq	-64(%rbp), %r14
100002b7e:	4c 89 f7 	movq	%r14, %rdi
100002b81:	48 8b 35 b0 e3 01 00 	movq	123824(%rip), %rsi ## Objc selector ref: setName:
100002b88:	ff 15 da 74 01 00 	callq	*95450(%rip) ## Objc message: +[NSObject setName:]
100002b8e:	31 c0 	xorl	%eax, %eax
100002b90:	48 8d 3d 31 89 01 00 	leaq	100657(%rip), %rdi ## Objc cfstring ref: @"original array:%@ and address:%p"
100002b97:	4c 89 fe 	movq	%r15, %rsi
100002b9a:	4c 89 fa 	movq	%r15, %rdx
100002b9d:	e8 70 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002ba2:	31 c0 	xorl	%eax, %eax
100002ba4:	48 8d 3d 3d 89 01 00 	leaq	100669(%rip), %rdi ## Objc cfstring ref: @"array by copy:%@ and address:%p"
100002bab:	4c 89 ee 	movq	%r13, %rsi
100002bae:	4c 89 ea 	movq	%r13, %rdx
100002bb1:	e8 5c 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002bb6:	31 c0 	xorl	%eax, %eax
100002bb8:	48 8d 3d 49 89 01 00 	leaq	100681(%rip), %rdi ## Objc cfstring ref: @"array by mutableCopy:%@ and address:%p"
100002bbf:	4c 89 e6 	movq	%r12, %rsi
100002bc2:	4c 89 e2 	movq	%r12, %rdx
100002bc5:	e8 48 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002bca:	48 8b 05 b7 ec 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rax
100002bd1:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002bd5:	31 c0 	xorl	%eax, %eax
100002bd7:	48 8d 3d 4a 89 01 00 	leaq	100682(%rip), %rdi ## Objc cfstring ref: @"property array by copy:%@ and address:%p"
100002bde:	48 89 f2 	movq	%rsi, %rdx
100002be1:	e8 2c 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002be6:	48 8b 05 a3 ec 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rax
100002bed:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002bf1:	31 c0 	xorl	%eax, %eax
100002bf3:	48 8d 3d 4e 89 01 00 	leaq	100686(%rip), %rdi ## Objc cfstring ref: @"property array by strong:%@ and address:%p"
100002bfa:	48 89 f2 	movq	%rsi, %rdx
100002bfd:	e8 10 10 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002c02:	4c 89 e7 	movq	%r12, %rdi
100002c05:	ff 15 65 74 01 00 	callq	*95333(%rip) ## literal pool symbol address: _objc_release
100002c0b:	4c 89 ef 	movq	%r13, %rdi
100002c0e:	ff 15 5c 74 01 00 	callq	*95324(%rip) ## literal pool symbol address: _objc_release
100002c14:	4c 89 ff 	movq	%r15, %rdi
100002c17:	ff 15 53 74 01 00 	callq	*95315(%rip) ## literal pool symbol address: _objc_release
100002c1d:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100002c21:	ff 15 49 74 01 00 	callq	*95305(%rip) ## literal pool symbol address: _objc_release
100002c27:	4c 89 f7 	movq	%r14, %rdi
100002c2a:	48 8b 05 3f 74 01 00 	movq	95295(%rip), %rax ## literal pool symbol address: _objc_release
100002c31:	48 83 c4 28 	addq	$40, %rsp
100002c35:	5b 	popq	%rbx
100002c36:	41 5c 	popq	%r12
100002c38:	41 5d 	popq	%r13
100002c3a:	41 5e 	popq	%r14
100002c3c:	41 5f 	popq	%r15
100002c3e:	5d 	popq	%rbp
100002c3f:	ff e0 	jmpq	*%rax
-[CopyUsage testNSMutableArrayCopy]:
100002c41:	55 	pushq	%rbp
100002c42:	48 89 e5 	movq	%rsp, %rbp
100002c45:	41 57 	pushq	%r15
100002c47:	41 56 	pushq	%r14
100002c49:	41 55 	pushq	%r13
100002c4b:	41 54 	pushq	%r12
100002c4d:	53 	pushq	%rbx
100002c4e:	48 83 ec 28 	subq	$40, %rsp
100002c52:	48 89 7d b8 	movq	%rdi, -72(%rbp)
100002c56:	48 8d 3d 4b 89 01 00 	leaq	100683(%rip), %rdi ## Objc cfstring ref: @"========NSMutableArray========"
100002c5d:	31 c0 	xorl	%eax, %eax
100002c5f:	e8 ae 0f 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002c64:	48 8b 3d 1d ea 01 00 	movq	125469(%rip), %rdi ## Objc class ref: TestObj
100002c6b:	48 8b 1d fe e1 01 00 	movq	123390(%rip), %rbx ## Objc selector ref: new
100002c72:	4c 8b 25 ef 73 01 00 	movq	95215(%rip), %r12 ## Objc message: +[TestObj new]
100002c79:	48 89 de 	movq	%rbx, %rsi
100002c7c:	41 ff d4 	callq	*%r12
100002c7f:	49 89 c7 	movq	%rax, %r15
100002c82:	4c 8b 2d af e2 01 00 	movq	123567(%rip), %r13 ## Objc selector ref: setName:
100002c89:	4c 8d 35 38 86 01 00 	leaq	99896(%rip), %r14 ## Objc cfstring ref: @"111"
100002c90:	4c 89 ff 	movq	%r15, %rdi
100002c93:	4c 89 7d d0 	movq	%r15, -48(%rbp)
100002c97:	4c 89 ee 	movq	%r13, %rsi
100002c9a:	4c 89 f2 	movq	%r14, %rdx
100002c9d:	41 ff d4 	callq	*%r12
100002ca0:	48 8b 3d e1 e9 01 00 	movq	125409(%rip), %rdi ## Objc class ref: TestObj
100002ca7:	48 89 de 	movq	%rbx, %rsi
100002caa:	41 ff d4 	callq	*%r12
100002cad:	48 89 c3 	movq	%rax, %rbx
100002cb0:	48 89 df 	movq	%rbx, %rdi
100002cb3:	48 89 5d b0 	movq	%rbx, -80(%rbp)
100002cb7:	4c 89 ee 	movq	%r13, %rsi
100002cba:	4c 89 f2 	movq	%r14, %rdx
100002cbd:	41 ff d4 	callq	*%r12
100002cc0:	48 8b 3d d9 e9 01 00 	movq	125401(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
100002cc7:	48 8b 35 ea e1 01 00 	movq	123370(%rip), %rsi ## Objc selector ref: alloc
100002cce:	41 ff d4 	callq	*%r12
100002cd1:	48 89 c1 	movq	%rax, %rcx
100002cd4:	48 8b 35 65 e2 01 00 	movq	123493(%rip), %rsi ## Objc selector ref: initWithObjects:
100002cdb:	45 31 c0 	xorl	%r8d, %r8d
100002cde:	31 c0 	xorl	%eax, %eax
100002ce0:	48 89 cf 	movq	%rcx, %rdi
100002ce3:	48 89 da 	movq	%rbx, %rdx
100002ce6:	4c 89 f9 	movq	%r15, %rcx
100002ce9:	41 ff d4 	callq	*%r12
100002cec:	49 89 c5 	movq	%rax, %r13
100002cef:	48 8b 35 22 e2 01 00 	movq	123426(%rip), %rsi ## Objc selector ref: copy
100002cf6:	4c 89 ef 	movq	%r13, %rdi
100002cf9:	41 ff d4 	callq	*%r12
100002cfc:	49 89 c6 	movq	%rax, %r14
100002cff:	48 8b 35 1a e2 01 00 	movq	123418(%rip), %rsi ## Objc selector ref: mutableCopy
100002d06:	4c 89 ef 	movq	%r13, %rdi
100002d09:	41 ff d4 	callq	*%r12
100002d0c:	49 89 c7 	movq	%rax, %r15
100002d0f:	48 8b 35 32 e2 01 00 	movq	123442(%rip), %rsi ## Objc selector ref: setPCopyArray:
100002d16:	48 8b 5d b8 	movq	-72(%rbp), %rbx
100002d1a:	48 89 df 	movq	%rbx, %rdi
100002d1d:	4c 89 ea 	movq	%r13, %rdx
100002d20:	41 ff d4 	callq	*%r12
100002d23:	48 8b 35 26 e2 01 00 	movq	123430(%rip), %rsi ## Objc selector ref: setPStrongArray:
100002d2a:	48 89 df 	movq	%rbx, %rdi
100002d2d:	4c 89 ea 	movq	%r13, %rdx
100002d30:	41 ff d4 	callq	*%r12
100002d33:	48 8d 3d 8e 87 01 00 	leaq	100238(%rip), %rdi ## Objc cfstring ref: @"original array:%@ and address:%p"
100002d3a:	31 c0 	xorl	%eax, %eax
100002d3c:	4c 89 ee 	movq	%r13, %rsi
100002d3f:	4c 89 ea 	movq	%r13, %rdx
100002d42:	e8 cb 0e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002d47:	48 8d 3d 9a 87 01 00 	leaq	100250(%rip), %rdi ## Objc cfstring ref: @"array by copy:%@ and address:%p"
100002d4e:	31 c0 	xorl	%eax, %eax
100002d50:	4c 89 75 c0 	movq	%r14, -64(%rbp)
100002d54:	4c 89 f6 	movq	%r14, %rsi
100002d57:	4c 89 f2 	movq	%r14, %rdx
100002d5a:	e8 b3 0e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002d5f:	48 8d 3d a2 87 01 00 	leaq	100258(%rip), %rdi ## Objc cfstring ref: @"array by mutableCopy:%@ and address:%p"
100002d66:	31 c0 	xorl	%eax, %eax
100002d68:	4c 89 7d c8 	movq	%r15, -56(%rbp)
100002d6c:	4c 89 fe 	movq	%r15, %rsi
100002d6f:	4c 89 fa 	movq	%r15, %rdx
100002d72:	e8 9b 0e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002d77:	48 8b 05 0a eb 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rax
100002d7e:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002d82:	48 8d 3d 9f 87 01 00 	leaq	100255(%rip), %rdi ## Objc cfstring ref: @"property array by copy:%@ and address:%p"
100002d89:	31 c0 	xorl	%eax, %eax
100002d8b:	48 89 f2 	movq	%rsi, %rdx
100002d8e:	e8 7f 0e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002d93:	48 8b 05 f6 ea 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rax
100002d9a:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002d9e:	48 8d 3d a3 87 01 00 	leaq	100259(%rip), %rdi ## Objc cfstring ref: @"property array by strong:%@ and address:%p"
100002da5:	31 c0 	xorl	%eax, %eax
100002da7:	48 89 f2 	movq	%rsi, %rdx
100002daa:	e8 63 0e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002daf:	48 8d 3d 12 88 01 00 	leaq	100370(%rip), %rdi ## Objc cfstring ref: @"========NSMutableArray Changed========"
100002db6:	31 c0 	xorl	%eax, %eax
100002db8:	e8 55 0e 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002dbd:	48 8b 3d c4 e8 01 00 	movq	125124(%rip), %rdi ## Objc class ref: TestObj
100002dc4:	48 8b 35 a5 e0 01 00 	movq	123045(%rip), %rsi ## Objc selector ref: new
100002dcb:	41 ff d4 	callq	*%r12
100002dce:	49 89 c6 	movq	%rax, %r14
100002dd1:	48 8b 35 80 e1 01 00 	movq	123264(%rip), %rsi ## Objc selector ref: addObject:
100002dd8:	4c 89 ef 	movq	%r13, %rdi
100002ddb:	4c 89 f2 	movq	%r14, %rdx
100002dde:	41 ff d4 	callq	*%r12
100002de1:	4c 8b 3d 88 72 01 00 	movq	94856(%rip), %r15 ## literal pool symbol address: _objc_release
100002de8:	4c 89 f7 	movq	%r14, %rdi
100002deb:	41 ff d7 	callq	*%r15
100002dee:	48 8d 15 b3 85 01 00 	leaq	99763(%rip), %rdx ## Objc cfstring ref: @"222"
100002df5:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100002df9:	48 8b 35 38 e1 01 00 	movq	123192(%rip), %rsi ## Objc selector ref: setName:
100002e00:	41 ff d4 	callq	*%r12
100002e03:	31 c0 	xorl	%eax, %eax
100002e05:	48 8d 3d bc 86 01 00 	leaq	100028(%rip), %rdi ## Objc cfstring ref: @"original array:%@ and address:%p"
100002e0c:	4c 89 ee 	movq	%r13, %rsi
100002e0f:	4c 89 ea 	movq	%r13, %rdx
100002e12:	e8 fb 0d 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002e17:	31 c0 	xorl	%eax, %eax
100002e19:	48 8d 3d c8 86 01 00 	leaq	100040(%rip), %rdi ## Objc cfstring ref: @"array by copy:%@ and address:%p"
100002e20:	4c 8b 65 c0 	movq	-64(%rbp), %r12
100002e24:	4c 89 e6 	movq	%r12, %rsi
100002e27:	4c 89 e2 	movq	%r12, %rdx
100002e2a:	e8 e3 0d 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002e2f:	31 c0 	xorl	%eax, %eax
100002e31:	48 8d 3d d0 86 01 00 	leaq	100048(%rip), %rdi ## Objc cfstring ref: @"array by mutableCopy:%@ and address:%p"
100002e38:	4c 8b 75 c8 	movq	-56(%rbp), %r14
100002e3c:	4c 89 f6 	movq	%r14, %rsi
100002e3f:	4c 89 f2 	movq	%r14, %rdx
100002e42:	e8 cb 0d 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002e47:	48 8b 05 3a ea 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rax
100002e4e:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002e52:	31 c0 	xorl	%eax, %eax
100002e54:	48 8d 3d cd 86 01 00 	leaq	100045(%rip), %rdi ## Objc cfstring ref: @"property array by copy:%@ and address:%p"
100002e5b:	48 89 f2 	movq	%rsi, %rdx
100002e5e:	e8 af 0d 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002e63:	48 8b 05 26 ea 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rax
100002e6a:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002e6e:	31 c0 	xorl	%eax, %eax
100002e70:	48 8d 3d d1 86 01 00 	leaq	100049(%rip), %rdi ## Objc cfstring ref: @"property array by strong:%@ and address:%p"
100002e77:	48 89 f2 	movq	%rsi, %rdx
100002e7a:	e8 93 0d 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002e7f:	4c 89 f7 	movq	%r14, %rdi
100002e82:	41 ff d7 	callq	*%r15
100002e85:	4c 89 e7 	movq	%r12, %rdi
100002e88:	41 ff d7 	callq	*%r15
100002e8b:	4c 89 ef 	movq	%r13, %rdi
100002e8e:	41 ff d7 	callq	*%r15
100002e91:	48 8b 7d b0 	movq	-80(%rbp), %rdi
100002e95:	41 ff d7 	callq	*%r15
100002e98:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100002e9c:	4c 89 f8 	movq	%r15, %rax
100002e9f:	48 83 c4 28 	addq	$40, %rsp
100002ea3:	5b 	popq	%rbx
100002ea4:	41 5c 	popq	%r12
100002ea6:	41 5d 	popq	%r13
100002ea8:	41 5e 	popq	%r14
100002eaa:	41 5f 	popq	%r15
100002eac:	5d 	popq	%rbp
100002ead:	ff e0 	jmpq	*%rax
-[CopyUsage testNSDictionaryCopy]:
100002eaf:	55 	pushq	%rbp
100002eb0:	48 89 e5 	movq	%rsp, %rbp
100002eb3:	41 57 	pushq	%r15
100002eb5:	41 56 	pushq	%r14
100002eb7:	41 55 	pushq	%r13
100002eb9:	41 54 	pushq	%r12
100002ebb:	53 	pushq	%rbx
100002ebc:	48 83 ec 28 	subq	$40, %rsp
100002ec0:	48 89 7d b8 	movq	%rdi, -72(%rbp)
100002ec4:	48 8d 3d 1d 87 01 00 	leaq	100125(%rip), %rdi ## Objc cfstring ref: @"========NSDictionary========"
100002ecb:	31 c0 	xorl	%eax, %eax
100002ecd:	e8 40 0d 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002ed2:	48 8b 3d af e7 01 00 	movq	124847(%rip), %rdi ## Objc class ref: TestObj
100002ed9:	48 8b 35 90 df 01 00 	movq	122768(%rip), %rsi ## Objc selector ref: new
100002ee0:	4c 8b 3d 81 71 01 00 	movq	94593(%rip), %r15 ## Objc message: +[TestObj new]
100002ee7:	41 ff d7 	callq	*%r15
100002eea:	48 89 c3 	movq	%rax, %rbx
100002eed:	48 8b 35 44 e0 01 00 	movq	122948(%rip), %rsi ## Objc selector ref: setName:
100002ef4:	48 8d 15 cd 83 01 00 	leaq	99277(%rip), %rdx ## Objc cfstring ref: @"111"
100002efb:	48 89 df 	movq	%rbx, %rdi
100002efe:	48 89 5d c8 	movq	%rbx, -56(%rbp)
100002f02:	41 ff d7 	callq	*%r15
100002f05:	48 8b 3d 9c e7 01 00 	movq	124828(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
100002f0c:	48 8b 35 4d e0 01 00 	movq	122957(%rip), %rsi ## Objc selector ref: dictionaryWithObjectsAndKeys:
100002f13:	48 8d 0d ee 86 01 00 	leaq	100078(%rip), %rcx ## Objc cfstring ref: @"obj1"
100002f1a:	45 31 c0 	xorl	%r8d, %r8d
100002f1d:	31 c0 	xorl	%eax, %eax
100002f1f:	48 89 da 	movq	%rbx, %rdx
100002f22:	41 ff d7 	callq	*%r15
100002f25:	48 89 c7 	movq	%rax, %rdi
100002f28:	e8 a7 0e 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100002f2d:	49 89 c5 	movq	%rax, %r13
100002f30:	48 8b 35 e1 df 01 00 	movq	122849(%rip), %rsi ## Objc selector ref: copy
100002f37:	4c 89 ef 	movq	%r13, %rdi
100002f3a:	41 ff d7 	callq	*%r15
100002f3d:	49 89 c6 	movq	%rax, %r14
100002f40:	48 8b 35 d9 df 01 00 	movq	122841(%rip), %rsi ## Objc selector ref: mutableCopy
100002f47:	4c 89 ef 	movq	%r13, %rdi
100002f4a:	41 ff d7 	callq	*%r15
100002f4d:	49 89 c4 	movq	%rax, %r12
100002f50:	48 8b 35 11 e0 01 00 	movq	122897(%rip), %rsi ## Objc selector ref: setPCopyDict:
100002f57:	48 8b 5d b8 	movq	-72(%rbp), %rbx
100002f5b:	48 89 df 	movq	%rbx, %rdi
100002f5e:	4c 89 ea 	movq	%r13, %rdx
100002f61:	41 ff d7 	callq	*%r15
100002f64:	48 8b 35 05 e0 01 00 	movq	122885(%rip), %rsi ## Objc selector ref: setPStrongDict:
100002f6b:	48 89 df 	movq	%rbx, %rdi
100002f6e:	4c 89 ea 	movq	%r13, %rdx
100002f71:	41 ff d7 	callq	*%r15
100002f74:	48 8d 3d ad 86 01 00 	leaq	100013(%rip), %rdi ## Objc cfstring ref: @"original dict:%@ and address:%p"
100002f7b:	31 c0 	xorl	%eax, %eax
100002f7d:	4c 89 ee 	movq	%r13, %rsi
100002f80:	4c 89 ea 	movq	%r13, %rdx
100002f83:	e8 8a 0c 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002f88:	48 8d 3d b9 86 01 00 	leaq	100025(%rip), %rdi ## Objc cfstring ref: @"dict by copy:%@ and address:%p"
100002f8f:	31 c0 	xorl	%eax, %eax
100002f91:	4c 89 f6 	movq	%r14, %rsi
100002f94:	4c 89 f2 	movq	%r14, %rdx
100002f97:	e8 76 0c 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002f9c:	48 8d 3d c5 86 01 00 	leaq	100037(%rip), %rdi ## Objc cfstring ref: @"dict by mutableCopy:%@ and address:%p"
100002fa3:	31 c0 	xorl	%eax, %eax
100002fa5:	4c 89 e6 	movq	%r12, %rsi
100002fa8:	4c 89 e2 	movq	%r12, %rdx
100002fab:	e8 62 0c 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002fb0:	48 8b 05 e1 e8 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rax
100002fb7:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002fbb:	48 8d 3d c6 86 01 00 	leaq	100038(%rip), %rdi ## Objc cfstring ref: @"property dict by copy:%@ and address:%p"
100002fc2:	31 c0 	xorl	%eax, %eax
100002fc4:	48 89 f2 	movq	%rsi, %rdx
100002fc7:	e8 46 0c 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002fcc:	48 8b 05 cd e8 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rax
100002fd3:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100002fd7:	48 8d 3d ca 86 01 00 	leaq	100042(%rip), %rdi ## Objc cfstring ref: @"property dict by strong:%@ and address:%p"
100002fde:	31 c0 	xorl	%eax, %eax
100002fe0:	48 89 f2 	movq	%rsi, %rdx
100002fe3:	e8 2a 0c 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002fe8:	48 8d 3d d9 86 01 00 	leaq	100057(%rip), %rdi ## Objc cfstring ref: @"========NSDictionary element changed========"
100002fef:	31 c0 	xorl	%eax, %eax
100002ff1:	e8 1c 0c 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100002ff6:	48 8d 15 ab 83 01 00 	leaq	99243(%rip), %rdx ## Objc cfstring ref: @"222"
100002ffd:	48 8b 7d c8 	movq	-56(%rbp), %rdi
100003001:	48 8b 35 30 df 01 00 	movq	122672(%rip), %rsi ## Objc selector ref: setName:
100003008:	41 ff d7 	callq	*%r15
10000300b:	31 c0 	xorl	%eax, %eax
10000300d:	48 8d 3d 14 86 01 00 	leaq	99860(%rip), %rdi ## Objc cfstring ref: @"original dict:%@ and address:%p"
100003014:	4c 89 ee 	movq	%r13, %rsi
100003017:	4c 89 ea 	movq	%r13, %rdx
10000301a:	e8 f3 0b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000301f:	31 c0 	xorl	%eax, %eax
100003021:	48 8d 3d 20 86 01 00 	leaq	99872(%rip), %rdi ## Objc cfstring ref: @"dict by copy:%@ and address:%p"
100003028:	4c 89 75 d0 	movq	%r14, -48(%rbp)
10000302c:	4c 89 f6 	movq	%r14, %rsi
10000302f:	4c 89 f2 	movq	%r14, %rdx
100003032:	e8 db 0b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003037:	31 c0 	xorl	%eax, %eax
100003039:	48 8d 3d 28 86 01 00 	leaq	99880(%rip), %rdi ## Objc cfstring ref: @"dict by mutableCopy:%@ and address:%p"
100003040:	4c 89 65 c0 	movq	%r12, -64(%rbp)
100003044:	4c 89 e6 	movq	%r12, %rsi
100003047:	4c 89 e2 	movq	%r12, %rdx
10000304a:	e8 c3 0b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000304f:	48 8b 05 42 e8 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rax
100003056:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
10000305a:	31 c0 	xorl	%eax, %eax
10000305c:	48 8d 3d 25 86 01 00 	leaq	99877(%rip), %rdi ## Objc cfstring ref: @"property dict by copy:%@ and address:%p"
100003063:	48 89 f2 	movq	%rsi, %rdx
100003066:	e8 a7 0b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000306b:	48 8b 05 2e e8 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rax
100003072:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100003076:	31 c0 	xorl	%eax, %eax
100003078:	48 8d 3d 29 86 01 00 	leaq	99881(%rip), %rdi ## Objc cfstring ref: @"property dict by strong:%@ and address:%p"
10000307f:	48 89 f2 	movq	%rsi, %rdx
100003082:	e8 8b 0b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003087:	48 8d 3d 5a 86 01 00 	leaq	99930(%rip), %rdi ## Objc cfstring ref: @"========NSDictionary changed========"
10000308e:	31 c0 	xorl	%eax, %eax
100003090:	e8 7d 0b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003095:	48 8b 3d ec e5 01 00 	movq	124396(%rip), %rdi ## Objc class ref: TestObj
10000309c:	48 8b 35 cd dd 01 00 	movq	122317(%rip), %rsi ## Objc selector ref: new
1000030a3:	41 ff d7 	callq	*%r15
1000030a6:	49 89 c6 	movq	%rax, %r14
1000030a9:	4c 89 f7 	movq	%r14, %rdi
1000030ac:	48 8b 35 85 de 01 00 	movq	122501(%rip), %rsi ## Objc selector ref: setName:
1000030b3:	48 8d 15 0e 82 01 00 	leaq	98830(%rip), %rdx ## Objc cfstring ref: @"111"
1000030ba:	41 ff d7 	callq	*%r15
1000030bd:	48 8b 3d e4 e5 01 00 	movq	124388(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
1000030c4:	48 8d 0d 3d 86 01 00 	leaq	99901(%rip), %rcx ## Objc cfstring ref: @"obj0"
1000030cb:	45 31 c0 	xorl	%r8d, %r8d
1000030ce:	31 c0 	xorl	%eax, %eax
1000030d0:	48 8b 35 89 de 01 00 	movq	122505(%rip), %rsi ## Objc selector ref: dictionaryWithObjectsAndKeys:
1000030d7:	4c 89 f2 	movq	%r14, %rdx
1000030da:	41 ff d7 	callq	*%r15
1000030dd:	48 89 c7 	movq	%rax, %rdi
1000030e0:	e8 ef 0c 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000030e5:	49 89 c7 	movq	%rax, %r15
1000030e8:	4c 8b 25 81 6f 01 00 	movq	94081(%rip), %r12 ## literal pool symbol address: _objc_release
1000030ef:	4c 89 ef 	movq	%r13, %rdi
1000030f2:	41 ff d4 	callq	*%r12
1000030f5:	31 c0 	xorl	%eax, %eax
1000030f7:	48 8d 3d 2a 85 01 00 	leaq	99626(%rip), %rdi ## Objc cfstring ref: @"original dict:%@ and address:%p"
1000030fe:	4c 89 fe 	movq	%r15, %rsi
100003101:	4c 89 fa 	movq	%r15, %rdx
100003104:	e8 09 0b 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003109:	31 c0 	xorl	%eax, %eax
10000310b:	48 8d 3d 36 85 01 00 	leaq	99638(%rip), %rdi ## Objc cfstring ref: @"dict by copy:%@ and address:%p"
100003112:	48 8b 75 d0 	movq	-48(%rbp), %rsi
100003116:	48 89 f2 	movq	%rsi, %rdx
100003119:	e8 f4 0a 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000311e:	31 c0 	xorl	%eax, %eax
100003120:	48 8d 3d 41 85 01 00 	leaq	99649(%rip), %rdi ## Objc cfstring ref: @"dict by mutableCopy:%@ and address:%p"
100003127:	4c 8b 6d c0 	movq	-64(%rbp), %r13
10000312b:	4c 89 ee 	movq	%r13, %rsi
10000312e:	4c 89 ea 	movq	%r13, %rdx
100003131:	e8 dc 0a 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003136:	48 8b 05 5b e7 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rax
10000313d:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100003141:	31 c0 	xorl	%eax, %eax
100003143:	48 8d 3d 3e 85 01 00 	leaq	99646(%rip), %rdi ## Objc cfstring ref: @"property dict by copy:%@ and address:%p"
10000314a:	48 89 f2 	movq	%rsi, %rdx
10000314d:	e8 c0 0a 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003152:	48 8b 05 47 e7 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rax
100003159:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
10000315d:	31 c0 	xorl	%eax, %eax
10000315f:	48 8d 3d 42 85 01 00 	leaq	99650(%rip), %rdi ## Objc cfstring ref: @"property dict by strong:%@ and address:%p"
100003166:	48 89 f2 	movq	%rsi, %rdx
100003169:	e8 a4 0a 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000316e:	4c 89 f7 	movq	%r14, %rdi
100003171:	41 ff d4 	callq	*%r12
100003174:	4c 89 ef 	movq	%r13, %rdi
100003177:	41 ff d4 	callq	*%r12
10000317a:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000317e:	41 ff d4 	callq	*%r12
100003181:	4c 89 ff 	movq	%r15, %rdi
100003184:	41 ff d4 	callq	*%r12
100003187:	48 8b 7d c8 	movq	-56(%rbp), %rdi
10000318b:	4c 89 e0 	movq	%r12, %rax
10000318e:	48 83 c4 28 	addq	$40, %rsp
100003192:	5b 	popq	%rbx
100003193:	41 5c 	popq	%r12
100003195:	41 5d 	popq	%r13
100003197:	41 5e 	popq	%r14
100003199:	41 5f 	popq	%r15
10000319b:	5d 	popq	%rbp
10000319c:	ff e0 	jmpq	*%rax
-[CopyUsage testNSMutableDictionaryCopy]:
10000319e:	55 	pushq	%rbp
10000319f:	48 89 e5 	movq	%rsp, %rbp
1000031a2:	41 57 	pushq	%r15
1000031a4:	41 56 	pushq	%r14
1000031a6:	41 55 	pushq	%r13
1000031a8:	41 54 	pushq	%r12
1000031aa:	53 	pushq	%rbx
1000031ab:	48 83 ec 18 	subq	$24, %rsp
1000031af:	48 89 7d c0 	movq	%rdi, -64(%rbp)
1000031b3:	48 8d 3d 6e 85 01 00 	leaq	99694(%rip), %rdi ## Objc cfstring ref: @"========NSMutableDictionary========"
1000031ba:	31 c0 	xorl	%eax, %eax
1000031bc:	e8 51 0a 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000031c1:	48 8b 3d c0 e4 01 00 	movq	124096(%rip), %rdi ## Objc class ref: TestObj
1000031c8:	48 8b 35 a1 dc 01 00 	movq	122017(%rip), %rsi ## Objc selector ref: new
1000031cf:	4c 8b 2d 92 6e 01 00 	movq	93842(%rip), %r13 ## Objc message: +[TestObj new]
1000031d6:	41 ff d5 	callq	*%r13
1000031d9:	48 89 c3 	movq	%rax, %rbx
1000031dc:	48 8b 35 55 dd 01 00 	movq	122197(%rip), %rsi ## Objc selector ref: setName:
1000031e3:	48 8d 15 de 80 01 00 	leaq	98526(%rip), %rdx ## Objc cfstring ref: @"111"
1000031ea:	48 89 df 	movq	%rbx, %rdi
1000031ed:	48 89 5d c8 	movq	%rbx, -56(%rbp)
1000031f1:	41 ff d5 	callq	*%r13
1000031f4:	48 8b 3d b5 e4 01 00 	movq	124085(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
1000031fb:	48 8b 35 5e dd 01 00 	movq	122206(%rip), %rsi ## Objc selector ref: dictionaryWithObjectsAndKeys:
100003202:	48 8d 0d ff 83 01 00 	leaq	99327(%rip), %rcx ## Objc cfstring ref: @"obj1"
100003209:	45 31 c0 	xorl	%r8d, %r8d
10000320c:	31 c0 	xorl	%eax, %eax
10000320e:	48 89 da 	movq	%rbx, %rdx
100003211:	41 ff d5 	callq	*%r13
100003214:	48 89 c7 	movq	%rax, %rdi
100003217:	e8 b8 0b 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000321c:	49 89 c4 	movq	%rax, %r12
10000321f:	48 8b 35 f2 dc 01 00 	movq	122098(%rip), %rsi ## Objc selector ref: copy
100003226:	4c 89 e7 	movq	%r12, %rdi
100003229:	41 ff d5 	callq	*%r13
10000322c:	48 89 45 d0 	movq	%rax, -48(%rbp)
100003230:	48 8b 35 e9 dc 01 00 	movq	122089(%rip), %rsi ## Objc selector ref: mutableCopy
100003237:	4c 89 e7 	movq	%r12, %rdi
10000323a:	41 ff d5 	callq	*%r13
10000323d:	49 89 c7 	movq	%rax, %r15
100003240:	48 8b 35 21 dd 01 00 	movq	122145(%rip), %rsi ## Objc selector ref: setPCopyDict:
100003247:	48 8b 5d c0 	movq	-64(%rbp), %rbx
10000324b:	48 89 df 	movq	%rbx, %rdi
10000324e:	4c 89 e2 	movq	%r12, %rdx
100003251:	41 ff d5 	callq	*%r13
100003254:	48 8b 35 15 dd 01 00 	movq	122133(%rip), %rsi ## Objc selector ref: setPStrongDict:
10000325b:	48 89 df 	movq	%rbx, %rdi
10000325e:	4c 89 e2 	movq	%r12, %rdx
100003261:	41 ff d5 	callq	*%r13
100003264:	48 8d 3d bd 83 01 00 	leaq	99261(%rip), %rdi ## Objc cfstring ref: @"original dict:%@ and address:%p"
10000326b:	31 c0 	xorl	%eax, %eax
10000326d:	4c 89 e6 	movq	%r12, %rsi
100003270:	4c 89 e2 	movq	%r12, %rdx
100003273:	e8 9a 09 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003278:	48 8d 3d c9 83 01 00 	leaq	99273(%rip), %rdi ## Objc cfstring ref: @"dict by copy:%@ and address:%p"
10000327f:	31 c0 	xorl	%eax, %eax
100003281:	4c 8b 75 d0 	movq	-48(%rbp), %r14
100003285:	4c 89 f6 	movq	%r14, %rsi
100003288:	4c 89 f2 	movq	%r14, %rdx
10000328b:	e8 82 09 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003290:	48 8d 3d d1 83 01 00 	leaq	99281(%rip), %rdi ## Objc cfstring ref: @"dict by mutableCopy:%@ and address:%p"
100003297:	31 c0 	xorl	%eax, %eax
100003299:	4c 89 fe 	movq	%r15, %rsi
10000329c:	4c 89 fa 	movq	%r15, %rdx
10000329f:	e8 6e 09 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000032a4:	48 8b 05 ed e5 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rax
1000032ab:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
1000032af:	48 8d 3d d2 83 01 00 	leaq	99282(%rip), %rdi ## Objc cfstring ref: @"property dict by copy:%@ and address:%p"
1000032b6:	31 c0 	xorl	%eax, %eax
1000032b8:	48 89 f2 	movq	%rsi, %rdx
1000032bb:	e8 52 09 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000032c0:	48 8b 05 d9 e5 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rax
1000032c7:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
1000032cb:	4c 8d 2d d6 83 01 00 	leaq	99286(%rip), %r13 ## Objc cfstring ref: @"property dict by strong:%@ and address:%p"
1000032d2:	31 c0 	xorl	%eax, %eax
1000032d4:	4c 89 ef 	movq	%r13, %rdi
1000032d7:	48 89 f2 	movq	%rsi, %rdx
1000032da:	e8 33 09 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000032df:	48 8d 3d 62 84 01 00 	leaq	99426(%rip), %rdi ## Objc cfstring ref: @"========NSMutableDictionary element changed========"
1000032e6:	31 c0 	xorl	%eax, %eax
1000032e8:	e8 25 09 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000032ed:	48 8d 15 b4 80 01 00 	leaq	98484(%rip), %rdx ## Objc cfstring ref: @"222"
1000032f4:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000032f8:	48 8b 35 39 dc 01 00 	movq	121913(%rip), %rsi ## Objc selector ref: setName:
1000032ff:	ff 15 63 6d 01 00 	callq	*93539(%rip) ## Objc message: +[NSMutableDictionary setName:]
100003305:	31 c0 	xorl	%eax, %eax
100003307:	48 8d 3d 1a 83 01 00 	leaq	99098(%rip), %rdi ## Objc cfstring ref: @"original dict:%@ and address:%p"
10000330e:	4c 89 e6 	movq	%r12, %rsi
100003311:	4c 89 e2 	movq	%r12, %rdx
100003314:	e8 f9 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003319:	31 c0 	xorl	%eax, %eax
10000331b:	48 8d 3d 26 83 01 00 	leaq	99110(%rip), %rdi ## Objc cfstring ref: @"dict by copy:%@ and address:%p"
100003322:	4c 89 f6 	movq	%r14, %rsi
100003325:	4c 89 f2 	movq	%r14, %rdx
100003328:	e8 e5 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000332d:	31 c0 	xorl	%eax, %eax
10000332f:	48 8d 3d 32 83 01 00 	leaq	99122(%rip), %rdi ## Objc cfstring ref: @"dict by mutableCopy:%@ and address:%p"
100003336:	4c 89 fe 	movq	%r15, %rsi
100003339:	4c 89 fa 	movq	%r15, %rdx
10000333c:	e8 d1 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003341:	48 8b 05 50 e5 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rax
100003348:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
10000334c:	31 c0 	xorl	%eax, %eax
10000334e:	48 8d 3d 33 83 01 00 	leaq	99123(%rip), %rdi ## Objc cfstring ref: @"property dict by copy:%@ and address:%p"
100003355:	48 89 f2 	movq	%rsi, %rdx
100003358:	e8 b5 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000335d:	48 8b 05 3c e5 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rax
100003364:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100003368:	31 c0 	xorl	%eax, %eax
10000336a:	4c 89 ef 	movq	%r13, %rdi
10000336d:	48 89 f2 	movq	%rsi, %rdx
100003370:	e8 9d 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003375:	48 8d 3d ec 83 01 00 	leaq	99308(%rip), %rdi ## Objc cfstring ref: @"========NSMutableDictionary changed========"
10000337c:	31 c0 	xorl	%eax, %eax
10000337e:	e8 8f 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003383:	48 8b 3d fe e2 01 00 	movq	123646(%rip), %rdi ## Objc class ref: TestObj
10000338a:	48 8b 35 df da 01 00 	movq	121567(%rip), %rsi ## Objc selector ref: new
100003391:	4c 8b 35 d0 6c 01 00 	movq	93392(%rip), %r14 ## Objc message: +[TestObj new]
100003398:	41 ff d6 	callq	*%r14
10000339b:	49 89 c5 	movq	%rax, %r13
10000339e:	4c 89 ef 	movq	%r13, %rdi
1000033a1:	48 8b 35 90 db 01 00 	movq	121744(%rip), %rsi ## Objc selector ref: setName:
1000033a8:	48 8d 15 19 7f 01 00 	leaq	98073(%rip), %rdx ## Objc cfstring ref: @"111"
1000033af:	41 ff d6 	callq	*%r14
1000033b2:	48 8b 35 bf db 01 00 	movq	121791(%rip), %rsi ## Objc selector ref: setObject:forKey:
1000033b9:	48 8d 0d 48 83 01 00 	leaq	99144(%rip), %rcx ## Objc cfstring ref: @"obj0"
1000033c0:	4c 89 e7 	movq	%r12, %rdi
1000033c3:	4c 89 ea 	movq	%r13, %rdx
1000033c6:	41 ff d6 	callq	*%r14
1000033c9:	31 c0 	xorl	%eax, %eax
1000033cb:	48 8d 3d 56 82 01 00 	leaq	98902(%rip), %rdi ## Objc cfstring ref: @"original dict:%@ and address:%p"
1000033d2:	4c 89 e6 	movq	%r12, %rsi
1000033d5:	4c 89 e2 	movq	%r12, %rdx
1000033d8:	e8 35 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000033dd:	31 c0 	xorl	%eax, %eax
1000033df:	48 8d 3d 62 82 01 00 	leaq	98914(%rip), %rdi ## Objc cfstring ref: @"dict by copy:%@ and address:%p"
1000033e6:	4c 8b 75 d0 	movq	-48(%rbp), %r14
1000033ea:	4c 89 f6 	movq	%r14, %rsi
1000033ed:	4c 89 f2 	movq	%r14, %rdx
1000033f0:	e8 1d 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000033f5:	31 c0 	xorl	%eax, %eax
1000033f7:	48 8d 3d 6a 82 01 00 	leaq	98922(%rip), %rdi ## Objc cfstring ref: @"dict by mutableCopy:%@ and address:%p"
1000033fe:	4c 89 fe 	movq	%r15, %rsi
100003401:	4c 89 fa 	movq	%r15, %rdx
100003404:	e8 09 08 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003409:	48 8b 05 88 e4 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rax
100003410:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100003414:	31 c0 	xorl	%eax, %eax
100003416:	48 8d 3d 6b 82 01 00 	leaq	98923(%rip), %rdi ## Objc cfstring ref: @"property dict by copy:%@ and address:%p"
10000341d:	48 89 f2 	movq	%rsi, %rdx
100003420:	e8 ed 07 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003425:	48 8b 05 74 e4 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rax
10000342c:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100003430:	31 c0 	xorl	%eax, %eax
100003432:	48 8d 3d 6f 82 01 00 	leaq	98927(%rip), %rdi ## Objc cfstring ref: @"property dict by strong:%@ and address:%p"
100003439:	48 89 f2 	movq	%rsi, %rdx
10000343c:	e8 d1 07 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003441:	48 8b 1d 28 6c 01 00 	movq	93224(%rip), %rbx ## literal pool symbol address: _objc_release
100003448:	4c 89 ef 	movq	%r13, %rdi
10000344b:	ff d3 	callq	*%rbx
10000344d:	4c 89 ff 	movq	%r15, %rdi
100003450:	ff d3 	callq	*%rbx
100003452:	4c 89 f7 	movq	%r14, %rdi
100003455:	ff d3 	callq	*%rbx
100003457:	4c 89 e7 	movq	%r12, %rdi
10000345a:	ff d3 	callq	*%rbx
10000345c:	48 8b 7d c8 	movq	-56(%rbp), %rdi
100003460:	48 89 d8 	movq	%rbx, %rax
100003463:	48 83 c4 18 	addq	$24, %rsp
100003467:	5b 	popq	%rbx
100003468:	41 5c 	popq	%r12
10000346a:	41 5d 	popq	%r13
10000346c:	41 5e 	popq	%r14
10000346e:	41 5f 	popq	%r15
100003470:	5d 	popq	%rbp
100003471:	ff e0 	jmpq	*%rax
-[CopyUsage pCopyStr]:
100003473:	55 	pushq	%rbp
100003474:	48 89 e5 	movq	%rsp, %rbp
100003477:	48 8b 15 fa e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyStr(%rip), %rdx
10000347e:	31 c9 	xorl	%ecx, %ecx
100003480:	5d 	popq	%rbp
100003481:	e9 24 09 01 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
-[CopyUsage setPCopyStr:]:
100003486:	55 	pushq	%rbp
100003487:	48 89 e5 	movq	%rsp, %rbp
10000348a:	48 8b 0d e7 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyStr(%rip), %rcx
100003491:	5d 	popq	%rbp
100003492:	e9 55 09 01 00 	jmp	0x100013dec ## symbol stub for: _objc_setProperty_nonatomic_copy
-[CopyUsage pStrongStr]:
100003497:	55 	pushq	%rbp
100003498:	48 89 e5 	movq	%rsp, %rbp
10000349b:	48 8b 05 de e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongStr(%rip), %rax
1000034a2:	48 8b 04 07 	movq	(%rdi,%rax), %rax
1000034a6:	5d 	popq	%rbp
1000034a7:	c3 	retq
-[CopyUsage setPStrongStr:]:
1000034a8:	55 	pushq	%rbp
1000034a9:	48 89 e5 	movq	%rsp, %rbp
1000034ac:	48 03 3d cd e3 01 00 	addq	_OBJC_IVAR_$_CopyUsage._pStrongStr(%rip), %rdi
1000034b3:	48 89 d6 	movq	%rdx, %rsi
1000034b6:	5d 	popq	%rbp
1000034b7:	e9 36 09 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[CopyUsage pCopyArray]:
1000034bc:	55 	pushq	%rbp
1000034bd:	48 89 e5 	movq	%rsp, %rbp
1000034c0:	48 8b 15 c1 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rdx
1000034c7:	31 c9 	xorl	%ecx, %ecx
1000034c9:	5d 	popq	%rbp
1000034ca:	e9 db 08 01 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
-[CopyUsage setPCopyArray:]:
1000034cf:	55 	pushq	%rbp
1000034d0:	48 89 e5 	movq	%rsp, %rbp
1000034d3:	48 8b 0d ae e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rcx
1000034da:	5d 	popq	%rbp
1000034db:	e9 0c 09 01 00 	jmp	0x100013dec ## symbol stub for: _objc_setProperty_nonatomic_copy
-[CopyUsage pStrongArray]:
1000034e0:	55 	pushq	%rbp
1000034e1:	48 89 e5 	movq	%rsp, %rbp
1000034e4:	48 8b 05 a5 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rax
1000034eb:	48 8b 04 07 	movq	(%rdi,%rax), %rax
1000034ef:	5d 	popq	%rbp
1000034f0:	c3 	retq
-[CopyUsage setPStrongArray:]:
1000034f1:	55 	pushq	%rbp
1000034f2:	48 89 e5 	movq	%rsp, %rbp
1000034f5:	48 03 3d 94 e3 01 00 	addq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rdi
1000034fc:	48 89 d6 	movq	%rdx, %rsi
1000034ff:	5d 	popq	%rbp
100003500:	e9 ed 08 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[CopyUsage pCopyDict]:
100003505:	55 	pushq	%rbp
100003506:	48 89 e5 	movq	%rsp, %rbp
100003509:	48 8b 15 88 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rdx
100003510:	31 c9 	xorl	%ecx, %ecx
100003512:	5d 	popq	%rbp
100003513:	e9 92 08 01 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
-[CopyUsage setPCopyDict:]:
100003518:	55 	pushq	%rbp
100003519:	48 89 e5 	movq	%rsp, %rbp
10000351c:	48 8b 0d 75 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rcx
100003523:	5d 	popq	%rbp
100003524:	e9 c3 08 01 00 	jmp	0x100013dec ## symbol stub for: _objc_setProperty_nonatomic_copy
-[CopyUsage pStrongDict]:
100003529:	55 	pushq	%rbp
10000352a:	48 89 e5 	movq	%rsp, %rbp
10000352d:	48 8b 05 6c e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rax
100003534:	48 8b 04 07 	movq	(%rdi,%rax), %rax
100003538:	5d 	popq	%rbp
100003539:	c3 	retq
-[CopyUsage setPStrongDict:]:
10000353a:	55 	pushq	%rbp
10000353b:	48 89 e5 	movq	%rsp, %rbp
10000353e:	48 03 3d 5b e3 01 00 	addq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rdi
100003545:	48 89 d6 	movq	%rdx, %rsi
100003548:	5d 	popq	%rbp
100003549:	e9 a4 08 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[CopyUsage .cxx_destruct]:
10000354e:	55 	pushq	%rbp
10000354f:	48 89 e5 	movq	%rsp, %rbp
100003552:	53 	pushq	%rbx
100003553:	50 	pushq	%rax
100003554:	48 89 fb 	movq	%rdi, %rbx
100003557:	48 8b 3d 42 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongDict(%rip), %rdi
10000355e:	48 01 df 	addq	%rbx, %rdi
100003561:	31 f6 	xorl	%esi, %esi
100003563:	e8 8a 08 01 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100003568:	48 8b 3d 29 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyDict(%rip), %rdi
10000356f:	48 01 df 	addq	%rbx, %rdi
100003572:	31 f6 	xorl	%esi, %esi
100003574:	e8 79 08 01 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100003579:	48 8b 3d 10 e3 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongArray(%rip), %rdi
100003580:	48 01 df 	addq	%rbx, %rdi
100003583:	31 f6 	xorl	%esi, %esi
100003585:	e8 68 08 01 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000358a:	48 8b 3d f7 e2 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pCopyArray(%rip), %rdi
100003591:	48 01 df 	addq	%rbx, %rdi
100003594:	31 f6 	xorl	%esi, %esi
100003596:	e8 57 08 01 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000359b:	48 8b 3d de e2 01 00 	movq	_OBJC_IVAR_$_CopyUsage._pStrongStr(%rip), %rdi
1000035a2:	48 01 df 	addq	%rbx, %rdi
1000035a5:	31 f6 	xorl	%esi, %esi
1000035a7:	e8 46 08 01 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000035ac:	48 03 1d c5 e2 01 00 	addq	_OBJC_IVAR_$_CopyUsage._pCopyStr(%rip), %rbx
1000035b3:	31 f6 	xorl	%esi, %esi
1000035b5:	48 89 df 	movq	%rbx, %rdi
1000035b8:	48 83 c4 08 	addq	$8, %rsp
1000035bc:	5b 	popq	%rbx
1000035bd:	5d 	popq	%rbp
1000035be:	e9 2f 08 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[TestObj name]:
1000035c3:	55 	pushq	%rbp
1000035c4:	48 89 e5 	movq	%rsp, %rbp
1000035c7:	48 8b 15 da e2 01 00 	movq	_OBJC_IVAR_$_TestObj._name(%rip), %rdx
1000035ce:	31 c9 	xorl	%ecx, %ecx
1000035d0:	5d 	popq	%rbp
1000035d1:	e9 d4 07 01 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
-[TestObj setName:]:
1000035d6:	55 	pushq	%rbp
1000035d7:	48 89 e5 	movq	%rsp, %rbp
1000035da:	48 8b 0d c7 e2 01 00 	movq	_OBJC_IVAR_$_TestObj._name(%rip), %rcx
1000035e1:	5d 	popq	%rbp
1000035e2:	e9 05 08 01 00 	jmp	0x100013dec ## symbol stub for: _objc_setProperty_nonatomic_copy
-[TestObj .cxx_destruct]:
1000035e7:	55 	pushq	%rbp
1000035e8:	48 89 e5 	movq	%rsp, %rbp
1000035eb:	48 03 3d b6 e2 01 00 	addq	_OBJC_IVAR_$_TestObj._name(%rip), %rdi
1000035f2:	31 f6 	xorl	%esi, %esi
1000035f4:	5d 	popq	%rbp
1000035f5:	e9 f8 07 01 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[DispatchExamnationTest init]:
1000035fa:	55 	pushq	%rbp
1000035fb:	48 89 e5 	movq	%rsp, %rbp
1000035fe:	41 56 	pushq	%r14
100003600:	53 	pushq	%rbx
100003601:	48 89 fb 	movq	%rdi, %rbx
100003604:	48 85 db 	testq	%rbx, %rbx
100003607:	74 21 	je	0x10000362a
100003609:	48 8b 35 70 d9 01 00 	movq	121200(%rip), %rsi ## Objc selector ref: testCurrentQueue
100003610:	4c 8b 35 51 6a 01 00 	movq	92753(%rip), %r14 ## Objc message: -[%rdi testCurrentQueue]
100003617:	48 89 df 	movq	%rbx, %rdi
10000361a:	41 ff d6 	callq	*%r14
10000361d:	48 8b 35 64 d9 01 00 	movq	121188(%rip), %rsi ## Objc selector ref: testCurrentQueue1
100003624:	48 89 df 	movq	%rbx, %rdi
100003627:	41 ff d6 	callq	*%r14
10000362a:	48 89 d8 	movq	%rbx, %rax
10000362d:	5b 	popq	%rbx
10000362e:	41 5e 	popq	%r14
100003630:	5d 	popq	%rbp
100003631:	c3 	retq
-[DispatchExamnationTest testCurrentQueue]:
100003632:	55 	pushq	%rbp
100003633:	48 89 e5 	movq	%rsp, %rbp
100003636:	41 56 	pushq	%r14
100003638:	53 	pushq	%rbx
100003639:	48 83 ec 30 	subq	$48, %rsp
10000363d:	49 89 fe 	movq	%rdi, %r14
100003640:	48 8d 3d d0 14 01 00 	leaq	70864(%rip), %rdi ## literal pool for: "com.hc.currentQueue.test"
100003647:	48 8b 35 02 6a 01 00 	movq	92674(%rip), %rsi ## literal pool symbol address: __dispatch_queue_attr_concurrent
10000364e:	e8 7f 06 01 00 	callq	0x100013cd2 ## symbol stub for: _dispatch_queue_create
100003653:	48 89 c3 	movq	%rax, %rbx
100003656:	48 8d 35 73 6e 01 00 	leaq	___block_literal_global(%rip), %rsi
10000365d:	48 89 df 	movq	%rbx, %rdi
100003660:	e8 31 06 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100003665:	48 8d 35 a4 6e 01 00 	leaq	___block_literal_global.6(%rip), %rsi
10000366c:	48 89 df 	movq	%rbx, %rdi
10000366f:	e8 22 06 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100003674:	48 8d 35 d5 6e 01 00 	leaq	___block_literal_global.10(%rip), %rsi
10000367b:	48 89 df 	movq	%rbx, %rdi
10000367e:	e8 67 06 01 00 	callq	0x100013cea ## symbol stub for: _dispatch_sync
100003683:	48 8d 3d 5e 81 01 00 	leaq	98654(%rip), %rdi ## Objc cfstring ref: @"%s:4"
10000368a:	48 8d 35 5f 15 01 00 	leaq	71007(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testCurrentQueue]"
100003691:	31 c0 	xorl	%eax, %eax
100003693:	e8 7a 05 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003698:	48 8d 35 f1 6e 01 00 	leaq	___block_literal_global.16(%rip), %rsi
10000369f:	48 89 df 	movq	%rbx, %rdi
1000036a2:	e8 ef 05 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000036a7:	48 8d 35 22 6f 01 00 	leaq	___block_literal_global.20(%rip), %rsi
1000036ae:	48 89 df 	movq	%rbx, %rdi
1000036b1:	e8 e0 05 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000036b6:	48 8d 35 53 6f 01 00 	leaq	___block_literal_global.24(%rip), %rsi
1000036bd:	48 89 df 	movq	%rbx, %rdi
1000036c0:	e8 d1 05 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000036c5:	48 8b 05 54 69 01 00 	movq	92500(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000036cc:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
1000036d0:	48 89 06 	movq	%rax, (%rsi)
1000036d3:	b8 00 00 00 c2 	movl	$3254779904, %eax
1000036d8:	48 89 46 08 	movq	%rax, 8(%rsi)
1000036dc:	48 8d 05 cf 00 00 00 	leaq	"___42-[DispatchExamnationTest testCurrentQueue]_block_invoke_7"(%rip), %rax
1000036e3:	48 89 46 10 	movq	%rax, 16(%rsi)
1000036e7:	48 8d 05 42 6f 01 00 	leaq	___block_descriptor_tmp.31(%rip), %rax
1000036ee:	48 89 46 18 	movq	%rax, 24(%rsi)
1000036f2:	4c 89 76 20 	movq	%r14, 32(%rsi)
1000036f6:	48 89 df 	movq	%rbx, %rdi
1000036f9:	e8 98 05 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000036fe:	48 89 df 	movq	%rbx, %rdi
100003701:	ff 15 69 69 01 00 	callq	*92521(%rip) ## literal pool symbol address: _objc_release
100003707:	48 83 c4 30 	addq	$48, %rsp
10000370b:	5b 	popq	%rbx
10000370c:	41 5e 	popq	%r14
10000370e:	5d 	popq	%rbp
10000370f:	c3 	retq
___42-[DispatchExamnationTest testCurrentQueue]_block_invoke:
100003710:	55 	pushq	%rbp
100003711:	48 89 e5 	movq	%rsp, %rbp
100003714:	48 8d 3d 6d 80 01 00 	leaq	98413(%rip), %rdi ## Objc cfstring ref: @"%s:1"
10000371b:	48 8d 35 13 14 01 00 	leaq	70675(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testCurrentQueue]_block_invoke"
100003722:	31 c0 	xorl	%eax, %eax
100003724:	e8 e9 04 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003729:	5d 	popq	%rbp
10000372a:	c3 	retq
___42-[DispatchExamnationTest testCurrentQueue]_block_invoke_2:
10000372b:	55 	pushq	%rbp
10000372c:	48 89 e5 	movq	%rsp, %rbp
10000372f:	48 8d 3d 72 80 01 00 	leaq	98418(%rip), %rdi ## Objc cfstring ref: @"%s:2"
100003736:	48 8d 35 35 14 01 00 	leaq	70709(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testCurrentQueue]_block_invoke_2"
10000373d:	31 c0 	xorl	%eax, %eax
10000373f:	e8 ce 04 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003744:	5d 	popq	%rbp
100003745:	c3 	retq
___42-[DispatchExamnationTest testCurrentQueue]_block_invoke_3:
100003746:	55 	pushq	%rbp
100003747:	48 89 e5 	movq	%rsp, %rbp
10000374a:	48 8d 3d 77 80 01 00 	leaq	98423(%rip), %rdi ## Objc cfstring ref: @"%s:3"
100003751:	48 8d 35 59 14 01 00 	leaq	70745(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testCurrentQueue]_block_invoke_3"
100003758:	31 c0 	xorl	%eax, %eax
10000375a:	e8 b3 04 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000375f:	5d 	popq	%rbp
100003760:	c3 	retq
___42-[DispatchExamnationTest testCurrentQueue]_block_invoke_4:
100003761:	55 	pushq	%rbp
100003762:	48 89 e5 	movq	%rsp, %rbp
100003765:	48 8d 3d 9c 80 01 00 	leaq	98460(%rip), %rdi ## Objc cfstring ref: @"%s:5"
10000376c:	48 8d 35 ad 14 01 00 	leaq	70829(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testCurrentQueue]_block_invoke_4"
100003773:	31 c0 	xorl	%eax, %eax
100003775:	e8 98 04 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000377a:	5d 	popq	%rbp
10000377b:	c3 	retq
___42-[DispatchExamnationTest testCurrentQueue]_block_invoke_5:
10000377c:	55 	pushq	%rbp
10000377d:	48 89 e5 	movq	%rsp, %rbp
100003780:	48 8d 3d a1 80 01 00 	leaq	98465(%rip), %rdi ## Objc cfstring ref: @"%s:6"
100003787:	48 8d 35 d1 14 01 00 	leaq	70865(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testCurrentQueue]_block_invoke_5"
10000378e:	31 c0 	xorl	%eax, %eax
100003790:	e8 7d 04 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003795:	5d 	popq	%rbp
100003796:	c3 	retq
___42-[DispatchExamnationTest testCurrentQueue]_block_invoke_6:
100003797:	55 	pushq	%rbp
100003798:	48 89 e5 	movq	%rsp, %rbp
10000379b:	48 8d 3d a6 80 01 00 	leaq	98470(%rip), %rdi ## Objc cfstring ref: @"%s:7"
1000037a2:	48 8d 35 f5 14 01 00 	leaq	70901(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testCurrentQueue]_block_invoke_6"
1000037a9:	31 c0 	xorl	%eax, %eax
1000037ab:	e8 62 04 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000037b0:	5d 	popq	%rbp
1000037b1:	c3 	retq
___42-[DispatchExamnationTest testCurrentQueue]_block_invoke_7:
1000037b2:	55 	pushq	%rbp
1000037b3:	48 89 e5 	movq	%rsp, %rbp
1000037b6:	48 8b 7f 20 	movq	32(%rdi), %rdi
1000037ba:	48 8b 15 cf d7 01 00 	movq	120783(%rip), %rdx ## Objc selector ref: testLog
1000037c1:	48 8b 35 d0 d7 01 00 	movq	120784(%rip), %rsi ## Objc selector ref: performSelector:withObject:afterDelay:
1000037c8:	31 c9 	xorl	%ecx, %ecx
1000037ca:	0f 57 c0 	xorps	%xmm0, %xmm0
1000037cd:	5d 	popq	%rbp
1000037ce:	ff 25 94 68 01 00 	jmpq	*92308(%rip) ## Objc message: -[%rdi performSelector:withObject:afterDelay:]
___copy_helper_block_:
1000037d4:	55 	pushq	%rbp
1000037d5:	48 89 e5 	movq	%rsp, %rbp
1000037d8:	48 8b 7e 20 	movq	32(%rsi), %rdi
1000037dc:	5d 	popq	%rbp
1000037dd:	ff 25 95 68 01 00 	jmpq	*92309(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_:
1000037e3:	55 	pushq	%rbp
1000037e4:	48 89 e5 	movq	%rsp, %rbp
1000037e7:	48 8b 7f 20 	movq	32(%rdi), %rdi
1000037eb:	5d 	popq	%rbp
1000037ec:	ff 25 7e 68 01 00 	jmpq	*92286(%rip) ## literal pool symbol address: _objc_release
-[DispatchExamnationTest testLog]:
1000037f2:	55 	pushq	%rbp
1000037f3:	48 89 e5 	movq	%rsp, %rbp
1000037f6:	48 8d 3d 6b 80 01 00 	leaq	98411(%rip), %rdi ## Objc cfstring ref: @"%s:8"
1000037fd:	48 8d 35 d9 14 01 00 	leaq	70873(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testLog]"
100003804:	31 c0 	xorl	%eax, %eax
100003806:	e8 07 04 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000380b:	5d 	popq	%rbp
10000380c:	c3 	retq
-[DispatchExamnationTest testCurrentQueue1]:
10000380d:	55 	pushq	%rbp
10000380e:	48 89 e5 	movq	%rsp, %rbp
100003811:	41 57 	pushq	%r15
100003813:	41 56 	pushq	%r14
100003815:	41 55 	pushq	%r13
100003817:	41 54 	pushq	%r12
100003819:	53 	pushq	%rbx
10000381a:	48 83 ec 48 	subq	$72, %rsp
10000381e:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
100003822:	48 c7 01 00 00 00 00 	movq	$0, (%rcx)
100003829:	48 89 49 08 	movq	%rcx, 8(%rcx)
10000382d:	48 b8 00 00 00 20 20 00 00 00 	movabsq	$137975824384, %rax
100003837:	48 89 41 10 	movq	%rax, 16(%rcx)
10000383b:	c7 41 18 00 00 00 00 	movl	$0, 24(%rcx)
100003842:	4c 8d 3d ad 00 00 00 	leaq	"___43-[DispatchExamnationTest testCurrentQueue1]_block_invoke"(%rip), %r15
100003849:	4c 8d 25 10 6e 01 00 	leaq	___block_descriptor_tmp.40(%rip), %r12
100003850:	4c 8d 75 90 	leaq	-112(%rbp), %r14
100003854:	4c 8b 2d 15 68 01 00 	movq	92181(%rip), %r13 ## literal pool symbol address: _objc_release
10000385b:	31 ff 	xorl	%edi, %edi
10000385d:	31 f6 	xorl	%esi, %esi
10000385f:	e8 44 04 01 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100003864:	48 89 c7 	movq	%rax, %rdi
100003867:	e8 68 05 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000386c:	48 89 c3 	movq	%rax, %rbx
10000386f:	48 8b 05 aa 67 01 00 	movq	92074(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100003876:	48 89 45 90 	movq	%rax, -112(%rbp)
10000387a:	b8 00 00 00 c2 	movl	$3254779904, %eax
10000387f:	48 89 45 98 	movq	%rax, -104(%rbp)
100003883:	4c 89 7d a0 	movq	%r15, -96(%rbp)
100003887:	4c 89 65 a8 	movq	%r12, -88(%rbp)
10000388b:	48 8d 45 b8 	leaq	-72(%rbp), %rax
10000388f:	48 89 45 b0 	movq	%rax, -80(%rbp)
100003893:	48 89 df 	movq	%rbx, %rdi
100003896:	4c 89 f6 	movq	%r14, %rsi
100003899:	e8 f8 03 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
10000389e:	48 89 df 	movq	%rbx, %rdi
1000038a1:	41 ff d5 	callq	*%r13
1000038a4:	48 8b 45 c0 	movq	-64(%rbp), %rax
1000038a8:	8b 70 18 	movl	24(%rax), %esi
1000038ab:	83 fe 05 	cmpl	$5, %esi
1000038ae:	7c ab 	jl	0x10000385b
1000038b0:	48 8d 3d f1 7f 01 00 	leaq	98289(%rip), %rdi ## Objc cfstring ref: @"%d"
1000038b7:	31 c0 	xorl	%eax, %eax
1000038b9:	e8 54 03 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000038be:	48 8d 7d b8 	leaq	-72(%rbp), %rdi
1000038c2:	be 08 00 00 00 	movl	$8, %esi
1000038c7:	e8 70 03 01 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
1000038cc:	48 83 c4 48 	addq	$72, %rsp
1000038d0:	5b 	popq	%rbx
1000038d1:	41 5c 	popq	%r12
1000038d3:	41 5d 	popq	%r13
1000038d5:	41 5e 	popq	%r14
1000038d7:	41 5f 	popq	%r15
1000038d9:	5d 	popq	%rbp
1000038da:	c3 	retq
1000038db:	48 89 c3 	movq	%rax, %rbx
1000038de:	48 8d 7d b8 	leaq	-72(%rbp), %rdi
1000038e2:	be 08 00 00 00 	movl	$8, %esi
1000038e7:	e8 50 03 01 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
1000038ec:	48 89 df 	movq	%rbx, %rdi
1000038ef:	e8 4e 03 01 00 	callq	0x100013c42 ## symbol stub for: __Unwind_Resume
1000038f4:	0f 0b 	ud2
___43-[DispatchExamnationTest testCurrentQueue1]_block_invoke:
1000038f6:	55 	pushq	%rbp
1000038f7:	48 89 e5 	movq	%rsp, %rbp
1000038fa:	41 56 	pushq	%r14
1000038fc:	53 	pushq	%rbx
1000038fd:	48 8b 47 20 	movq	32(%rdi), %rax
100003901:	48 8b 40 08 	movq	8(%rax), %rax
100003905:	ff 40 18 	incl	24(%rax)
100003908:	48 8b 47 20 	movq	32(%rdi), %rax
10000390c:	48 8b 40 08 	movq	8(%rax), %rax
100003910:	44 8b 70 18 	movl	24(%rax), %r14d
100003914:	48 8b 3d 9d dd 01 00 	movq	122269(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
10000391b:	48 8b 35 7e d6 01 00 	movq	120446(%rip), %rsi ## Objc selector ref: currentThread
100003922:	ff 15 40 67 01 00 	callq	*91968(%rip) ## Objc message: +[NSThread currentThread]
100003928:	48 89 c7 	movq	%rax, %rdi
10000392b:	e8 a4 04 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003930:	48 89 c3 	movq	%rax, %rbx
100003933:	48 8d 3d 4e 7f 01 00 	leaq	98126(%rip), %rdi ## Objc cfstring ref: @"%d -- currentQueue -- %@"
10000393a:	31 c0 	xorl	%eax, %eax
10000393c:	44 89 f6 	movl	%r14d, %esi
10000393f:	48 89 da 	movq	%rbx, %rdx
100003942:	e8 cb 02 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003947:	48 89 df 	movq	%rbx, %rdi
10000394a:	5b 	popq	%rbx
10000394b:	41 5e 	popq	%r14
10000394d:	5d 	popq	%rbp
10000394e:	ff 25 1c 67 01 00 	jmpq	*91932(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_.38:
100003954:	55 	pushq	%rbp
100003955:	48 89 e5 	movq	%rsp, %rbp
100003958:	48 83 c7 20 	addq	$32, %rdi
10000395c:	48 8b 76 20 	movq	32(%rsi), %rsi
100003960:	ba 08 00 00 00 	movl	$8, %edx
100003965:	5d 	popq	%rbp
100003966:	e9 cb 02 01 00 	jmp	0x100013c36 ## symbol stub for: __Block_object_assign
___destroy_helper_block_.39:
10000396b:	55 	pushq	%rbp
10000396c:	48 89 e5 	movq	%rsp, %rbp
10000396f:	48 8b 7f 20 	movq	32(%rdi), %rdi
100003973:	be 08 00 00 00 	movl	$8, %esi
100003978:	5d 	popq	%rbp
100003979:	e9 be 02 01 00 	jmp	0x100013c3c ## symbol stub for: __Block_object_dispose
-[DispatchExamnationTest testSerialQueue]:
10000397e:	55 	pushq	%rbp
10000397f:	48 89 e5 	movq	%rsp, %rbp
100003982:	41 57 	pushq	%r15
100003984:	41 56 	pushq	%r14
100003986:	53 	pushq	%rbx
100003987:	48 83 ec 28 	subq	$40, %rsp
10000398b:	48 8d 3d 89 13 01 00 	leaq	70537(%rip), %rdi ## literal pool for: "com.hc.serialQueue.test"
100003992:	31 f6 	xorl	%esi, %esi
100003994:	e8 39 03 01 00 	callq	0x100013cd2 ## symbol stub for: _dispatch_queue_create
100003999:	49 89 c7 	movq	%rax, %r15
10000399c:	48 8d 3d e5 7d 01 00 	leaq	97765(%rip), %rdi ## Objc cfstring ref: @"%s:1"
1000039a3:	4c 8d 35 89 13 01 00 	leaq	70537(%rip), %r14 ## literal pool for: "-[DispatchExamnationTest testSerialQueue]"
1000039aa:	31 c0 	xorl	%eax, %eax
1000039ac:	4c 89 f6 	movq	%r14, %rsi
1000039af:	e8 5e 02 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000039b4:	48 8b 05 65 66 01 00 	movq	91749(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000039bb:	48 8d 5d c0 	leaq	-64(%rbp), %rbx
1000039bf:	48 89 03 	movq	%rax, (%rbx)
1000039c2:	b8 00 00 00 c2 	movl	$3254779904, %eax
1000039c7:	48 89 43 08 	movq	%rax, 8(%rbx)
1000039cb:	48 8d 05 58 00 00 00 	leaq	"___41-[DispatchExamnationTest testSerialQueue]_block_invoke"(%rip), %rax
1000039d2:	48 89 43 10 	movq	%rax, 16(%rbx)
1000039d6:	48 8d 05 f3 6c 01 00 	leaq	___block_descriptor_tmp.48(%rip), %rax
1000039dd:	48 89 43 18 	movq	%rax, 24(%rbx)
1000039e1:	4c 89 7b 20 	movq	%r15, 32(%rbx)
1000039e5:	4c 89 ff 	movq	%r15, %rdi
1000039e8:	ff 15 8a 66 01 00 	callq	*91786(%rip) ## literal pool symbol address: _objc_retain
1000039ee:	49 89 c7 	movq	%rax, %r15
1000039f1:	4c 89 ff 	movq	%r15, %rdi
1000039f4:	48 89 de 	movq	%rbx, %rsi
1000039f7:	e8 9a 02 01 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000039fc:	48 8d 3d 05 7e 01 00 	leaq	97797(%rip), %rdi ## Objc cfstring ref: @"%s:5"
100003a03:	31 c0 	xorl	%eax, %eax
100003a05:	4c 89 f6 	movq	%r14, %rsi
100003a08:	e8 05 02 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003a0d:	48 8b 7b 20 	movq	32(%rbx), %rdi
100003a11:	48 8b 1d 58 66 01 00 	movq	91736(%rip), %rbx ## literal pool symbol address: _objc_release
100003a18:	ff d3 	callq	*%rbx
100003a1a:	4c 89 ff 	movq	%r15, %rdi
100003a1d:	ff d3 	callq	*%rbx
100003a1f:	48 83 c4 28 	addq	$40, %rsp
100003a23:	5b 	popq	%rbx
100003a24:	41 5e 	popq	%r14
100003a26:	41 5f 	popq	%r15
100003a28:	5d 	popq	%rbp
100003a29:	c3 	retq
___41-[DispatchExamnationTest testSerialQueue]_block_invoke:
100003a2a:	55 	pushq	%rbp
100003a2b:	48 89 e5 	movq	%rsp, %rbp
100003a2e:	41 56 	pushq	%r14
100003a30:	53 	pushq	%rbx
100003a31:	48 89 fb 	movq	%rdi, %rbx
100003a34:	48 8d 3d 6d 7d 01 00 	leaq	97645(%rip), %rdi ## Objc cfstring ref: @"%s:2"
100003a3b:	4c 8d 35 1b 13 01 00 	leaq	70427(%rip), %r14 ## literal pool for: "-[DispatchExamnationTest testSerialQueue]_block_invoke"
100003a42:	31 c0 	xorl	%eax, %eax
100003a44:	4c 89 f6 	movq	%r14, %rsi
100003a47:	e8 c6 01 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003a4c:	48 8b 7b 20 	movq	32(%rbx), %rdi
100003a50:	48 8d 35 59 6c 01 00 	leaq	___block_literal_global.45(%rip), %rsi
100003a57:	e8 8e 02 01 00 	callq	0x100013cea ## symbol stub for: _dispatch_sync
100003a5c:	48 8d 3d 85 7d 01 00 	leaq	97669(%rip), %rdi ## Objc cfstring ref: @"%s:4"
100003a63:	31 c0 	xorl	%eax, %eax
100003a65:	4c 89 f6 	movq	%r14, %rsi
100003a68:	e8 a5 01 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003a6d:	5b 	popq	%rbx
100003a6e:	41 5e 	popq	%r14
100003a70:	5d 	popq	%rbp
100003a71:	c3 	retq
___41-[DispatchExamnationTest testSerialQueue]_block_invoke_2:
100003a72:	55 	pushq	%rbp
100003a73:	48 89 e5 	movq	%rsp, %rbp
100003a76:	48 8d 3d 4b 7d 01 00 	leaq	97611(%rip), %rdi ## Objc cfstring ref: @"%s:3"
100003a7d:	48 8d 35 10 13 01 00 	leaq	70416(%rip), %rsi ## literal pool for: "-[DispatchExamnationTest testSerialQueue]_block_invoke_2"
100003a84:	31 c0 	xorl	%eax, %eax
100003a86:	e8 87 01 01 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003a8b:	5d 	popq	%rbp
100003a8c:	c3 	retq
___copy_helper_block_.46:
100003a8d:	55 	pushq	%rbp
100003a8e:	48 89 e5 	movq	%rsp, %rbp
100003a91:	48 8b 7e 20 	movq	32(%rsi), %rdi
100003a95:	5d 	popq	%rbp
100003a96:	ff 25 dc 65 01 00 	jmpq	*91612(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.47:
100003a9c:	55 	pushq	%rbp
100003a9d:	48 89 e5 	movq	%rsp, %rbp
100003aa0:	48 8b 7f 20 	movq	32(%rdi), %rdi
100003aa4:	5d 	popq	%rbp
100003aa5:	ff 25 c5 65 01 00 	jmpq	*91589(%rip) ## literal pool symbol address: _objc_release
-[TestTaggedPointer init]:
100003aab:	55 	pushq	%rbp
100003aac:	48 89 e5 	movq	%rsp, %rbp
100003aaf:	41 56 	pushq	%r14
100003ab1:	53 	pushq	%rbx
100003ab2:	48 83 ec 10 	subq	$16, %rsp
100003ab6:	48 8d 45 e0 	leaq	-32(%rbp), %rax
100003aba:	48 89 38 	movq	%rdi, (%rax)
100003abd:	48 8b 0d 34 dd 01 00 	movq	122164(%rip), %rcx ## Objc class ref: TestTaggedPointer
100003ac4:	48 89 48 08 	movq	%rcx, 8(%rax)
100003ac8:	48 8b 35 99 d3 01 00 	movq	119705(%rip), %rsi ## Objc selector ref: init
100003acf:	48 89 c7 	movq	%rax, %rdi
100003ad2:	e8 e5 02 01 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100003ad7:	48 89 c3 	movq	%rax, %rbx
100003ada:	48 85 db 	testq	%rbx, %rbx
100003add:	74 21 	je	0x100003b00
100003adf:	48 8b 35 c2 d4 01 00 	movq	120002(%rip), %rsi ## Objc selector ref: numberTest
100003ae6:	4c 8b 35 7b 65 01 00 	movq	91515(%rip), %r14 ## Objc message: -[%rdi numberTest]
100003aed:	48 89 df 	movq	%rbx, %rdi
100003af0:	41 ff d6 	callq	*%r14
100003af3:	48 8b 35 b6 d4 01 00 	movq	119990(%rip), %rsi ## Objc selector ref: dateTest
100003afa:	48 89 df 	movq	%rbx, %rdi
100003afd:	41 ff d6 	callq	*%r14
100003b00:	48 89 d8 	movq	%rbx, %rax
100003b03:	48 83 c4 10 	addq	$16, %rsp
100003b07:	5b 	popq	%rbx
100003b08:	41 5e 	popq	%r14
100003b0a:	5d 	popq	%rbp
100003b0b:	c3 	retq
-[TestTaggedPointer stringTaggedPointerTest]:
100003b0c:	55 	pushq	%rbp
100003b0d:	48 89 e5 	movq	%rsp, %rbp
100003b10:	41 57 	pushq	%r15
100003b12:	41 56 	pushq	%r14
100003b14:	41 55 	pushq	%r13
100003b16:	41 54 	pushq	%r12
100003b18:	53 	pushq	%rbx
100003b19:	48 83 ec 28 	subq	$40, %rsp
100003b1d:	49 89 fd 	movq	%rdi, %r13
100003b20:	4c 8b 3d 91 d4 01 00 	movq	119953(%rip), %r15 ## Objc selector ref: formatedLogObject:
100003b27:	4c 8d 35 9a 7d 01 00 	leaq	97690(%rip), %r14 ## Objc cfstring ref: @"11111111111"
100003b2e:	4c 8b 25 33 65 01 00 	movq	91443(%rip), %r12 ## Objc message: -[%rdi formatedLogObject:]
100003b35:	4c 89 fe 	movq	%r15, %rsi
100003b38:	4c 89 f2 	movq	%r14, %rdx
100003b3b:	41 ff d4 	callq	*%r12
100003b3e:	48 8b 3d 7b db 01 00 	movq	121723(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
100003b45:	48 8b 35 74 d4 01 00 	movq	119924(%rip), %rsi ## Objc selector ref: stringWithFormat:
100003b4c:	48 8d 15 95 7d 01 00 	leaq	97685(%rip), %rdx ## Objc cfstring ref: @"%@"
100003b53:	31 c0 	xorl	%eax, %eax
100003b55:	4c 89 f1 	movq	%r14, %rcx
100003b58:	41 ff d4 	callq	*%r12
100003b5b:	48 89 c7 	movq	%rax, %rdi
100003b5e:	e8 71 02 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003b63:	48 89 c3 	movq	%rax, %rbx
100003b66:	4c 89 ef 	movq	%r13, %rdi
100003b69:	4c 89 fe 	movq	%r15, %rsi
100003b6c:	48 89 da 	movq	%rbx, %rdx
100003b6f:	41 ff d4 	callq	*%r12
100003b72:	48 8b 3d 47 db 01 00 	movq	121671(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
100003b79:	48 8b 35 48 d4 01 00 	movq	119880(%rip), %rsi ## Objc selector ref: stringWithString:
100003b80:	48 8d 15 81 7d 01 00 	leaq	97665(%rip), %rdx ## Objc cfstring ref: @"2222"
100003b87:	41 ff d4 	callq	*%r12
100003b8a:	48 89 c7 	movq	%rax, %rdi
100003b8d:	e8 42 02 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003b92:	48 89 45 d0 	movq	%rax, -48(%rbp)
100003b96:	4c 89 6d b8 	movq	%r13, -72(%rbp)
100003b9a:	4c 89 ef 	movq	%r13, %rdi
100003b9d:	4c 89 fe 	movq	%r15, %rsi
100003ba0:	48 89 5d c8 	movq	%rbx, -56(%rbp)
100003ba4:	48 89 da 	movq	%rbx, %rdx
100003ba7:	41 ff d4 	callq	*%r12
100003baa:	48 8b 3d cf da 01 00 	movq	121551(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableString
100003bb1:	48 8b 35 18 d4 01 00 	movq	119832(%rip), %rsi ## Objc selector ref: string
100003bb8:	41 ff d4 	callq	*%r12
100003bbb:	48 89 c7 	movq	%rax, %rdi
100003bbe:	e8 11 02 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003bc3:	49 89 c4 	movq	%rax, %r12
100003bc6:	48 8b 05 0b d4 01 00 	movq	119819(%rip), %rax ## Objc selector ref: appendFormat:
100003bcd:	48 89 45 c0 	movq	%rax, -64(%rbp)
100003bd1:	4c 8b 3d 40 d3 01 00 	movq	119616(%rip), %r15 ## Objc selector ref: copy
100003bd8:	45 31 ed 	xorl	%r13d, %r13d
100003bdb:	b9 79 00 00 00 	movl	$121, %ecx
100003be0:	31 c0 	xorl	%eax, %eax
100003be2:	4c 89 e7 	movq	%r12, %rdi
100003be5:	48 8b 75 c0 	movq	-64(%rbp), %rsi
100003be9:	48 8d 15 38 7d 01 00 	leaq	97592(%rip), %rdx ## Objc cfstring ref: @"%c"
100003bf0:	48 8b 1d 71 64 01 00 	movq	91249(%rip), %rbx ## Objc message: +[NSMutableString copy]
100003bf7:	ff d3 	callq	*%rbx
100003bf9:	4c 89 e7 	movq	%r12, %rdi
100003bfc:	4c 89 fe 	movq	%r15, %rsi
100003bff:	ff d3 	callq	*%rbx
100003c01:	49 89 c6 	movq	%rax, %r14
100003c04:	4c 89 ef 	movq	%r13, %rdi
100003c07:	ff 15 63 64 01 00 	callq	*91235(%rip) ## literal pool symbol address: _objc_release
100003c0d:	4c 89 f7 	movq	%r14, %rdi
100003c10:	e8 fb 01 01 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
100003c15:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100003c19:	48 8b 35 98 d3 01 00 	movq	119704(%rip), %rsi ## Objc selector ref: formatedLogObject:
100003c20:	4c 89 f2 	movq	%r14, %rdx
100003c23:	ff d3 	callq	*%rbx
100003c25:	4d 89 f5 	movq	%r14, %r13
100003c28:	4d 85 f6 	testq	%r14, %r14
100003c2b:	78 ae 	js	0x100003bdb
100003c2d:	4c 89 f7 	movq	%r14, %rdi
100003c30:	48 8b 05 39 64 01 00 	movq	91193(%rip), %rax ## literal pool symbol address: _objc_release
100003c37:	48 89 c3 	movq	%rax, %rbx
100003c3a:	ff d3 	callq	*%rbx
100003c3c:	4c 89 e7 	movq	%r12, %rdi
100003c3f:	ff d3 	callq	*%rbx
100003c41:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100003c45:	ff d3 	callq	*%rbx
100003c47:	48 8b 7d c8 	movq	-56(%rbp), %rdi
100003c4b:	48 89 d8 	movq	%rbx, %rax
100003c4e:	48 83 c4 28 	addq	$40, %rsp
100003c52:	5b 	popq	%rbx
100003c53:	41 5c 	popq	%r12
100003c55:	41 5d 	popq	%r13
100003c57:	41 5e 	popq	%r14
100003c59:	41 5f 	popq	%r15
100003c5b:	5d 	popq	%rbp
100003c5c:	ff e0 	jmpq	*%rax
-[TestTaggedPointer numberTest]:
100003c5e:	55 	pushq	%rbp
100003c5f:	48 89 e5 	movq	%rsp, %rbp
100003c62:	41 57 	pushq	%r15
100003c64:	41 56 	pushq	%r14
100003c66:	41 55 	pushq	%r13
100003c68:	41 54 	pushq	%r12
100003c6a:	53 	pushq	%rbx
100003c6b:	48 83 ec 28 	subq	$40, %rsp
100003c6f:	48 89 7d b8 	movq	%rdi, -72(%rbp)
100003c73:	48 8b 3d 4e da 01 00 	movq	121422(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
100003c7a:	48 8b 35 5f d3 01 00 	movq	119647(%rip), %rsi ## Objc selector ref: numberWithInt:
100003c81:	4c 8b 3d e0 63 01 00 	movq	91104(%rip), %r15 ## Objc message: +[NSNumber numberWithInt:]
100003c88:	ba 7b 00 00 00 	movl	$123, %edx
100003c8d:	41 ff d7 	callq	*%r15
100003c90:	48 89 c7 	movq	%rax, %rdi
100003c93:	e8 3c 01 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003c98:	49 89 c4 	movq	%rax, %r12
100003c9b:	4c 89 e7 	movq	%r12, %rdi
100003c9e:	e8 57 ff 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
100003ca3:	48 89 c1 	movq	%rax, %rcx
100003ca6:	48 8d 3d 9b 7c 01 00 	leaq	97435(%rip), %rdi ## Objc cfstring ref: @"aNumber retainCount = %ld"
100003cad:	31 db 	xorl	%ebx, %ebx
100003caf:	31 c0 	xorl	%eax, %eax
100003cb1:	48 89 ce 	movq	%rcx, %rsi
100003cb4:	e8 59 ff 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003cb9:	48 8b 3d e0 d9 01 00 	movq	121312(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
100003cc0:	48 8b 35 21 d3 01 00 	movq	119585(%rip), %rsi ## Objc selector ref: array
100003cc7:	41 ff d7 	callq	*%r15
100003cca:	48 89 c7 	movq	%rax, %rdi
100003ccd:	e8 02 01 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003cd2:	49 89 c5 	movq	%rax, %r13
100003cd5:	4c 8b 35 7c d2 01 00 	movq	119420(%rip), %r14 ## Objc selector ref: addObject:
100003cdc:	4c 89 ef 	movq	%r13, %rdi
100003cdf:	4c 89 f6 	movq	%r14, %rsi
100003ce2:	4c 89 e2 	movq	%r12, %rdx
100003ce5:	41 ff d7 	callq	*%r15
100003ce8:	4c 89 6d d0 	movq	%r13, -48(%rbp)
100003cec:	4c 89 ef 	movq	%r13, %rdi
100003cef:	4c 89 f6 	movq	%r14, %rsi
100003cf2:	4c 89 e2 	movq	%r12, %rdx
100003cf5:	41 ff d7 	callq	*%r15
100003cf8:	4c 89 65 c8 	movq	%r12, -56(%rbp)
100003cfc:	4c 89 e7 	movq	%r12, %rdi
100003cff:	e8 f6 fe 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
100003d04:	48 89 c1 	movq	%rax, %rcx
100003d07:	48 8d 3d 5a 7c 01 00 	leaq	97370(%rip), %rdi ## Objc cfstring ref: @"aNumber retainCount after added to array = %ld"
100003d0e:	31 c0 	xorl	%eax, %eax
100003d10:	48 89 ce 	movq	%rcx, %rsi
100003d13:	e8 fa fe 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003d18:	48 8b 05 d1 d2 01 00 	movq	119505(%rip), %rax ## Objc selector ref: numberWithLong:
100003d1f:	48 89 45 c0 	movq	%rax, -64(%rbp)
100003d23:	41 bf 01 00 00 00 	movl	$1, %r15d
100003d29:	4c 8b 35 88 d2 01 00 	movq	119432(%rip), %r14 ## Objc selector ref: formatedLogObject:
100003d30:	48 8b 3d 91 d9 01 00 	movq	121233(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
100003d37:	ba 01 00 00 00 	movl	$1, %edx
100003d3c:	44 89 f9 	movl	%r15d, %ecx
100003d3f:	48 d3 e2 	shlq	%cl, %rdx
100003d42:	48 ff ca 	decq	%rdx
100003d45:	48 8b 75 c0 	movq	-64(%rbp), %rsi
100003d49:	4c 8b 2d 18 63 01 00 	movq	90904(%rip), %r13 ## Objc message: +[NSNumber formatedLogObject:]
100003d50:	41 ff d5 	callq	*%r13
100003d53:	48 89 c7 	movq	%rax, %rdi
100003d56:	e8 79 00 01 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003d5b:	49 89 c4 	movq	%rax, %r12
100003d5e:	48 89 df 	movq	%rbx, %rdi
100003d61:	ff 15 09 63 01 00 	callq	*90889(%rip) ## literal pool symbol address: _objc_release
100003d67:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100003d6b:	4c 89 f6 	movq	%r14, %rsi
100003d6e:	4c 89 e2 	movq	%r12, %rdx
100003d71:	41 ff d5 	callq	*%r13
100003d74:	49 ff c7 	incq	%r15
100003d77:	4c 89 e3 	movq	%r12, %rbx
100003d7a:	4d 85 e4 	testq	%r12, %r12
100003d7d:	78 b1 	js	0x100003d30
100003d7f:	4c 89 e7 	movq	%r12, %rdi
100003d82:	48 8b 05 e7 62 01 00 	movq	90855(%rip), %rax ## literal pool symbol address: _objc_release
100003d89:	48 89 c3 	movq	%rax, %rbx
100003d8c:	ff d3 	callq	*%rbx
100003d8e:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100003d92:	ff d3 	callq	*%rbx
100003d94:	48 8b 7d c8 	movq	-56(%rbp), %rdi
100003d98:	48 89 d8 	movq	%rbx, %rax
100003d9b:	48 83 c4 28 	addq	$40, %rsp
100003d9f:	5b 	popq	%rbx
100003da0:	41 5c 	popq	%r12
100003da2:	41 5d 	popq	%r13
100003da4:	41 5e 	popq	%r14
100003da6:	41 5f 	popq	%r15
100003da8:	5d 	popq	%rbp
100003da9:	ff e0 	jmpq	*%rax
-[TestTaggedPointer dateTest]:
100003dab:	55 	pushq	%rbp
100003dac:	48 89 e5 	movq	%rsp, %rbp
100003daf:	41 57 	pushq	%r15
100003db1:	41 56 	pushq	%r14
100003db3:	41 55 	pushq	%r13
100003db5:	41 54 	pushq	%r12
100003db7:	53 	pushq	%rbx
100003db8:	50 	pushq	%rax
100003db9:	49 89 fe 	movq	%rdi, %r14
100003dbc:	48 8b 3d 0d d9 01 00 	movq	121101(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDate
100003dc3:	48 8b 35 2e d2 01 00 	movq	119342(%rip), %rsi ## Objc selector ref: date
100003dca:	ff 15 98 62 01 00 	callq	*90776(%rip) ## Objc message: +[NSDate date]
100003dd0:	48 89 c7 	movq	%rax, %rdi
100003dd3:	e8 fc ff 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003dd8:	48 89 c3 	movq	%rax, %rbx
100003ddb:	4c 8b 3d d6 d1 01 00 	movq	119254(%rip), %r15 ## Objc selector ref: formatedLogObject:
100003de2:	41 bd 64 00 00 00 	movl	$100, %r13d
100003de8:	4c 8b 25 09 d2 01 00 	movq	119305(%rip), %r12 ## Objc selector ref: date
100003def:	eb 1e 	jmp	0x100003e0f
100003df1:	48 89 df 	movq	%rbx, %rdi
100003df4:	e8 01 fe 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
100003df9:	48 89 c1 	movq	%rax, %rcx
100003dfc:	31 c0 	xorl	%eax, %eax
100003dfe:	48 8d 3d 83 7b 01 00 	leaq	97155(%rip), %rdi ## Objc cfstring ref: @"date retainCount = %ld"
100003e05:	48 89 ce 	movq	%rcx, %rsi
100003e08:	e8 05 fe 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003e0d:	eb 14 	jmp	0x100003e23
100003e0f:	4c 89 f7 	movq	%r14, %rdi
100003e12:	4c 89 fe 	movq	%r15, %rsi
100003e15:	48 89 da 	movq	%rbx, %rdx
100003e18:	ff 15 4a 62 01 00 	callq	*90698(%rip) ## Objc message: -[%rdi date]
100003e1e:	48 85 db 	testq	%rbx, %rbx
100003e21:	78 ce 	js	0x100003df1
100003e23:	48 89 df 	movq	%rbx, %rdi
100003e26:	ff 15 44 62 01 00 	callq	*90692(%rip) ## literal pool symbol address: _objc_release
100003e2c:	48 8b 3d 9d d8 01 00 	movq	120989(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDate
100003e33:	4c 89 e6 	movq	%r12, %rsi
100003e36:	ff 15 2c 62 01 00 	callq	*90668(%rip) ## Objc message: +[NSDate date]
100003e3c:	48 89 c7 	movq	%rax, %rdi
100003e3f:	e8 90 ff 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003e44:	48 89 c3 	movq	%rax, %rbx
100003e47:	49 ff cd 	decq	%r13
100003e4a:	75 c3 	jne	0x100003e0f
100003e4c:	48 89 df 	movq	%rbx, %rdi
100003e4f:	e8 a6 fd 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
100003e54:	48 89 c1 	movq	%rax, %rcx
100003e57:	48 8d 3d 4a 7b 01 00 	leaq	97098(%rip), %rdi ## Objc cfstring ref: @"today retainCount = %ld"
100003e5e:	31 c0 	xorl	%eax, %eax
100003e60:	48 89 ce 	movq	%rcx, %rsi
100003e63:	e8 aa fd 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003e68:	48 8b 3d 31 d8 01 00 	movq	120881(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
100003e6f:	48 8b 35 72 d1 01 00 	movq	119154(%rip), %rsi ## Objc selector ref: array
100003e76:	48 8b 05 eb 61 01 00 	movq	90603(%rip), %rax ## Objc message: +[NSMutableArray array]
100003e7d:	49 89 c4 	movq	%rax, %r12
100003e80:	41 ff d4 	callq	*%r12
100003e83:	48 89 c7 	movq	%rax, %rdi
100003e86:	e8 49 ff 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100003e8b:	49 89 c6 	movq	%rax, %r14
100003e8e:	4c 8b 3d c3 d0 01 00 	movq	118979(%rip), %r15 ## Objc selector ref: addObject:
100003e95:	4c 89 f7 	movq	%r14, %rdi
100003e98:	4c 89 fe 	movq	%r15, %rsi
100003e9b:	48 89 da 	movq	%rbx, %rdx
100003e9e:	41 ff d4 	callq	*%r12
100003ea1:	4c 89 f7 	movq	%r14, %rdi
100003ea4:	4c 89 fe 	movq	%r15, %rsi
100003ea7:	48 89 da 	movq	%rbx, %rdx
100003eaa:	41 ff d4 	callq	*%r12
100003ead:	48 89 df 	movq	%rbx, %rdi
100003eb0:	e8 45 fd 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
100003eb5:	48 89 c1 	movq	%rax, %rcx
100003eb8:	48 8d 3d 09 7b 01 00 	leaq	97033(%rip), %rdi ## Objc cfstring ref: @"today retainCount after added to array = %ld"
100003ebf:	31 c0 	xorl	%eax, %eax
100003ec1:	48 89 ce 	movq	%rcx, %rsi
100003ec4:	e8 49 fd 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003ec9:	4c 89 f7 	movq	%r14, %rdi
100003ecc:	48 8b 05 9d 61 01 00 	movq	90525(%rip), %rax ## literal pool symbol address: _objc_release
100003ed3:	49 89 c6 	movq	%rax, %r14
100003ed6:	41 ff d6 	callq	*%r14
100003ed9:	48 89 df 	movq	%rbx, %rdi
100003edc:	4c 89 f0 	movq	%r14, %rax
100003edf:	48 83 c4 08 	addq	$8, %rsp
100003ee3:	5b 	popq	%rbx
100003ee4:	41 5c 	popq	%r12
100003ee6:	41 5d 	popq	%r13
100003ee8:	41 5e 	popq	%r14
100003eea:	41 5f 	popq	%r15
100003eec:	5d 	popq	%rbp
100003eed:	ff e0 	jmpq	*%rax
-[TestTaggedPointer formatedLogObject:]:
100003eef:	55 	pushq	%rbp
100003ef0:	48 89 e5 	movq	%rsp, %rbp
100003ef3:	53 	pushq	%rbx
100003ef4:	50 	pushq	%rax
100003ef5:	48 89 d7 	movq	%rdx, %rdi
100003ef8:	ff 15 7a 61 01 00 	callq	*90490(%rip) ## literal pool symbol address: _objc_retain
100003efe:	48 89 c3 	movq	%rax, %rbx
100003f01:	48 89 df 	movq	%rbx, %rdi
100003f04:	e8 07 ff 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
100003f09:	48 89 c1 	movq	%rax, %rcx
100003f0c:	48 8d 3d d5 7a 01 00 	leaq	96981(%rip), %rdi ## Objc cfstring ref: @"0x%6lx %@ %@"
100003f13:	31 c0 	xorl	%eax, %eax
100003f15:	48 89 de 	movq	%rbx, %rsi
100003f18:	48 89 da 	movq	%rbx, %rdx
100003f1b:	e8 f2 fc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003f20:	48 89 df 	movq	%rbx, %rdi
100003f23:	48 83 c4 08 	addq	$8, %rsp
100003f27:	5b 	popq	%rbx
100003f28:	5d 	popq	%rbp
100003f29:	ff 25 41 61 01 00 	jmpq	*90433(%rip) ## literal pool symbol address: _objc_release
-[ByteAlignmentTest init]:
100003f2f:	55 	pushq	%rbp
100003f30:	48 89 e5 	movq	%rsp, %rbp
100003f33:	53 	pushq	%rbx
100003f34:	48 83 ec 18 	subq	$24, %rsp
100003f38:	48 8d 45 e8 	leaq	-24(%rbp), %rax
100003f3c:	48 89 38 	movq	%rdi, (%rax)
100003f3f:	48 8b 0d ba d8 01 00 	movq	121018(%rip), %rcx ## Objc class ref: ByteAlignmentTest
100003f46:	48 89 48 08 	movq	%rcx, 8(%rax)
100003f4a:	48 8b 35 17 cf 01 00 	movq	118551(%rip), %rsi ## Objc selector ref: init
100003f51:	48 89 c7 	movq	%rax, %rdi
100003f54:	e8 63 fe 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100003f59:	48 89 c3 	movq	%rax, %rbx
100003f5c:	48 85 db 	testq	%rbx, %rbx
100003f5f:	74 10 	je	0x100003f71
100003f61:	48 8b 35 90 cf 01 00 	movq	118672(%rip), %rsi ## Objc selector ref: test
100003f68:	48 89 df 	movq	%rbx, %rdi
100003f6b:	ff 15 f7 60 01 00 	callq	*90359(%rip) ## Objc message: -[%rdi test]
100003f71:	48 89 d8 	movq	%rbx, %rax
100003f74:	48 83 c4 18 	addq	$24, %rsp
100003f78:	5b 	popq	%rbx
100003f79:	5d 	popq	%rbp
100003f7a:	c3 	retq
-[ByteAlignmentTest test]:
100003f7b:	55 	pushq	%rbp
100003f7c:	48 89 e5 	movq	%rsp, %rbp
100003f7f:	41 56 	pushq	%r14
100003f81:	53 	pushq	%rbx
100003f82:	48 89 fb 	movq	%rdi, %rbx
100003f85:	48 8d 3d 7c 7a 01 00 	leaq	96892(%rip), %rdi ## Objc cfstring ref: @"charSize = %zu"
100003f8c:	be 01 00 00 00 	movl	$1, %esi
100003f91:	31 c0 	xorl	%eax, %eax
100003f93:	e8 7a fc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003f98:	48 8d 3d 89 7a 01 00 	leaq	96905(%rip), %rdi ## Objc cfstring ref: @"shortSize = %zu"
100003f9f:	be 02 00 00 00 	movl	$2, %esi
100003fa4:	31 c0 	xorl	%eax, %eax
100003fa6:	e8 67 fc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003fab:	48 8d 3d 96 7a 01 00 	leaq	96918(%rip), %rdi ## Objc cfstring ref: @"intSize = %zu"
100003fb2:	be 04 00 00 00 	movl	$4, %esi
100003fb7:	31 c0 	xorl	%eax, %eax
100003fb9:	e8 54 fc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003fbe:	48 8d 3d a3 7a 01 00 	leaq	96931(%rip), %rdi ## Objc cfstring ref: @"floatSize = %zu"
100003fc5:	be 04 00 00 00 	movl	$4, %esi
100003fca:	31 c0 	xorl	%eax, %eax
100003fcc:	e8 41 fc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003fd1:	48 8d 3d b0 7a 01 00 	leaq	96944(%rip), %rdi ## Objc cfstring ref: @"doubleSize = %zu"
100003fd8:	be 08 00 00 00 	movl	$8, %esi
100003fdd:	31 c0 	xorl	%eax, %eax
100003fdf:	e8 2e fc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003fe4:	48 8d 3d bd 7a 01 00 	leaq	96957(%rip), %rdi ## Objc cfstring ref: @"sizeOf self = %ld"
100003feb:	be 08 00 00 00 	movl	$8, %esi
100003ff0:	31 c0 	xorl	%eax, %eax
100003ff2:	e8 1b fc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100003ff7:	48 8b 35 a2 ce 01 00 	movq	118434(%rip), %rsi ## Objc selector ref: class
100003ffe:	4c 8b 35 63 60 01 00 	movq	90211(%rip), %r14 ## Objc message: -[%rdi class]
100004005:	48 89 df 	movq	%rbx, %rdi
100004008:	41 ff d6 	callq	*%r14
10000400b:	48 89 c7 	movq	%rax, %rdi
10000400e:	e8 5f fc 00 00 	callq	0x100013c72 ## symbol stub for: _class_getInstanceSize
100004013:	48 89 c1 	movq	%rax, %rcx
100004016:	48 8d 3d ab 7a 01 00 	leaq	96939(%rip), %rdi ## Objc cfstring ref: @"class_getInstanceSize self = %ld"
10000401d:	31 c0 	xorl	%eax, %eax
10000401f:	48 89 ce 	movq	%rcx, %rsi
100004022:	e8 eb fb 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004027:	48 89 df 	movq	%rbx, %rdi
10000402a:	e8 03 fd 00 00 	callq	0x100013d32 ## symbol stub for: _malloc_size
10000402f:	48 89 c1 	movq	%rax, %rcx
100004032:	48 8d 3d af 7a 01 00 	leaq	96943(%rip), %rdi ## Objc cfstring ref: @"malloc_size self = %ld"
100004039:	31 c0 	xorl	%eax, %eax
10000403b:	48 89 ce 	movq	%rcx, %rsi
10000403e:	e8 cf fb 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004043:	48 8b 35 b6 cf 01 00 	movq	118710(%rip), %rsi ## Objc selector ref: setA:
10000404a:	ba ff ff ff 00 	movl	$16777215, %edx
10000404f:	48 89 df 	movq	%rbx, %rdi
100004052:	41 ff d6 	callq	*%r14
100004055:	48 8b 35 ac cf 01 00 	movq	118700(%rip), %rsi ## Objc selector ref: setB:
10000405c:	ba 64 00 00 00 	movl	$100, %edx
100004061:	48 89 df 	movq	%rbx, %rdi
100004064:	41 ff d6 	callq	*%r14
100004067:	48 8b 35 a2 cf 01 00 	movq	118690(%rip), %rsi ## Objc selector ref: setC:
10000406e:	ba cc 0c 00 00 	movl	$3276, %edx
100004073:	48 89 df 	movq	%rbx, %rdi
100004076:	41 ff d6 	callq	*%r14
100004079:	48 8b 35 98 cf 01 00 	movq	118680(%rip), %rsi ## Objc selector ref: setTestString:
100004080:	48 8d 15 81 7a 01 00 	leaq	96897(%rip), %rdx ## Objc cfstring ref: @"eeeeee"
100004087:	48 89 df 	movq	%rbx, %rdi
10000408a:	4c 89 f0 	movq	%r14, %rax
10000408d:	5b 	popq	%rbx
10000408e:	41 5e 	popq	%r14
100004090:	5d 	popq	%rbp
100004091:	ff e0 	jmpq	*%rax
-[ByteAlignmentTest a]:
100004093:	55 	pushq	%rbp
100004094:	48 89 e5 	movq	%rsp, %rbp
100004097:	48 8b 05 12 d8 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._a(%rip), %rax
10000409e:	8b 04 07 	movl	(%rdi,%rax), %eax
1000040a1:	5d 	popq	%rbp
1000040a2:	c3 	retq
-[ByteAlignmentTest setA:]:
1000040a3:	55 	pushq	%rbp
1000040a4:	48 89 e5 	movq	%rsp, %rbp
1000040a7:	48 8b 05 02 d8 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._a(%rip), %rax
1000040ae:	89 14 07 	movl	%edx, (%rdi,%rax)
1000040b1:	5d 	popq	%rbp
1000040b2:	c3 	retq
-[ByteAlignmentTest b]:
1000040b3:	55 	pushq	%rbp
1000040b4:	48 89 e5 	movq	%rsp, %rbp
1000040b7:	48 8b 05 fa d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._b(%rip), %rax
1000040be:	0f be 04 07 	movsbl	(%rdi,%rax), %eax
1000040c2:	5d 	popq	%rbp
1000040c3:	c3 	retq
-[ByteAlignmentTest setB:]:
1000040c4:	55 	pushq	%rbp
1000040c5:	48 89 e5 	movq	%rsp, %rbp
1000040c8:	48 8b 05 e9 d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._b(%rip), %rax
1000040cf:	88 14 07 	movb	%dl, (%rdi,%rax)
1000040d2:	5d 	popq	%rbp
1000040d3:	c3 	retq
-[ByteAlignmentTest c]:
1000040d4:	55 	pushq	%rbp
1000040d5:	48 89 e5 	movq	%rsp, %rbp
1000040d8:	48 8b 05 e1 d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._c(%rip), %rax
1000040df:	0f bf 04 07 	movswl	(%rdi,%rax), %eax
1000040e3:	5d 	popq	%rbp
1000040e4:	c3 	retq
-[ByteAlignmentTest setC:]:
1000040e5:	55 	pushq	%rbp
1000040e6:	48 89 e5 	movq	%rsp, %rbp
1000040e9:	48 8b 05 d0 d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._c(%rip), %rax
1000040f0:	66 89 14 07 	movw	%dx, (%rdi,%rax)
1000040f4:	5d 	popq	%rbp
1000040f5:	c3 	retq
-[ByteAlignmentTest d]:
1000040f6:	55 	pushq	%rbp
1000040f7:	48 89 e5 	movq	%rsp, %rbp
1000040fa:	48 8b 05 c7 d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._d(%rip), %rax
100004101:	0f bf 04 07 	movswl	(%rdi,%rax), %eax
100004105:	5d 	popq	%rbp
100004106:	c3 	retq
-[ByteAlignmentTest setD:]:
100004107:	55 	pushq	%rbp
100004108:	48 89 e5 	movq	%rsp, %rbp
10000410b:	48 8b 05 b6 d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._d(%rip), %rax
100004112:	66 89 14 07 	movw	%dx, (%rdi,%rax)
100004116:	5d 	popq	%rbp
100004117:	c3 	retq
-[ByteAlignmentTest testString]:
100004118:	55 	pushq	%rbp
100004119:	48 89 e5 	movq	%rsp, %rbp
10000411c:	48 8b 15 ad d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._testString(%rip), %rdx
100004123:	31 c9 	xorl	%ecx, %ecx
100004125:	5d 	popq	%rbp
100004126:	e9 7f fc 00 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
-[ByteAlignmentTest setTestString:]:
10000412b:	55 	pushq	%rbp
10000412c:	48 89 e5 	movq	%rsp, %rbp
10000412f:	48 8b 0d 9a d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._testString(%rip), %rcx
100004136:	5d 	popq	%rbp
100004137:	e9 b0 fc 00 00 	jmp	0x100013dec ## symbol stub for: _objc_setProperty_nonatomic_copy
-[ByteAlignmentTest testObject]:
10000413c:	55 	pushq	%rbp
10000413d:	48 89 e5 	movq	%rsp, %rbp
100004140:	48 8b 05 91 d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._testObject(%rip), %rax
100004147:	48 8b 04 07 	movq	(%rdi,%rax), %rax
10000414b:	5d 	popq	%rbp
10000414c:	c3 	retq
-[ByteAlignmentTest setTestObject:]:
10000414d:	55 	pushq	%rbp
10000414e:	48 89 e5 	movq	%rsp, %rbp
100004151:	48 03 3d 80 d7 01 00 	addq	_OBJC_IVAR_$_ByteAlignmentTest._testObject(%rip), %rdi
100004158:	48 89 d6 	movq	%rdx, %rsi
10000415b:	5d 	popq	%rbp
10000415c:	e9 91 fc 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[ByteAlignmentTest .cxx_destruct]:
100004161:	55 	pushq	%rbp
100004162:	48 89 e5 	movq	%rsp, %rbp
100004165:	53 	pushq	%rbx
100004166:	50 	pushq	%rax
100004167:	48 89 fb 	movq	%rdi, %rbx
10000416a:	48 8b 3d 67 d7 01 00 	movq	_OBJC_IVAR_$_ByteAlignmentTest._testObject(%rip), %rdi
100004171:	48 01 df 	addq	%rbx, %rdi
100004174:	31 f6 	xorl	%esi, %esi
100004176:	e8 77 fc 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000417b:	48 03 1d 4e d7 01 00 	addq	_OBJC_IVAR_$_ByteAlignmentTest._testString(%rip), %rbx
100004182:	31 f6 	xorl	%esi, %esi
100004184:	48 89 df 	movq	%rbx, %rdi
100004187:	48 83 c4 08 	addq	$8, %rsp
10000418b:	5b 	popq	%rbx
10000418c:	5d 	popq	%rbp
10000418d:	e9 60 fc 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[NSObject(RLSafe) rl_methodSignatureForSelector:]:
100004192:	55 	pushq	%rbp
100004193:	48 89 e5 	movq	%rsp, %rbp
100004196:	48 8b 35 83 ce 01 00 	movq	118403(%rip), %rsi ## Objc selector ref: rl_methodSignatureForSelector:
10000419d:	5d 	popq	%rbp
10000419e:	ff 25 c4 5e 01 00 	jmpq	*89796(%rip) ## Objc message: -[%rdi rl_methodSignatureForSelector:]
-[NSObject(RLSafe) rl_forwardInvocation:]:
1000041a4:	55 	pushq	%rbp
1000041a5:	48 89 e5 	movq	%rsp, %rbp
1000041a8:	48 8b 35 79 ce 01 00 	movq	118393(%rip), %rsi ## Objc selector ref: rl_forwardInvocation:
1000041af:	5d 	popq	%rbp
1000041b0:	ff 25 b2 5e 01 00 	jmpq	*89778(%rip) ## Objc message: -[%rdi rl_forwardInvocation:]
-[NSObject(RLSafe) nilMessage]:
1000041b6:	55 	pushq	%rbp
1000041b7:	48 89 e5 	movq	%rsp, %rbp
1000041ba:	31 c0 	xorl	%eax, %eax
1000041bc:	5d 	popq	%rbp
1000041bd:	c3 	retq
-[DispatchBarrierTest init]:
1000041be:	55 	pushq	%rbp
1000041bf:	48 89 e5 	movq	%rsp, %rbp
1000041c2:	41 56 	pushq	%r14
1000041c4:	53 	pushq	%rbx
1000041c5:	48 83 ec 10 	subq	$16, %rsp
1000041c9:	48 8d 45 e0 	leaq	-32(%rbp), %rax
1000041cd:	48 89 38 	movq	%rdi, (%rax)
1000041d0:	48 8b 0d 31 d6 01 00 	movq	120369(%rip), %rcx ## Objc class ref: DispatchBarrierTest
1000041d7:	48 89 48 08 	movq	%rcx, 8(%rax)
1000041db:	48 8b 35 86 cc 01 00 	movq	117894(%rip), %rsi ## Objc selector ref: init
1000041e2:	48 89 c7 	movq	%rax, %rdi
1000041e5:	e8 d2 fb 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
1000041ea:	48 89 c3 	movq	%rax, %rbx
1000041ed:	48 85 db 	testq	%rbx, %rbx
1000041f0:	74 48 	je	0x10000423a
1000041f2:	48 8b 35 37 ce 01 00 	movq	118327(%rip), %rsi ## Objc selector ref: testBarrier
1000041f9:	4c 8b 35 68 5e 01 00 	movq	89704(%rip), %r14 ## Objc message: -[%rdi testBarrier]
100004200:	48 89 df 	movq	%rbx, %rdi
100004203:	41 ff d6 	callq	*%r14
100004206:	48 8b 35 2b ce 01 00 	movq	118315(%rip), %rsi ## Objc selector ref: testGroup
10000420d:	48 89 df 	movq	%rbx, %rdi
100004210:	41 ff d6 	callq	*%r14
100004213:	48 8b 35 26 ce 01 00 	movq	118310(%rip), %rsi ## Objc selector ref: testGroup1
10000421a:	48 89 df 	movq	%rbx, %rdi
10000421d:	41 ff d6 	callq	*%r14
100004220:	48 8b 35 21 ce 01 00 	movq	118305(%rip), %rsi ## Objc selector ref: testSemaphore
100004227:	48 89 df 	movq	%rbx, %rdi
10000422a:	41 ff d6 	callq	*%r14
10000422d:	48 8b 35 1c ce 01 00 	movq	118300(%rip), %rsi ## Objc selector ref: testRunloop
100004234:	48 89 df 	movq	%rbx, %rdi
100004237:	41 ff d6 	callq	*%r14
10000423a:	48 89 d8 	movq	%rbx, %rax
10000423d:	48 83 c4 10 	addq	$16, %rsp
100004241:	5b 	popq	%rbx
100004242:	41 5e 	popq	%r14
100004244:	5d 	popq	%rbp
100004245:	c3 	retq
-[DispatchBarrierTest testBarrier]:
100004246:	55 	pushq	%rbp
100004247:	48 89 e5 	movq	%rsp, %rbp
10000424a:	53 	pushq	%rbx
10000424b:	50 	pushq	%rax
10000424c:	48 8d 3d 69 0d 01 00 	leaq	68969(%rip), %rdi ## literal pool for: "rl.barrier.test.queue"
100004253:	48 8b 35 f6 5d 01 00 	movq	89590(%rip), %rsi ## literal pool symbol address: __dispatch_queue_attr_concurrent
10000425a:	e8 73 fa 00 00 	callq	0x100013cd2 ## symbol stub for: _dispatch_queue_create
10000425f:	48 89 c3 	movq	%rax, %rbx
100004262:	48 8d 35 b7 64 01 00 	leaq	___block_literal_global(%rip), %rsi
100004269:	48 89 df 	movq	%rbx, %rdi
10000426c:	e8 25 fa 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004271:	48 8d 35 28 65 01 00 	leaq	___block_literal_global.20(%rip), %rsi
100004278:	48 89 df 	movq	%rbx, %rdi
10000427b:	e8 16 fa 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004280:	48 8d 35 99 65 01 00 	leaq	___block_literal_global.28(%rip), %rsi
100004287:	48 89 df 	movq	%rbx, %rdi
10000428a:	e8 0d fa 00 00 	callq	0x100013c9c ## symbol stub for: _dispatch_barrier_async
10000428f:	48 8d 35 ca 65 01 00 	leaq	___block_literal_global.32(%rip), %rsi
100004296:	48 89 df 	movq	%rbx, %rdi
100004299:	e8 f8 f9 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
10000429e:	48 89 df 	movq	%rbx, %rdi
1000042a1:	48 83 c4 08 	addq	$8, %rsp
1000042a5:	5b 	popq	%rbx
1000042a6:	5d 	popq	%rbp
1000042a7:	ff 25 c3 5d 01 00 	jmpq	*89539(%rip) ## literal pool symbol address: _objc_release
___34-[DispatchBarrierTest testBarrier]_block_invoke:
1000042ad:	55 	pushq	%rbp
1000042ae:	48 89 e5 	movq	%rsp, %rbp
1000042b1:	53 	pushq	%rbx
1000042b2:	50 	pushq	%rax
1000042b3:	48 8d 3d 6e 78 01 00 	leaq	96366(%rip), %rdi ## Objc cfstring ref: @"testBarrier-task1"
1000042ba:	31 c0 	xorl	%eax, %eax
1000042bc:	e8 51 f9 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000042c1:	31 ff 	xorl	%edi, %edi
1000042c3:	31 f6 	xorl	%esi, %esi
1000042c5:	e8 de f9 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
1000042ca:	48 89 c7 	movq	%rax, %rdi
1000042cd:	e8 02 fb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000042d2:	48 89 c3 	movq	%rax, %rbx
1000042d5:	48 8d 35 84 64 01 00 	leaq	___block_literal_global.14(%rip), %rsi
1000042dc:	48 89 df 	movq	%rbx, %rdi
1000042df:	e8 b2 f9 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000042e4:	48 89 df 	movq	%rbx, %rdi
1000042e7:	48 83 c4 08 	addq	$8, %rsp
1000042eb:	5b 	popq	%rbx
1000042ec:	5d 	popq	%rbp
1000042ed:	ff 25 7d 5d 01 00 	jmpq	*89469(%rip) ## literal pool symbol address: _objc_release
___34-[DispatchBarrierTest testBarrier]_block_invoke_2:
1000042f3:	55 	pushq	%rbp
1000042f4:	48 89 e5 	movq	%rsp, %rbp
1000042f7:	48 8b 3d ba d3 01 00 	movq	119738(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000042fe:	48 8b 35 53 cd 01 00 	movq	118099(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100004305:	f2 0f 10 05 a3 57 01 00 	movsd	87971(%rip), %xmm0
10000430d:	ff 15 55 5d 01 00 	callq	*89429(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004313:	48 8d 3d 2e 78 01 00 	leaq	96302(%rip), %rdi ## Objc cfstring ref: @"testBarrier-task1:async task"
10000431a:	31 c0 	xorl	%eax, %eax
10000431c:	e8 f1 f8 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004321:	5d 	popq	%rbp
100004322:	c3 	retq
___34-[DispatchBarrierTest testBarrier]_block_invoke_3:
100004323:	55 	pushq	%rbp
100004324:	48 89 e5 	movq	%rsp, %rbp
100004327:	53 	pushq	%rbx
100004328:	50 	pushq	%rax
100004329:	48 8d 3d 38 78 01 00 	leaq	96312(%rip), %rdi ## Objc cfstring ref: @"testBarrier-task2"
100004330:	31 c0 	xorl	%eax, %eax
100004332:	e8 db f8 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004337:	31 ff 	xorl	%edi, %edi
100004339:	31 f6 	xorl	%esi, %esi
10000433b:	e8 68 f9 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100004340:	48 89 c7 	movq	%rax, %rdi
100004343:	e8 8c fa 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100004348:	48 89 c3 	movq	%rax, %rbx
10000434b:	48 8d 35 8e 64 01 00 	leaq	___block_literal_global.24(%rip), %rsi
100004352:	48 89 df 	movq	%rbx, %rdi
100004355:	e8 3c f9 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
10000435a:	48 89 df 	movq	%rbx, %rdi
10000435d:	48 83 c4 08 	addq	$8, %rsp
100004361:	5b 	popq	%rbx
100004362:	5d 	popq	%rbp
100004363:	ff 25 07 5d 01 00 	jmpq	*89351(%rip) ## literal pool symbol address: _objc_release
___34-[DispatchBarrierTest testBarrier]_block_invoke_4:
100004369:	55 	pushq	%rbp
10000436a:	48 89 e5 	movq	%rsp, %rbp
10000436d:	48 8b 3d 44 d3 01 00 	movq	119620(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
100004374:	48 8b 35 dd cc 01 00 	movq	117981(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
10000437b:	f2 0f 10 05 35 57 01 00 	movsd	87861(%rip), %xmm0
100004383:	ff 15 df 5c 01 00 	callq	*89311(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004389:	48 8d 3d f8 77 01 00 	leaq	96248(%rip), %rdi ## Objc cfstring ref: @"testBarrier-task2:async task"
100004390:	31 c0 	xorl	%eax, %eax
100004392:	e8 7b f8 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004397:	5d 	popq	%rbp
100004398:	c3 	retq
___34-[DispatchBarrierTest testBarrier]_block_invoke_5:
100004399:	55 	pushq	%rbp
10000439a:	48 89 e5 	movq	%rsp, %rbp
10000439d:	48 8d 3d 04 78 01 00 	leaq	96260(%rip), %rdi ## Objc cfstring ref: @"dispatch_barrier_async"
1000043a4:	31 c0 	xorl	%eax, %eax
1000043a6:	e8 67 f8 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000043ab:	5d 	popq	%rbp
1000043ac:	c3 	retq
___34-[DispatchBarrierTest testBarrier]_block_invoke_6:
1000043ad:	55 	pushq	%rbp
1000043ae:	48 89 e5 	movq	%rsp, %rbp
1000043b1:	53 	pushq	%rbx
1000043b2:	50 	pushq	%rax
1000043b3:	48 8d 3d 0e 78 01 00 	leaq	96270(%rip), %rdi ## Objc cfstring ref: @"testBarrier-task3"
1000043ba:	31 c0 	xorl	%eax, %eax
1000043bc:	e8 51 f8 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000043c1:	31 ff 	xorl	%edi, %edi
1000043c3:	31 f6 	xorl	%esi, %esi
1000043c5:	e8 de f8 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
1000043ca:	48 89 c7 	movq	%rax, %rdi
1000043cd:	e8 02 fa 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000043d2:	48 89 c3 	movq	%rax, %rbx
1000043d5:	48 8d 35 c4 64 01 00 	leaq	___block_literal_global.36(%rip), %rsi
1000043dc:	48 89 df 	movq	%rbx, %rdi
1000043df:	e8 b2 f8 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000043e4:	48 89 df 	movq	%rbx, %rdi
1000043e7:	48 83 c4 08 	addq	$8, %rsp
1000043eb:	5b 	popq	%rbx
1000043ec:	5d 	popq	%rbp
1000043ed:	ff 25 7d 5c 01 00 	jmpq	*89213(%rip) ## literal pool symbol address: _objc_release
___34-[DispatchBarrierTest testBarrier]_block_invoke_7:
1000043f3:	55 	pushq	%rbp
1000043f4:	48 89 e5 	movq	%rsp, %rbp
1000043f7:	48 8b 3d ba d2 01 00 	movq	119482(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000043fe:	48 8b 35 53 cc 01 00 	movq	117843(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100004405:	f2 0f 10 05 ab 56 01 00 	movsd	87723(%rip), %xmm0
10000440d:	ff 15 55 5c 01 00 	callq	*89173(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004413:	48 8d 3d ce 77 01 00 	leaq	96206(%rip), %rdi ## Objc cfstring ref: @"testBarrier-task3:async task"
10000441a:	31 c0 	xorl	%eax, %eax
10000441c:	e8 f1 f7 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004421:	5d 	popq	%rbp
100004422:	c3 	retq
-[DispatchBarrierTest testGroup]:
100004423:	55 	pushq	%rbp
100004424:	48 89 e5 	movq	%rsp, %rbp
100004427:	41 57 	pushq	%r15
100004429:	41 56 	pushq	%r14
10000442b:	41 55 	pushq	%r13
10000442d:	41 54 	pushq	%r12
10000442f:	53 	pushq	%rbx
100004430:	48 83 ec 58 	subq	$88, %rsp
100004434:	48 8d 3d 3b 0c 01 00 	leaq	68667(%rip), %rdi ## literal pool for: "rl.group.test.queue"
10000443b:	48 8b 35 0e 5c 01 00 	movq	89102(%rip), %rsi ## literal pool symbol address: __dispatch_queue_attr_concurrent
100004442:	e8 8b f8 00 00 	callq	0x100013cd2 ## symbol stub for: _dispatch_queue_create
100004447:	49 89 c7 	movq	%rax, %r15
10000444a:	e8 65 f8 00 00 	callq	0x100013cb4 ## symbol stub for: _dispatch_group_create
10000444f:	48 89 c3 	movq	%rax, %rbx
100004452:	48 89 df 	movq	%rbx, %rdi
100004455:	e8 60 f8 00 00 	callq	0x100013cba ## symbol stub for: _dispatch_group_enter
10000445a:	48 8b 05 bf 5b 01 00 	movq	89023(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100004461:	4c 8d 75 88 	leaq	-120(%rbp), %r14
100004465:	49 89 06 	movq	%rax, (%r14)
100004468:	41 bd 00 00 00 c2 	movl	$3254779904, %r13d
10000446e:	4d 89 6e 08 	movq	%r13, 8(%r14)
100004472:	48 8d 05 c8 00 00 00 	leaq	"___32-[DispatchBarrierTest testGroup]_block_invoke"(%rip), %rax
100004479:	49 89 46 10 	movq	%rax, 16(%r14)
10000447d:	48 8d 05 6c 64 01 00 	leaq	___block_descriptor_tmp.47(%rip), %rax
100004484:	49 89 46 18 	movq	%rax, 24(%r14)
100004488:	48 89 df 	movq	%rbx, %rdi
10000448b:	ff 15 e7 5b 01 00 	callq	*89063(%rip) ## literal pool symbol address: _objc_retain
100004491:	48 89 c3 	movq	%rax, %rbx
100004494:	49 89 5e 20 	movq	%rbx, 32(%r14)
100004498:	4c 89 ff 	movq	%r15, %rdi
10000449b:	4c 89 f6 	movq	%r14, %rsi
10000449e:	e8 f3 f7 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000044a3:	48 89 df 	movq	%rbx, %rdi
1000044a6:	e8 0f f8 00 00 	callq	0x100013cba ## symbol stub for: _dispatch_group_enter
1000044ab:	4c 8d 65 b0 	leaq	-80(%rbp), %r12
1000044af:	48 8b 05 6a 5b 01 00 	movq	88938(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000044b6:	49 89 04 24 	movq	%rax, (%r12)
1000044ba:	4d 89 6c 24 08 	movq	%r13, 8(%r12)
1000044bf:	48 8d 05 90 01 00 00 	leaq	"___32-[DispatchBarrierTest testGroup]_block_invoke.48"(%rip), %rax
1000044c6:	49 89 44 24 10 	movq	%rax, 16(%r12)
1000044cb:	48 8d 05 7e 64 01 00 	leaq	___block_descriptor_tmp.59(%rip), %rax
1000044d2:	49 89 44 24 18 	movq	%rax, 24(%r12)
1000044d7:	49 89 5c 24 20 	movq	%rbx, 32(%r12)
1000044dc:	48 89 df 	movq	%rbx, %rdi
1000044df:	ff 15 93 5b 01 00 	callq	*88979(%rip) ## literal pool symbol address: _objc_retain
1000044e5:	49 89 c5 	movq	%rax, %r13
1000044e8:	4c 89 ff 	movq	%r15, %rdi
1000044eb:	4c 89 e6 	movq	%r12, %rsi
1000044ee:	e8 a3 f7 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000044f3:	48 8d 15 a6 64 01 00 	leaq	___block_literal_global.62(%rip), %rdx
1000044fa:	4c 89 ef 	movq	%r13, %rdi
1000044fd:	4c 89 fe 	movq	%r15, %rsi
100004500:	e8 c1 f7 00 00 	callq	0x100013cc6 ## symbol stub for: _dispatch_group_notify
100004505:	48 8d 35 d4 64 01 00 	leaq	___block_literal_global.67(%rip), %rsi
10000450c:	4c 89 ff 	movq	%r15, %rdi
10000450f:	e8 82 f7 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004514:	49 8b 7c 24 20 	movq	32(%r12), %rdi
100004519:	48 8b 1d 50 5b 01 00 	movq	88912(%rip), %rbx ## literal pool symbol address: _objc_release
100004520:	ff d3 	callq	*%rbx
100004522:	49 8b 7e 20 	movq	32(%r14), %rdi
100004526:	ff d3 	callq	*%rbx
100004528:	4c 89 ef 	movq	%r13, %rdi
10000452b:	ff d3 	callq	*%rbx
10000452d:	4c 89 ff 	movq	%r15, %rdi
100004530:	ff d3 	callq	*%rbx
100004532:	48 83 c4 58 	addq	$88, %rsp
100004536:	5b 	popq	%rbx
100004537:	41 5c 	popq	%r12
100004539:	41 5d 	popq	%r13
10000453b:	41 5e 	popq	%r14
10000453d:	41 5f 	popq	%r15
10000453f:	5d 	popq	%rbp
100004540:	c3 	retq
___32-[DispatchBarrierTest testGroup]_block_invoke:
100004541:	55 	pushq	%rbp
100004542:	48 89 e5 	movq	%rsp, %rbp
100004545:	41 57 	pushq	%r15
100004547:	41 56 	pushq	%r14
100004549:	53 	pushq	%rbx
10000454a:	48 83 ec 28 	subq	$40, %rsp
10000454e:	49 89 fe 	movq	%rdi, %r14
100004551:	48 8d 3d b0 76 01 00 	leaq	95920(%rip), %rdi ## Objc cfstring ref: @"testGroup-task1"
100004558:	31 c0 	xorl	%eax, %eax
10000455a:	e8 b3 f6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000455f:	31 ff 	xorl	%edi, %edi
100004561:	31 f6 	xorl	%esi, %esi
100004563:	e8 40 f7 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100004568:	48 89 c7 	movq	%rax, %rdi
10000456b:	e8 64 f8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100004570:	48 8b 0d a9 5a 01 00 	movq	88745(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100004577:	48 8d 5d c0 	leaq	-64(%rbp), %rbx
10000457b:	48 89 0b 	movq	%rcx, (%rbx)
10000457e:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100004583:	48 89 4b 08 	movq	%rcx, 8(%rbx)
100004587:	49 89 c7 	movq	%rax, %r15
10000458a:	48 8d 05 47 00 00 00 	leaq	"___32-[DispatchBarrierTest testGroup]_block_invoke_2"(%rip), %rax
100004591:	48 89 43 10 	movq	%rax, 16(%rbx)
100004595:	48 8d 05 24 63 01 00 	leaq	___block_descriptor_tmp.44(%rip), %rax
10000459c:	48 89 43 18 	movq	%rax, 24(%rbx)
1000045a0:	49 8b 7e 20 	movq	32(%r14), %rdi
1000045a4:	ff 15 ce 5a 01 00 	callq	*88782(%rip) ## literal pool symbol address: _objc_retain
1000045aa:	48 89 43 20 	movq	%rax, 32(%rbx)
1000045ae:	4c 89 ff 	movq	%r15, %rdi
1000045b1:	48 89 de 	movq	%rbx, %rsi
1000045b4:	e8 dd f6 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000045b9:	4c 8b 35 b0 5a 01 00 	movq	88752(%rip), %r14 ## literal pool symbol address: _objc_release
1000045c0:	4c 89 ff 	movq	%r15, %rdi
1000045c3:	41 ff d6 	callq	*%r14
1000045c6:	48 8b 7b 20 	movq	32(%rbx), %rdi
1000045ca:	41 ff d6 	callq	*%r14
1000045cd:	48 83 c4 28 	addq	$40, %rsp
1000045d1:	5b 	popq	%rbx
1000045d2:	41 5e 	popq	%r14
1000045d4:	41 5f 	popq	%r15
1000045d6:	5d 	popq	%rbp
1000045d7:	c3 	retq
___32-[DispatchBarrierTest testGroup]_block_invoke_2:
1000045d8:	55 	pushq	%rbp
1000045d9:	48 89 e5 	movq	%rsp, %rbp
1000045dc:	53 	pushq	%rbx
1000045dd:	50 	pushq	%rax
1000045de:	48 89 fb 	movq	%rdi, %rbx
1000045e1:	48 8b 3d d0 d0 01 00 	movq	118992(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000045e8:	48 8b 35 69 ca 01 00 	movq	117353(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
1000045ef:	f2 0f 10 05 b9 54 01 00 	movsd	87225(%rip), %xmm0
1000045f7:	ff 15 6b 5a 01 00 	callq	*88683(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
1000045fd:	48 8d 3d 24 76 01 00 	leaq	95780(%rip), %rdi ## Objc cfstring ref: @"testGroup-task1:async task"
100004604:	31 c0 	xorl	%eax, %eax
100004606:	e8 07 f6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000460b:	48 8b 7b 20 	movq	32(%rbx), %rdi
10000460f:	48 83 c4 08 	addq	$8, %rsp
100004613:	5b 	popq	%rbx
100004614:	5d 	popq	%rbp
100004615:	e9 a6 f6 00 00 	jmp	0x100013cc0 ## symbol stub for: _dispatch_group_leave
___copy_helper_block_:
10000461a:	55 	pushq	%rbp
10000461b:	48 89 e5 	movq	%rsp, %rbp
10000461e:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004622:	5d 	popq	%rbp
100004623:	ff 25 4f 5a 01 00 	jmpq	*88655(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_:
100004629:	55 	pushq	%rbp
10000462a:	48 89 e5 	movq	%rsp, %rbp
10000462d:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004631:	5d 	popq	%rbp
100004632:	ff 25 38 5a 01 00 	jmpq	*88632(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_.45:
100004638:	55 	pushq	%rbp
100004639:	48 89 e5 	movq	%rsp, %rbp
10000463c:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004640:	5d 	popq	%rbp
100004641:	ff 25 31 5a 01 00 	jmpq	*88625(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.46:
100004647:	55 	pushq	%rbp
100004648:	48 89 e5 	movq	%rsp, %rbp
10000464b:	48 8b 7f 20 	movq	32(%rdi), %rdi
10000464f:	5d 	popq	%rbp
100004650:	ff 25 1a 5a 01 00 	jmpq	*88602(%rip) ## literal pool symbol address: _objc_release
___32-[DispatchBarrierTest testGroup]_block_invoke.48:
100004656:	55 	pushq	%rbp
100004657:	48 89 e5 	movq	%rsp, %rbp
10000465a:	41 57 	pushq	%r15
10000465c:	41 56 	pushq	%r14
10000465e:	53 	pushq	%rbx
10000465f:	48 83 ec 28 	subq	$40, %rsp
100004663:	49 89 fe 	movq	%rdi, %r14
100004666:	48 8d 3d db 75 01 00 	leaq	95707(%rip), %rdi ## Objc cfstring ref: @"testGroup-task2"
10000466d:	31 c0 	xorl	%eax, %eax
10000466f:	e8 9e f5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004674:	31 ff 	xorl	%edi, %edi
100004676:	31 f6 	xorl	%esi, %esi
100004678:	e8 2b f6 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
10000467d:	48 89 c7 	movq	%rax, %rdi
100004680:	e8 4f f7 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100004685:	48 8b 0d 94 59 01 00 	movq	88468(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000468c:	48 8d 5d c0 	leaq	-64(%rbp), %rbx
100004690:	48 89 0b 	movq	%rcx, (%rbx)
100004693:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100004698:	48 89 4b 08 	movq	%rcx, 8(%rbx)
10000469c:	49 89 c7 	movq	%rax, %r15
10000469f:	48 8d 05 47 00 00 00 	leaq	"___32-[DispatchBarrierTest testGroup]_block_invoke_2.51"(%rip), %rax
1000046a6:	48 89 43 10 	movq	%rax, 16(%rbx)
1000046aa:	48 8d 05 6f 62 01 00 	leaq	___block_descriptor_tmp.56(%rip), %rax
1000046b1:	48 89 43 18 	movq	%rax, 24(%rbx)
1000046b5:	49 8b 7e 20 	movq	32(%r14), %rdi
1000046b9:	ff 15 b9 59 01 00 	callq	*88505(%rip) ## literal pool symbol address: _objc_retain
1000046bf:	48 89 43 20 	movq	%rax, 32(%rbx)
1000046c3:	4c 89 ff 	movq	%r15, %rdi
1000046c6:	48 89 de 	movq	%rbx, %rsi
1000046c9:	e8 c8 f5 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000046ce:	4c 8b 35 9b 59 01 00 	movq	88475(%rip), %r14 ## literal pool symbol address: _objc_release
1000046d5:	4c 89 ff 	movq	%r15, %rdi
1000046d8:	41 ff d6 	callq	*%r14
1000046db:	48 8b 7b 20 	movq	32(%rbx), %rdi
1000046df:	41 ff d6 	callq	*%r14
1000046e2:	48 83 c4 28 	addq	$40, %rsp
1000046e6:	5b 	popq	%rbx
1000046e7:	41 5e 	popq	%r14
1000046e9:	41 5f 	popq	%r15
1000046eb:	5d 	popq	%rbp
1000046ec:	c3 	retq
___32-[DispatchBarrierTest testGroup]_block_invoke_2.51:
1000046ed:	55 	pushq	%rbp
1000046ee:	48 89 e5 	movq	%rsp, %rbp
1000046f1:	53 	pushq	%rbx
1000046f2:	50 	pushq	%rax
1000046f3:	48 89 fb 	movq	%rdi, %rbx
1000046f6:	48 8b 3d bb cf 01 00 	movq	118715(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000046fd:	48 8b 35 54 c9 01 00 	movq	117076(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100004704:	f2 0f 10 05 ac 53 01 00 	movsd	86956(%rip), %xmm0
10000470c:	ff 15 56 59 01 00 	callq	*88406(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004712:	48 8d 3d 4f 75 01 00 	leaq	95567(%rip), %rdi ## Objc cfstring ref: @"testGroup-task2:async task"
100004719:	31 c0 	xorl	%eax, %eax
10000471b:	e8 f2 f4 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004720:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004724:	48 83 c4 08 	addq	$8, %rsp
100004728:	5b 	popq	%rbx
100004729:	5d 	popq	%rbp
10000472a:	e9 91 f5 00 00 	jmp	0x100013cc0 ## symbol stub for: _dispatch_group_leave
___copy_helper_block_.54:
10000472f:	55 	pushq	%rbp
100004730:	48 89 e5 	movq	%rsp, %rbp
100004733:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004737:	5d 	popq	%rbp
100004738:	ff 25 3a 59 01 00 	jmpq	*88378(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.55:
10000473e:	55 	pushq	%rbp
10000473f:	48 89 e5 	movq	%rsp, %rbp
100004742:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004746:	5d 	popq	%rbp
100004747:	ff 25 23 59 01 00 	jmpq	*88355(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_.57:
10000474d:	55 	pushq	%rbp
10000474e:	48 89 e5 	movq	%rsp, %rbp
100004751:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004755:	5d 	popq	%rbp
100004756:	ff 25 1c 59 01 00 	jmpq	*88348(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.58:
10000475c:	55 	pushq	%rbp
10000475d:	48 89 e5 	movq	%rsp, %rbp
100004760:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004764:	5d 	popq	%rbp
100004765:	ff 25 05 59 01 00 	jmpq	*88325(%rip) ## literal pool symbol address: _objc_release
___32-[DispatchBarrierTest testGroup]_block_invoke.60:
10000476b:	55 	pushq	%rbp
10000476c:	48 89 e5 	movq	%rsp, %rbp
10000476f:	48 8d 3d 12 75 01 00 	leaq	95506(%rip), %rdi ## Objc cfstring ref: @"dispatch_group_notify"
100004776:	31 c0 	xorl	%eax, %eax
100004778:	e8 95 f4 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000477d:	5d 	popq	%rbp
10000477e:	c3 	retq
___32-[DispatchBarrierTest testGroup]_block_invoke_2.65:
10000477f:	55 	pushq	%rbp
100004780:	48 89 e5 	movq	%rsp, %rbp
100004783:	53 	pushq	%rbx
100004784:	50 	pushq	%rax
100004785:	48 8d 3d 1c 75 01 00 	leaq	95516(%rip), %rdi ## Objc cfstring ref: @"testGroup-task3"
10000478c:	31 c0 	xorl	%eax, %eax
10000478e:	e8 7f f4 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004793:	31 ff 	xorl	%edi, %edi
100004795:	31 f6 	xorl	%esi, %esi
100004797:	e8 0c f5 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
10000479c:	48 89 c7 	movq	%rax, %rdi
10000479f:	e8 30 f6 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000047a4:	48 89 c3 	movq	%rax, %rbx
1000047a7:	48 8d 35 72 62 01 00 	leaq	___block_literal_global.71(%rip), %rsi
1000047ae:	48 89 df 	movq	%rbx, %rdi
1000047b1:	e8 e0 f4 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000047b6:	48 89 df 	movq	%rbx, %rdi
1000047b9:	48 83 c4 08 	addq	$8, %rsp
1000047bd:	5b 	popq	%rbx
1000047be:	5d 	popq	%rbp
1000047bf:	ff 25 ab 58 01 00 	jmpq	*88235(%rip) ## literal pool symbol address: _objc_release
___32-[DispatchBarrierTest testGroup]_block_invoke_3:
1000047c5:	55 	pushq	%rbp
1000047c6:	48 89 e5 	movq	%rsp, %rbp
1000047c9:	48 8b 3d e8 ce 01 00 	movq	118504(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000047d0:	48 8b 35 81 c8 01 00 	movq	116865(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
1000047d7:	f2 0f 10 05 d9 52 01 00 	movsd	86745(%rip), %xmm0
1000047df:	ff 15 83 58 01 00 	callq	*88195(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
1000047e5:	48 8d 3d dc 74 01 00 	leaq	95452(%rip), %rdi ## Objc cfstring ref: @"testGroup-task3:async task"
1000047ec:	31 c0 	xorl	%eax, %eax
1000047ee:	e8 1f f4 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000047f3:	5d 	popq	%rbp
1000047f4:	c3 	retq
-[DispatchBarrierTest testGroup1]:
1000047f5:	55 	pushq	%rbp
1000047f6:	48 89 e5 	movq	%rsp, %rbp
1000047f9:	41 57 	pushq	%r15
1000047fb:	41 56 	pushq	%r14
1000047fd:	53 	pushq	%rbx
1000047fe:	50 	pushq	%rax
1000047ff:	48 8d 3d 1b 09 01 00 	leaq	67867(%rip), %rdi ## literal pool for: "rl.group1.test.queue"
100004806:	48 8b 35 43 58 01 00 	movq	88131(%rip), %rsi ## literal pool symbol address: __dispatch_queue_attr_concurrent
10000480d:	e8 c0 f4 00 00 	callq	0x100013cd2 ## symbol stub for: _dispatch_queue_create
100004812:	49 89 c6 	movq	%rax, %r14
100004815:	e8 9a f4 00 00 	callq	0x100013cb4 ## symbol stub for: _dispatch_group_create
10000481a:	48 89 c3 	movq	%rax, %rbx
10000481d:	48 8d 15 3c 62 01 00 	leaq	___block_literal_global.76(%rip), %rdx
100004824:	48 89 df 	movq	%rbx, %rdi
100004827:	4c 89 f6 	movq	%r14, %rsi
10000482a:	e8 7f f4 00 00 	callq	0x100013cae ## symbol stub for: _dispatch_group_async
10000482f:	48 8d 15 aa 62 01 00 	leaq	___block_literal_global.80(%rip), %rdx
100004836:	48 89 df 	movq	%rbx, %rdi
100004839:	4c 89 f6 	movq	%r14, %rsi
10000483c:	e8 6d f4 00 00 	callq	0x100013cae ## symbol stub for: _dispatch_group_async
100004841:	48 8d 15 18 63 01 00 	leaq	___block_literal_global.84(%rip), %rdx
100004848:	48 89 df 	movq	%rbx, %rdi
10000484b:	4c 89 f6 	movq	%r14, %rsi
10000484e:	e8 73 f4 00 00 	callq	0x100013cc6 ## symbol stub for: _dispatch_group_notify
100004853:	48 8d 15 46 63 01 00 	leaq	___block_literal_global.86(%rip), %rdx
10000485a:	48 89 df 	movq	%rbx, %rdi
10000485d:	4c 89 f6 	movq	%r14, %rsi
100004860:	e8 49 f4 00 00 	callq	0x100013cae ## symbol stub for: _dispatch_group_async
100004865:	4c 8b 3d 04 58 01 00 	movq	88068(%rip), %r15 ## literal pool symbol address: _objc_release
10000486c:	48 89 df 	movq	%rbx, %rdi
10000486f:	41 ff d7 	callq	*%r15
100004872:	4c 89 f7 	movq	%r14, %rdi
100004875:	4c 89 f8 	movq	%r15, %rax
100004878:	48 83 c4 08 	addq	$8, %rsp
10000487c:	5b 	popq	%rbx
10000487d:	41 5e 	popq	%r14
10000487f:	41 5f 	popq	%r15
100004881:	5d 	popq	%rbp
100004882:	ff e0 	jmpq	*%rax
___33-[DispatchBarrierTest testGroup1]_block_invoke:
100004884:	55 	pushq	%rbp
100004885:	48 89 e5 	movq	%rsp, %rbp
100004888:	53 	pushq	%rbx
100004889:	50 	pushq	%rax
10000488a:	48 8d 3d 77 73 01 00 	leaq	95095(%rip), %rdi ## Objc cfstring ref: @"testGroup-task1"
100004891:	31 c0 	xorl	%eax, %eax
100004893:	e8 7a f3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004898:	31 ff 	xorl	%edi, %edi
10000489a:	31 f6 	xorl	%esi, %esi
10000489c:	e8 07 f4 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
1000048a1:	48 89 c7 	movq	%rax, %rdi
1000048a4:	e8 2b f5 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000048a9:	48 89 c3 	movq	%rax, %rbx
1000048ac:	48 8d 35 ed 61 01 00 	leaq	___block_literal_global.78(%rip), %rsi
1000048b3:	48 89 df 	movq	%rbx, %rdi
1000048b6:	e8 db f3 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000048bb:	48 89 df 	movq	%rbx, %rdi
1000048be:	48 83 c4 08 	addq	$8, %rsp
1000048c2:	5b 	popq	%rbx
1000048c3:	5d 	popq	%rbp
1000048c4:	ff 25 a6 57 01 00 	jmpq	*87974(%rip) ## literal pool symbol address: _objc_release
___33-[DispatchBarrierTest testGroup1]_block_invoke_2:
1000048ca:	55 	pushq	%rbp
1000048cb:	48 89 e5 	movq	%rsp, %rbp
1000048ce:	48 8b 3d e3 cd 01 00 	movq	118243(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000048d5:	48 8b 35 7c c7 01 00 	movq	116604(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
1000048dc:	f2 0f 10 05 cc 51 01 00 	movsd	86476(%rip), %xmm0
1000048e4:	ff 15 7e 57 01 00 	callq	*87934(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
1000048ea:	48 8d 3d 37 73 01 00 	leaq	95031(%rip), %rdi ## Objc cfstring ref: @"testGroup-task1:async task"
1000048f1:	31 c0 	xorl	%eax, %eax
1000048f3:	e8 1a f3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000048f8:	5d 	popq	%rbp
1000048f9:	c3 	retq
___33-[DispatchBarrierTest testGroup1]_block_invoke_3:
1000048fa:	55 	pushq	%rbp
1000048fb:	48 89 e5 	movq	%rsp, %rbp
1000048fe:	53 	pushq	%rbx
1000048ff:	50 	pushq	%rax
100004900:	48 8d 3d 41 73 01 00 	leaq	95041(%rip), %rdi ## Objc cfstring ref: @"testGroup-task2"
100004907:	31 c0 	xorl	%eax, %eax
100004909:	e8 04 f3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000490e:	31 ff 	xorl	%edi, %edi
100004910:	31 f6 	xorl	%esi, %esi
100004912:	e8 91 f3 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100004917:	48 89 c7 	movq	%rax, %rdi
10000491a:	e8 b5 f4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000491f:	48 89 c3 	movq	%rax, %rbx
100004922:	48 8d 35 f7 61 01 00 	leaq	___block_literal_global.82(%rip), %rsi
100004929:	48 89 df 	movq	%rbx, %rdi
10000492c:	e8 65 f3 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004931:	48 89 df 	movq	%rbx, %rdi
100004934:	48 83 c4 08 	addq	$8, %rsp
100004938:	5b 	popq	%rbx
100004939:	5d 	popq	%rbp
10000493a:	ff 25 30 57 01 00 	jmpq	*87856(%rip) ## literal pool symbol address: _objc_release
___33-[DispatchBarrierTest testGroup1]_block_invoke_4:
100004940:	55 	pushq	%rbp
100004941:	48 89 e5 	movq	%rsp, %rbp
100004944:	48 8b 3d 6d cd 01 00 	movq	118125(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
10000494b:	48 8b 35 06 c7 01 00 	movq	116486(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100004952:	f2 0f 10 05 5e 51 01 00 	movsd	86366(%rip), %xmm0
10000495a:	ff 15 08 57 01 00 	callq	*87816(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004960:	48 8d 3d 01 73 01 00 	leaq	94977(%rip), %rdi ## Objc cfstring ref: @"testGroup-task2:async task"
100004967:	31 c0 	xorl	%eax, %eax
100004969:	e8 a4 f2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000496e:	5d 	popq	%rbp
10000496f:	c3 	retq
___33-[DispatchBarrierTest testGroup1]_block_invoke_5:
100004970:	55 	pushq	%rbp
100004971:	48 89 e5 	movq	%rsp, %rbp
100004974:	48 8d 3d 0d 73 01 00 	leaq	94989(%rip), %rdi ## Objc cfstring ref: @"dispatch_group_notify"
10000497b:	31 c0 	xorl	%eax, %eax
10000497d:	e8 90 f2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004982:	5d 	popq	%rbp
100004983:	c3 	retq
___33-[DispatchBarrierTest testGroup1]_block_invoke_6:
100004984:	55 	pushq	%rbp
100004985:	48 89 e5 	movq	%rsp, %rbp
100004988:	53 	pushq	%rbx
100004989:	50 	pushq	%rax
10000498a:	48 8d 3d 17 73 01 00 	leaq	94999(%rip), %rdi ## Objc cfstring ref: @"testGroup-task3"
100004991:	31 c0 	xorl	%eax, %eax
100004993:	e8 7a f2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004998:	31 ff 	xorl	%edi, %edi
10000499a:	31 f6 	xorl	%esi, %esi
10000499c:	e8 07 f3 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
1000049a1:	48 89 c7 	movq	%rax, %rdi
1000049a4:	e8 2b f4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000049a9:	48 89 c3 	movq	%rax, %rbx
1000049ac:	48 8d 35 2d 62 01 00 	leaq	___block_literal_global.88(%rip), %rsi
1000049b3:	48 89 df 	movq	%rbx, %rdi
1000049b6:	e8 db f2 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
1000049bb:	48 89 df 	movq	%rbx, %rdi
1000049be:	48 83 c4 08 	addq	$8, %rsp
1000049c2:	5b 	popq	%rbx
1000049c3:	5d 	popq	%rbp
1000049c4:	ff 25 a6 56 01 00 	jmpq	*87718(%rip) ## literal pool symbol address: _objc_release
___33-[DispatchBarrierTest testGroup1]_block_invoke_7:
1000049ca:	55 	pushq	%rbp
1000049cb:	48 89 e5 	movq	%rsp, %rbp
1000049ce:	48 8b 3d e3 cc 01 00 	movq	117987(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000049d5:	48 8b 35 7c c6 01 00 	movq	116348(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
1000049dc:	f2 0f 10 05 d4 50 01 00 	movsd	86228(%rip), %xmm0
1000049e4:	ff 15 7e 56 01 00 	callq	*87678(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
1000049ea:	48 8d 3d d7 72 01 00 	leaq	94935(%rip), %rdi ## Objc cfstring ref: @"testGroup-task3:async task"
1000049f1:	31 c0 	xorl	%eax, %eax
1000049f3:	e8 1a f2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000049f8:	5d 	popq	%rbp
1000049f9:	c3 	retq
-[DispatchBarrierTest testSemaphore]:
1000049fa:	55 	pushq	%rbp
1000049fb:	48 89 e5 	movq	%rsp, %rbp
1000049fe:	41 57 	pushq	%r15
100004a00:	41 56 	pushq	%r14
100004a02:	41 55 	pushq	%r13
100004a04:	41 54 	pushq	%r12
100004a06:	53 	pushq	%rbx
100004a07:	48 81 ec 88 00 00 00 	subq	$136, %rsp
100004a0e:	bf 02 00 00 00 	movl	$2, %edi
100004a13:	e8 c0 f2 00 00 	callq	0x100013cd8 ## symbol stub for: _dispatch_semaphore_create
100004a18:	49 89 c4 	movq	%rax, %r12
100004a1b:	48 8d 3d 14 07 01 00 	leaq	67348(%rip), %rdi ## literal pool for: "rl.semaphore.test.queue"
100004a22:	48 8b 35 27 56 01 00 	movq	87591(%rip), %rsi ## literal pool symbol address: __dispatch_queue_attr_concurrent
100004a29:	e8 a4 f2 00 00 	callq	0x100013cd2 ## symbol stub for: _dispatch_queue_create
100004a2e:	48 8b 0d eb 55 01 00 	movq	87531(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100004a35:	4c 8d b5 58 ff ff ff 	leaq	-168(%rbp), %r14
100004a3c:	49 89 0e 	movq	%rcx, (%r14)
100004a3f:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100004a44:	49 89 4e 08 	movq	%rcx, 8(%r14)
100004a48:	48 8d 0d fc 00 00 00 	leaq	"___36-[DispatchBarrierTest testSemaphore]_block_invoke"(%rip), %rcx
100004a4f:	49 89 4e 10 	movq	%rcx, 16(%r14)
100004a53:	49 89 c7 	movq	%rax, %r15
100004a56:	48 8d 05 d3 61 01 00 	leaq	___block_descriptor_tmp.99(%rip), %rax
100004a5d:	49 89 46 18 	movq	%rax, 24(%r14)
100004a61:	4c 8b 2d 10 56 01 00 	movq	87568(%rip), %r13 ## literal pool symbol address: _objc_retain
100004a68:	4c 89 e7 	movq	%r12, %rdi
100004a6b:	41 ff d5 	callq	*%r13
100004a6e:	48 89 c3 	movq	%rax, %rbx
100004a71:	49 89 5e 20 	movq	%rbx, 32(%r14)
100004a75:	4c 89 ff 	movq	%r15, %rdi
100004a78:	4c 89 f6 	movq	%r14, %rsi
100004a7b:	e8 16 f2 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004a80:	4c 8d 65 80 	leaq	-128(%rbp), %r12
100004a84:	48 8b 05 95 55 01 00 	movq	87445(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100004a8b:	49 89 04 24 	movq	%rax, (%r12)
100004a8f:	b8 00 00 00 c2 	movl	$3254779904, %eax
100004a94:	49 89 44 24 08 	movq	%rax, 8(%r12)
100004a99:	48 8d 05 d0 01 00 00 	leaq	"___36-[DispatchBarrierTest testSemaphore]_block_invoke.100"(%rip), %rax
100004aa0:	49 89 44 24 10 	movq	%rax, 16(%r12)
100004aa5:	48 8d 05 e4 61 01 00 	leaq	___block_descriptor_tmp.111(%rip), %rax
100004aac:	49 89 44 24 18 	movq	%rax, 24(%r12)
100004ab1:	48 89 df 	movq	%rbx, %rdi
100004ab4:	41 ff d5 	callq	*%r13
100004ab7:	48 89 c3 	movq	%rax, %rbx
100004aba:	49 89 5c 24 20 	movq	%rbx, 32(%r12)
100004abf:	4c 89 ff 	movq	%r15, %rdi
100004ac2:	4c 89 e6 	movq	%r12, %rsi
100004ac5:	e8 cc f1 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004aca:	4c 8d 6d a8 	leaq	-88(%rbp), %r13
100004ace:	48 8b 05 4b 55 01 00 	movq	87371(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100004ad5:	49 89 45 00 	movq	%rax, (%r13)
100004ad9:	b8 00 00 00 c2 	movl	$3254779904, %eax
100004ade:	49 89 45 08 	movq	%rax, 8(%r13)
100004ae2:	48 8d 05 ac 02 00 00 	leaq	"___36-[DispatchBarrierTest testSemaphore]_block_invoke.112"(%rip), %rax
100004ae9:	49 89 45 10 	movq	%rax, 16(%r13)
100004aed:	48 8d 05 fc 61 01 00 	leaq	___block_descriptor_tmp.123(%rip), %rax
100004af4:	49 89 45 18 	movq	%rax, 24(%r13)
100004af8:	49 89 5d 20 	movq	%rbx, 32(%r13)
100004afc:	48 89 df 	movq	%rbx, %rdi
100004aff:	ff 15 73 55 01 00 	callq	*87411(%rip) ## literal pool symbol address: _objc_retain
100004b05:	48 89 45 d0 	movq	%rax, -48(%rbp)
100004b09:	4c 89 ff 	movq	%r15, %rdi
100004b0c:	4c 89 ee 	movq	%r13, %rsi
100004b0f:	e8 82 f1 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004b14:	49 8b 7d 20 	movq	32(%r13), %rdi
100004b18:	48 8b 1d 51 55 01 00 	movq	87377(%rip), %rbx ## literal pool symbol address: _objc_release
100004b1f:	ff d3 	callq	*%rbx
100004b21:	49 8b 7c 24 20 	movq	32(%r12), %rdi
100004b26:	ff d3 	callq	*%rbx
100004b28:	49 8b 7e 20 	movq	32(%r14), %rdi
100004b2c:	ff d3 	callq	*%rbx
100004b2e:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100004b32:	ff d3 	callq	*%rbx
100004b34:	4c 89 ff 	movq	%r15, %rdi
100004b37:	ff d3 	callq	*%rbx
100004b39:	48 81 c4 88 00 00 00 	addq	$136, %rsp
100004b40:	5b 	popq	%rbx
100004b41:	41 5c 	popq	%r12
100004b43:	41 5d 	popq	%r13
100004b45:	41 5e 	popq	%r14
100004b47:	41 5f 	popq	%r15
100004b49:	5d 	popq	%rbp
100004b4a:	c3 	retq
___36-[DispatchBarrierTest testSemaphore]_block_invoke:
100004b4b:	55 	pushq	%rbp
100004b4c:	48 89 e5 	movq	%rsp, %rbp
100004b4f:	41 57 	pushq	%r15
100004b51:	41 56 	pushq	%r14
100004b53:	53 	pushq	%rbx
100004b54:	48 83 ec 28 	subq	$40, %rsp
100004b58:	49 89 fe 	movq	%rdi, %r14
100004b5b:	49 8b 7e 20 	movq	32(%r14), %rdi
100004b5f:	48 c7 c6 ff ff ff ff 	movq	$-1, %rsi
100004b66:	e8 79 f1 00 00 	callq	0x100013ce4 ## symbol stub for: _dispatch_semaphore_wait
100004b6b:	48 8d 3d 76 71 01 00 	leaq	94582(%rip), %rdi ## Objc cfstring ref: @"testSemaphore-task1"
100004b72:	31 c0 	xorl	%eax, %eax
100004b74:	e8 99 f0 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004b79:	31 ff 	xorl	%edi, %edi
100004b7b:	31 f6 	xorl	%esi, %esi
100004b7d:	e8 26 f1 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100004b82:	48 89 c7 	movq	%rax, %rdi
100004b85:	e8 4a f2 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100004b8a:	48 8b 0d 8f 54 01 00 	movq	87183(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100004b91:	48 8d 5d c0 	leaq	-64(%rbp), %rbx
100004b95:	48 89 0b 	movq	%rcx, (%rbx)
100004b98:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100004b9d:	48 89 4b 08 	movq	%rcx, 8(%rbx)
100004ba1:	49 89 c7 	movq	%rax, %r15
100004ba4:	48 8d 05 47 00 00 00 	leaq	"___36-[DispatchBarrierTest testSemaphore]_block_invoke_2"(%rip), %rax
100004bab:	48 89 43 10 	movq	%rax, 16(%rbx)
100004baf:	48 8d 05 4a 60 01 00 	leaq	___block_descriptor_tmp.96(%rip), %rax
100004bb6:	48 89 43 18 	movq	%rax, 24(%rbx)
100004bba:	49 8b 7e 20 	movq	32(%r14), %rdi
100004bbe:	ff 15 b4 54 01 00 	callq	*87220(%rip) ## literal pool symbol address: _objc_retain
100004bc4:	48 89 43 20 	movq	%rax, 32(%rbx)
100004bc8:	4c 89 ff 	movq	%r15, %rdi
100004bcb:	48 89 de 	movq	%rbx, %rsi
100004bce:	e8 c3 f0 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004bd3:	4c 8b 35 96 54 01 00 	movq	87190(%rip), %r14 ## literal pool symbol address: _objc_release
100004bda:	4c 89 ff 	movq	%r15, %rdi
100004bdd:	41 ff d6 	callq	*%r14
100004be0:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004be4:	41 ff d6 	callq	*%r14
100004be7:	48 83 c4 28 	addq	$40, %rsp
100004beb:	5b 	popq	%rbx
100004bec:	41 5e 	popq	%r14
100004bee:	41 5f 	popq	%r15
100004bf0:	5d 	popq	%rbp
100004bf1:	c3 	retq
___36-[DispatchBarrierTest testSemaphore]_block_invoke_2:
100004bf2:	55 	pushq	%rbp
100004bf3:	48 89 e5 	movq	%rsp, %rbp
100004bf6:	53 	pushq	%rbx
100004bf7:	50 	pushq	%rax
100004bf8:	48 89 fb 	movq	%rdi, %rbx
100004bfb:	48 8b 3d b6 ca 01 00 	movq	117430(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
100004c02:	48 8b 35 4f c4 01 00 	movq	115791(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100004c09:	f2 0f 10 05 9f 4e 01 00 	movsd	85663(%rip), %xmm0
100004c11:	ff 15 51 54 01 00 	callq	*87121(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004c17:	48 8d 3d ea 70 01 00 	leaq	94442(%rip), %rdi ## Objc cfstring ref: @"testSemaphore-task1:async task"
100004c1e:	31 c0 	xorl	%eax, %eax
100004c20:	e8 ed ef 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004c25:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004c29:	48 83 c4 08 	addq	$8, %rsp
100004c2d:	5b 	popq	%rbx
100004c2e:	5d 	popq	%rbp
100004c2f:	e9 aa f0 00 00 	jmp	0x100013cde ## symbol stub for: _dispatch_semaphore_signal
___copy_helper_block_.94:
100004c34:	55 	pushq	%rbp
100004c35:	48 89 e5 	movq	%rsp, %rbp
100004c38:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004c3c:	5d 	popq	%rbp
100004c3d:	ff 25 35 54 01 00 	jmpq	*87093(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.95:
100004c43:	55 	pushq	%rbp
100004c44:	48 89 e5 	movq	%rsp, %rbp
100004c47:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004c4b:	5d 	popq	%rbp
100004c4c:	ff 25 1e 54 01 00 	jmpq	*87070(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_.97:
100004c52:	55 	pushq	%rbp
100004c53:	48 89 e5 	movq	%rsp, %rbp
100004c56:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004c5a:	5d 	popq	%rbp
100004c5b:	ff 25 17 54 01 00 	jmpq	*87063(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.98:
100004c61:	55 	pushq	%rbp
100004c62:	48 89 e5 	movq	%rsp, %rbp
100004c65:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004c69:	5d 	popq	%rbp
100004c6a:	ff 25 00 54 01 00 	jmpq	*87040(%rip) ## literal pool symbol address: _objc_release
___36-[DispatchBarrierTest testSemaphore]_block_invoke.100:
100004c70:	55 	pushq	%rbp
100004c71:	48 89 e5 	movq	%rsp, %rbp
100004c74:	41 57 	pushq	%r15
100004c76:	41 56 	pushq	%r14
100004c78:	53 	pushq	%rbx
100004c79:	48 83 ec 28 	subq	$40, %rsp
100004c7d:	49 89 fe 	movq	%rdi, %r14
100004c80:	49 8b 7e 20 	movq	32(%r14), %rdi
100004c84:	48 c7 c6 ff ff ff ff 	movq	$-1, %rsi
100004c8b:	e8 54 f0 00 00 	callq	0x100013ce4 ## symbol stub for: _dispatch_semaphore_wait
100004c90:	48 8d 3d 91 70 01 00 	leaq	94353(%rip), %rdi ## Objc cfstring ref: @"testSemaphore-task2"
100004c97:	31 c0 	xorl	%eax, %eax
100004c99:	e8 74 ef 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004c9e:	31 ff 	xorl	%edi, %edi
100004ca0:	31 f6 	xorl	%esi, %esi
100004ca2:	e8 01 f0 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100004ca7:	48 89 c7 	movq	%rax, %rdi
100004caa:	e8 25 f1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100004caf:	48 8b 0d 6a 53 01 00 	movq	86890(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100004cb6:	48 8d 5d c0 	leaq	-64(%rbp), %rbx
100004cba:	48 89 0b 	movq	%rcx, (%rbx)
100004cbd:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100004cc2:	48 89 4b 08 	movq	%rcx, 8(%rbx)
100004cc6:	49 89 c7 	movq	%rax, %r15
100004cc9:	48 8d 05 47 00 00 00 	leaq	"___36-[DispatchBarrierTest testSemaphore]_block_invoke_2.103"(%rip), %rax
100004cd0:	48 89 43 10 	movq	%rax, 16(%rbx)
100004cd4:	48 8d 05 85 5f 01 00 	leaq	___block_descriptor_tmp.108(%rip), %rax
100004cdb:	48 89 43 18 	movq	%rax, 24(%rbx)
100004cdf:	49 8b 7e 20 	movq	32(%r14), %rdi
100004ce3:	ff 15 8f 53 01 00 	callq	*86927(%rip) ## literal pool symbol address: _objc_retain
100004ce9:	48 89 43 20 	movq	%rax, 32(%rbx)
100004ced:	4c 89 ff 	movq	%r15, %rdi
100004cf0:	48 89 de 	movq	%rbx, %rsi
100004cf3:	e8 9e ef 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004cf8:	4c 8b 35 71 53 01 00 	movq	86897(%rip), %r14 ## literal pool symbol address: _objc_release
100004cff:	4c 89 ff 	movq	%r15, %rdi
100004d02:	41 ff d6 	callq	*%r14
100004d05:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004d09:	41 ff d6 	callq	*%r14
100004d0c:	48 83 c4 28 	addq	$40, %rsp
100004d10:	5b 	popq	%rbx
100004d11:	41 5e 	popq	%r14
100004d13:	41 5f 	popq	%r15
100004d15:	5d 	popq	%rbp
100004d16:	c3 	retq
___36-[DispatchBarrierTest testSemaphore]_block_invoke_2.103:
100004d17:	55 	pushq	%rbp
100004d18:	48 89 e5 	movq	%rsp, %rbp
100004d1b:	53 	pushq	%rbx
100004d1c:	50 	pushq	%rax
100004d1d:	48 89 fb 	movq	%rdi, %rbx
100004d20:	48 8b 3d 91 c9 01 00 	movq	117137(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
100004d27:	48 8b 35 2a c3 01 00 	movq	115498(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100004d2e:	f2 0f 10 05 82 4d 01 00 	movsd	85378(%rip), %xmm0
100004d36:	ff 15 2c 53 01 00 	callq	*86828(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004d3c:	48 8d 3d 05 70 01 00 	leaq	94213(%rip), %rdi ## Objc cfstring ref: @"testSemaphore-task2:async task"
100004d43:	31 c0 	xorl	%eax, %eax
100004d45:	e8 c8 ee 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004d4a:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004d4e:	48 83 c4 08 	addq	$8, %rsp
100004d52:	5b 	popq	%rbx
100004d53:	5d 	popq	%rbp
100004d54:	e9 85 ef 00 00 	jmp	0x100013cde ## symbol stub for: _dispatch_semaphore_signal
___copy_helper_block_.106:
100004d59:	55 	pushq	%rbp
100004d5a:	48 89 e5 	movq	%rsp, %rbp
100004d5d:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004d61:	5d 	popq	%rbp
100004d62:	ff 25 10 53 01 00 	jmpq	*86800(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.107:
100004d68:	55 	pushq	%rbp
100004d69:	48 89 e5 	movq	%rsp, %rbp
100004d6c:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004d70:	5d 	popq	%rbp
100004d71:	ff 25 f9 52 01 00 	jmpq	*86777(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_.109:
100004d77:	55 	pushq	%rbp
100004d78:	48 89 e5 	movq	%rsp, %rbp
100004d7b:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004d7f:	5d 	popq	%rbp
100004d80:	ff 25 f2 52 01 00 	jmpq	*86770(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.110:
100004d86:	55 	pushq	%rbp
100004d87:	48 89 e5 	movq	%rsp, %rbp
100004d8a:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004d8e:	5d 	popq	%rbp
100004d8f:	ff 25 db 52 01 00 	jmpq	*86747(%rip) ## literal pool symbol address: _objc_release
___36-[DispatchBarrierTest testSemaphore]_block_invoke.112:
100004d95:	55 	pushq	%rbp
100004d96:	48 89 e5 	movq	%rsp, %rbp
100004d99:	41 57 	pushq	%r15
100004d9b:	41 56 	pushq	%r14
100004d9d:	53 	pushq	%rbx
100004d9e:	48 83 ec 28 	subq	$40, %rsp
100004da2:	49 89 fe 	movq	%rdi, %r14
100004da5:	49 8b 7e 20 	movq	32(%r14), %rdi
100004da9:	48 c7 c6 ff ff ff ff 	movq	$-1, %rsi
100004db0:	e8 2f ef 00 00 	callq	0x100013ce4 ## symbol stub for: _dispatch_semaphore_wait
100004db5:	49 8b 7e 20 	movq	32(%r14), %rdi
100004db9:	48 c7 c6 ff ff ff ff 	movq	$-1, %rsi
100004dc0:	e8 1f ef 00 00 	callq	0x100013ce4 ## symbol stub for: _dispatch_semaphore_wait
100004dc5:	48 8d 3d 9c 6f 01 00 	leaq	94108(%rip), %rdi ## Objc cfstring ref: @"testSemaphore-task3"
100004dcc:	31 c0 	xorl	%eax, %eax
100004dce:	e8 3f ee 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004dd3:	31 ff 	xorl	%edi, %edi
100004dd5:	31 f6 	xorl	%esi, %esi
100004dd7:	e8 cc ee 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100004ddc:	48 89 c7 	movq	%rax, %rdi
100004ddf:	e8 f0 ef 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100004de4:	48 8b 0d 35 52 01 00 	movq	86581(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100004deb:	48 8d 5d c0 	leaq	-64(%rbp), %rbx
100004def:	48 89 0b 	movq	%rcx, (%rbx)
100004df2:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100004df7:	48 89 4b 08 	movq	%rcx, 8(%rbx)
100004dfb:	49 89 c7 	movq	%rax, %r15
100004dfe:	48 8d 05 47 00 00 00 	leaq	"___36-[DispatchBarrierTest testSemaphore]_block_invoke_2.115"(%rip), %rax
100004e05:	48 89 43 10 	movq	%rax, 16(%rbx)
100004e09:	48 8d 05 b0 5e 01 00 	leaq	___block_descriptor_tmp.120(%rip), %rax
100004e10:	48 89 43 18 	movq	%rax, 24(%rbx)
100004e14:	49 8b 7e 20 	movq	32(%r14), %rdi
100004e18:	ff 15 5a 52 01 00 	callq	*86618(%rip) ## literal pool symbol address: _objc_retain
100004e1e:	48 89 43 20 	movq	%rax, 32(%rbx)
100004e22:	4c 89 ff 	movq	%r15, %rdi
100004e25:	48 89 de 	movq	%rbx, %rsi
100004e28:	e8 69 ee 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004e2d:	4c 8b 35 3c 52 01 00 	movq	86588(%rip), %r14 ## literal pool symbol address: _objc_release
100004e34:	4c 89 ff 	movq	%r15, %rdi
100004e37:	41 ff d6 	callq	*%r14
100004e3a:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004e3e:	41 ff d6 	callq	*%r14
100004e41:	48 83 c4 28 	addq	$40, %rsp
100004e45:	5b 	popq	%rbx
100004e46:	41 5e 	popq	%r14
100004e48:	41 5f 	popq	%r15
100004e4a:	5d 	popq	%rbp
100004e4b:	c3 	retq
___36-[DispatchBarrierTest testSemaphore]_block_invoke_2.115:
100004e4c:	55 	pushq	%rbp
100004e4d:	48 89 e5 	movq	%rsp, %rbp
100004e50:	53 	pushq	%rbx
100004e51:	50 	pushq	%rax
100004e52:	48 89 fb 	movq	%rdi, %rbx
100004e55:	48 8b 3d 5c c8 01 00 	movq	116828(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
100004e5c:	48 8b 35 f5 c1 01 00 	movq	115189(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100004e63:	f2 0f 10 05 4d 4c 01 00 	movsd	85069(%rip), %xmm0
100004e6b:	ff 15 f7 51 01 00 	callq	*86519(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100004e71:	48 8d 3d 10 6f 01 00 	leaq	93968(%rip), %rdi ## Objc cfstring ref: @"testSemaphore-task3:async task"
100004e78:	31 c0 	xorl	%eax, %eax
100004e7a:	e8 93 ed 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100004e7f:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004e83:	e8 56 ee 00 00 	callq	0x100013cde ## symbol stub for: _dispatch_semaphore_signal
100004e88:	48 8b 7b 20 	movq	32(%rbx), %rdi
100004e8c:	48 83 c4 08 	addq	$8, %rsp
100004e90:	5b 	popq	%rbx
100004e91:	5d 	popq	%rbp
100004e92:	e9 47 ee 00 00 	jmp	0x100013cde ## symbol stub for: _dispatch_semaphore_signal
___copy_helper_block_.118:
100004e97:	55 	pushq	%rbp
100004e98:	48 89 e5 	movq	%rsp, %rbp
100004e9b:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004e9f:	5d 	popq	%rbp
100004ea0:	ff 25 d2 51 01 00 	jmpq	*86482(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.119:
100004ea6:	55 	pushq	%rbp
100004ea7:	48 89 e5 	movq	%rsp, %rbp
100004eaa:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004eae:	5d 	popq	%rbp
100004eaf:	ff 25 bb 51 01 00 	jmpq	*86459(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_.121:
100004eb5:	55 	pushq	%rbp
100004eb6:	48 89 e5 	movq	%rsp, %rbp
100004eb9:	48 8b 7e 20 	movq	32(%rsi), %rdi
100004ebd:	5d 	popq	%rbp
100004ebe:	ff 25 b4 51 01 00 	jmpq	*86452(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.122:
100004ec4:	55 	pushq	%rbp
100004ec5:	48 89 e5 	movq	%rsp, %rbp
100004ec8:	48 8b 7f 20 	movq	32(%rdi), %rdi
100004ecc:	5d 	popq	%rbp
100004ecd:	ff 25 9d 51 01 00 	jmpq	*86429(%rip) ## literal pool symbol address: _objc_release
-[DispatchBarrierTest testRunloop]:
100004ed3:	55 	pushq	%rbp
100004ed4:	48 89 e5 	movq	%rsp, %rbp
100004ed7:	41 57 	pushq	%r15
100004ed9:	41 56 	pushq	%r14
100004edb:	41 55 	pushq	%r13
100004edd:	41 54 	pushq	%r12
100004edf:	53 	pushq	%rbx
100004ee0:	48 81 ec c8 00 00 00 	subq	$200, %rsp
100004ee7:	48 8d 3d f9 02 01 00 	leaq	66297(%rip), %rdi ## literal pool for: "rl.runloop.test.queue"
100004eee:	48 8b 35 5b 51 01 00 	movq	86363(%rip), %rsi ## literal pool symbol address: __dispatch_queue_attr_concurrent
100004ef5:	e8 d8 ed 00 00 	callq	0x100013cd2 ## symbol stub for: _dispatch_queue_create
100004efa:	31 c9 	xorl	%ecx, %ecx
100004efc:	4c 8d 75 98 	leaq	-104(%rbp), %r14
100004f00:	49 89 0e 	movq	%rcx, (%r14)
100004f03:	4d 89 76 08 	movq	%r14, 8(%r14)
100004f07:	48 ba 00 00 00 20 20 00 00 00 	movabsq	$137975824384, %rdx
100004f11:	49 89 56 10 	movq	%rdx, 16(%r14)
100004f15:	41 88 4e 18 	movb	%cl, 24(%r14)
100004f19:	4c 8d 7d b8 	leaq	-72(%rbp), %r15
100004f1d:	49 89 0f 	movq	%rcx, (%r15)
100004f20:	4d 89 7f 08 	movq	%r15, 8(%r15)
100004f24:	49 89 57 10 	movq	%rdx, 16(%r15)
100004f28:	41 88 4f 18 	movb	%cl, 24(%r15)
100004f2c:	4c 8b 25 ed 50 01 00 	movq	86253(%rip), %r12 ## literal pool symbol address: __NSConcreteStackBlock
100004f33:	48 8d b5 48 ff ff ff 	leaq	-184(%rbp), %rsi
100004f3a:	4c 89 26 	movq	%r12, (%rsi)
100004f3d:	48 89 c3 	movq	%rax, %rbx
100004f40:	41 bd 00 00 00 c2 	movl	$3254779904, %r13d
100004f46:	4c 89 6e 08 	movq	%r13, 8(%rsi)
100004f4a:	48 8d 05 b4 00 00 00 	leaq	"___34-[DispatchBarrierTest testRunloop]_block_invoke"(%rip), %rax
100004f51:	48 89 46 10 	movq	%rax, 16(%rsi)
100004f55:	48 8d 05 f4 5d 01 00 	leaq	___block_descriptor_tmp.134(%rip), %rax
100004f5c:	48 89 46 18 	movq	%rax, 24(%rsi)
100004f60:	4c 89 76 20 	movq	%r14, 32(%rsi)
100004f64:	48 89 df 	movq	%rbx, %rdi
100004f67:	e8 2a ed 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004f6c:	48 8d b5 70 ff ff ff 	leaq	-144(%rbp), %rsi
100004f73:	4c 89 26 	movq	%r12, (%rsi)
100004f76:	4c 89 6e 08 	movq	%r13, 8(%rsi)
100004f7a:	48 8d 05 9d 01 00 00 	leaq	"___34-[DispatchBarrierTest testRunloop]_block_invoke.135"(%rip), %rax
100004f81:	48 89 46 10 	movq	%rax, 16(%rsi)
100004f85:	48 8d 05 24 5e 01 00 	leaq	___block_descriptor_tmp.146(%rip), %rax
100004f8c:	48 89 46 18 	movq	%rax, 24(%rsi)
100004f90:	4c 89 7e 20 	movq	%r15, 32(%rsi)
100004f94:	48 89 df 	movq	%rbx, %rdi
100004f97:	e8 fa ec 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004f9c:	48 8d b5 18 ff ff ff 	leaq	-232(%rbp), %rsi
100004fa3:	4c 89 26 	movq	%r12, (%rsi)
100004fa6:	4c 89 6e 08 	movq	%r13, 8(%rsi)
100004faa:	48 8d 05 86 02 00 00 	leaq	"___34-[DispatchBarrierTest testRunloop]_block_invoke.147"(%rip), %rax
100004fb1:	48 89 46 10 	movq	%rax, 16(%rsi)
100004fb5:	48 8d 05 64 5e 01 00 	leaq	___block_descriptor_tmp.165(%rip), %rax
100004fbc:	48 89 46 18 	movq	%rax, 24(%rsi)
100004fc0:	4c 89 76 20 	movq	%r14, 32(%rsi)
100004fc4:	4c 89 7e 28 	movq	%r15, 40(%rsi)
100004fc8:	48 89 df 	movq	%rbx, %rdi
100004fcb:	e8 c6 ec 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100004fd0:	be 08 00 00 00 	movl	$8, %esi
100004fd5:	4c 89 ff 	movq	%r15, %rdi
100004fd8:	e8 5f ec 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
100004fdd:	be 08 00 00 00 	movl	$8, %esi
100004fe2:	4c 89 f7 	movq	%r14, %rdi
100004fe5:	e8 52 ec 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
100004fea:	48 89 df 	movq	%rbx, %rdi
100004fed:	ff 15 7d 50 01 00 	callq	*86141(%rip) ## literal pool symbol address: _objc_release
100004ff3:	48 81 c4 c8 00 00 00 	addq	$200, %rsp
100004ffa:	5b 	popq	%rbx
100004ffb:	41 5c 	popq	%r12
100004ffd:	41 5d 	popq	%r13
100004fff:	41 5e 	popq	%r14
100005001:	41 5f 	popq	%r15
100005003:	5d 	popq	%rbp
100005004:	c3 	retq
___34-[DispatchBarrierTest testRunloop]_block_invoke:
100005005:	55 	pushq	%rbp
100005006:	48 89 e5 	movq	%rsp, %rbp
100005009:	41 56 	pushq	%r14
10000500b:	53 	pushq	%rbx
10000500c:	48 83 ec 30 	subq	$48, %rsp
100005010:	49 89 fe 	movq	%rdi, %r14
100005013:	48 8d 3d 8e 6d 01 00 	leaq	93582(%rip), %rdi ## Objc cfstring ref: @"testRunloop-task1"
10000501a:	31 c0 	xorl	%eax, %eax
10000501c:	e8 f1 eb 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005021:	31 ff 	xorl	%edi, %edi
100005023:	31 f6 	xorl	%esi, %esi
100005025:	e8 7e ec 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
10000502a:	48 89 c7 	movq	%rax, %rdi
10000502d:	e8 a2 ed 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005032:	48 8b 0d e7 4f 01 00 	movq	85991(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100005039:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
10000503d:	48 89 0e 	movq	%rcx, (%rsi)
100005040:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100005045:	48 89 4e 08 	movq	%rcx, 8(%rsi)
100005049:	48 8d 0d 34 00 00 00 	leaq	"___34-[DispatchBarrierTest testRunloop]_block_invoke_2"(%rip), %rcx
100005050:	48 89 4e 10 	movq	%rcx, 16(%rsi)
100005054:	48 8d 0d c5 5c 01 00 	leaq	___block_descriptor_tmp.131(%rip), %rcx
10000505b:	48 89 4e 18 	movq	%rcx, 24(%rsi)
10000505f:	48 89 c3 	movq	%rax, %rbx
100005062:	49 8b 46 20 	movq	32(%r14), %rax
100005066:	48 89 46 20 	movq	%rax, 32(%rsi)
10000506a:	48 89 df 	movq	%rbx, %rdi
10000506d:	e8 24 ec 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
100005072:	48 89 df 	movq	%rbx, %rdi
100005075:	ff 15 f5 4f 01 00 	callq	*86005(%rip) ## literal pool symbol address: _objc_release
10000507b:	48 83 c4 30 	addq	$48, %rsp
10000507f:	5b 	popq	%rbx
100005080:	41 5e 	popq	%r14
100005082:	5d 	popq	%rbp
100005083:	c3 	retq
___34-[DispatchBarrierTest testRunloop]_block_invoke_2:
100005084:	55 	pushq	%rbp
100005085:	48 89 e5 	movq	%rsp, %rbp
100005088:	53 	pushq	%rbx
100005089:	50 	pushq	%rax
10000508a:	48 89 fb 	movq	%rdi, %rbx
10000508d:	48 8b 3d 24 c6 01 00 	movq	116260(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
100005094:	48 8b 35 bd bf 01 00 	movq	114621(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
10000509b:	f2 0f 10 05 0d 4a 01 00 	movsd	84493(%rip), %xmm0
1000050a3:	ff 15 bf 4f 01 00 	callq	*85951(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
1000050a9:	48 8d 3d 18 6d 01 00 	leaq	93464(%rip), %rdi ## Objc cfstring ref: @"testRunloop-task1:async task"
1000050b0:	31 c0 	xorl	%eax, %eax
1000050b2:	e8 5b eb 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000050b7:	48 8b 43 20 	movq	32(%rbx), %rax
1000050bb:	48 8b 40 08 	movq	8(%rax), %rax
1000050bf:	c6 40 18 01 	movb	$1, 24(%rax)
1000050c3:	48 83 c4 08 	addq	$8, %rsp
1000050c7:	5b 	popq	%rbx
1000050c8:	5d 	popq	%rbp
1000050c9:	c3 	retq
___copy_helper_block_.129:
1000050ca:	55 	pushq	%rbp
1000050cb:	48 89 e5 	movq	%rsp, %rbp
1000050ce:	48 83 c7 20 	addq	$32, %rdi
1000050d2:	48 8b 76 20 	movq	32(%rsi), %rsi
1000050d6:	ba 08 00 00 00 	movl	$8, %edx
1000050db:	5d 	popq	%rbp
1000050dc:	e9 55 eb 00 00 	jmp	0x100013c36 ## symbol stub for: __Block_object_assign
___destroy_helper_block_.130:
1000050e1:	55 	pushq	%rbp
1000050e2:	48 89 e5 	movq	%rsp, %rbp
1000050e5:	48 8b 7f 20 	movq	32(%rdi), %rdi
1000050e9:	be 08 00 00 00 	movl	$8, %esi
1000050ee:	5d 	popq	%rbp
1000050ef:	e9 48 eb 00 00 	jmp	0x100013c3c ## symbol stub for: __Block_object_dispose
___copy_helper_block_.132:
1000050f4:	55 	pushq	%rbp
1000050f5:	48 89 e5 	movq	%rsp, %rbp
1000050f8:	48 83 c7 20 	addq	$32, %rdi
1000050fc:	48 8b 76 20 	movq	32(%rsi), %rsi
100005100:	ba 08 00 00 00 	movl	$8, %edx
100005105:	5d 	popq	%rbp
100005106:	e9 2b eb 00 00 	jmp	0x100013c36 ## symbol stub for: __Block_object_assign
___destroy_helper_block_.133:
10000510b:	55 	pushq	%rbp
10000510c:	48 89 e5 	movq	%rsp, %rbp
10000510f:	48 8b 7f 20 	movq	32(%rdi), %rdi
100005113:	be 08 00 00 00 	movl	$8, %esi
100005118:	5d 	popq	%rbp
100005119:	e9 1e eb 00 00 	jmp	0x100013c3c ## symbol stub for: __Block_object_dispose
___34-[DispatchBarrierTest testRunloop]_block_invoke.135:
10000511e:	55 	pushq	%rbp
10000511f:	48 89 e5 	movq	%rsp, %rbp
100005122:	41 56 	pushq	%r14
100005124:	53 	pushq	%rbx
100005125:	48 83 ec 30 	subq	$48, %rsp
100005129:	49 89 fe 	movq	%rdi, %r14
10000512c:	48 8d 3d b5 6c 01 00 	leaq	93365(%rip), %rdi ## Objc cfstring ref: @"testRunloop-task2"
100005133:	31 c0 	xorl	%eax, %eax
100005135:	e8 d8 ea 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000513a:	31 ff 	xorl	%edi, %edi
10000513c:	31 f6 	xorl	%esi, %esi
10000513e:	e8 65 eb 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100005143:	48 89 c7 	movq	%rax, %rdi
100005146:	e8 89 ec 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000514b:	48 8b 0d ce 4e 01 00 	movq	85710(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100005152:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
100005156:	48 89 0e 	movq	%rcx, (%rsi)
100005159:	b9 00 00 00 c2 	movl	$3254779904, %ecx
10000515e:	48 89 4e 08 	movq	%rcx, 8(%rsi)
100005162:	48 8d 0d 34 00 00 00 	leaq	"___34-[DispatchBarrierTest testRunloop]_block_invoke_2.138"(%rip), %rcx
100005169:	48 89 4e 10 	movq	%rcx, 16(%rsi)
10000516d:	48 8d 0d 0c 5c 01 00 	leaq	___block_descriptor_tmp.143(%rip), %rcx
100005174:	48 89 4e 18 	movq	%rcx, 24(%rsi)
100005178:	48 89 c3 	movq	%rax, %rbx
10000517b:	49 8b 46 20 	movq	32(%r14), %rax
10000517f:	48 89 46 20 	movq	%rax, 32(%rsi)
100005183:	48 89 df 	movq	%rbx, %rdi
100005186:	e8 0b eb 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
10000518b:	48 89 df 	movq	%rbx, %rdi
10000518e:	ff 15 dc 4e 01 00 	callq	*85724(%rip) ## literal pool symbol address: _objc_release
100005194:	48 83 c4 30 	addq	$48, %rsp
100005198:	5b 	popq	%rbx
100005199:	41 5e 	popq	%r14
10000519b:	5d 	popq	%rbp
10000519c:	c3 	retq
___34-[DispatchBarrierTest testRunloop]_block_invoke_2.138:
10000519d:	55 	pushq	%rbp
10000519e:	48 89 e5 	movq	%rsp, %rbp
1000051a1:	53 	pushq	%rbx
1000051a2:	50 	pushq	%rax
1000051a3:	48 89 fb 	movq	%rdi, %rbx
1000051a6:	48 8b 3d 0b c5 01 00 	movq	115979(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
1000051ad:	48 8b 35 a4 be 01 00 	movq	114340(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
1000051b4:	f2 0f 10 05 fc 48 01 00 	movsd	84220(%rip), %xmm0
1000051bc:	ff 15 a6 4e 01 00 	callq	*85670(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
1000051c2:	48 8d 3d 3f 6c 01 00 	leaq	93247(%rip), %rdi ## Objc cfstring ref: @"testRunloop-task2:async task"
1000051c9:	31 c0 	xorl	%eax, %eax
1000051cb:	e8 42 ea 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000051d0:	48 8b 43 20 	movq	32(%rbx), %rax
1000051d4:	48 8b 40 08 	movq	8(%rax), %rax
1000051d8:	c6 40 18 01 	movb	$1, 24(%rax)
1000051dc:	48 83 c4 08 	addq	$8, %rsp
1000051e0:	5b 	popq	%rbx
1000051e1:	5d 	popq	%rbp
1000051e2:	c3 	retq
___copy_helper_block_.141:
1000051e3:	55 	pushq	%rbp
1000051e4:	48 89 e5 	movq	%rsp, %rbp
1000051e7:	48 83 c7 20 	addq	$32, %rdi
1000051eb:	48 8b 76 20 	movq	32(%rsi), %rsi
1000051ef:	ba 08 00 00 00 	movl	$8, %edx
1000051f4:	5d 	popq	%rbp
1000051f5:	e9 3c ea 00 00 	jmp	0x100013c36 ## symbol stub for: __Block_object_assign
___destroy_helper_block_.142:
1000051fa:	55 	pushq	%rbp
1000051fb:	48 89 e5 	movq	%rsp, %rbp
1000051fe:	48 8b 7f 20 	movq	32(%rdi), %rdi
100005202:	be 08 00 00 00 	movl	$8, %esi
100005207:	5d 	popq	%rbp
100005208:	e9 2f ea 00 00 	jmp	0x100013c3c ## symbol stub for: __Block_object_dispose
___copy_helper_block_.144:
10000520d:	55 	pushq	%rbp
10000520e:	48 89 e5 	movq	%rsp, %rbp
100005211:	48 83 c7 20 	addq	$32, %rdi
100005215:	48 8b 76 20 	movq	32(%rsi), %rsi
100005219:	ba 08 00 00 00 	movl	$8, %edx
10000521e:	5d 	popq	%rbp
10000521f:	e9 12 ea 00 00 	jmp	0x100013c36 ## symbol stub for: __Block_object_assign
___destroy_helper_block_.145:
100005224:	55 	pushq	%rbp
100005225:	48 89 e5 	movq	%rsp, %rbp
100005228:	48 8b 7f 20 	movq	32(%rdi), %rdi
10000522c:	be 08 00 00 00 	movl	$8, %esi
100005231:	5d 	popq	%rbp
100005232:	e9 05 ea 00 00 	jmp	0x100013c3c ## symbol stub for: __Block_object_dispose
___34-[DispatchBarrierTest testRunloop]_block_invoke.147:
100005237:	55 	pushq	%rbp
100005238:	48 89 e5 	movq	%rsp, %rbp
10000523b:	41 57 	pushq	%r15
10000523d:	41 56 	pushq	%r14
10000523f:	41 55 	pushq	%r13
100005241:	41 54 	pushq	%r12
100005243:	53 	pushq	%rbx
100005244:	48 83 ec 18 	subq	$24, %rsp
100005248:	49 89 fd 	movq	%rdi, %r13
10000524b:	48 8b 05 0e be 01 00 	movq	114190(%rip), %rax ## Objc selector ref: currentRunLoop
100005252:	48 89 45 c0 	movq	%rax, -64(%rbp)
100005256:	48 8b 05 0b be 01 00 	movq	114187(%rip), %rax ## Objc selector ref: dateWithTimeIntervalSinceNow:
10000525d:	48 89 45 c8 	movq	%rax, -56(%rbp)
100005261:	48 8b 05 08 be 01 00 	movq	114184(%rip), %rax ## Objc selector ref: runUntilDate:
100005268:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000526c:	4c 8b 3d f5 4d 01 00 	movq	85493(%rip), %r15 ## Objc message: -[%rdi runUntilDate:]
100005273:	4c 8b 25 f6 4d 01 00 	movq	85494(%rip), %r12 ## literal pool symbol address: _objc_release
10000527a:	eb 53 	jmp	0x1000052cf
10000527c:	48 8b 3d 55 c4 01 00 	movq	115797(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSRunLoop
100005283:	48 8b 75 c0 	movq	-64(%rbp), %rsi
100005287:	41 ff d7 	callq	*%r15
10000528a:	48 89 c7 	movq	%rax, %rdi
10000528d:	e8 42 eb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005292:	48 89 c3 	movq	%rax, %rbx
100005295:	48 8b 3d 34 c4 01 00 	movq	115764(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDate
10000529c:	48 8b 75 c8 	movq	-56(%rbp), %rsi
1000052a0:	f2 0f 10 05 18 48 01 00 	movsd	83992(%rip), %xmm0
1000052a8:	41 ff d7 	callq	*%r15
1000052ab:	48 89 c7 	movq	%rax, %rdi
1000052ae:	e8 21 eb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000052b3:	49 89 c6 	movq	%rax, %r14
1000052b6:	48 89 df 	movq	%rbx, %rdi
1000052b9:	48 8b 75 d0 	movq	-48(%rbp), %rsi
1000052bd:	4c 89 f2 	movq	%r14, %rdx
1000052c0:	41 ff d7 	callq	*%r15
1000052c3:	4c 89 f7 	movq	%r14, %rdi
1000052c6:	41 ff d4 	callq	*%r12
1000052c9:	48 89 df 	movq	%rbx, %rdi
1000052cc:	41 ff d4 	callq	*%r12
1000052cf:	49 8b 45 20 	movq	32(%r13), %rax
1000052d3:	48 8b 40 08 	movq	8(%rax), %rax
1000052d7:	80 78 18 00 	cmpb	$0, 24(%rax)
1000052db:	74 9f 	je	0x10000527c
1000052dd:	49 8b 45 28 	movq	40(%r13), %rax
1000052e1:	48 8b 40 08 	movq	8(%rax), %rax
1000052e5:	80 78 18 00 	cmpb	$0, 24(%rax)
1000052e9:	74 91 	je	0x10000527c
1000052eb:	48 8d 3d 36 6b 01 00 	leaq	92982(%rip), %rdi ## Objc cfstring ref: @"testRunloop-task3"
1000052f2:	31 c0 	xorl	%eax, %eax
1000052f4:	e8 19 e9 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000052f9:	31 ff 	xorl	%edi, %edi
1000052fb:	31 f6 	xorl	%esi, %esi
1000052fd:	e8 a6 e9 00 00 	callq	0x100013ca8 ## symbol stub for: _dispatch_get_global_queue
100005302:	48 89 c7 	movq	%rax, %rdi
100005305:	e8 ca ea 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000530a:	48 89 c3 	movq	%rax, %rbx
10000530d:	48 8d 35 ec 5a 01 00 	leaq	___block_literal_global.160(%rip), %rsi
100005314:	48 89 df 	movq	%rbx, %rdi
100005317:	e8 7a e9 00 00 	callq	0x100013c96 ## symbol stub for: _dispatch_async
10000531c:	48 89 df 	movq	%rbx, %rdi
10000531f:	48 83 c4 18 	addq	$24, %rsp
100005323:	5b 	popq	%rbx
100005324:	41 5c 	popq	%r12
100005326:	41 5d 	popq	%r13
100005328:	41 5e 	popq	%r14
10000532a:	41 5f 	popq	%r15
10000532c:	5d 	popq	%rbp
10000532d:	ff 25 3d 4d 01 00 	jmpq	*85309(%rip) ## literal pool symbol address: _objc_release
___34-[DispatchBarrierTest testRunloop]_block_invoke_2.158:
100005333:	55 	pushq	%rbp
100005334:	48 89 e5 	movq	%rsp, %rbp
100005337:	48 8b 3d 7a c3 01 00 	movq	115578(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSThread
10000533e:	48 8b 35 13 bd 01 00 	movq	113939(%rip), %rsi ## Objc selector ref: sleepForTimeInterval:
100005345:	f2 0f 10 05 6b 47 01 00 	movsd	83819(%rip), %xmm0
10000534d:	ff 15 15 4d 01 00 	callq	*85269(%rip) ## Objc message: +[NSThread sleepForTimeInterval:]
100005353:	48 8d 3d ee 6a 01 00 	leaq	92910(%rip), %rdi ## Objc cfstring ref: @"testRunloop-task3:async task"
10000535a:	31 c0 	xorl	%eax, %eax
10000535c:	e8 b1 e8 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005361:	5d 	popq	%rbp
100005362:	c3 	retq
___copy_helper_block_.163:
100005363:	55 	pushq	%rbp
100005364:	48 89 e5 	movq	%rsp, %rbp
100005367:	41 56 	pushq	%r14
100005369:	53 	pushq	%rbx
10000536a:	49 89 f6 	movq	%rsi, %r14
10000536d:	48 89 fb 	movq	%rdi, %rbx
100005370:	48 8d 7b 20 	leaq	32(%rbx), %rdi
100005374:	49 8b 76 20 	movq	32(%r14), %rsi
100005378:	ba 08 00 00 00 	movl	$8, %edx
10000537d:	e8 b4 e8 00 00 	callq	0x100013c36 ## symbol stub for: __Block_object_assign
100005382:	48 83 c3 28 	addq	$40, %rbx
100005386:	49 8b 76 28 	movq	40(%r14), %rsi
10000538a:	ba 08 00 00 00 	movl	$8, %edx
10000538f:	48 89 df 	movq	%rbx, %rdi
100005392:	5b 	popq	%rbx
100005393:	41 5e 	popq	%r14
100005395:	5d 	popq	%rbp
100005396:	e9 9b e8 00 00 	jmp	0x100013c36 ## symbol stub for: __Block_object_assign
___destroy_helper_block_.164:
10000539b:	55 	pushq	%rbp
10000539c:	48 89 e5 	movq	%rsp, %rbp
10000539f:	53 	pushq	%rbx
1000053a0:	50 	pushq	%rax
1000053a1:	48 89 fb 	movq	%rdi, %rbx
1000053a4:	48 8b 7b 20 	movq	32(%rbx), %rdi
1000053a8:	be 08 00 00 00 	movl	$8, %esi
1000053ad:	e8 8a e8 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
1000053b2:	48 8b 7b 28 	movq	40(%rbx), %rdi
1000053b6:	be 08 00 00 00 	movl	$8, %esi
1000053bb:	48 83 c4 08 	addq	$8, %rsp
1000053bf:	5b 	popq	%rbx
1000053c0:	5d 	popq	%rbp
1000053c1:	e9 76 e8 00 00 	jmp	0x100013c3c ## symbol stub for: __Block_object_dispose
-[TestClassCluster init]:
1000053c6:	55 	pushq	%rbp
1000053c7:	48 89 e5 	movq	%rsp, %rbp
1000053ca:	53 	pushq	%rbx
1000053cb:	48 83 ec 18 	subq	$24, %rsp
1000053cf:	48 8d 45 e8 	leaq	-24(%rbp), %rax
1000053d3:	48 89 38 	movq	%rdi, (%rax)
1000053d6:	48 8b 0d 33 c4 01 00 	movq	115763(%rip), %rcx ## Objc class ref: TestClassCluster
1000053dd:	48 89 48 08 	movq	%rcx, 8(%rax)
1000053e1:	48 8b 35 80 ba 01 00 	movq	113280(%rip), %rsi ## Objc selector ref: init
1000053e8:	48 89 c7 	movq	%rax, %rdi
1000053eb:	e8 cc e9 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
1000053f0:	48 89 c3 	movq	%rax, %rbx
1000053f3:	48 85 db 	testq	%rbx, %rbx
1000053f6:	74 10 	je	0x100005408
1000053f8:	48 8b 35 f9 ba 01 00 	movq	113401(%rip), %rsi ## Objc selector ref: test
1000053ff:	48 89 df 	movq	%rbx, %rdi
100005402:	ff 15 60 4c 01 00 	callq	*85088(%rip) ## Objc message: -[%rdi test]
100005408:	48 89 d8 	movq	%rbx, %rax
10000540b:	48 83 c4 18 	addq	$24, %rsp
10000540f:	5b 	popq	%rbx
100005410:	5d 	popq	%rbp
100005411:	c3 	retq
-[TestClassCluster test]:
100005412:	55 	pushq	%rbp
100005413:	48 89 e5 	movq	%rsp, %rbp
100005416:	41 56 	pushq	%r14
100005418:	53 	pushq	%rbx
100005419:	48 89 fb 	movq	%rdi, %rbx
10000541c:	48 8b 35 55 bc 01 00 	movq	113749(%rip), %rsi ## Objc selector ref: testNSString
100005423:	4c 8b 35 3e 4c 01 00 	movq	85054(%rip), %r14 ## Objc message: -[%rdi testNSString]
10000542a:	41 ff d6 	callq	*%r14
10000542d:	48 8b 35 4c bc 01 00 	movq	113740(%rip), %rsi ## Objc selector ref: testArray
100005434:	48 89 df 	movq	%rbx, %rdi
100005437:	41 ff d6 	callq	*%r14
10000543a:	48 8b 35 47 bc 01 00 	movq	113735(%rip), %rsi ## Objc selector ref: testNumber
100005441:	48 89 df 	movq	%rbx, %rdi
100005444:	41 ff d6 	callq	*%r14
100005447:	48 8b 35 42 bc 01 00 	movq	113730(%rip), %rsi ## Objc selector ref: testNSDate
10000544e:	48 89 df 	movq	%rbx, %rdi
100005451:	41 ff d6 	callq	*%r14
100005454:	48 8b 35 3d bc 01 00 	movq	113725(%rip), %rsi ## Objc selector ref: testNSSet
10000545b:	48 89 df 	movq	%rbx, %rdi
10000545e:	41 ff d6 	callq	*%r14
100005461:	48 8b 35 38 bc 01 00 	movq	113720(%rip), %rsi ## Objc selector ref: testNSMap
100005468:	48 89 df 	movq	%rbx, %rdi
10000546b:	4c 89 f0 	movq	%r14, %rax
10000546e:	5b 	popq	%rbx
10000546f:	41 5e 	popq	%r14
100005471:	5d 	popq	%rbp
100005472:	ff e0 	jmpq	*%rax
-[TestClassCluster testNSString]:
100005474:	55 	pushq	%rbp
100005475:	48 89 e5 	movq	%rsp, %rbp
100005478:	41 57 	pushq	%r15
10000547a:	41 56 	pushq	%r14
10000547c:	41 55 	pushq	%r13
10000547e:	41 54 	pushq	%r12
100005480:	53 	pushq	%rbx
100005481:	50 	pushq	%rax
100005482:	48 8b 3d 37 c2 01 00 	movq	115255(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
100005489:	48 8b 35 30 bb 01 00 	movq	113456(%rip), %rsi ## Objc selector ref: stringWithFormat:
100005490:	48 8d 15 31 5e 01 00 	leaq	89649(%rip), %rdx ## Objc cfstring ref: @"111"
100005497:	4c 8b 2d ca 4b 01 00 	movq	84938(%rip), %r13 ## Objc message: +[NSString stringWithFormat:]
10000549e:	31 c0 	xorl	%eax, %eax
1000054a0:	41 ff d5 	callq	*%r13
1000054a3:	48 89 c7 	movq	%rax, %rdi
1000054a6:	e8 29 e9 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000054ab:	49 89 c4 	movq	%rax, %r12
1000054ae:	48 8b 3d 0b c2 01 00 	movq	115211(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
1000054b5:	4c 8b 35 e4 b9 01 00 	movq	113124(%rip), %r14 ## Objc selector ref: class
1000054bc:	4c 89 f6 	movq	%r14, %rsi
1000054bf:	41 ff d5 	callq	*%r13
1000054c2:	48 8b 35 df bb 01 00 	movq	113631(%rip), %rsi ## Objc selector ref: isMemberOfClass:
1000054c9:	4c 89 e7 	movq	%r12, %rdi
1000054cc:	48 89 c2 	movq	%rax, %rdx
1000054cf:	41 ff d5 	callq	*%r13
1000054d2:	84 c0 	testb	%al, %al
1000054d4:	0f 84 f7 00 00 00 	je	0x1000055d1
1000054da:	48 8d 3d 87 69 01 00 	leaq	92551(%rip), %rdi ## Objc cfstring ref: @"[aString isMemberOfClass:[NSString class]]"
1000054e1:	31 c0 	xorl	%eax, %eax
1000054e3:	e8 2a e7 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000054e8:	4c 89 e7 	movq	%r12, %rdi
1000054eb:	4c 89 f6 	movq	%r14, %rsi
1000054ee:	41 ff d5 	callq	*%r13
1000054f1:	48 89 c7 	movq	%rax, %rdi
1000054f4:	e8 25 e7 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
1000054f9:	48 89 c7 	movq	%rax, %rdi
1000054fc:	e8 d3 e8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005501:	48 89 c3 	movq	%rax, %rbx
100005504:	48 8d 3d 9d 69 01 00 	leaq	92573(%rip), %rdi ## Objc cfstring ref: @"aString class is %@"
10000550b:	31 c0 	xorl	%eax, %eax
10000550d:	48 89 de 	movq	%rbx, %rsi
100005510:	e8 fd e6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005515:	4c 8b 3d 54 4b 01 00 	movq	84820(%rip), %r15 ## literal pool symbol address: _objc_release
10000551c:	48 89 df 	movq	%rbx, %rdi
10000551f:	41 ff d7 	callq	*%r15
100005522:	48 8d 3d 9f 5d 01 00 	leaq	89503(%rip), %rdi ## Objc cfstring ref: @"111"
100005529:	4c 89 f6 	movq	%r14, %rsi
10000552c:	41 ff d5 	callq	*%r13
10000552f:	48 89 c7 	movq	%rax, %rdi
100005532:	e8 e7 e6 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
100005537:	48 89 c7 	movq	%rax, %rdi
10000553a:	e8 95 e8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000553f:	48 89 c3 	movq	%rax, %rbx
100005542:	48 8d 3d 7f 69 01 00 	leaq	92543(%rip), %rdi ## Objc cfstring ref: @"bString class is %@"
100005549:	31 c0 	xorl	%eax, %eax
10000554b:	48 89 de 	movq	%rbx, %rsi
10000554e:	e8 bf e6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005553:	48 89 df 	movq	%rbx, %rdi
100005556:	41 ff d7 	callq	*%r15
100005559:	48 8b 3d 60 c1 01 00 	movq	115040(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
100005560:	48 8d 15 81 69 01 00 	leaq	92545(%rip), %rdx ## Objc cfstring ref: @"111111111111"
100005567:	31 c0 	xorl	%eax, %eax
100005569:	48 8b 35 50 ba 01 00 	movq	113232(%rip), %rsi ## Objc selector ref: stringWithFormat:
100005570:	41 ff d5 	callq	*%r13
100005573:	48 89 c7 	movq	%rax, %rdi
100005576:	e8 59 e8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000557b:	49 89 c6 	movq	%rax, %r14
10000557e:	4c 89 f7 	movq	%r14, %rdi
100005581:	48 8b 35 18 b9 01 00 	movq	112920(%rip), %rsi ## Objc selector ref: class
100005588:	41 ff d5 	callq	*%r13
10000558b:	48 89 c7 	movq	%rax, %rdi
10000558e:	e8 8b e6 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
100005593:	48 89 c7 	movq	%rax, %rdi
100005596:	e8 39 e8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000559b:	48 89 c3 	movq	%rax, %rbx
10000559e:	48 8d 3d 63 69 01 00 	leaq	92515(%rip), %rdi ## Objc cfstring ref: @"cString class is %@"
1000055a5:	31 c0 	xorl	%eax, %eax
1000055a7:	48 89 de 	movq	%rbx, %rsi
1000055aa:	e8 63 e6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000055af:	48 89 df 	movq	%rbx, %rdi
1000055b2:	41 ff d7 	callq	*%r15
1000055b5:	4c 89 f7 	movq	%r14, %rdi
1000055b8:	41 ff d7 	callq	*%r15
1000055bb:	4c 89 e7 	movq	%r12, %rdi
1000055be:	4c 89 f8 	movq	%r15, %rax
1000055c1:	48 83 c4 08 	addq	$8, %rsp
1000055c5:	5b 	popq	%rbx
1000055c6:	41 5c 	popq	%r12
1000055c8:	41 5d 	popq	%r13
1000055ca:	41 5e 	popq	%r14
1000055cc:	41 5f 	popq	%r15
1000055ce:	5d 	popq	%rbp
1000055cf:	ff e0 	jmpq	*%rax
1000055d1:	48 8b 3d e8 c0 01 00 	movq	114920(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
1000055d8:	4c 89 f6 	movq	%r14, %rsi
1000055db:	41 ff d5 	callq	*%r13
1000055de:	48 8b 35 cb ba 01 00 	movq	113355(%rip), %rsi ## Objc selector ref: isKindOfClass:
1000055e5:	4c 89 e7 	movq	%r12, %rdi
1000055e8:	48 89 c2 	movq	%rax, %rdx
1000055eb:	41 ff d5 	callq	*%r13
1000055ee:	84 c0 	testb	%al, %al
1000055f0:	0f 84 f2 fe ff ff 	je	0x1000054e8
1000055f6:	48 8d 3d 8b 68 01 00 	leaq	92299(%rip), %rdi ## Objc cfstring ref: @"[aString isKindOfClass:[NSString class]]"
1000055fd:	e9 df fe ff ff 	jmp	0x1000054e1
-[TestClassCluster testArray]:
100005602:	55 	pushq	%rbp
100005603:	48 89 e5 	movq	%rsp, %rbp
100005606:	41 57 	pushq	%r15
100005608:	41 56 	pushq	%r14
10000560a:	41 55 	pushq	%r13
10000560c:	41 54 	pushq	%r12
10000560e:	53 	pushq	%rbx
10000560f:	50 	pushq	%rax
100005610:	48 8b 05 11 4a 01 00 	movq	84497(%rip), %rax ## literal pool symbol address: ___NSArray0__
100005617:	48 8b 38 	movq	(%rax), %rdi
10000561a:	ff 15 58 4a 01 00 	callq	*84568(%rip) ## literal pool symbol address: _objc_retain
100005620:	49 89 c4 	movq	%rax, %r12
100005623:	48 8b 3d 66 c0 01 00 	movq	114790(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSArray
10000562a:	4c 8b 35 6f b8 01 00 	movq	112751(%rip), %r14 ## Objc selector ref: class
100005631:	4c 8b 3d 30 4a 01 00 	movq	84528(%rip), %r15 ## Objc message: +[NSArray class]
100005638:	4c 89 f6 	movq	%r14, %rsi
10000563b:	41 ff d7 	callq	*%r15
10000563e:	48 8b 35 63 ba 01 00 	movq	113251(%rip), %rsi ## Objc selector ref: isMemberOfClass:
100005645:	4c 89 e7 	movq	%r12, %rdi
100005648:	48 89 c2 	movq	%rax, %rdx
10000564b:	41 ff d7 	callq	*%r15
10000564e:	84 c0 	testb	%al, %al
100005650:	0f 84 e0 00 00 00 	je	0x100005736
100005656:	48 8d 3d cb 68 01 00 	leaq	92363(%rip), %rdi ## Objc cfstring ref: @"[array isMemberOfClass:[NSArray class]]"
10000565d:	31 c0 	xorl	%eax, %eax
10000565f:	e8 ae e5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005664:	4c 89 e7 	movq	%r12, %rdi
100005667:	4c 89 f6 	movq	%r14, %rsi
10000566a:	41 ff d7 	callq	*%r15
10000566d:	48 89 c7 	movq	%rax, %rdi
100005670:	e8 a9 e5 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
100005675:	48 89 c7 	movq	%rax, %rdi
100005678:	e8 57 e7 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000567d:	48 89 c3 	movq	%rax, %rbx
100005680:	48 8d 3d e1 68 01 00 	leaq	92385(%rip), %rdi ## Objc cfstring ref: @"arrary class is %@"
100005687:	31 c0 	xorl	%eax, %eax
100005689:	48 89 de 	movq	%rbx, %rsi
10000568c:	e8 81 e5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005691:	48 89 df 	movq	%rbx, %rdi
100005694:	ff 15 d6 49 01 00 	callq	*84438(%rip) ## literal pool symbol address: _objc_release
10000569a:	48 8b 35 7f b8 01 00 	movq	112767(%rip), %rsi ## Objc selector ref: mutableCopy
1000056a1:	4c 89 e7 	movq	%r12, %rdi
1000056a4:	41 ff d7 	callq	*%r15
1000056a7:	49 89 c5 	movq	%rax, %r13
1000056aa:	48 8b 3d ef bf 01 00 	movq	114671(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
1000056b1:	4c 89 f6 	movq	%r14, %rsi
1000056b4:	41 ff d7 	callq	*%r15
1000056b7:	4c 89 ef 	movq	%r13, %rdi
1000056ba:	48 8b 35 e7 b9 01 00 	movq	113127(%rip), %rsi ## Objc selector ref: isMemberOfClass:
1000056c1:	48 89 c2 	movq	%rax, %rdx
1000056c4:	41 ff d7 	callq	*%r15
1000056c7:	84 c0 	testb	%al, %al
1000056c9:	0f 84 98 00 00 00 	je	0x100005767
1000056cf:	48 8d 3d b2 68 01 00 	leaq	92338(%rip), %rdi ## Objc cfstring ref: @"[mutableArray isMemberOfClass:[NSMutableArray class]]"
1000056d6:	31 c0 	xorl	%eax, %eax
1000056d8:	e8 35 e5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000056dd:	4c 89 ef 	movq	%r13, %rdi
1000056e0:	4c 89 f6 	movq	%r14, %rsi
1000056e3:	ff 15 7f 49 01 00 	callq	*84351(%rip) ## Objc message: +[NSMutableArray isMemberOfClass:]
1000056e9:	48 89 c7 	movq	%rax, %rdi
1000056ec:	e8 2d e5 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
1000056f1:	48 89 c7 	movq	%rax, %rdi
1000056f4:	e8 db e6 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000056f9:	48 89 c3 	movq	%rax, %rbx
1000056fc:	48 8d 3d c5 68 01 00 	leaq	92357(%rip), %rdi ## Objc cfstring ref: @"mutableArray class is %@"
100005703:	31 c0 	xorl	%eax, %eax
100005705:	48 89 de 	movq	%rbx, %rsi
100005708:	e8 05 e5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000570d:	4c 8b 35 5c 49 01 00 	movq	84316(%rip), %r14 ## literal pool symbol address: _objc_release
100005714:	48 89 df 	movq	%rbx, %rdi
100005717:	41 ff d6 	callq	*%r14
10000571a:	4c 89 ef 	movq	%r13, %rdi
10000571d:	41 ff d6 	callq	*%r14
100005720:	4c 89 e7 	movq	%r12, %rdi
100005723:	4c 89 f0 	movq	%r14, %rax
100005726:	48 83 c4 08 	addq	$8, %rsp
10000572a:	5b 	popq	%rbx
10000572b:	41 5c 	popq	%r12
10000572d:	41 5d 	popq	%r13
10000572f:	41 5e 	popq	%r14
100005731:	41 5f 	popq	%r15
100005733:	5d 	popq	%rbp
100005734:	ff e0 	jmpq	*%rax
100005736:	48 8b 3d 53 bf 01 00 	movq	114515(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSArray
10000573d:	4c 89 f6 	movq	%r14, %rsi
100005740:	41 ff d7 	callq	*%r15
100005743:	48 8b 35 66 b9 01 00 	movq	112998(%rip), %rsi ## Objc selector ref: isKindOfClass:
10000574a:	4c 89 e7 	movq	%r12, %rdi
10000574d:	48 89 c2 	movq	%rax, %rdx
100005750:	41 ff d7 	callq	*%r15
100005753:	84 c0 	testb	%al, %al
100005755:	0f 84 09 ff ff ff 	je	0x100005664
10000575b:	48 8d 3d e6 67 01 00 	leaq	92134(%rip), %rdi ## Objc cfstring ref: @"[array isKindOfClass:[NSArray class]]"
100005762:	e9 f6 fe ff ff 	jmp	0x10000565d
100005767:	48 8b 3d 32 bf 01 00 	movq	114482(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
10000576e:	4c 89 f6 	movq	%r14, %rsi
100005771:	41 ff d7 	callq	*%r15
100005774:	48 8b 35 35 b9 01 00 	movq	112949(%rip), %rsi ## Objc selector ref: isKindOfClass:
10000577b:	4c 89 ef 	movq	%r13, %rdi
10000577e:	48 89 c2 	movq	%rax, %rdx
100005781:	41 ff d7 	callq	*%r15
100005784:	84 c0 	testb	%al, %al
100005786:	0f 84 51 ff ff ff 	je	0x1000056dd
10000578c:	48 8d 3d 15 68 01 00 	leaq	92181(%rip), %rdi ## Objc cfstring ref: @"[mutableArray isKindOfClass:[NSMutableArray class]]"
100005793:	e9 3e ff ff ff 	jmp	0x1000056d6
-[TestClassCluster testNumber]:
100005798:	55 	pushq	%rbp
100005799:	48 89 e5 	movq	%rsp, %rbp
10000579c:	41 57 	pushq	%r15
10000579e:	41 56 	pushq	%r14
1000057a0:	53 	pushq	%rbx
1000057a1:	50 	pushq	%rax
1000057a2:	48 8b 3d 1f bf 01 00 	movq	114463(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
1000057a9:	48 8b 35 08 b9 01 00 	movq	112904(%rip), %rsi ## Objc selector ref: numberWithBool:
1000057b0:	48 8b 1d b1 48 01 00 	movq	84145(%rip), %rbx ## Objc message: +[NSNumber numberWithBool:]
1000057b7:	31 d2 	xorl	%edx, %edx
1000057b9:	ff d3 	callq	*%rbx
1000057bb:	48 89 c7 	movq	%rax, %rdi
1000057be:	e8 11 e6 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000057c3:	49 89 c7 	movq	%rax, %r15
1000057c6:	48 8b 3d fb be 01 00 	movq	114427(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
1000057cd:	4c 8b 35 cc b6 01 00 	movq	112332(%rip), %r14 ## Objc selector ref: class
1000057d4:	4c 89 f6 	movq	%r14, %rsi
1000057d7:	ff d3 	callq	*%rbx
1000057d9:	48 8b 35 c8 b8 01 00 	movq	112840(%rip), %rsi ## Objc selector ref: isMemberOfClass:
1000057e0:	4c 89 ff 	movq	%r15, %rdi
1000057e3:	48 89 c2 	movq	%rax, %rdx
1000057e6:	ff d3 	callq	*%rbx
1000057e8:	84 c0 	testb	%al, %al
1000057ea:	74 5d 	je	0x100005849
1000057ec:	48 8d 3d f5 67 01 00 	leaq	92149(%rip), %rdi ## Objc cfstring ref: @"[boolNumber isMemberOfClass:[NSNumber class]]"
1000057f3:	31 c0 	xorl	%eax, %eax
1000057f5:	e8 18 e4 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000057fa:	4c 89 ff 	movq	%r15, %rdi
1000057fd:	4c 89 f6 	movq	%r14, %rsi
100005800:	ff 15 62 48 01 00 	callq	*84066(%rip) ## Objc message: +[NSNumber isMemberOfClass:]
100005806:	48 89 c7 	movq	%rax, %rdi
100005809:	e8 10 e4 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
10000580e:	48 89 c7 	movq	%rax, %rdi
100005811:	e8 be e5 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005816:	48 89 c3 	movq	%rax, %rbx
100005819:	48 8d 3d 08 68 01 00 	leaq	92168(%rip), %rdi ## Objc cfstring ref: @"boolNumber class is %@"
100005820:	31 c0 	xorl	%eax, %eax
100005822:	48 89 de 	movq	%rbx, %rsi
100005825:	e8 e8 e3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000582a:	4c 8b 35 3f 48 01 00 	movq	84031(%rip), %r14 ## literal pool symbol address: _objc_release
100005831:	48 89 df 	movq	%rbx, %rdi
100005834:	41 ff d6 	callq	*%r14
100005837:	4c 89 ff 	movq	%r15, %rdi
10000583a:	4c 89 f0 	movq	%r14, %rax
10000583d:	48 83 c4 08 	addq	$8, %rsp
100005841:	5b 	popq	%rbx
100005842:	41 5e 	popq	%r14
100005844:	41 5f 	popq	%r15
100005846:	5d 	popq	%rbp
100005847:	ff e0 	jmpq	*%rax
100005849:	48 8b 3d 78 be 01 00 	movq	114296(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
100005850:	4c 89 f6 	movq	%r14, %rsi
100005853:	ff d3 	callq	*%rbx
100005855:	48 8b 35 54 b8 01 00 	movq	112724(%rip), %rsi ## Objc selector ref: isKindOfClass:
10000585c:	4c 89 ff 	movq	%r15, %rdi
10000585f:	48 89 c2 	movq	%rax, %rdx
100005862:	ff d3 	callq	*%rbx
100005864:	84 c0 	testb	%al, %al
100005866:	74 92 	je	0x1000057fa
100005868:	48 8d 3d 99 67 01 00 	leaq	92057(%rip), %rdi ## Objc cfstring ref: @"[boolNumber isKindOfClass:[NSNumber class]]"
10000586f:	eb 82 	jmp	0x1000057f3
-[TestClassCluster testNSDate]:
100005871:	55 	pushq	%rbp
100005872:	48 89 e5 	movq	%rsp, %rbp
100005875:	41 57 	pushq	%r15
100005877:	41 56 	pushq	%r14
100005879:	53 	pushq	%rbx
10000587a:	50 	pushq	%rax
10000587b:	48 8b 3d 4e be 01 00 	movq	114254(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDate
100005882:	48 8b 35 6f b7 01 00 	movq	112495(%rip), %rsi ## Objc selector ref: date
100005889:	48 8b 1d d8 47 01 00 	movq	83928(%rip), %rbx ## Objc message: +[NSDate date]
100005890:	ff d3 	callq	*%rbx
100005892:	48 89 c7 	movq	%rax, %rdi
100005895:	e8 3a e5 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000589a:	49 89 c7 	movq	%rax, %r15
10000589d:	48 8b 3d 2c be 01 00 	movq	114220(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDate
1000058a4:	4c 8b 35 f5 b5 01 00 	movq	112117(%rip), %r14 ## Objc selector ref: class
1000058ab:	4c 89 f6 	movq	%r14, %rsi
1000058ae:	ff d3 	callq	*%rbx
1000058b0:	48 8b 35 f1 b7 01 00 	movq	112625(%rip), %rsi ## Objc selector ref: isMemberOfClass:
1000058b7:	4c 89 ff 	movq	%r15, %rdi
1000058ba:	48 89 c2 	movq	%rax, %rdx
1000058bd:	ff d3 	callq	*%rbx
1000058bf:	84 c0 	testb	%al, %al
1000058c1:	74 5d 	je	0x100005920
1000058c3:	48 8d 3d 7e 67 01 00 	leaq	92030(%rip), %rdi ## Objc cfstring ref: @"[date isMemberOfClass:[NSDate class]]"
1000058ca:	31 c0 	xorl	%eax, %eax
1000058cc:	e8 41 e3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000058d1:	4c 89 ff 	movq	%r15, %rdi
1000058d4:	4c 89 f6 	movq	%r14, %rsi
1000058d7:	ff 15 8b 47 01 00 	callq	*83851(%rip) ## Objc message: +[NSDate isMemberOfClass:]
1000058dd:	48 89 c7 	movq	%rax, %rdi
1000058e0:	e8 39 e3 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
1000058e5:	48 89 c7 	movq	%rax, %rdi
1000058e8:	e8 e7 e4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000058ed:	48 89 c3 	movq	%rax, %rbx
1000058f0:	48 8d 3d 91 67 01 00 	leaq	92049(%rip), %rdi ## Objc cfstring ref: @"date class is %@"
1000058f7:	31 c0 	xorl	%eax, %eax
1000058f9:	48 89 de 	movq	%rbx, %rsi
1000058fc:	e8 11 e3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005901:	4c 8b 35 68 47 01 00 	movq	83816(%rip), %r14 ## literal pool symbol address: _objc_release
100005908:	48 89 df 	movq	%rbx, %rdi
10000590b:	41 ff d6 	callq	*%r14
10000590e:	4c 89 ff 	movq	%r15, %rdi
100005911:	4c 89 f0 	movq	%r14, %rax
100005914:	48 83 c4 08 	addq	$8, %rsp
100005918:	5b 	popq	%rbx
100005919:	41 5e 	popq	%r14
10000591b:	41 5f 	popq	%r15
10000591d:	5d 	popq	%rbp
10000591e:	ff e0 	jmpq	*%rax
100005920:	48 8b 3d a9 bd 01 00 	movq	114089(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSDate
100005927:	4c 89 f6 	movq	%r14, %rsi
10000592a:	ff d3 	callq	*%rbx
10000592c:	48 8b 35 7d b7 01 00 	movq	112509(%rip), %rsi ## Objc selector ref: isKindOfClass:
100005933:	4c 89 ff 	movq	%r15, %rdi
100005936:	48 89 c2 	movq	%rax, %rdx
100005939:	ff d3 	callq	*%rbx
10000593b:	84 c0 	testb	%al, %al
10000593d:	74 92 	je	0x1000058d1
10000593f:	48 8d 3d 22 67 01 00 	leaq	91938(%rip), %rdi ## Objc cfstring ref: @"[date isKindOfClass:[NSDate class]]"
100005946:	eb 82 	jmp	0x1000058ca
-[TestClassCluster testNSSet]:
100005948:	55 	pushq	%rbp
100005949:	48 89 e5 	movq	%rsp, %rbp
10000594c:	41 57 	pushq	%r15
10000594e:	41 56 	pushq	%r14
100005950:	53 	pushq	%rbx
100005951:	50 	pushq	%rax
100005952:	48 8b 3d 87 bd 01 00 	movq	114055(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSSet
100005959:	48 8b 35 10 b5 01 00 	movq	111888(%rip), %rsi ## Objc selector ref: new
100005960:	48 8b 1d 01 47 01 00 	movq	83713(%rip), %rbx ## Objc message: +[NSSet new]
100005967:	ff d3 	callq	*%rbx
100005969:	49 89 c7 	movq	%rax, %r15
10000596c:	48 8b 3d 6d bd 01 00 	movq	114029(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSSet
100005973:	4c 8b 35 26 b5 01 00 	movq	111910(%rip), %r14 ## Objc selector ref: class
10000597a:	4c 89 f6 	movq	%r14, %rsi
10000597d:	ff d3 	callq	*%rbx
10000597f:	48 8b 35 22 b7 01 00 	movq	112418(%rip), %rsi ## Objc selector ref: isMemberOfClass:
100005986:	4c 89 ff 	movq	%r15, %rdi
100005989:	48 89 c2 	movq	%rax, %rdx
10000598c:	ff d3 	callq	*%rbx
10000598e:	84 c0 	testb	%al, %al
100005990:	74 5d 	je	0x1000059ef
100005992:	48 8d 3d 0f 67 01 00 	leaq	91919(%rip), %rdi ## Objc cfstring ref: @"[set isMemberOfClass:[NSSet class]]"
100005999:	31 c0 	xorl	%eax, %eax
10000599b:	e8 72 e2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000059a0:	4c 89 ff 	movq	%r15, %rdi
1000059a3:	4c 89 f6 	movq	%r14, %rsi
1000059a6:	ff 15 bc 46 01 00 	callq	*83644(%rip) ## Objc message: +[NSSet isMemberOfClass:]
1000059ac:	48 89 c7 	movq	%rax, %rdi
1000059af:	e8 6a e2 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
1000059b4:	48 89 c7 	movq	%rax, %rdi
1000059b7:	e8 18 e4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000059bc:	48 89 c3 	movq	%rax, %rbx
1000059bf:	48 8d 3d 22 67 01 00 	leaq	91938(%rip), %rdi ## Objc cfstring ref: @"set class is %@"
1000059c6:	31 c0 	xorl	%eax, %eax
1000059c8:	48 89 de 	movq	%rbx, %rsi
1000059cb:	e8 42 e2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000059d0:	4c 8b 35 99 46 01 00 	movq	83609(%rip), %r14 ## literal pool symbol address: _objc_release
1000059d7:	48 89 df 	movq	%rbx, %rdi
1000059da:	41 ff d6 	callq	*%r14
1000059dd:	4c 89 ff 	movq	%r15, %rdi
1000059e0:	4c 89 f0 	movq	%r14, %rax
1000059e3:	48 83 c4 08 	addq	$8, %rsp
1000059e7:	5b 	popq	%rbx
1000059e8:	41 5e 	popq	%r14
1000059ea:	41 5f 	popq	%r15
1000059ec:	5d 	popq	%rbp
1000059ed:	ff e0 	jmpq	*%rax
1000059ef:	48 8b 3d ea bc 01 00 	movq	113898(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSSet
1000059f6:	4c 89 f6 	movq	%r14, %rsi
1000059f9:	ff d3 	callq	*%rbx
1000059fb:	48 8b 35 ae b6 01 00 	movq	112302(%rip), %rsi ## Objc selector ref: isKindOfClass:
100005a02:	4c 89 ff 	movq	%r15, %rdi
100005a05:	48 89 c2 	movq	%rax, %rdx
100005a08:	ff d3 	callq	*%rbx
100005a0a:	84 c0 	testb	%al, %al
100005a0c:	74 92 	je	0x1000059a0
100005a0e:	48 8d 3d b3 66 01 00 	leaq	91827(%rip), %rdi ## Objc cfstring ref: @"[set isKindOfClass:[NSSet class]]"
100005a15:	eb 82 	jmp	0x100005999
-[TestClassCluster testNSMap]:
100005a17:	55 	pushq	%rbp
100005a18:	48 89 e5 	movq	%rsp, %rbp
100005a1b:	41 57 	pushq	%r15
100005a1d:	41 56 	pushq	%r14
100005a1f:	53 	pushq	%rbx
100005a20:	50 	pushq	%rax
100005a21:	48 8b 3d c0 bc 01 00 	movq	113856(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMapTable
100005a28:	48 8b 35 41 b4 01 00 	movq	111681(%rip), %rsi ## Objc selector ref: new
100005a2f:	48 8b 1d 32 46 01 00 	movq	83506(%rip), %rbx ## Objc message: +[NSMapTable new]
100005a36:	ff d3 	callq	*%rbx
100005a38:	49 89 c7 	movq	%rax, %r15
100005a3b:	48 8b 3d a6 bc 01 00 	movq	113830(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMapTable
100005a42:	4c 8b 35 57 b4 01 00 	movq	111703(%rip), %r14 ## Objc selector ref: class
100005a49:	4c 89 f6 	movq	%r14, %rsi
100005a4c:	ff d3 	callq	*%rbx
100005a4e:	48 8b 35 53 b6 01 00 	movq	112211(%rip), %rsi ## Objc selector ref: isMemberOfClass:
100005a55:	4c 89 ff 	movq	%r15, %rdi
100005a58:	48 89 c2 	movq	%rax, %rdx
100005a5b:	ff d3 	callq	*%rbx
100005a5d:	84 c0 	testb	%al, %al
100005a5f:	74 5d 	je	0x100005abe
100005a61:	48 8d 3d a0 66 01 00 	leaq	91808(%rip), %rdi ## Objc cfstring ref: @"[table isMemberOfClass:[NSMapTable class]]"
100005a68:	31 c0 	xorl	%eax, %eax
100005a6a:	e8 a3 e1 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005a6f:	4c 89 ff 	movq	%r15, %rdi
100005a72:	4c 89 f6 	movq	%r14, %rsi
100005a75:	ff 15 ed 45 01 00 	callq	*83437(%rip) ## Objc message: +[NSMapTable isMemberOfClass:]
100005a7b:	48 89 c7 	movq	%rax, %rdi
100005a7e:	e8 9b e1 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
100005a83:	48 89 c7 	movq	%rax, %rdi
100005a86:	e8 49 e3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005a8b:	48 89 c3 	movq	%rax, %rbx
100005a8e:	48 8d 3d b3 66 01 00 	leaq	91827(%rip), %rdi ## Objc cfstring ref: @"NSMapTable class is %@"
100005a95:	31 c0 	xorl	%eax, %eax
100005a97:	48 89 de 	movq	%rbx, %rsi
100005a9a:	e8 73 e1 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005a9f:	4c 8b 35 ca 45 01 00 	movq	83402(%rip), %r14 ## literal pool symbol address: _objc_release
100005aa6:	48 89 df 	movq	%rbx, %rdi
100005aa9:	41 ff d6 	callq	*%r14
100005aac:	4c 89 ff 	movq	%r15, %rdi
100005aaf:	4c 89 f0 	movq	%r14, %rax
100005ab2:	48 83 c4 08 	addq	$8, %rsp
100005ab6:	5b 	popq	%rbx
100005ab7:	41 5e 	popq	%r14
100005ab9:	41 5f 	popq	%r15
100005abb:	5d 	popq	%rbp
100005abc:	ff e0 	jmpq	*%rax
100005abe:	48 8b 3d 23 bc 01 00 	movq	113699(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMapTable
100005ac5:	4c 89 f6 	movq	%r14, %rsi
100005ac8:	ff d3 	callq	*%rbx
100005aca:	48 8b 35 df b5 01 00 	movq	112095(%rip), %rsi ## Objc selector ref: isKindOfClass:
100005ad1:	4c 89 ff 	movq	%r15, %rdi
100005ad4:	48 89 c2 	movq	%rax, %rdx
100005ad7:	ff d3 	callq	*%rbx
100005ad9:	84 c0 	testb	%al, %al
100005adb:	74 92 	je	0x100005a6f
100005add:	48 8d 3d 44 66 01 00 	leaq	91716(%rip), %rdi ## Objc cfstring ref: @"[table isKindOfClass:[NSMapTable class]]"
100005ae4:	eb 82 	jmp	0x100005a68
-[DynamicCallFunctionTest dealloc]:
100005ae6:	55 	pushq	%rbp
100005ae7:	48 89 e5 	movq	%rsp, %rbp
100005aea:	41 57 	pushq	%r15
100005aec:	41 56 	pushq	%r14
100005aee:	53 	pushq	%rbx
100005aef:	48 83 ec 18 	subq	$24, %rsp
100005af3:	49 89 fe 	movq	%rdi, %r14
100005af6:	48 8b 3d f3 bb 01 00 	movq	113651(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNotificationCenter
100005afd:	48 8b 35 bc b5 01 00 	movq	112060(%rip), %rsi ## Objc selector ref: defaultCenter
100005b04:	4c 8b 3d 5d 45 01 00 	movq	83293(%rip), %r15 ## Objc message: +[NSNotificationCenter defaultCenter]
100005b0b:	41 ff d7 	callq	*%r15
100005b0e:	48 89 c7 	movq	%rax, %rdi
100005b11:	e8 be e2 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005b16:	48 89 c3 	movq	%rax, %rbx
100005b19:	48 8b 35 a8 b5 01 00 	movq	112040(%rip), %rsi ## Objc selector ref: removeObserver:
100005b20:	48 89 df 	movq	%rbx, %rdi
100005b23:	4c 89 f2 	movq	%r14, %rdx
100005b26:	41 ff d7 	callq	*%r15
100005b29:	48 89 df 	movq	%rbx, %rdi
100005b2c:	ff 15 3e 45 01 00 	callq	*83262(%rip) ## literal pool symbol address: _objc_release
100005b32:	48 8d 7d d8 	leaq	-40(%rbp), %rdi
100005b36:	4c 89 37 	movq	%r14, (%rdi)
100005b39:	48 8b 05 d8 bc 01 00 	movq	113880(%rip), %rax ## Objc class ref: DynamicCallFunctionTest
100005b40:	48 89 47 08 	movq	%rax, 8(%rdi)
100005b44:	48 8b 35 15 b3 01 00 	movq	111381(%rip), %rsi ## Objc selector ref: dealloc
100005b4b:	e8 6c e2 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] dealloc]
100005b50:	48 83 c4 18 	addq	$24, %rsp
100005b54:	5b 	popq	%rbx
100005b55:	41 5e 	popq	%r14
100005b57:	41 5f 	popq	%r15
100005b59:	5d 	popq	%rbp
100005b5a:	c3 	retq
-[DynamicCallFunctionTest init]:
100005b5b:	55 	pushq	%rbp
100005b5c:	48 89 e5 	movq	%rsp, %rbp
100005b5f:	48 83 ec 10 	subq	$16, %rsp
100005b63:	48 8d 45 f0 	leaq	-16(%rbp), %rax
100005b67:	48 89 38 	movq	%rdi, (%rax)
100005b6a:	48 8b 0d a7 bc 01 00 	movq	113831(%rip), %rcx ## Objc class ref: DynamicCallFunctionTest
100005b71:	48 89 48 08 	movq	%rcx, 8(%rax)
100005b75:	48 8b 35 ec b2 01 00 	movq	111340(%rip), %rsi ## Objc selector ref: init
100005b7c:	48 89 c7 	movq	%rax, %rdi
100005b7f:	e8 38 e2 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100005b84:	48 83 c4 10 	addq	$16, %rsp
100005b88:	5d 	popq	%rbp
100005b89:	c3 	retq
_dynamicCallPrintfFunction:
100005b8a:	55 	pushq	%rbp
100005b8b:	48 89 e5 	movq	%rsp, %rbp
100005b8e:	53 	pushq	%rbx
100005b8f:	50 	pushq	%rax
100005b90:	48 8d 3d 01 fa 00 00 	leaq	64001(%rip), %rdi ## literal pool for: "/usr/lib/libSystem.dylib"
100005b97:	be 0a 00 00 00 	movl	$10, %esi
100005b9c:	e8 61 e1 00 00 	callq	0x100013d02 ## symbol stub for: _dlopen
100005ba1:	48 89 c3 	movq	%rax, %rbx
100005ba4:	48 85 db 	testq	%rbx, %rbx
100005ba7:	74 37 	je	0x100005be0
100005ba9:	48 8d 35 05 fa 00 00 	leaq	64005(%rip), %rsi ## literal pool for: "printf"
100005bb0:	48 89 df 	movq	%rbx, %rdi
100005bb3:	e8 50 e1 00 00 	callq	0x100013d08 ## symbol stub for: _dlsym
100005bb8:	48 89 c1 	movq	%rax, %rcx
100005bbb:	48 85 c9 	testq	%rcx, %rcx
100005bbe:	74 12 	je	0x100005bd2
100005bc0:	48 8d 3d ea f9 00 00 	leaq	63978(%rip), %rdi ## literal pool for: "%s\n"
100005bc7:	48 8d 35 ee f9 00 00 	leaq	63982(%rip), %rsi ## literal pool for: "dynamicCallFunction"
100005bce:	31 c0 	xorl	%eax, %eax
100005bd0:	ff d1 	callq	*%rcx
100005bd2:	48 89 df 	movq	%rbx, %rdi
100005bd5:	48 83 c4 08 	addq	$8, %rsp
100005bd9:	5b 	popq	%rbx
100005bda:	5d 	popq	%rbp
100005bdb:	e9 16 e1 00 00 	jmp	0x100013cf6 ## symbol stub for: _dlclose
100005be0:	48 8b 05 59 44 01 00 	movq	83033(%rip), %rax ## literal pool symbol address: ___stderrp
100005be7:	48 8b 18 	movq	(%rax), %rbx
100005bea:	e8 0d e1 00 00 	callq	0x100013cfc ## symbol stub for: _dlerror
100005bef:	48 89 c1 	movq	%rax, %rcx
100005bf2:	48 8d 35 b8 f9 00 00 	leaq	63928(%rip), %rsi ## literal pool for: "%s\n"
100005bf9:	31 c0 	xorl	%eax, %eax
100005bfb:	48 89 df 	movq	%rbx, %rdi
100005bfe:	48 89 ca 	movq	%rcx, %rdx
100005c01:	48 83 c4 08 	addq	$8, %rsp
100005c05:	5b 	popq	%rbx
100005c06:	5d 	popq	%rbp
100005c07:	e9 0e e1 00 00 	jmp	0x100013d1a ## symbol stub for: _fprintf
_dynamicCallAddFunction:
100005c0c:	55 	pushq	%rbp
100005c0d:	48 89 e5 	movq	%rsp, %rbp
100005c10:	41 57 	pushq	%r15
100005c12:	41 56 	pushq	%r14
100005c14:	53 	pushq	%rbx
100005c15:	50 	pushq	%rax
100005c16:	4c 8b 35 a3 ba 01 00 	movq	113315(%rip), %r14 ## Objc class ref: _OBJC_CLASS_$_NSString
100005c1d:	e8 ea df 00 00 	callq	0x100013c0c ## symbol stub for: _NSHomeDirectory
100005c22:	48 89 c7 	movq	%rax, %rdi
100005c25:	e8 aa e1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005c2a:	48 89 c3 	movq	%rax, %rbx
100005c2d:	48 8b 35 8c b3 01 00 	movq	111500(%rip), %rsi ## Objc selector ref: stringWithFormat:
100005c34:	48 8d 15 2d 65 01 00 	leaq	91437(%rip), %rdx ## Objc cfstring ref: @"%@/Documents/libadd.a"
100005c3b:	4c 8b 3d 26 44 01 00 	movq	82982(%rip), %r15 ## Objc message: +[NSString stringWithFormat:]
100005c42:	31 c0 	xorl	%eax, %eax
100005c44:	4c 89 f7 	movq	%r14, %rdi
100005c47:	48 89 d9 	movq	%rbx, %rcx
100005c4a:	41 ff d7 	callq	*%r15
100005c4d:	48 89 c7 	movq	%rax, %rdi
100005c50:	e8 7f e1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005c55:	49 89 c6 	movq	%rax, %r14
100005c58:	48 89 df 	movq	%rbx, %rdi
100005c5b:	ff 15 0f 44 01 00 	callq	*82959(%rip) ## literal pool symbol address: _objc_release
100005c61:	4c 89 f7 	movq	%r14, %rdi
100005c64:	e8 5f e1 00 00 	callq	0x100013dc8 ## symbol stub for: _objc_retainAutorelease
100005c69:	49 89 c6 	movq	%rax, %r14
100005c6c:	48 8b 35 5d b4 01 00 	movq	111709(%rip), %rsi ## Objc selector ref: cStringUsingEncoding:
100005c73:	ba 04 00 00 00 	movl	$4, %edx
100005c78:	4c 89 f7 	movq	%r14, %rdi
100005c7b:	41 ff d7 	callq	*%r15
100005c7e:	be 06 00 00 00 	movl	$6, %esi
100005c83:	48 89 c7 	movq	%rax, %rdi
100005c86:	e8 77 e0 00 00 	callq	0x100013d02 ## symbol stub for: _dlopen
100005c8b:	48 85 c0 	testq	%rax, %rax
100005c8e:	75 39 	jne	0x100005cc9
100005c90:	48 8b 05 a9 43 01 00 	movq	82857(%rip), %rax ## literal pool symbol address: ___stderrp
100005c97:	48 8b 18 	movq	(%rax), %rbx
100005c9a:	e8 5d e0 00 00 	callq	0x100013cfc ## symbol stub for: _dlerror
100005c9f:	48 89 c1 	movq	%rax, %rcx
100005ca2:	48 8d 35 08 f9 00 00 	leaq	63752(%rip), %rsi ## literal pool for: "%s\n"
100005ca9:	31 c0 	xorl	%eax, %eax
100005cab:	48 89 df 	movq	%rbx, %rdi
100005cae:	48 89 ca 	movq	%rcx, %rdx
100005cb1:	e8 64 e0 00 00 	callq	0x100013d1a ## symbol stub for: _fprintf
100005cb6:	4c 89 f7 	movq	%r14, %rdi
100005cb9:	48 83 c4 08 	addq	$8, %rsp
100005cbd:	5b 	popq	%rbx
100005cbe:	41 5e 	popq	%r14
100005cc0:	41 5f 	popq	%r15
100005cc2:	5d 	popq	%rbp
100005cc3:	ff 25 a7 43 01 00 	jmpq	*82855(%rip) ## literal pool symbol address: _objc_release
100005cc9:	48 8d 35 16 f9 00 00 	leaq	63766(%rip), %rsi ## literal pool for: "add"
100005cd0:	48 89 c7 	movq	%rax, %rdi
100005cd3:	e8 30 e0 00 00 	callq	0x100013d08 ## symbol stub for: _dlsym
100005cd8:	48 85 c0 	testq	%rax, %rax
100005cdb:	74 d9 	je	0x100005cb6
100005cdd:	bf 0a 00 00 00 	movl	$10, %edi
100005ce2:	be 0c 00 00 00 	movl	$12, %esi
100005ce7:	ff d0 	callq	*%rax
100005ce9:	89 c1 	movl	%eax, %ecx
100005ceb:	48 8d 3d f8 f8 00 00 	leaq	63736(%rip), %rdi ## literal pool for: "%d\n"
100005cf2:	31 c0 	xorl	%eax, %eax
100005cf4:	89 ce 	movl	%ecx, %esi
100005cf6:	e8 21 e1 00 00 	callq	0x100013e1c ## symbol stub for: _printf
100005cfb:	eb b9 	jmp	0x100005cb6
-[DynamicCallFunctionTest injected]:
100005cfd:	55 	pushq	%rbp
100005cfe:	48 89 e5 	movq	%rsp, %rbp
100005d01:	53 	pushq	%rbx
100005d02:	50 	pushq	%rax
100005d03:	48 89 fb 	movq	%rdi, %rbx
100005d06:	48 8d 3d 7b 64 01 00 	leaq	91259(%rip), %rdi ## Objc cfstring ref: @"injected: %@"
100005d0d:	31 c0 	xorl	%eax, %eax
100005d0f:	48 89 de 	movq	%rbx, %rsi
100005d12:	e8 fb de 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005d17:	48 8b 35 ba b3 01 00 	movq	111546(%rip), %rsi ## Objc selector ref: testInject
100005d1e:	48 89 df 	movq	%rbx, %rdi
100005d21:	48 83 c4 08 	addq	$8, %rsp
100005d25:	5b 	popq	%rbx
100005d26:	5d 	popq	%rbp
100005d27:	ff 25 3b 43 01 00 	jmpq	*82747(%rip) ## Objc message: -[%rdi testInject]
-[DynamicCallFunctionTest testInject]:
100005d2d:	55 	pushq	%rbp
100005d2e:	48 89 e5 	movq	%rsp, %rbp
100005d31:	5d 	popq	%rbp
100005d32:	e9 d5 fe ff ff 	jmp	_dynamicCallAddFunction
-[DispatchGroupLeaveTest init]:
100005d37:	55 	pushq	%rbp
100005d38:	48 89 e5 	movq	%rsp, %rbp
100005d3b:	53 	pushq	%rbx
100005d3c:	48 83 ec 18 	subq	$24, %rsp
100005d40:	48 8d 45 e8 	leaq	-24(%rbp), %rax
100005d44:	48 89 38 	movq	%rdi, (%rax)
100005d47:	48 8b 0d d2 ba 01 00 	movq	113362(%rip), %rcx ## Objc class ref: DispatchGroupLeaveTest
100005d4e:	48 89 48 08 	movq	%rcx, 8(%rax)
100005d52:	48 8b 35 0f b1 01 00 	movq	110863(%rip), %rsi ## Objc selector ref: init
100005d59:	48 89 c7 	movq	%rax, %rdi
100005d5c:	e8 5b e0 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100005d61:	48 89 c3 	movq	%rax, %rbx
100005d64:	48 85 db 	testq	%rbx, %rbx
100005d67:	74 10 	je	0x100005d79
100005d69:	48 8b 35 70 b3 01 00 	movq	111472(%rip), %rsi ## Objc selector ref: testGroupLeaveCrash
100005d70:	48 89 df 	movq	%rbx, %rdi
100005d73:	ff 15 ef 42 01 00 	callq	*82671(%rip) ## Objc message: -[%rdi testGroupLeaveCrash]
100005d79:	48 89 d8 	movq	%rbx, %rax
100005d7c:	48 83 c4 18 	addq	$24, %rsp
100005d80:	5b 	popq	%rbx
100005d81:	5d 	popq	%rbp
100005d82:	c3 	retq
-[DispatchGroupLeaveTest testGroupLeaveCrash]:
100005d83:	55 	pushq	%rbp
100005d84:	48 89 e5 	movq	%rsp, %rbp
100005d87:	53 	pushq	%rbx
100005d88:	50 	pushq	%rax
100005d89:	e8 26 df 00 00 	callq	0x100013cb4 ## symbol stub for: _dispatch_group_create
100005d8e:	48 89 c3 	movq	%rax, %rbx
100005d91:	48 89 df 	movq	%rbx, %rdi
100005d94:	e8 21 df 00 00 	callq	0x100013cba ## symbol stub for: _dispatch_group_enter
100005d99:	48 89 df 	movq	%rbx, %rdi
100005d9c:	e8 1f df 00 00 	callq	0x100013cc0 ## symbol stub for: _dispatch_group_leave
100005da1:	48 89 df 	movq	%rbx, %rdi
100005da4:	48 83 c4 08 	addq	$8, %rsp
100005da8:	5b 	popq	%rbx
100005da9:	5d 	popq	%rbp
100005daa:	ff 25 c0 42 01 00 	jmpq	*82624(%rip) ## literal pool symbol address: _objc_release
-[ViewController viewDidLoad]:
100005db0:	55 	pushq	%rbp
100005db1:	48 89 e5 	movq	%rsp, %rbp
100005db4:	48 83 ec 10 	subq	$16, %rsp
100005db8:	48 8d 45 f0 	leaq	-16(%rbp), %rax
100005dbc:	48 89 38 	movq	%rdi, (%rax)
100005dbf:	48 8b 0d 62 ba 01 00 	movq	113250(%rip), %rcx ## Objc class ref: ViewController
100005dc6:	48 89 48 08 	movq	%rcx, 8(%rax)
100005dca:	48 8b 35 17 b3 01 00 	movq	111383(%rip), %rsi ## Objc selector ref: viewDidLoad
100005dd1:	48 89 c7 	movq	%rax, %rdi
100005dd4:	e8 e3 df 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] viewDidLoad]
100005dd9:	48 8d 3d 28 54 01 00 	leaq	87080(%rip), %rdi ## Objc cfstring ref: @"%s"
100005de0:	48 8d 35 14 f8 00 00 	leaq	63508(%rip), %rsi ## literal pool for: "-[ViewController viewDidLoad]"
100005de7:	31 c0 	xorl	%eax, %eax
100005de9:	e8 24 de 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005dee:	48 83 c4 10 	addq	$16, %rsp
100005df2:	5d 	popq	%rbp
100005df3:	c3 	retq
_functionF:
100005df4:	55 	pushq	%rbp
100005df5:	48 89 e5 	movq	%rsp, %rbp
100005df8:	53 	pushq	%rbx
100005df9:	50 	pushq	%rax
100005dfa:	48 8d 1d a7 63 01 00 	leaq	91047(%rip), %rbx ## Objc cfstring ref: @"%p"
100005e01:	48 8d 35 22 00 00 00 	leaq	_functionG(%rip), %rsi
100005e08:	31 c0 	xorl	%eax, %eax
100005e0a:	48 89 df 	movq	%rbx, %rdi
100005e0d:	e8 00 de 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005e12:	48 8d 35 db ff ff ff 	leaq	_functionF(%rip), %rsi
100005e19:	31 c0 	xorl	%eax, %eax
100005e1b:	48 89 df 	movq	%rbx, %rdi
100005e1e:	e8 ef dd 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005e23:	48 83 c4 08 	addq	$8, %rsp
100005e27:	5b 	popq	%rbx
100005e28:	5d 	popq	%rbp
100005e29:	c3 	retq
_functionG:
100005e2a:	55 	pushq	%rbp
100005e2b:	48 89 e5 	movq	%rsp, %rbp
100005e2e:	8d 47 01 	leal	1(%rdi), %eax
100005e31:	5d 	popq	%rbp
100005e32:	c3 	retq
-[ViewController setupUI]:
100005e33:	55 	pushq	%rbp
100005e34:	48 89 e5 	movq	%rsp, %rbp
100005e37:	41 57 	pushq	%r15
100005e39:	41 56 	pushq	%r14
100005e3b:	41 54 	pushq	%r12
100005e3d:	53 	pushq	%rbx
100005e3e:	49 89 fe 	movq	%rdi, %r14
100005e41:	48 8b 3d b0 b8 01 00 	movq	112816(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_UIColor
100005e48:	48 8b 35 a1 b2 01 00 	movq	111265(%rip), %rsi ## Objc selector ref: purpleColor
100005e4f:	4c 8b 25 12 42 01 00 	movq	82450(%rip), %r12 ## Objc message: +[UIColor purpleColor]
100005e56:	41 ff d4 	callq	*%r12
100005e59:	48 89 c7 	movq	%rax, %rdi
100005e5c:	e8 73 df 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005e61:	49 89 c7 	movq	%rax, %r15
100005e64:	48 8b 35 8d b2 01 00 	movq	111245(%rip), %rsi ## Objc selector ref: view
100005e6b:	4c 89 f7 	movq	%r14, %rdi
100005e6e:	41 ff d4 	callq	*%r12
100005e71:	48 89 c7 	movq	%rax, %rdi
100005e74:	e8 5b df 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005e79:	48 89 c3 	movq	%rax, %rbx
100005e7c:	48 8b 35 7d b2 01 00 	movq	111229(%rip), %rsi ## Objc selector ref: setBackgroundColor:
100005e83:	48 89 df 	movq	%rbx, %rdi
100005e86:	4c 89 fa 	movq	%r15, %rdx
100005e89:	41 ff d4 	callq	*%r12
100005e8c:	4c 8b 35 dd 41 01 00 	movq	82397(%rip), %r14 ## literal pool symbol address: _objc_release
100005e93:	48 89 df 	movq	%rbx, %rdi
100005e96:	41 ff d6 	callq	*%r14
100005e99:	4c 89 ff 	movq	%r15, %rdi
100005e9c:	41 ff d6 	callq	*%r14
100005e9f:	48 8d 3d 22 63 01 00 	leaq	90914(%rip), %rdi ## Objc cfstring ref: @"Injected %s"
100005ea6:	48 8d 35 7b f7 00 00 	leaq	63355(%rip), %rsi ## literal pool for: "-[ViewController setupUI]"
100005ead:	31 c0 	xorl	%eax, %eax
100005eaf:	e8 5e dd 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005eb4:	5b 	popq	%rbx
100005eb5:	41 5c 	popq	%r12
100005eb7:	41 5e 	popq	%r14
100005eb9:	41 5f 	popq	%r15
100005ebb:	5d 	popq	%rbp
100005ebc:	c3 	retq
-[ViewController viewWillAppear:]:
100005ebd:	55 	pushq	%rbp
100005ebe:	48 89 e5 	movq	%rsp, %rbp
100005ec1:	41 57 	pushq	%r15
100005ec3:	41 56 	pushq	%r14
100005ec5:	41 54 	pushq	%r12
100005ec7:	53 	pushq	%rbx
100005ec8:	48 83 ec 10 	subq	$16, %rsp
100005ecc:	49 89 fe 	movq	%rdi, %r14
100005ecf:	48 8d 7d d0 	leaq	-48(%rbp), %rdi
100005ed3:	4c 89 37 	movq	%r14, (%rdi)
100005ed6:	48 8b 05 4b b9 01 00 	movq	112971(%rip), %rax ## Objc class ref: ViewController
100005edd:	48 89 47 08 	movq	%rax, 8(%rdi)
100005ee1:	48 8b 35 20 b2 01 00 	movq	111136(%rip), %rsi ## Objc selector ref: viewWillAppear:
100005ee8:	e8 cf de 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] viewWillAppear:]
100005eed:	48 8d 3d 14 53 01 00 	leaq	86804(%rip), %rdi ## Objc cfstring ref: @"%s"
100005ef4:	48 8d 35 47 f7 00 00 	leaq	63303(%rip), %rsi ## literal pool for: "-[ViewController viewWillAppear:]"
100005efb:	31 c0 	xorl	%eax, %eax
100005efd:	e8 10 dd 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005f02:	48 8b 3d ef b7 01 00 	movq	112623(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_UIColor
100005f09:	48 8b 35 00 b2 01 00 	movq	111104(%rip), %rsi ## Objc selector ref: lightGrayColor
100005f10:	4c 8b 25 51 41 01 00 	movq	82257(%rip), %r12 ## Objc message: +[UIColor lightGrayColor]
100005f17:	41 ff d4 	callq	*%r12
100005f1a:	48 89 c7 	movq	%rax, %rdi
100005f1d:	e8 b2 de 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005f22:	49 89 c7 	movq	%rax, %r15
100005f25:	48 8b 35 cc b1 01 00 	movq	111052(%rip), %rsi ## Objc selector ref: view
100005f2c:	4c 89 f7 	movq	%r14, %rdi
100005f2f:	41 ff d4 	callq	*%r12
100005f32:	48 89 c7 	movq	%rax, %rdi
100005f35:	e8 9a de 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100005f3a:	48 89 c3 	movq	%rax, %rbx
100005f3d:	48 8b 35 bc b1 01 00 	movq	111036(%rip), %rsi ## Objc selector ref: setBackgroundColor:
100005f44:	48 89 df 	movq	%rbx, %rdi
100005f47:	4c 89 fa 	movq	%r15, %rdx
100005f4a:	41 ff d4 	callq	*%r12
100005f4d:	4c 8b 35 1c 41 01 00 	movq	82204(%rip), %r14 ## literal pool symbol address: _objc_release
100005f54:	48 89 df 	movq	%rbx, %rdi
100005f57:	41 ff d6 	callq	*%r14
100005f5a:	4c 89 ff 	movq	%r15, %rdi
100005f5d:	41 ff d6 	callq	*%r14
100005f60:	48 83 c4 10 	addq	$16, %rsp
100005f64:	5b 	popq	%rbx
100005f65:	41 5c 	popq	%r12
100005f67:	41 5e 	popq	%r14
100005f69:	41 5f 	popq	%r15
100005f6b:	5d 	popq	%rbp
100005f6c:	c3 	retq
-[ViewController viewDidAppear:]:
100005f6d:	55 	pushq	%rbp
100005f6e:	48 89 e5 	movq	%rsp, %rbp
100005f71:	48 83 ec 10 	subq	$16, %rsp
100005f75:	48 8d 45 f0 	leaq	-16(%rbp), %rax
100005f79:	48 89 38 	movq	%rdi, (%rax)
100005f7c:	48 8b 0d a5 b8 01 00 	movq	112805(%rip), %rcx ## Objc class ref: ViewController
100005f83:	48 89 48 08 	movq	%rcx, 8(%rax)
100005f87:	48 8b 35 8a b1 01 00 	movq	110986(%rip), %rsi ## Objc selector ref: viewDidAppear:
100005f8e:	48 89 c7 	movq	%rax, %rdi
100005f91:	e8 26 de 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] viewDidAppear:]
100005f96:	48 8d 3d 6b 52 01 00 	leaq	86635(%rip), %rdi ## Objc cfstring ref: @"%s"
100005f9d:	48 8d 35 c0 f6 00 00 	leaq	63168(%rip), %rsi ## literal pool for: "-[ViewController viewDidAppear:]"
100005fa4:	31 c0 	xorl	%eax, %eax
100005fa6:	e8 67 dc 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100005fab:	e8 44 fe ff ff 	callq	_functionF
100005fb0:	48 83 c4 10 	addq	$16, %rsp
100005fb4:	5d 	popq	%rbp
100005fb5:	c3 	retq
-[ViewController observeValueForKeyPath:ofObject:change:context:]:
100005fb6:	55 	pushq	%rbp
100005fb7:	48 89 e5 	movq	%rsp, %rbp
100005fba:	41 57 	pushq	%r15
100005fbc:	41 56 	pushq	%r14
100005fbe:	41 54 	pushq	%r12
100005fc0:	53 	pushq	%rbx
100005fc1:	4d 89 c6 	movq	%r8, %r14
100005fc4:	48 89 d3 	movq	%rdx, %rbx
100005fc7:	4c 8b 25 aa 40 01 00 	movq	82090(%rip), %r12 ## literal pool symbol address: _objc_retain
100005fce:	48 89 df 	movq	%rbx, %rdi
100005fd1:	41 ff d4 	callq	*%r12
100005fd4:	49 89 c7 	movq	%rax, %r15
100005fd7:	4c 89 f7 	movq	%r14, %rdi
100005fda:	41 ff d4 	callq	*%r12
100005fdd:	49 89 c6 	movq	%rax, %r14
100005fe0:	48 8b 35 39 b1 01 00 	movq	110905(%rip), %rsi ## Objc selector ref: isEqualToString:
100005fe7:	48 8d 15 fa 61 01 00 	leaq	90618(%rip), %rdx ## Objc cfstring ref: @"backgroundColor"
100005fee:	48 89 df 	movq	%rbx, %rdi
100005ff1:	ff 15 71 40 01 00 	callq	*82033(%rip) ## Objc message: -[%rdi isEqualToString:]
100005ff7:	89 c3 	movl	%eax, %ebx
100005ff9:	4c 89 ff 	movq	%r15, %rdi
100005ffc:	ff 15 6e 40 01 00 	callq	*82030(%rip) ## literal pool symbol address: _objc_release
100006002:	84 db 	testb	%bl, %bl
100006004:	74 11 	je	0x100006017
100006006:	48 8d 3d fb 61 01 00 	leaq	90619(%rip), %rdi ## Objc cfstring ref: @"backgroundColor: %@"
10000600d:	31 c0 	xorl	%eax, %eax
10000600f:	4c 89 f6 	movq	%r14, %rsi
100006012:	e8 fb db 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100006017:	4c 89 f7 	movq	%r14, %rdi
10000601a:	5b 	popq	%rbx
10000601b:	41 5c 	popq	%r12
10000601d:	41 5e 	popq	%r14
10000601f:	41 5f 	popq	%r15
100006021:	5d 	popq	%rbp
100006022:	ff 25 48 40 01 00 	jmpq	*81992(%rip) ## literal pool symbol address: _objc_release
-[ViewController testAttributeUsage]:
100006028:	55 	pushq	%rbp
100006029:	48 89 e5 	movq	%rsp, %rbp
10000602c:	48 8b 3d cd b6 01 00 	movq	112333(%rip), %rdi ## Objc class ref: AttributeUsage
100006033:	48 8b 35 36 ae 01 00 	movq	110134(%rip), %rsi ## Objc selector ref: new
10000603a:	ff 15 28 40 01 00 	callq	*81960(%rip) ## Objc message: +[AttributeUsage new]
100006040:	48 89 c7 	movq	%rax, %rdi
100006043:	5d 	popq	%rbp
100006044:	ff 25 26 40 01 00 	jmpq	*81958(%rip) ## literal pool symbol address: _objc_release
-[ViewController testClassSwizzle]:
10000604a:	55 	pushq	%rbp
10000604b:	48 89 e5 	movq	%rsp, %rbp
10000604e:	48 8b 3d 23 b6 01 00 	movq	112163(%rip), %rdi ## Objc class ref: TestCategorySwizzle
100006055:	48 8b 35 84 ae 01 00 	movq	110212(%rip), %rsi ## Objc selector ref: testClassMethod
10000605c:	5d 	popq	%rbp
10000605d:	ff 25 05 40 01 00 	jmpq	*81925(%rip) ## Objc message: +[TestCategorySwizzle testClassMethod]
-[ViewController testUnsafeSwizzle]:
100006063:	55 	pushq	%rbp
100006064:	48 89 e5 	movq	%rsp, %rbp
100006067:	41 57 	pushq	%r15
100006069:	41 56 	pushq	%r14
10000606b:	41 54 	pushq	%r12
10000606d:	53 	pushq	%rbx
10000606e:	48 8b 3d 93 b6 01 00 	movq	112275(%rip), %rdi ## Objc class ref: TestUnsafeSwizzle
100006075:	4c 8b 35 f4 ad 01 00 	movq	110068(%rip), %r14 ## Objc selector ref: new
10000607c:	4c 89 f6 	movq	%r14, %rsi
10000607f:	ff 15 e3 3f 01 00 	callq	*81891(%rip) ## Objc message: +[TestUnsafeSwizzle new]
100006085:	48 89 c3 	movq	%rax, %rbx
100006088:	4c 8b 3d 19 ae 01 00 	movq	110105(%rip), %r15 ## Objc selector ref: testMethod
10000608f:	48 89 df 	movq	%rbx, %rdi
100006092:	4c 89 fe 	movq	%r15, %rsi
100006095:	ff 15 cd 3f 01 00 	callq	*81869(%rip) ## Objc message: -[%rdi testMethod]
10000609b:	48 89 df 	movq	%rbx, %rdi
10000609e:	ff 15 cc 3f 01 00 	callq	*81868(%rip) ## literal pool symbol address: _objc_release
1000060a4:	48 8b 3d 65 b6 01 00 	movq	112229(%rip), %rdi ## Objc class ref: SubTestUnsafeSwizzle
1000060ab:	48 8b 35 76 b0 01 00 	movq	110710(%rip), %rsi ## Objc selector ref: load
1000060b2:	4c 8b 25 af 3f 01 00 	movq	81839(%rip), %r12 ## Objc message: +[SubTestUnsafeSwizzle load]
1000060b9:	41 ff d4 	callq	*%r12
1000060bc:	48 8b 3d 4d b6 01 00 	movq	112205(%rip), %rdi ## Objc class ref: SubTestUnsafeSwizzle
1000060c3:	4c 89 f6 	movq	%r14, %rsi
1000060c6:	41 ff d4 	callq	*%r12
1000060c9:	48 89 c3 	movq	%rax, %rbx
1000060cc:	48 89 df 	movq	%rbx, %rdi
1000060cf:	4c 89 fe 	movq	%r15, %rsi
1000060d2:	41 ff d4 	callq	*%r12
1000060d5:	48 89 df 	movq	%rbx, %rdi
1000060d8:	5b 	popq	%rbx
1000060d9:	41 5c 	popq	%r12
1000060db:	41 5e 	popq	%r14
1000060dd:	41 5f 	popq	%r15
1000060df:	5d 	popq	%rbp
1000060e0:	ff 25 8a 3f 01 00 	jmpq	*81802(%rip) ## literal pool symbol address: _objc_release
1000060e6:	48 89 c3 	movq	%rax, %rbx
1000060e9:	83 fa 01 	cmpl	$1, %edx
1000060ec:	75 46 	jne	0x100006134
1000060ee:	48 89 df 	movq	%rbx, %rdi
1000060f1:	e8 84 dc 00 00 	callq	0x100013d7a ## symbol stub for: _objc_begin_catch
1000060f6:	48 89 c7 	movq	%rax, %rdi
1000060f9:	e8 d6 dc 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000060fe:	48 89 c3 	movq	%rax, %rbx
100006101:	48 8d 3d 20 61 01 00 	leaq	90400(%rip), %rdi ## Objc cfstring ref: @"exception = %@"
100006108:	31 c0 	xorl	%eax, %eax
10000610a:	48 89 de 	movq	%rbx, %rsi
10000610d:	e8 00 db 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100006112:	48 89 df 	movq	%rbx, %rdi
100006115:	ff 15 55 3f 01 00 	callq	*81749(%rip) ## literal pool symbol address: _objc_release
10000611b:	e8 6c dc 00 00 	callq	0x100013d8c ## symbol stub for: _objc_end_catch
100006120:	4c 8b 3d 81 ad 01 00 	movq	109953(%rip), %r15 ## Objc selector ref: testMethod
100006127:	e9 78 ff ff ff 	jmp	0x1000060a4
10000612c:	48 89 c3 	movq	%rax, %rbx
10000612f:	e8 58 dc 00 00 	callq	0x100013d8c ## symbol stub for: _objc_end_catch
100006134:	48 89 df 	movq	%rbx, %rdi
100006137:	e8 06 db 00 00 	callq	0x100013c42 ## symbol stub for: __Unwind_Resume
10000613c:	0f 0b 	ud2
-[ViewController testCategorySwizzle]:
10000613e:	55 	pushq	%rbp
10000613f:	48 89 e5 	movq	%rsp, %rbp
100006142:	41 56 	pushq	%r14
100006144:	53 	pushq	%rbx
100006145:	48 8b 3d 2c b5 01 00 	movq	111916(%rip), %rdi ## Objc class ref: TestCategorySwizzle
10000614c:	48 8b 35 1d ad 01 00 	movq	109853(%rip), %rsi ## Objc selector ref: new
100006153:	4c 8b 35 0e 3f 01 00 	movq	81678(%rip), %r14 ## Objc message: +[TestCategorySwizzle new]
10000615a:	41 ff d6 	callq	*%r14
10000615d:	48 89 c3 	movq	%rax, %rbx
100006160:	48 8b 35 59 ad 01 00 	movq	109913(%rip), %rsi ## Objc selector ref: testCategorySwizzle
100006167:	48 89 df 	movq	%rbx, %rdi
10000616a:	41 ff d6 	callq	*%r14
10000616d:	48 89 df 	movq	%rbx, %rdi
100006170:	5b 	popq	%rbx
100006171:	41 5e 	popq	%r14
100006173:	5d 	popq	%rbp
100006174:	ff 25 f6 3e 01 00 	jmpq	*81654(%rip) ## literal pool symbol address: _objc_release
-[ViewController testSubClassSwizzleMethod]:
10000617a:	55 	pushq	%rbp
10000617b:	48 89 e5 	movq	%rsp, %rbp
10000617e:	41 57 	pushq	%r15
100006180:	41 56 	pushq	%r14
100006182:	41 55 	pushq	%r13
100006184:	41 54 	pushq	%r12
100006186:	53 	pushq	%rbx
100006187:	50 	pushq	%rax
100006188:	48 8b 1d e1 b4 01 00 	movq	111841(%rip), %rbx ## Objc class ref: MethodSwizzleUtil
10000618f:	48 8b 3d 82 b5 01 00 	movq	112002(%rip), %rdi ## Objc class ref: TestBSubClassSwizzle
100006196:	4c 8b 35 03 ad 01 00 	movq	109827(%rip), %r14 ## Objc selector ref: class
10000619d:	4c 8b 2d c4 3e 01 00 	movq	81604(%rip), %r13 ## Objc message: +[TestBSubClassSwizzle class]
1000061a4:	4c 89 f6 	movq	%r14, %rsi
1000061a7:	41 ff d5 	callq	*%r13
1000061aa:	4c 8b 3d 7f af 01 00 	movq	110463(%rip), %r15 ## Objc selector ref: testSubClassSwizzle
1000061b1:	4c 8b 05 80 af 01 00 	movq	110464(%rip), %r8 ## Objc selector ref: b_testSubClassSwizzle
1000061b8:	4c 8b 25 11 ad 01 00 	movq	109841(%rip), %r12 ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
1000061bf:	48 89 df 	movq	%rbx, %rdi
1000061c2:	4c 89 e6 	movq	%r12, %rsi
1000061c5:	48 89 c2 	movq	%rax, %rdx
1000061c8:	4c 89 f9 	movq	%r15, %rcx
1000061cb:	41 ff d5 	callq	*%r13
1000061ce:	48 8b 1d 9b b4 01 00 	movq	111771(%rip), %rbx ## Objc class ref: MethodSwizzleUtil
1000061d5:	48 8b 3d 44 b5 01 00 	movq	111940(%rip), %rdi ## Objc class ref: TestASubClassSwizzle
1000061dc:	4c 89 f6 	movq	%r14, %rsi
1000061df:	41 ff d5 	callq	*%r13
1000061e2:	4c 8b 05 57 af 01 00 	movq	110423(%rip), %r8 ## Objc selector ref: a_testSubClassSwizzle
1000061e9:	48 89 df 	movq	%rbx, %rdi
1000061ec:	4c 89 e6 	movq	%r12, %rsi
1000061ef:	48 89 c2 	movq	%rax, %rdx
1000061f2:	4c 89 f9 	movq	%r15, %rcx
1000061f5:	41 ff d5 	callq	*%r13
1000061f8:	48 8b 1d 71 b4 01 00 	movq	111729(%rip), %rbx ## Objc class ref: MethodSwizzleUtil
1000061ff:	48 8b 3d 22 b5 01 00 	movq	111906(%rip), %rdi ## Objc class ref: TestSubClassSwizzle
100006206:	4c 89 f6 	movq	%r14, %rsi
100006209:	41 ff d5 	callq	*%r13
10000620c:	4c 8b 05 35 af 01 00 	movq	110389(%rip), %r8 ## Objc selector ref: s_testSubClassSwizzle
100006213:	48 89 df 	movq	%rbx, %rdi
100006216:	4c 89 e6 	movq	%r12, %rsi
100006219:	48 89 c2 	movq	%rax, %rdx
10000621c:	4c 89 f9 	movq	%r15, %rcx
10000621f:	41 ff d5 	callq	*%r13
100006222:	48 8b 3d ef b4 01 00 	movq	111855(%rip), %rdi ## Objc class ref: TestBSubClassSwizzle
100006229:	48 8b 35 40 ac 01 00 	movq	109632(%rip), %rsi ## Objc selector ref: new
100006230:	41 ff d5 	callq	*%r13
100006233:	48 89 c3 	movq	%rax, %rbx
100006236:	48 89 df 	movq	%rbx, %rdi
100006239:	4c 89 fe 	movq	%r15, %rsi
10000623c:	41 ff d5 	callq	*%r13
10000623f:	48 89 df 	movq	%rbx, %rdi
100006242:	48 83 c4 08 	addq	$8, %rsp
100006246:	5b 	popq	%rbx
100006247:	41 5c 	popq	%r12
100006249:	41 5d 	popq	%r13
10000624b:	41 5e 	popq	%r14
10000624d:	41 5f 	popq	%r15
10000624f:	5d 	popq	%rbp
100006250:	ff 25 1a 3e 01 00 	jmpq	*81434(%rip) ## literal pool symbol address: _objc_release
-[ViewController testDoSthWhenDealloc]:
100006256:	55 	pushq	%rbp
100006257:	48 89 e5 	movq	%rsp, %rbp
10000625a:	41 57 	pushq	%r15
10000625c:	41 56 	pushq	%r14
10000625e:	41 54 	pushq	%r12
100006260:	53 	pushq	%rbx
100006261:	48 83 ec 30 	subq	$48, %rsp
100006265:	48 89 fb 	movq	%rdi, %rbx
100006268:	48 8b 3d c1 b4 01 00 	movq	111809(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_UIScrollView
10000626f:	48 8b 35 fa ab 01 00 	movq	109562(%rip), %rsi ## Objc selector ref: new
100006276:	4c 8b 25 eb 3d 01 00 	movq	81387(%rip), %r12 ## Objc message: +[UIScrollView new]
10000627d:	41 ff d4 	callq	*%r12
100006280:	49 89 c6 	movq	%rax, %r14
100006283:	48 8b 35 c6 ae 01 00 	movq	110278(%rip), %rsi ## Objc selector ref: addObserver:forKeyPath:options:context:
10000628a:	48 8d 0d 57 5f 01 00 	leaq	89943(%rip), %rcx ## Objc cfstring ref: @"backgroundColor"
100006291:	41 b8 01 00 00 00 	movl	$1, %r8d
100006297:	45 31 c9 	xorl	%r9d, %r9d
10000629a:	4c 89 f7 	movq	%r14, %rdi
10000629d:	48 89 da 	movq	%rbx, %rdx
1000062a0:	41 ff d4 	callq	*%r12
1000062a3:	4c 8d 7d d8 	leaq	-40(%rbp), %r15
1000062a7:	4c 89 ff 	movq	%r15, %rdi
1000062aa:	48 89 de 	movq	%rbx, %rsi
1000062ad:	e8 fe da 00 00 	callq	0x100013db0 ## symbol stub for: _objc_initWeak
1000062b2:	48 8d 5d d0 	leaq	-48(%rbp), %rbx
1000062b6:	48 8b 05 63 3d 01 00 	movq	81251(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000062bd:	48 89 43 e0 	movq	%rax, -32(%rbx)
1000062c1:	b8 00 00 00 c2 	movl	$3254779904, %eax
1000062c6:	48 89 43 e8 	movq	%rax, -24(%rbx)
1000062ca:	48 8d 05 70 00 00 00 	leaq	"___38-[ViewController testDoSthWhenDealloc]_block_invoke"(%rip), %rax
1000062d1:	48 89 43 f0 	movq	%rax, -16(%rbx)
1000062d5:	48 8d 05 74 4b 01 00 	leaq	___block_descriptor_tmp(%rip), %rax
1000062dc:	48 89 43 f8 	movq	%rax, -8(%rbx)
1000062e0:	48 89 df 	movq	%rbx, %rdi
1000062e3:	4c 89 fe 	movq	%r15, %rsi
1000062e6:	e8 95 da 00 00 	callq	0x100013d80 ## symbol stub for: _objc_copyWeak
1000062eb:	48 8b 35 6e ae 01 00 	movq	110190(%rip), %rsi ## Objc selector ref: hc_doSthWhenDeallocWithBlock:
1000062f2:	48 8d 55 b0 	leaq	-80(%rbp), %rdx
1000062f6:	4c 89 f7 	movq	%r14, %rdi
1000062f9:	41 ff d4 	callq	*%r12
1000062fc:	48 89 df 	movq	%rbx, %rdi
1000062ff:	e8 82 da 00 00 	callq	0x100013d86 ## symbol stub for: _objc_destroyWeak
100006304:	48 8d 7d d8 	leaq	-40(%rbp), %rdi
100006308:	e8 79 da 00 00 	callq	0x100013d86 ## symbol stub for: _objc_destroyWeak
10000630d:	4c 89 f7 	movq	%r14, %rdi
100006310:	ff 15 5a 3d 01 00 	callq	*81242(%rip) ## literal pool symbol address: _objc_release
100006316:	48 83 c4 30 	addq	$48, %rsp
10000631a:	5b 	popq	%rbx
10000631b:	41 5c 	popq	%r12
10000631d:	41 5e 	popq	%r14
10000631f:	41 5f 	popq	%r15
100006321:	5d 	popq	%rbp
100006322:	c3 	retq
100006323:	49 89 c6 	movq	%rax, %r14
100006326:	48 89 df 	movq	%rbx, %rdi
100006329:	e8 58 da 00 00 	callq	0x100013d86 ## symbol stub for: _objc_destroyWeak
10000632e:	48 8d 7d d8 	leaq	-40(%rbp), %rdi
100006332:	e8 4f da 00 00 	callq	0x100013d86 ## symbol stub for: _objc_destroyWeak
100006337:	4c 89 f7 	movq	%r14, %rdi
10000633a:	e8 03 d9 00 00 	callq	0x100013c42 ## symbol stub for: __Unwind_Resume
10000633f:	0f 0b 	ud2
___38-[ViewController testDoSthWhenDealloc]_block_invoke:
100006341:	55 	pushq	%rbp
100006342:	48 89 e5 	movq	%rsp, %rbp
100006345:	41 57 	pushq	%r15
100006347:	41 56 	pushq	%r14
100006349:	53 	pushq	%rbx
10000634a:	50 	pushq	%rax
10000634b:	49 89 f6 	movq	%rsi, %r14
10000634e:	48 89 fb 	movq	%rdi, %rbx
100006351:	48 83 c3 20 	addq	$32, %rbx
100006355:	4c 89 f7 	movq	%r14, %rdi
100006358:	ff 15 1a 3d 01 00 	callq	*81178(%rip) ## literal pool symbol address: _objc_retain
10000635e:	49 89 c7 	movq	%rax, %r15
100006361:	48 89 df 	movq	%rbx, %rdi
100006364:	e8 4d da 00 00 	callq	0x100013db6 ## symbol stub for: _objc_loadWeakRetained
100006369:	48 89 c3 	movq	%rax, %rbx
10000636c:	48 8b 35 e5 ad 01 00 	movq	110053(%rip), %rsi ## Objc selector ref: removeObserver:forKeyPath:
100006373:	48 8d 0d 6e 5e 01 00 	leaq	89710(%rip), %rcx ## Objc cfstring ref: @"backgroundColor"
10000637a:	4c 89 f7 	movq	%r14, %rdi
10000637d:	48 89 da 	movq	%rbx, %rdx
100006380:	ff 15 e2 3c 01 00 	callq	*81122(%rip) ## Objc message: -[%rdi removeObserver:forKeyPath:]
100006386:	4c 8b 35 e3 3c 01 00 	movq	81123(%rip), %r14 ## literal pool symbol address: _objc_release
10000638d:	4c 89 ff 	movq	%r15, %rdi
100006390:	41 ff d6 	callq	*%r14
100006393:	48 89 df 	movq	%rbx, %rdi
100006396:	4c 89 f0 	movq	%r14, %rax
100006399:	48 83 c4 08 	addq	$8, %rsp
10000639d:	5b 	popq	%rbx
10000639e:	41 5e 	popq	%r14
1000063a0:	41 5f 	popq	%r15
1000063a2:	5d 	popq	%rbp
1000063a3:	ff e0 	jmpq	*%rax
___copy_helper_block_:
1000063a5:	55 	pushq	%rbp
1000063a6:	48 89 e5 	movq	%rsp, %rbp
1000063a9:	48 83 c6 20 	addq	$32, %rsi
1000063ad:	48 83 c7 20 	addq	$32, %rdi
1000063b1:	5d 	popq	%rbp
1000063b2:	e9 c9 d9 00 00 	jmp	0x100013d80 ## symbol stub for: _objc_copyWeak
___destroy_helper_block_:
1000063b7:	55 	pushq	%rbp
1000063b8:	48 89 e5 	movq	%rsp, %rbp
1000063bb:	48 83 c7 20 	addq	$32, %rdi
1000063bf:	5d 	popq	%rbp
1000063c0:	e9 c1 d9 00 00 	jmp	0x100013d86 ## symbol stub for: _objc_destroyWeak
-[ViewController testCategoryOveride]:
1000063c5:	55 	pushq	%rbp
1000063c6:	48 89 e5 	movq	%rsp, %rbp
1000063c9:	48 8b 3d 68 b3 01 00 	movq	111464(%rip), %rdi ## Objc class ref: TestCategoryOveride
1000063d0:	48 8b 35 99 aa 01 00 	movq	109209(%rip), %rsi ## Objc selector ref: new
1000063d7:	ff 15 8b 3c 01 00 	callq	*81035(%rip) ## Objc message: +[TestCategoryOveride new]
1000063dd:	48 89 c7 	movq	%rax, %rdi
1000063e0:	5d 	popq	%rbp
1000063e1:	ff 25 89 3c 01 00 	jmpq	*81033(%rip) ## literal pool symbol address: _objc_release
-[ViewController testSwizzleInInitialize]:
1000063e7:	55 	pushq	%rbp
1000063e8:	48 89 e5 	movq	%rsp, %rbp
1000063eb:	41 56 	pushq	%r14
1000063ed:	53 	pushq	%rbx
1000063ee:	48 8b 3d 4b b3 01 00 	movq	111435(%rip), %rdi ## Objc class ref: TestSwizzleInInitializeA
1000063f5:	48 8b 35 74 aa 01 00 	movq	109172(%rip), %rsi ## Objc selector ref: new
1000063fc:	4c 8b 35 65 3c 01 00 	movq	80997(%rip), %r14 ## Objc message: +[TestSwizzleInInitializeA new]
100006403:	41 ff d6 	callq	*%r14
100006406:	48 89 c3 	movq	%rax, %rbx
100006409:	48 8b 35 58 ad 01 00 	movq	109912(%rip), %rsi ## Objc selector ref: testSwizzleMethod
100006410:	48 89 df 	movq	%rbx, %rdi
100006413:	41 ff d6 	callq	*%r14
100006416:	48 89 df 	movq	%rbx, %rdi
100006419:	5b 	popq	%rbx
10000641a:	41 5e 	popq	%r14
10000641c:	5d 	popq	%rbp
10000641d:	ff 25 4d 3c 01 00 	jmpq	*80973(%rip) ## literal pool symbol address: _objc_release
-[ViewController testCopyUsage]:
100006423:	55 	pushq	%rbp
100006424:	48 89 e5 	movq	%rsp, %rbp
100006427:	41 56 	pushq	%r14
100006429:	53 	pushq	%rbx
10000642a:	48 8b 3d 17 b3 01 00 	movq	111383(%rip), %rdi ## Objc class ref: CopyUsage
100006431:	48 8b 35 38 aa 01 00 	movq	109112(%rip), %rsi ## Objc selector ref: new
100006438:	4c 8b 35 29 3c 01 00 	movq	80937(%rip), %r14 ## Objc message: +[CopyUsage new]
10000643f:	41 ff d6 	callq	*%r14
100006442:	48 89 c3 	movq	%rax, %rbx
100006445:	48 8b 35 24 ad 01 00 	movq	109860(%rip), %rsi ## Objc selector ref: testCopyAndMutableCopy
10000644c:	48 89 df 	movq	%rbx, %rdi
10000644f:	41 ff d6 	callq	*%r14
100006452:	48 89 df 	movq	%rbx, %rdi
100006455:	5b 	popq	%rbx
100006456:	41 5e 	popq	%r14
100006458:	5d 	popq	%rbp
100006459:	ff 25 11 3c 01 00 	jmpq	*80913(%rip) ## literal pool symbol address: _objc_release
-[ViewController testTextFieldUsage]:
10000645f:	55 	pushq	%rbp
100006460:	48 89 e5 	movq	%rsp, %rbp
100006463:	41 57 	pushq	%r15
100006465:	41 56 	pushq	%r14
100006467:	41 55 	pushq	%r13
100006469:	41 54 	pushq	%r12
10000646b:	53 	pushq	%rbx
10000646c:	50 	pushq	%rax
10000646d:	49 89 ff 	movq	%rdi, %r15
100006470:	4c 8b 35 01 ad 01 00 	movq	109825(%rip), %r14 ## Objc selector ref: aTextFiled
100006477:	4c 8b 25 ea 3b 01 00 	movq	80874(%rip), %r12 ## Objc message: -[%rdi aTextFiled]
10000647e:	4c 89 f6 	movq	%r14, %rsi
100006481:	41 ff d4 	callq	*%r12
100006484:	48 89 c7 	movq	%rax, %rdi
100006487:	e8 48 d9 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000648c:	48 89 c3 	movq	%rax, %rbx
10000648f:	48 8b 35 ea ac 01 00 	movq	109802(%rip), %rsi ## Objc selector ref: setDelegate:
100006496:	48 89 df 	movq	%rbx, %rdi
100006499:	4c 89 fa 	movq	%r15, %rdx
10000649c:	41 ff d4 	callq	*%r12
10000649f:	4c 8b 2d ca 3b 01 00 	movq	80842(%rip), %r13 ## literal pool symbol address: _objc_release
1000064a6:	48 89 df 	movq	%rbx, %rdi
1000064a9:	41 ff d5 	callq	*%r13
1000064ac:	4c 89 ff 	movq	%r15, %rdi
1000064af:	4c 89 f6 	movq	%r14, %rsi
1000064b2:	41 ff d4 	callq	*%r12
1000064b5:	48 89 c7 	movq	%rax, %rdi
1000064b8:	e8 17 d9 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000064bd:	48 89 c3 	movq	%rax, %rbx
1000064c0:	48 8b 35 c1 ac 01 00 	movq	109761(%rip), %rsi ## Objc selector ref: setHcui_inputType:
1000064c7:	ba 03 00 00 00 	movl	$3, %edx
1000064cc:	48 89 df 	movq	%rbx, %rdi
1000064cf:	41 ff d4 	callq	*%r12
1000064d2:	48 89 df 	movq	%rbx, %rdi
1000064d5:	41 ff d5 	callq	*%r13
1000064d8:	4c 89 ff 	movq	%r15, %rdi
1000064db:	4c 89 f6 	movq	%r14, %rsi
1000064de:	41 ff d4 	callq	*%r12
1000064e1:	48 89 c7 	movq	%rax, %rdi
1000064e4:	e8 eb d8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000064e9:	48 89 c3 	movq	%rax, %rbx
1000064ec:	48 8b 35 9d ac 01 00 	movq	109725(%rip), %rsi ## Objc selector ref: setHcui_limitLegnth:
1000064f3:	ba 13 00 00 00 	movl	$19, %edx
1000064f8:	48 89 df 	movq	%rbx, %rdi
1000064fb:	41 ff d4 	callq	*%r12
1000064fe:	48 89 df 	movq	%rbx, %rdi
100006501:	4c 89 e8 	movq	%r13, %rax
100006504:	48 83 c4 08 	addq	$8, %rsp
100006508:	5b 	popq	%rbx
100006509:	41 5c 	popq	%r12
10000650b:	41 5d 	popq	%r13
10000650d:	41 5e 	popq	%r14
10000650f:	41 5f 	popq	%r15
100006511:	5d 	popq	%rbp
100006512:	ff e0 	jmpq	*%rax
-[ViewController testArrayReadWhileChange]:
100006514:	55 	pushq	%rbp
100006515:	48 89 e5 	movq	%rsp, %rbp
100006518:	41 57 	pushq	%r15
10000651a:	41 56 	pushq	%r14
10000651c:	41 55 	pushq	%r13
10000651e:	41 54 	pushq	%r12
100006520:	53 	pushq	%rbx
100006521:	48 83 ec 38 	subq	$56, %rsp
100006525:	48 8b 3d 74 b1 01 00 	movq	110964(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
10000652c:	48 8b 35 65 ac 01 00 	movq	109669(%rip), %rsi ## Objc selector ref: arrayWithCapacity:
100006533:	31 d2 	xorl	%edx, %edx
100006535:	ff 15 2d 3b 01 00 	callq	*80685(%rip) ## Objc message: +[NSMutableArray arrayWithCapacity:]
10000653b:	48 89 c7 	movq	%rax, %rdi
10000653e:	e8 91 d8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100006543:	48 89 45 d0 	movq	%rax, -48(%rbp)
100006547:	4c 8b 3d 22 a9 01 00 	movq	108834(%rip), %r15 ## Objc selector ref: new
10000654e:	bb 0a 00 00 00 	movl	$10, %ebx
100006553:	4c 8b 25 fe a9 01 00 	movq	109054(%rip), %r12 ## Objc selector ref: addObject:
10000655a:	4c 8b 35 07 3b 01 00 	movq	80647(%rip), %r14 ## Objc message: -[%rdi addObject:]
100006561:	48 8b 3d 20 b1 01 00 	movq	110880(%rip), %rdi ## Objc class ref: TestObj
100006568:	4c 89 fe 	movq	%r15, %rsi
10000656b:	41 ff d6 	callq	*%r14
10000656e:	49 89 c5 	movq	%rax, %r13
100006571:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100006575:	4c 89 e6 	movq	%r12, %rsi
100006578:	4c 89 ea 	movq	%r13, %rdx
10000657b:	41 ff d6 	callq	*%r14
10000657e:	4c 89 ef 	movq	%r13, %rdi
100006581:	ff 15 e9 3a 01 00 	callq	*80617(%rip) ## literal pool symbol address: _objc_release
100006587:	48 ff cb 	decq	%rbx
10000658a:	75 d5 	jne	0x100006561
10000658c:	48 8b 05 8d 3a 01 00 	movq	80525(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100006593:	48 8d 5d a8 	leaq	-88(%rbp), %rbx
100006597:	48 89 03 	movq	%rax, (%rbx)
10000659a:	b8 00 00 00 c2 	movl	$3254779904, %eax
10000659f:	48 89 43 08 	movq	%rax, 8(%rbx)
1000065a3:	48 8d 05 5c 00 00 00 	leaq	"___42-[ViewController testArrayReadWhileChange]_block_invoke"(%rip), %rax
1000065aa:	48 89 43 10 	movq	%rax, 16(%rbx)
1000065ae:	48 8d 05 cb 48 01 00 	leaq	___block_descriptor_tmp.91(%rip), %rax
1000065b5:	48 89 43 18 	movq	%rax, 24(%rbx)
1000065b9:	48 8b 7d d0 	movq	-48(%rbp), %rdi
1000065bd:	48 89 7b 20 	movq	%rdi, 32(%rbx)
1000065c1:	4c 8b 3d e0 ab 01 00 	movq	109536(%rip), %r15 ## Objc selector ref: enumerateObjectsUsingBlock:
1000065c8:	ff 15 aa 3a 01 00 	callq	*80554(%rip) ## literal pool symbol address: _objc_retain
1000065ce:	49 89 c6 	movq	%rax, %r14
1000065d1:	4c 89 f7 	movq	%r14, %rdi
1000065d4:	4c 89 fe 	movq	%r15, %rsi
1000065d7:	48 89 da 	movq	%rbx, %rdx
1000065da:	ff 15 88 3a 01 00 	callq	*80520(%rip) ## Objc message: +[TestObj enumerateObjectsUsingBlock:]
1000065e0:	48 8b 7b 20 	movq	32(%rbx), %rdi
1000065e4:	48 8b 05 85 3a 01 00 	movq	80517(%rip), %rax ## literal pool symbol address: _objc_release
1000065eb:	48 89 c3 	movq	%rax, %rbx
1000065ee:	ff d3 	callq	*%rbx
1000065f0:	4c 89 f7 	movq	%r14, %rdi
1000065f3:	48 89 d8 	movq	%rbx, %rax
1000065f6:	48 83 c4 38 	addq	$56, %rsp
1000065fa:	5b 	popq	%rbx
1000065fb:	41 5c 	popq	%r12
1000065fd:	41 5d 	popq	%r13
1000065ff:	41 5e 	popq	%r14
100006601:	41 5f 	popq	%r15
100006603:	5d 	popq	%rbp
100006604:	ff e0 	jmpq	*%rax
___42-[ViewController testArrayReadWhileChange]_block_invoke:
100006606:	55 	pushq	%rbp
100006607:	48 89 e5 	movq	%rsp, %rbp
10000660a:	41 57 	pushq	%r15
10000660c:	41 56 	pushq	%r14
10000660e:	53 	pushq	%rbx
10000660f:	50 	pushq	%rax
100006610:	48 89 fb 	movq	%rdi, %rbx
100006613:	48 8d 3d ce 52 01 00 	leaq	86734(%rip), %rdi ## Objc cfstring ref: @"%@"
10000661a:	31 c0 	xorl	%eax, %eax
10000661c:	e8 f1 d5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100006621:	4c 8b 73 20 	movq	32(%rbx), %r14
100006625:	48 8b 3d 5c b0 01 00 	movq	110684(%rip), %rdi ## Objc class ref: TestObj
10000662c:	48 8b 35 3d a8 01 00 	movq	108605(%rip), %rsi ## Objc selector ref: new
100006633:	4c 8b 3d 2e 3a 01 00 	movq	80430(%rip), %r15 ## Objc message: +[TestObj new]
10000663a:	41 ff d7 	callq	*%r15
10000663d:	48 89 c3 	movq	%rax, %rbx
100006640:	48 8b 35 59 ab 01 00 	movq	109401(%rip), %rsi ## Objc selector ref: replaceObjectAtIndex:withObject:
100006647:	ba 03 00 00 00 	movl	$3, %edx
10000664c:	4c 89 f7 	movq	%r14, %rdi
10000664f:	48 89 d9 	movq	%rbx, %rcx
100006652:	41 ff d7 	callq	*%r15
100006655:	48 89 df 	movq	%rbx, %rdi
100006658:	48 83 c4 08 	addq	$8, %rsp
10000665c:	5b 	popq	%rbx
10000665d:	41 5e 	popq	%r14
10000665f:	41 5f 	popq	%r15
100006661:	5d 	popq	%rbp
100006662:	ff 25 08 3a 01 00 	jmpq	*80392(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_.88:
100006668:	55 	pushq	%rbp
100006669:	48 89 e5 	movq	%rsp, %rbp
10000666c:	48 8b 7e 20 	movq	32(%rsi), %rdi
100006670:	5d 	popq	%rbp
100006671:	ff 25 01 3a 01 00 	jmpq	*80385(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_.89:
100006677:	55 	pushq	%rbp
100006678:	48 89 e5 	movq	%rsp, %rbp
10000667b:	48 8b 7f 20 	movq	32(%rdi), %rdi
10000667f:	5d 	popq	%rbp
100006680:	ff 25 ea 39 01 00 	jmpq	*80362(%rip) ## literal pool symbol address: _objc_release
-[ViewController testClassCluster]:
100006686:	55 	pushq	%rbp
100006687:	48 89 e5 	movq	%rsp, %rbp
10000668a:	48 8b 3d bf b0 01 00 	movq	110783(%rip), %rdi ## Objc class ref: TestClassCluster
100006691:	48 8b 35 d8 a7 01 00 	movq	108504(%rip), %rsi ## Objc selector ref: new
100006698:	ff 15 ca 39 01 00 	callq	*80330(%rip) ## Objc message: +[TestClassCluster new]
10000669e:	48 89 c7 	movq	%rax, %rdi
1000066a1:	5d 	popq	%rbp
1000066a2:	ff 25 c8 39 01 00 	jmpq	*80328(%rip) ## literal pool symbol address: _objc_release
-[ViewController textField:shouldChangeCharactersInRange:replacementString:]:
1000066a8:	55 	pushq	%rbp
1000066a9:	48 89 e5 	movq	%rsp, %rbp
1000066ac:	41 57 	pushq	%r15
1000066ae:	41 56 	pushq	%r14
1000066b0:	41 55 	pushq	%r13
1000066b2:	41 54 	pushq	%r12
1000066b4:	53 	pushq	%rbx
1000066b5:	50 	pushq	%rax
1000066b6:	4d 89 ce 	movq	%r9, %r14
1000066b9:	4d 89 c7 	movq	%r8, %r15
1000066bc:	49 89 cc 	movq	%rcx, %r12
1000066bf:	48 89 d3 	movq	%rdx, %rbx
1000066c2:	48 89 df 	movq	%rbx, %rdi
1000066c5:	ff 15 ad 39 01 00 	callq	*80301(%rip) ## literal pool symbol address: _objc_retain
1000066cb:	49 89 c5 	movq	%rax, %r13
1000066ce:	48 8b 35 db aa 01 00 	movq	109275(%rip), %rsi ## Objc selector ref: hcui_shouldChangeCharactersInRange:replacementString:
1000066d5:	48 89 df 	movq	%rbx, %rdi
1000066d8:	4c 89 e2 	movq	%r12, %rdx
1000066db:	4c 89 f9 	movq	%r15, %rcx
1000066de:	4d 89 f0 	movq	%r14, %r8
1000066e1:	ff 15 81 39 01 00 	callq	*80257(%rip) ## Objc message: -[%rdi hcui_shouldChangeCharactersInRange:replacementString:]
1000066e7:	89 c3 	movl	%eax, %ebx
1000066e9:	4c 89 ef 	movq	%r13, %rdi
1000066ec:	ff 15 7e 39 01 00 	callq	*80254(%rip) ## literal pool symbol address: _objc_release
1000066f2:	89 d8 	movl	%ebx, %eax
1000066f4:	48 83 c4 08 	addq	$8, %rsp
1000066f8:	5b 	popq	%rbx
1000066f9:	41 5c 	popq	%r12
1000066fb:	41 5d 	popq	%r13
1000066fd:	41 5e 	popq	%r14
1000066ff:	41 5f 	popq	%r15
100006701:	5d 	popq	%rbp
100006702:	c3 	retq
-[ViewController dynamicFunctionTest]:
100006703:	55 	pushq	%rbp
100006704:	48 89 e5 	movq	%rsp, %rbp
100006707:	48 8b 05 d2 b1 01 00 	movq	_OBJC_IVAR_$_ViewController._dynamicFunctionTest(%rip), %rax
10000670e:	48 8b 04 07 	movq	(%rdi,%rax), %rax
100006712:	5d 	popq	%rbp
100006713:	c3 	retq
-[ViewController setDynamicFunctionTest:]:
100006714:	55 	pushq	%rbp
100006715:	48 89 e5 	movq	%rsp, %rbp
100006718:	48 03 3d c1 b1 01 00 	addq	_OBJC_IVAR_$_ViewController._dynamicFunctionTest(%rip), %rdi
10000671f:	48 89 d6 	movq	%rdx, %rsi
100006722:	5d 	popq	%rbp
100006723:	e9 ca d6 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[ViewController aTextFiled]:
100006728:	55 	pushq	%rbp
100006729:	48 89 e5 	movq	%rsp, %rbp
10000672c:	48 03 3d b5 b1 01 00 	addq	_OBJC_IVAR_$_ViewController._aTextFiled(%rip), %rdi
100006733:	e8 7e d6 00 00 	callq	0x100013db6 ## symbol stub for: _objc_loadWeakRetained
100006738:	48 89 c7 	movq	%rax, %rdi
10000673b:	5d 	popq	%rbp
10000673c:	e9 33 d6 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
-[ViewController setATextFiled:]:
100006741:	55 	pushq	%rbp
100006742:	48 89 e5 	movq	%rsp, %rbp
100006745:	48 03 3d 9c b1 01 00 	addq	_OBJC_IVAR_$_ViewController._aTextFiled(%rip), %rdi
10000674c:	48 89 d6 	movq	%rdx, %rsi
10000674f:	5d 	popq	%rbp
100006750:	e9 a3 d6 00 00 	jmp	0x100013df8 ## symbol stub for: _objc_storeWeak
-[ViewController .cxx_destruct]:
100006755:	55 	pushq	%rbp
100006756:	48 89 e5 	movq	%rsp, %rbp
100006759:	53 	pushq	%rbx
10000675a:	50 	pushq	%rax
10000675b:	48 89 fb 	movq	%rdi, %rbx
10000675e:	48 8b 3d 83 b1 01 00 	movq	_OBJC_IVAR_$_ViewController._aTextFiled(%rip), %rdi
100006765:	48 01 df 	addq	%rbx, %rdi
100006768:	e8 19 d6 00 00 	callq	0x100013d86 ## symbol stub for: _objc_destroyWeak
10000676d:	48 03 1d 6c b1 01 00 	addq	_OBJC_IVAR_$_ViewController._dynamicFunctionTest(%rip), %rbx
100006774:	31 f6 	xorl	%esi, %esi
100006776:	48 89 df 	movq	%rbx, %rdi
100006779:	48 83 c4 08 	addq	$8, %rsp
10000677d:	5b 	popq	%rbx
10000677e:	5d 	popq	%rbp
10000677f:	e9 6e d6 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
+[TestSwizzleInInitialize initialize]:
100006784:	55 	pushq	%rbp
100006785:	48 89 e5 	movq	%rsp, %rbp
100006788:	41 56 	pushq	%r14
10000678a:	53 	pushq	%rbx
10000678b:	48 83 ec 40 	subq	$64, %rsp
10000678f:	49 89 fe 	movq	%rdi, %r14
100006792:	48 8d 7d b8 	leaq	-72(%rbp), %rdi
100006796:	4c 89 37 	movq	%r14, (%rdi)
100006799:	48 8b 05 90 b0 01 00 	movq	110736(%rip), %rax ## Objc class ref: TestSwizzleInInitialize
1000067a0:	48 89 47 08 	movq	%rax, 8(%rdi)
1000067a4:	48 8b 35 0d aa 01 00 	movq	109069(%rip), %rsi ## Objc selector ref: initialize
1000067ab:	e8 0c d6 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] initialize]
1000067b0:	48 8b 3d a1 af 01 00 	movq	110497(%rip), %rdi ## Objc class ref: TestSwizzleInInitialize
1000067b7:	48 8b 35 02 aa 01 00 	movq	109058(%rip), %rsi ## Objc selector ref: self
1000067be:	ff 15 a4 38 01 00 	callq	*80036(%rip) ## Objc message: +[TestSwizzleInInitialize self]
1000067c4:	48 89 c7 	movq	%rax, %rdi
1000067c7:	e8 08 d6 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000067cc:	48 89 c3 	movq	%rax, %rbx
1000067cf:	48 89 df 	movq	%rbx, %rdi
1000067d2:	ff 15 98 38 01 00 	callq	*80024(%rip) ## literal pool symbol address: _objc_release
1000067d8:	4c 39 f3 	cmpq	%r14, %rbx
1000067db:	74 09 	je	0x1000067e6
1000067dd:	48 83 c4 40 	addq	$64, %rsp
1000067e1:	5b 	popq	%rbx
1000067e2:	41 5e 	popq	%r14
1000067e4:	5d 	popq	%rbp
1000067e5:	c3 	retq
1000067e6:	48 8b 05 33 38 01 00 	movq	79923(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
1000067ed:	48 89 45 c8 	movq	%rax, -56(%rbp)
1000067f1:	b8 00 00 00 c2 	movl	$3254779904, %eax
1000067f6:	48 89 45 d0 	movq	%rax, -48(%rbp)
1000067fa:	48 8d 05 31 00 00 00 	leaq	"___37+[TestSwizzleInInitialize initialize]_block_invoke"(%rip), %rax
100006801:	48 89 45 d8 	movq	%rax, -40(%rbp)
100006805:	48 8d 05 a4 46 01 00 	leaq	___block_descriptor_tmp(%rip), %rax
10000680c:	48 89 45 e0 	movq	%rax, -32(%rbp)
100006810:	4c 89 75 e8 	movq	%r14, -24(%rbp)
100006814:	48 83 3d c4 bd 01 00 ff 	cmpq	$-1, 114116(%rip)
10000681c:	75 02 	jne	0x100006820
10000681e:	eb bd 	jmp	0x1000067dd
100006820:	48 8d 3d b9 bd 01 00 	leaq	_initialize.onceToken(%rip), %rdi
100006827:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
10000682b:	e8 9c d4 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100006830:	eb ab 	jmp	0x1000067dd
___37+[TestSwizzleInInitialize initialize]_block_invoke:
100006832:	55 	pushq	%rbp
100006833:	48 89 e5 	movq	%rsp, %rbp
100006836:	48 8b 05 33 ae 01 00 	movq	110131(%rip), %rax ## Objc class ref: MethodSwizzleUtil
10000683d:	48 8b 57 20 	movq	32(%rdi), %rdx
100006841:	48 8b 0d 20 a9 01 00 	movq	108832(%rip), %rcx ## Objc selector ref: testSwizzleMethod
100006848:	4c 8b 05 79 a9 01 00 	movq	108921(%rip), %r8 ## Objc selector ref: s_testSwizzleMethod
10000684f:	48 8b 35 7a a6 01 00 	movq	108154(%rip), %rsi ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
100006856:	48 89 c7 	movq	%rax, %rdi
100006859:	5d 	popq	%rbp
10000685a:	ff 25 08 38 01 00 	jmpq	*79880(%rip) ## Objc message: +[MethodSwizzleUtil swizzleInstanceMethodWithClass:originalSel:replacementSel:]
___copy_helper_block_:
100006860:	55 	pushq	%rbp
100006861:	48 89 e5 	movq	%rsp, %rbp
100006864:	5d 	popq	%rbp
100006865:	c3 	retq
___destroy_helper_block_:
100006866:	55 	pushq	%rbp
100006867:	48 89 e5 	movq	%rsp, %rbp
10000686a:	5d 	popq	%rbp
10000686b:	c3 	retq
-[TestSwizzleInInitialize testSwizzleMethod]:
10000686c:	55 	pushq	%rbp
10000686d:	48 89 e5 	movq	%rsp, %rbp
100006870:	48 8d 3d 91 49 01 00 	leaq	84369(%rip), %rdi ## Objc cfstring ref: @"%s"
100006877:	48 8d 35 24 ef 00 00 	leaq	61220(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitialize testSwizzleMethod]"
10000687e:	31 c0 	xorl	%eax, %eax
100006880:	e8 8d d3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100006885:	5d 	popq	%rbp
100006886:	c3 	retq
-[TestSwizzleInInitialize testLogMethod]:
100006887:	55 	pushq	%rbp
100006888:	48 89 e5 	movq	%rsp, %rbp
10000688b:	48 8d 3d 76 49 01 00 	leaq	84342(%rip), %rdi ## Objc cfstring ref: @"%s"
100006892:	48 8d 35 36 ef 00 00 	leaq	61238(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitialize testLogMethod]"
100006899:	31 c0 	xorl	%eax, %eax
10000689b:	e8 72 d3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000068a0:	5d 	popq	%rbp
1000068a1:	c3 	retq
-[TestSwizzleInInitialize testTrackMethod]:
1000068a2:	55 	pushq	%rbp
1000068a3:	48 89 e5 	movq	%rsp, %rbp
1000068a6:	48 8d 3d 5b 49 01 00 	leaq	84315(%rip), %rdi ## Objc cfstring ref: @"%s"
1000068ad:	48 8d 35 44 ef 00 00 	leaq	61252(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitialize testTrackMethod]"
1000068b4:	31 c0 	xorl	%eax, %eax
1000068b6:	e8 57 d3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000068bb:	5d 	popq	%rbp
1000068bc:	c3 	retq
-[TestSwizzleInInitialize s_testSwizzleMethod]:
1000068bd:	55 	pushq	%rbp
1000068be:	48 89 e5 	movq	%rsp, %rbp
1000068c1:	48 8b 35 00 a9 01 00 	movq	108800(%rip), %rsi ## Objc selector ref: s_testSwizzleMethod
1000068c8:	ff 15 9a 37 01 00 	callq	*79770(%rip) ## Objc message: -[%rdi s_testSwizzleMethod]
1000068ce:	48 8d 3d 33 49 01 00 	leaq	84275(%rip), %rdi ## Objc cfstring ref: @"%s"
1000068d5:	48 8d 35 47 ef 00 00 	leaq	61255(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitialize s_testSwizzleMethod]"
1000068dc:	31 c0 	xorl	%eax, %eax
1000068de:	e8 2f d3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000068e3:	5d 	popq	%rbp
1000068e4:	c3 	retq
+[TestSwizzleInInitializeA initialize]:
1000068e5:	55 	pushq	%rbp
1000068e6:	48 89 e5 	movq	%rsp, %rbp
1000068e9:	41 56 	pushq	%r14
1000068eb:	53 	pushq	%rbx
1000068ec:	48 83 ec 40 	subq	$64, %rsp
1000068f0:	49 89 fe 	movq	%rdi, %r14
1000068f3:	48 8d 7d b8 	leaq	-72(%rbp), %rdi
1000068f7:	4c 89 37 	movq	%r14, (%rdi)
1000068fa:	48 8b 05 37 af 01 00 	movq	110391(%rip), %rax ## Objc class ref: TestSwizzleInInitializeA
100006901:	48 89 47 08 	movq	%rax, 8(%rdi)
100006905:	48 8b 35 ac a8 01 00 	movq	108716(%rip), %rsi ## Objc selector ref: initialize
10000690c:	e8 ab d4 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] initialize]
100006911:	48 8b 3d 28 ae 01 00 	movq	110120(%rip), %rdi ## Objc class ref: TestSwizzleInInitializeA
100006918:	48 8b 35 a1 a8 01 00 	movq	108705(%rip), %rsi ## Objc selector ref: self
10000691f:	ff 15 43 37 01 00 	callq	*79683(%rip) ## Objc message: +[TestSwizzleInInitializeA self]
100006925:	48 89 c7 	movq	%rax, %rdi
100006928:	e8 a7 d4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000692d:	48 89 c3 	movq	%rax, %rbx
100006930:	48 89 df 	movq	%rbx, %rdi
100006933:	ff 15 37 37 01 00 	callq	*79671(%rip) ## literal pool symbol address: _objc_release
100006939:	4c 39 f3 	cmpq	%r14, %rbx
10000693c:	74 09 	je	0x100006947
10000693e:	48 83 c4 40 	addq	$64, %rsp
100006942:	5b 	popq	%rbx
100006943:	41 5e 	popq	%r14
100006945:	5d 	popq	%rbp
100006946:	c3 	retq
100006947:	48 8b 05 d2 36 01 00 	movq	79570(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000694e:	48 89 45 c8 	movq	%rax, -56(%rbp)
100006952:	b8 00 00 00 c2 	movl	$3254779904, %eax
100006957:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000695b:	48 8d 05 31 00 00 00 	leaq	"___38+[TestSwizzleInInitializeA initialize]_block_invoke"(%rip), %rax
100006962:	48 89 45 d8 	movq	%rax, -40(%rbp)
100006966:	48 8d 05 73 45 01 00 	leaq	___block_descriptor_tmp.22(%rip), %rax
10000696d:	48 89 45 e0 	movq	%rax, -32(%rbp)
100006971:	4c 89 75 e8 	movq	%r14, -24(%rbp)
100006975:	48 83 3d 6b bc 01 00 ff 	cmpq	$-1, 113771(%rip)
10000697d:	75 02 	jne	0x100006981
10000697f:	eb bd 	jmp	0x10000693e
100006981:	48 8d 3d 60 bc 01 00 	leaq	_initialize.onceToken.16(%rip), %rdi
100006988:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
10000698c:	e8 3b d3 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100006991:	eb ab 	jmp	0x10000693e
___38+[TestSwizzleInInitializeA initialize]_block_invoke:
100006993:	55 	pushq	%rbp
100006994:	48 89 e5 	movq	%rsp, %rbp
100006997:	48 8b 05 d2 ac 01 00 	movq	109778(%rip), %rax ## Objc class ref: MethodSwizzleUtil
10000699e:	48 8b 57 20 	movq	32(%rdi), %rdx
1000069a2:	48 8b 0d bf a7 01 00 	movq	108479(%rip), %rcx ## Objc selector ref: testSwizzleMethod
1000069a9:	4c 8b 05 20 a8 01 00 	movq	108576(%rip), %r8 ## Objc selector ref: a_testSwizzleMethod
1000069b0:	48 8b 35 19 a5 01 00 	movq	107801(%rip), %rsi ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
1000069b7:	48 89 c7 	movq	%rax, %rdi
1000069ba:	5d 	popq	%rbp
1000069bb:	ff 25 a7 36 01 00 	jmpq	*79527(%rip) ## Objc message: +[MethodSwizzleUtil swizzleInstanceMethodWithClass:originalSel:replacementSel:]
___copy_helper_block_.19:
1000069c1:	55 	pushq	%rbp
1000069c2:	48 89 e5 	movq	%rsp, %rbp
1000069c5:	5d 	popq	%rbp
1000069c6:	c3 	retq
___destroy_helper_block_.20:
1000069c7:	55 	pushq	%rbp
1000069c8:	48 89 e5 	movq	%rsp, %rbp
1000069cb:	5d 	popq	%rbp
1000069cc:	c3 	retq
-[TestSwizzleInInitializeA a_testSwizzleMethod]:
1000069cd:	55 	pushq	%rbp
1000069ce:	48 89 e5 	movq	%rsp, %rbp
1000069d1:	48 8b 35 f8 a7 01 00 	movq	108536(%rip), %rsi ## Objc selector ref: a_testSwizzleMethod
1000069d8:	ff 15 8a 36 01 00 	callq	*79498(%rip) ## Objc message: -[%rdi a_testSwizzleMethod]
1000069de:	48 8d 3d 23 48 01 00 	leaq	84003(%rip), %rdi ## Objc cfstring ref: @"%s"
1000069e5:	48 8d 35 66 ee 00 00 	leaq	61030(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitializeA a_testSwizzleMethod]"
1000069ec:	31 c0 	xorl	%eax, %eax
1000069ee:	e8 1f d2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000069f3:	5d 	popq	%rbp
1000069f4:	c3 	retq
+[TestSwizzleInInitializeB initialize]:
1000069f5:	55 	pushq	%rbp
1000069f6:	48 89 e5 	movq	%rsp, %rbp
1000069f9:	41 56 	pushq	%r14
1000069fb:	53 	pushq	%rbx
1000069fc:	48 83 ec 40 	subq	$64, %rsp
100006a00:	49 89 fe 	movq	%rdi, %r14
100006a03:	48 8d 7d b8 	leaq	-72(%rbp), %rdi
100006a07:	4c 89 37 	movq	%r14, (%rdi)
100006a0a:	48 8b 05 2f ae 01 00 	movq	110127(%rip), %rax ## Objc class ref: TestSwizzleInInitializeB
100006a11:	48 89 47 08 	movq	%rax, 8(%rdi)
100006a15:	48 8b 35 9c a7 01 00 	movq	108444(%rip), %rsi ## Objc selector ref: initialize
100006a1c:	e8 9b d3 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] initialize]
100006a21:	48 8b 3d 38 ad 01 00 	movq	109880(%rip), %rdi ## Objc class ref: TestSwizzleInInitializeB
100006a28:	48 8b 35 91 a7 01 00 	movq	108433(%rip), %rsi ## Objc selector ref: self
100006a2f:	ff 15 33 36 01 00 	callq	*79411(%rip) ## Objc message: +[TestSwizzleInInitializeB self]
100006a35:	48 89 c7 	movq	%rax, %rdi
100006a38:	e8 97 d3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100006a3d:	48 89 c3 	movq	%rax, %rbx
100006a40:	48 89 df 	movq	%rbx, %rdi
100006a43:	ff 15 27 36 01 00 	callq	*79399(%rip) ## literal pool symbol address: _objc_release
100006a49:	4c 39 f3 	cmpq	%r14, %rbx
100006a4c:	74 09 	je	0x100006a57
100006a4e:	48 83 c4 40 	addq	$64, %rsp
100006a52:	5b 	popq	%rbx
100006a53:	41 5e 	popq	%r14
100006a55:	5d 	popq	%rbp
100006a56:	c3 	retq
100006a57:	48 8b 05 c2 35 01 00 	movq	79298(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100006a5e:	48 89 45 c8 	movq	%rax, -56(%rbp)
100006a62:	b8 00 00 00 c2 	movl	$3254779904, %eax
100006a67:	48 89 45 d0 	movq	%rax, -48(%rbp)
100006a6b:	48 8d 05 31 00 00 00 	leaq	"___38+[TestSwizzleInInitializeB initialize]_block_invoke"(%rip), %rax
100006a72:	48 89 45 d8 	movq	%rax, -40(%rbp)
100006a76:	48 8d 05 93 44 01 00 	leaq	___block_descriptor_tmp.32(%rip), %rax
100006a7d:	48 89 45 e0 	movq	%rax, -32(%rbp)
100006a81:	4c 89 75 e8 	movq	%r14, -24(%rbp)
100006a85:	48 83 3d 63 bb 01 00 ff 	cmpq	$-1, 113507(%rip)
100006a8d:	75 02 	jne	0x100006a91
100006a8f:	eb bd 	jmp	0x100006a4e
100006a91:	48 8d 3d 58 bb 01 00 	leaq	_initialize.onceToken.26(%rip), %rdi
100006a98:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
100006a9c:	e8 2b d2 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100006aa1:	eb ab 	jmp	0x100006a4e
___38+[TestSwizzleInInitializeB initialize]_block_invoke:
100006aa3:	55 	pushq	%rbp
100006aa4:	48 89 e5 	movq	%rsp, %rbp
100006aa7:	48 8b 05 c2 ab 01 00 	movq	109506(%rip), %rax ## Objc class ref: MethodSwizzleUtil
100006aae:	48 8b 57 20 	movq	32(%rdi), %rdx
100006ab2:	48 8b 0d af a6 01 00 	movq	108207(%rip), %rcx ## Objc selector ref: testSwizzleMethod
100006ab9:	4c 8b 05 18 a7 01 00 	movq	108312(%rip), %r8 ## Objc selector ref: b_testSwizzleMethod
100006ac0:	48 8b 35 09 a4 01 00 	movq	107529(%rip), %rsi ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
100006ac7:	48 89 c7 	movq	%rax, %rdi
100006aca:	5d 	popq	%rbp
100006acb:	ff 25 97 35 01 00 	jmpq	*79255(%rip) ## Objc message: +[MethodSwizzleUtil swizzleInstanceMethodWithClass:originalSel:replacementSel:]
___copy_helper_block_.29:
100006ad1:	55 	pushq	%rbp
100006ad2:	48 89 e5 	movq	%rsp, %rbp
100006ad5:	5d 	popq	%rbp
100006ad6:	c3 	retq
___destroy_helper_block_.30:
100006ad7:	55 	pushq	%rbp
100006ad8:	48 89 e5 	movq	%rsp, %rbp
100006adb:	5d 	popq	%rbp
100006adc:	c3 	retq
-[TestSwizzleInInitializeB b_testSwizzleMethod]:
100006add:	55 	pushq	%rbp
100006ade:	48 89 e5 	movq	%rsp, %rbp
100006ae1:	48 8b 35 f0 a6 01 00 	movq	108272(%rip), %rsi ## Objc selector ref: b_testSwizzleMethod
100006ae8:	ff 15 7a 35 01 00 	callq	*79226(%rip) ## Objc message: -[%rdi b_testSwizzleMethod]
100006aee:	48 8d 3d 13 47 01 00 	leaq	83731(%rip), %rdi ## Objc cfstring ref: @"%s"
100006af5:	48 8d 35 86 ed 00 00 	leaq	60806(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitializeB b_testSwizzleMethod]"
100006afc:	31 c0 	xorl	%eax, %eax
100006afe:	e8 0f d1 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100006b03:	5d 	popq	%rbp
100006b04:	c3 	retq
+[TestSwizzleInInitialize(Log) initialize]:
100006b05:	55 	pushq	%rbp
100006b06:	48 89 e5 	movq	%rsp, %rbp
100006b09:	41 56 	pushq	%r14
100006b0b:	53 	pushq	%rbx
100006b0c:	48 83 ec 30 	subq	$48, %rsp
100006b10:	49 89 fe 	movq	%rdi, %r14
100006b13:	48 8b 3d 3e ac 01 00 	movq	109630(%rip), %rdi ## Objc class ref: TestSwizzleInInitialize
100006b1a:	48 8b 35 9f a6 01 00 	movq	108191(%rip), %rsi ## Objc selector ref: self
100006b21:	ff 15 41 35 01 00 	callq	*79169(%rip) ## Objc message: +[TestSwizzleInInitialize self]
100006b27:	48 89 c7 	movq	%rax, %rdi
100006b2a:	e8 a5 d2 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100006b2f:	48 89 c3 	movq	%rax, %rbx
100006b32:	48 89 df 	movq	%rbx, %rdi
100006b35:	ff 15 35 35 01 00 	callq	*79157(%rip) ## literal pool symbol address: _objc_release
100006b3b:	4c 39 f3 	cmpq	%r14, %rbx
100006b3e:	74 09 	je	0x100006b49
100006b40:	48 83 c4 30 	addq	$48, %rsp
100006b44:	5b 	popq	%rbx
100006b45:	41 5e 	popq	%r14
100006b47:	5d 	popq	%rbp
100006b48:	c3 	retq
100006b49:	48 8b 05 d0 34 01 00 	movq	79056(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100006b50:	48 89 45 c8 	movq	%rax, -56(%rbp)
100006b54:	b8 00 00 00 c2 	movl	$3254779904, %eax
100006b59:	48 89 45 d0 	movq	%rax, -48(%rbp)
100006b5d:	48 8d 05 31 00 00 00 	leaq	"___42+[TestSwizzleInInitialize(Log) initialize]_block_invoke"(%rip), %rax
100006b64:	48 89 45 d8 	movq	%rax, -40(%rbp)
100006b68:	48 8d 05 d1 43 01 00 	leaq	___block_descriptor_tmp.41(%rip), %rax
100006b6f:	48 89 45 e0 	movq	%rax, -32(%rbp)
100006b73:	4c 89 75 e8 	movq	%r14, -24(%rbp)
100006b77:	48 83 3d 79 ba 01 00 ff 	cmpq	$-1, 113273(%rip)
100006b7f:	75 02 	jne	0x100006b83
100006b81:	eb bd 	jmp	0x100006b40
100006b83:	48 8d 3d 6e ba 01 00 	leaq	_initialize.onceToken.34(%rip), %rdi
100006b8a:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
100006b8e:	e8 39 d1 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100006b93:	eb ab 	jmp	0x100006b40
___42+[TestSwizzleInInitialize(Log) initialize]_block_invoke:
100006b95:	55 	pushq	%rbp
100006b96:	48 89 e5 	movq	%rsp, %rbp
100006b99:	48 8b 05 d0 aa 01 00 	movq	109264(%rip), %rax ## Objc class ref: MethodSwizzleUtil
100006ba0:	48 8b 57 20 	movq	32(%rdi), %rdx
100006ba4:	48 8b 0d 35 a6 01 00 	movq	108085(%rip), %rcx ## Objc selector ref: testLogMethod
100006bab:	4c 8b 05 36 a6 01 00 	movq	108086(%rip), %r8 ## Objc selector ref: log_testSwizzleMethod
100006bb2:	48 8b 35 17 a3 01 00 	movq	107287(%rip), %rsi ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
100006bb9:	48 89 c7 	movq	%rax, %rdi
100006bbc:	5d 	popq	%rbp
100006bbd:	ff 25 a5 34 01 00 	jmpq	*79013(%rip) ## Objc message: +[MethodSwizzleUtil swizzleInstanceMethodWithClass:originalSel:replacementSel:]
___copy_helper_block_.38:
100006bc3:	55 	pushq	%rbp
100006bc4:	48 89 e5 	movq	%rsp, %rbp
100006bc7:	5d 	popq	%rbp
100006bc8:	c3 	retq
___destroy_helper_block_.39:
100006bc9:	55 	pushq	%rbp
100006bca:	48 89 e5 	movq	%rsp, %rbp
100006bcd:	5d 	popq	%rbp
100006bce:	c3 	retq
-[TestSwizzleInInitialize(Log) log_testSwizzleMethod]:
100006bcf:	55 	pushq	%rbp
100006bd0:	48 89 e5 	movq	%rsp, %rbp
100006bd3:	48 8b 35 0e a6 01 00 	movq	108046(%rip), %rsi ## Objc selector ref: log_testSwizzleMethod
100006bda:	ff 15 88 34 01 00 	callq	*78984(%rip) ## Objc message: -[%rdi log_testSwizzleMethod]
100006be0:	48 8d 3d 21 46 01 00 	leaq	83489(%rip), %rdi ## Objc cfstring ref: @"%s"
100006be7:	48 8d 35 c4 ec 00 00 	leaq	60612(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitialize(Log) log_testSwizzleMethod]"
100006bee:	31 c0 	xorl	%eax, %eax
100006bf0:	e8 1d d0 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100006bf5:	5d 	popq	%rbp
100006bf6:	c3 	retq
+[TestSwizzleInInitialize(Track) initialize]:
100006bf7:	55 	pushq	%rbp
100006bf8:	48 89 e5 	movq	%rsp, %rbp
100006bfb:	41 56 	pushq	%r14
100006bfd:	53 	pushq	%rbx
100006bfe:	48 83 ec 30 	subq	$48, %rsp
100006c02:	49 89 fe 	movq	%rdi, %r14
100006c05:	48 8b 3d 4c ab 01 00 	movq	109388(%rip), %rdi ## Objc class ref: TestSwizzleInInitialize
100006c0c:	48 8b 35 ad a5 01 00 	movq	107949(%rip), %rsi ## Objc selector ref: self
100006c13:	ff 15 4f 34 01 00 	callq	*78927(%rip) ## Objc message: +[TestSwizzleInInitialize self]
100006c19:	48 89 c7 	movq	%rax, %rdi
100006c1c:	e8 b3 d1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100006c21:	48 89 c3 	movq	%rax, %rbx
100006c24:	48 89 df 	movq	%rbx, %rdi
100006c27:	ff 15 43 34 01 00 	callq	*78915(%rip) ## literal pool symbol address: _objc_release
100006c2d:	4c 39 f3 	cmpq	%r14, %rbx
100006c30:	74 09 	je	0x100006c3b
100006c32:	48 83 c4 30 	addq	$48, %rsp
100006c36:	5b 	popq	%rbx
100006c37:	41 5e 	popq	%r14
100006c39:	5d 	popq	%rbp
100006c3a:	c3 	retq
100006c3b:	48 8b 05 de 33 01 00 	movq	78814(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100006c42:	48 89 45 c8 	movq	%rax, -56(%rbp)
100006c46:	b8 00 00 00 c2 	movl	$3254779904, %eax
100006c4b:	48 89 45 d0 	movq	%rax, -48(%rbp)
100006c4f:	48 8d 05 31 00 00 00 	leaq	"___44+[TestSwizzleInInitialize(Track) initialize]_block_invoke"(%rip), %rax
100006c56:	48 89 45 d8 	movq	%rax, -40(%rbp)
100006c5a:	48 8d 05 0f 43 01 00 	leaq	___block_descriptor_tmp.50(%rip), %rax
100006c61:	48 89 45 e0 	movq	%rax, -32(%rbp)
100006c65:	4c 89 75 e8 	movq	%r14, -24(%rbp)
100006c69:	48 83 3d 8f b9 01 00 ff 	cmpq	$-1, 113039(%rip)
100006c71:	75 02 	jne	0x100006c75
100006c73:	eb bd 	jmp	0x100006c32
100006c75:	48 8d 3d 84 b9 01 00 	leaq	_initialize.onceToken.43(%rip), %rdi
100006c7c:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
100006c80:	e8 47 d0 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100006c85:	eb ab 	jmp	0x100006c32
___44+[TestSwizzleInInitialize(Track) initialize]_block_invoke:
100006c87:	55 	pushq	%rbp
100006c88:	48 89 e5 	movq	%rsp, %rbp
100006c8b:	48 8b 05 de a9 01 00 	movq	109022(%rip), %rax ## Objc class ref: MethodSwizzleUtil
100006c92:	48 8b 57 20 	movq	32(%rdi), %rdx
100006c96:	48 8b 0d 53 a5 01 00 	movq	107859(%rip), %rcx ## Objc selector ref: testTrackMethod
100006c9d:	4c 8b 05 54 a5 01 00 	movq	107860(%rip), %r8 ## Objc selector ref: track_testSwizzleMethod
100006ca4:	48 8b 35 25 a2 01 00 	movq	107045(%rip), %rsi ## Objc selector ref: swizzleInstanceMethodWithClass:originalSel:replacementSel:
100006cab:	48 89 c7 	movq	%rax, %rdi
100006cae:	5d 	popq	%rbp
100006caf:	ff 25 b3 33 01 00 	jmpq	*78771(%rip) ## Objc message: +[MethodSwizzleUtil swizzleInstanceMethodWithClass:originalSel:replacementSel:]
___copy_helper_block_.47:
100006cb5:	55 	pushq	%rbp
100006cb6:	48 89 e5 	movq	%rsp, %rbp
100006cb9:	5d 	popq	%rbp
100006cba:	c3 	retq
___destroy_helper_block_.48:
100006cbb:	55 	pushq	%rbp
100006cbc:	48 89 e5 	movq	%rsp, %rbp
100006cbf:	5d 	popq	%rbp
100006cc0:	c3 	retq
-[TestSwizzleInInitialize(Track) track_testSwizzleMethod]:
100006cc1:	55 	pushq	%rbp
100006cc2:	48 89 e5 	movq	%rsp, %rbp
100006cc5:	48 8b 35 2c a5 01 00 	movq	107820(%rip), %rsi ## Objc selector ref: track_testSwizzleMethod
100006ccc:	ff 15 96 33 01 00 	callq	*78742(%rip) ## Objc message: -[%rdi track_testSwizzleMethod]
100006cd2:	48 8d 3d 2f 45 01 00 	leaq	83247(%rip), %rdi ## Objc cfstring ref: @"%s"
100006cd9:	48 8d 35 08 ec 00 00 	leaq	60424(%rip), %rsi ## literal pool for: "-[TestSwizzleInInitialize(Track) track_testSwizzleMethod]"
100006ce0:	31 c0 	xorl	%eax, %eax
100006ce2:	e8 2b cf 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100006ce7:	5d 	popq	%rbp
100006ce8:	c3 	retq
-[NSObject(HCWillDealloc) hc_doSthWhenDeallocWithBlock:]:
100006ce9:	55 	pushq	%rbp
100006cea:	48 89 e5 	movq	%rsp, %rbp
100006ced:	41 57 	pushq	%r15
100006cef:	41 56 	pushq	%r14
100006cf1:	41 55 	pushq	%r13
100006cf3:	41 54 	pushq	%r12
100006cf5:	53 	pushq	%rbx
100006cf6:	50 	pushq	%rax
100006cf7:	49 89 fe 	movq	%rdi, %r14
100006cfa:	48 85 d2 	testq	%rdx, %rdx
100006cfd:	74 78 	je	0x100006d77
100006cff:	4c 8b 25 62 aa 01 00 	movq	109154(%rip), %r12 ## Objc class ref: HCAssociatedObject
100006d06:	4c 8b 3d ab a1 01 00 	movq	106923(%rip), %r15 ## Objc selector ref: alloc
100006d0d:	48 89 d7 	movq	%rdx, %rdi
100006d10:	ff 15 62 33 01 00 	callq	*78690(%rip) ## literal pool symbol address: _objc_retain
100006d16:	49 89 c5 	movq	%rax, %r13
100006d19:	48 8b 1d 48 33 01 00 	movq	78664(%rip), %rbx ## Objc message: +[HCAssociatedObject alloc]
100006d20:	4c 89 e7 	movq	%r12, %rdi
100006d23:	4c 89 fe 	movq	%r15, %rsi
100006d26:	ff d3 	callq	*%rbx
100006d28:	48 8b 35 d1 a4 01 00 	movq	107729(%rip), %rsi ## Objc selector ref: initWithBlock:target:
100006d2f:	48 89 c7 	movq	%rax, %rdi
100006d32:	4c 89 ea 	movq	%r13, %rdx
100006d35:	4c 89 f1 	movq	%r14, %rcx
100006d38:	ff d3 	callq	*%rbx
100006d3a:	48 89 c3 	movq	%rax, %rbx
100006d3d:	4c 8b 3d 2c 33 01 00 	movq	78636(%rip), %r15 ## literal pool symbol address: _objc_release
100006d44:	4c 89 ef 	movq	%r13, %rdi
100006d47:	41 ff d7 	callq	*%r15
100006d4a:	48 8d 35 b7 b8 01 00 	leaq	_kHCAssociatedObjectKey(%rip), %rsi
100006d51:	b9 01 03 00 00 	movl	$769, %ecx
100006d56:	4c 89 f7 	movq	%r14, %rdi
100006d59:	48 89 da 	movq	%rbx, %rdx
100006d5c:	e8 7f d0 00 00 	callq	0x100013de0 ## symbol stub for: _objc_setAssociatedObject
100006d61:	48 89 df 	movq	%rbx, %rdi
100006d64:	4c 89 f8 	movq	%r15, %rax
100006d67:	48 83 c4 08 	addq	$8, %rsp
100006d6b:	5b 	popq	%rbx
100006d6c:	41 5c 	popq	%r12
100006d6e:	41 5d 	popq	%r13
100006d70:	41 5e 	popq	%r14
100006d72:	41 5f 	popq	%r15
100006d74:	5d 	popq	%rbp
100006d75:	ff e0 	jmpq	*%rax
100006d77:	48 83 c4 08 	addq	$8, %rsp
100006d7b:	5b 	popq	%rbx
100006d7c:	41 5c 	popq	%r12
100006d7e:	41 5d 	popq	%r13
100006d80:	41 5e 	popq	%r14
100006d82:	41 5f 	popq	%r15
100006d84:	5d 	popq	%rbp
100006d85:	c3 	retq
-[HCAssociatedObject initWithBlock:target:]:
100006d86:	55 	pushq	%rbp
100006d87:	48 89 e5 	movq	%rsp, %rbp
100006d8a:	41 57 	pushq	%r15
100006d8c:	41 56 	pushq	%r14
100006d8e:	41 54 	pushq	%r12
100006d90:	53 	pushq	%rbx
100006d91:	48 83 ec 10 	subq	$16, %rsp
100006d95:	48 89 cb 	movq	%rcx, %rbx
100006d98:	49 89 fc 	movq	%rdi, %r12
100006d9b:	4c 8b 3d d6 32 01 00 	movq	78550(%rip), %r15 ## literal pool symbol address: _objc_retain
100006da2:	48 89 d7 	movq	%rdx, %rdi
100006da5:	41 ff d7 	callq	*%r15
100006da8:	49 89 c6 	movq	%rax, %r14
100006dab:	48 89 df 	movq	%rbx, %rdi
100006dae:	41 ff d7 	callq	*%r15
100006db1:	49 89 c7 	movq	%rax, %r15
100006db4:	48 8d 7d d0 	leaq	-48(%rbp), %rdi
100006db8:	4c 89 27 	movq	%r12, (%rdi)
100006dbb:	48 8b 05 86 aa 01 00 	movq	109190(%rip), %rax ## Objc class ref: HCAssociatedObject
100006dc2:	48 89 47 08 	movq	%rax, 8(%rdi)
100006dc6:	48 8b 35 9b a0 01 00 	movq	106651(%rip), %rsi ## Objc selector ref: init
100006dcd:	e8 ea cf 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100006dd2:	48 89 c3 	movq	%rax, %rbx
100006dd5:	48 85 db 	testq	%rbx, %rbx
100006dd8:	74 28 	je	0x100006e02
100006dda:	4c 89 f7 	movq	%r14, %rdi
100006ddd:	e8 f8 cf 00 00 	callq	0x100013dda ## symbol stub for: _objc_retainBlock
100006de2:	48 8b 0d 07 ab 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._deallocBlock(%rip), %rcx
100006de9:	48 8b 3c 0b 	movq	(%rbx,%rcx), %rdi
100006ded:	48 89 04 0b 	movq	%rax, (%rbx,%rcx)
100006df1:	ff 15 79 32 01 00 	callq	*78457(%rip) ## literal pool symbol address: _objc_release
100006df7:	48 8b 05 fa aa 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._target(%rip), %rax
100006dfe:	4c 89 3c 03 	movq	%r15, (%rbx,%rax)
100006e02:	4c 8b 25 67 32 01 00 	movq	78439(%rip), %r12 ## literal pool symbol address: _objc_release
100006e09:	4c 89 ff 	movq	%r15, %rdi
100006e0c:	41 ff d4 	callq	*%r12
100006e0f:	4c 89 f7 	movq	%r14, %rdi
100006e12:	41 ff d4 	callq	*%r12
100006e15:	48 89 d8 	movq	%rbx, %rax
100006e18:	48 83 c4 10 	addq	$16, %rsp
100006e1c:	5b 	popq	%rbx
100006e1d:	41 5c 	popq	%r12
100006e1f:	41 5e 	popq	%r14
100006e21:	41 5f 	popq	%r15
100006e23:	5d 	popq	%rbp
100006e24:	c3 	retq
-[HCAssociatedObject dealloc]:
100006e25:	55 	pushq	%rbp
100006e26:	48 89 e5 	movq	%rsp, %rbp
100006e29:	53 	pushq	%rbx
100006e2a:	48 83 ec 18 	subq	$24, %rsp
100006e2e:	48 89 fb 	movq	%rdi, %rbx
100006e31:	48 8b 05 b8 aa 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._deallocBlock(%rip), %rax
100006e38:	48 8b 3c 03 	movq	(%rbx,%rax), %rdi
100006e3c:	48 85 ff 	testq	%rdi, %rdi
100006e3f:	74 0e 	je	0x100006e4f
100006e41:	48 8b 05 b0 aa 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._target(%rip), %rax
100006e48:	48 8b 34 03 	movq	(%rbx,%rax), %rsi
100006e4c:	ff 57 10 	callq	*16(%rdi)
100006e4f:	48 8d 7d e8 	leaq	-24(%rbp), %rdi
100006e53:	48 89 1f 	movq	%rbx, (%rdi)
100006e56:	48 8b 05 eb a9 01 00 	movq	109035(%rip), %rax ## Objc class ref: HCAssociatedObject
100006e5d:	48 89 47 08 	movq	%rax, 8(%rdi)
100006e61:	48 8b 35 f8 9f 01 00 	movq	106488(%rip), %rsi ## Objc selector ref: dealloc
100006e68:	e8 4f cf 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] dealloc]
100006e6d:	48 83 c4 18 	addq	$24, %rsp
100006e71:	5b 	popq	%rbx
100006e72:	5d 	popq	%rbp
100006e73:	c3 	retq
-[HCAssociatedObject target]:
100006e74:	55 	pushq	%rbp
100006e75:	48 89 e5 	movq	%rsp, %rbp
100006e78:	48 8b 05 79 aa 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._target(%rip), %rax
100006e7f:	48 8b 04 07 	movq	(%rdi,%rax), %rax
100006e83:	5d 	popq	%rbp
100006e84:	c3 	retq
-[HCAssociatedObject setTarget:]:
100006e85:	55 	pushq	%rbp
100006e86:	48 89 e5 	movq	%rsp, %rbp
100006e89:	48 8b 05 68 aa 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._target(%rip), %rax
100006e90:	48 89 14 07 	movq	%rdx, (%rdi,%rax)
100006e94:	5d 	popq	%rbp
100006e95:	c3 	retq
-[HCAssociatedObject deallocBlock]:
100006e96:	55 	pushq	%rbp
100006e97:	48 89 e5 	movq	%rsp, %rbp
100006e9a:	48 8b 15 4f aa 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._deallocBlock(%rip), %rdx
100006ea1:	31 c9 	xorl	%ecx, %ecx
100006ea3:	5d 	popq	%rbp
100006ea4:	e9 01 cf 00 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
-[HCAssociatedObject setDeallocBlock:]:
100006ea9:	55 	pushq	%rbp
100006eaa:	48 89 e5 	movq	%rsp, %rbp
100006ead:	48 8b 0d 3c aa 01 00 	movq	_OBJC_IVAR_$_HCAssociatedObject._deallocBlock(%rip), %rcx
100006eb4:	5d 	popq	%rbp
100006eb5:	e9 32 cf 00 00 	jmp	0x100013dec ## symbol stub for: _objc_setProperty_nonatomic_copy
-[HCAssociatedObject .cxx_destruct]:
100006eba:	55 	pushq	%rbp
100006ebb:	48 89 e5 	movq	%rsp, %rbp
100006ebe:	48 03 3d 2b aa 01 00 	addq	_OBJC_IVAR_$_HCAssociatedObject._deallocBlock(%rip), %rdi
100006ec5:	31 f6 	xorl	%esi, %esi
100006ec7:	5d 	popq	%rbp
100006ec8:	e9 25 cf 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
___30+[UIViewController(Test) load]_block_invoke:
100006ecd:	55 	pushq	%rbp
100006ece:	48 89 e5 	movq	%rsp, %rbp
100006ed1:	41 57 	pushq	%r15
100006ed3:	41 56 	pushq	%r14
100006ed5:	41 55 	pushq	%r13
100006ed7:	41 54 	pushq	%r12
100006ed9:	53 	pushq	%rbx
100006eda:	50 	pushq	%rax
100006edb:	49 89 fc 	movq	%rdi, %r12
100006ede:	49 8b 7c 24 20 	movq	32(%r12), %rdi
100006ee3:	48 8b 35 1e a2 01 00 	movq	107038(%rip), %rsi ## Objc selector ref: viewWillAppear:
100006eea:	e8 7d cd 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100006eef:	49 89 c7 	movq	%rax, %r15
100006ef2:	49 8b 7c 24 20 	movq	32(%r12), %rdi
100006ef7:	48 8b 35 0a a3 01 00 	movq	107274(%rip), %rsi ## Objc selector ref: hc_viewWillAppear:
100006efe:	e8 69 cd 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100006f03:	48 89 c3 	movq	%rax, %rbx
100006f06:	4d 8b 74 24 20 	movq	32(%r12), %r14
100006f0b:	48 89 df 	movq	%rbx, %rdi
100006f0e:	e8 37 ce 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100006f13:	49 89 c5 	movq	%rax, %r13
100006f16:	48 89 df 	movq	%rbx, %rdi
100006f19:	e8 38 ce 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100006f1e:	4c 89 f7 	movq	%r14, %rdi
100006f21:	48 8b 35 e0 a1 01 00 	movq	106976(%rip), %rsi ## Objc selector ref: viewWillAppear:
100006f28:	4c 89 ea 	movq	%r13, %rdx
100006f2b:	48 89 c1 	movq	%rax, %rcx
100006f2e:	e8 27 cd 00 00 	callq	0x100013c5a ## symbol stub for: _class_addMethod
100006f33:	84 c0 	testb	%al, %al
100006f35:	75 19 	jne	0x100006f50
100006f37:	4c 89 ff 	movq	%r15, %rdi
100006f3a:	48 89 de 	movq	%rbx, %rsi
100006f3d:	48 83 c4 08 	addq	$8, %rsp
100006f41:	5b 	popq	%rbx
100006f42:	41 5c 	popq	%r12
100006f44:	41 5d 	popq	%r13
100006f46:	41 5e 	popq	%r14
100006f48:	41 5f 	popq	%r15
100006f4a:	5d 	popq	%rbp
100006f4b:	e9 ee cd 00 00 	jmp	0x100013d3e ## symbol stub for: _method_exchangeImplementations
100006f50:	4d 8b 74 24 20 	movq	32(%r12), %r14
100006f55:	4c 89 ff 	movq	%r15, %rdi
100006f58:	e8 ed cd 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100006f5d:	48 89 c3 	movq	%rax, %rbx
100006f60:	4c 89 ff 	movq	%r15, %rdi
100006f63:	e8 ee cd 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100006f68:	4c 89 f7 	movq	%r14, %rdi
100006f6b:	48 8b 35 96 a2 01 00 	movq	107158(%rip), %rsi ## Objc selector ref: hc_viewWillAppear:
100006f72:	48 89 da 	movq	%rbx, %rdx
100006f75:	48 89 c1 	movq	%rax, %rcx
100006f78:	48 83 c4 08 	addq	$8, %rsp
100006f7c:	5b 	popq	%rbx
100006f7d:	41 5c 	popq	%r12
100006f7f:	41 5d 	popq	%r13
100006f81:	41 5e 	popq	%r14
100006f83:	41 5f 	popq	%r15
100006f85:	5d 	popq	%rbp
100006f86:	e9 f9 cc 00 00 	jmp	0x100013c84 ## symbol stub for: _class_replaceMethod
___copy_helper_block_:
100006f8b:	55 	pushq	%rbp
100006f8c:	48 89 e5 	movq	%rsp, %rbp
100006f8f:	5d 	popq	%rbp
100006f90:	c3 	retq
___destroy_helper_block_:
100006f91:	55 	pushq	%rbp
100006f92:	48 89 e5 	movq	%rsp, %rbp
100006f95:	5d 	popq	%rbp
100006f96:	c3 	retq
-[UIViewController(Test) hc_viewWillAppear:]:
100006f97:	55 	pushq	%rbp
100006f98:	48 89 e5 	movq	%rsp, %rbp
100006f9b:	48 8b 35 66 a2 01 00 	movq	107110(%rip), %rsi ## Objc selector ref: hc_viewWillAppear:
100006fa2:	5d 	popq	%rbp
100006fa3:	ff 25 bf 30 01 00 	jmpq	*78015(%rip) ## Objc message: -[%rdi hc_viewWillAppear:]
-[TestMapTable init]:
100006fa9:	55 	pushq	%rbp
100006faa:	48 89 e5 	movq	%rsp, %rbp
100006fad:	41 57 	pushq	%r15
100006faf:	41 56 	pushq	%r14
100006fb1:	53 	pushq	%rbx
100006fb2:	48 83 ec 18 	subq	$24, %rsp
100006fb6:	48 8d 45 d8 	leaq	-40(%rbp), %rax
100006fba:	48 89 38 	movq	%rdi, (%rax)
100006fbd:	48 8b 0d 8c a8 01 00 	movq	108684(%rip), %rcx ## Objc class ref: TestMapTable
100006fc4:	48 89 48 08 	movq	%rcx, 8(%rax)
100006fc8:	48 8b 35 99 9e 01 00 	movq	106137(%rip), %rsi ## Objc selector ref: init
100006fcf:	48 89 c7 	movq	%rax, %rdi
100006fd2:	e8 e5 cd 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100006fd7:	48 89 c3 	movq	%rax, %rbx
100006fda:	48 85 db 	testq	%rbx, %rbx
100006fdd:	74 58 	je	0x100007037
100006fdf:	48 8b 3d ba a6 01 00 	movq	108218(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
100006fe6:	48 8b 35 ab a1 01 00 	movq	106923(%rip), %rsi ## Objc selector ref: arrayWithCapacity:
100006fed:	4c 8b 3d 74 30 01 00 	movq	77940(%rip), %r15 ## Objc message: +[NSMutableArray arrayWithCapacity:]
100006ff4:	31 d2 	xorl	%edx, %edx
100006ff6:	41 ff d7 	callq	*%r15
100006ff9:	48 89 c7 	movq	%rax, %rdi
100006ffc:	e8 d3 cd 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007001:	49 89 c6 	movq	%rax, %r14
100007004:	48 8b 35 05 a2 01 00 	movq	107013(%rip), %rsi ## Objc selector ref: setObjArray:
10000700b:	48 89 df 	movq	%rbx, %rdi
10000700e:	4c 89 f2 	movq	%r14, %rdx
100007011:	41 ff d7 	callq	*%r15
100007014:	4c 89 f7 	movq	%r14, %rdi
100007017:	ff 15 53 30 01 00 	callq	*77907(%rip) ## literal pool symbol address: _objc_release
10000701d:	48 8b 35 f4 a1 01 00 	movq	106996(%rip), %rsi ## Objc selector ref: testHashTableWeakMememory
100007024:	48 89 df 	movq	%rbx, %rdi
100007027:	41 ff d7 	callq	*%r15
10000702a:	48 8b 35 c7 9e 01 00 	movq	106183(%rip), %rsi ## Objc selector ref: test
100007031:	48 89 df 	movq	%rbx, %rdi
100007034:	41 ff d7 	callq	*%r15
100007037:	48 89 d8 	movq	%rbx, %rax
10000703a:	48 83 c4 18 	addq	$24, %rsp
10000703e:	5b 	popq	%rbx
10000703f:	41 5e 	popq	%r14
100007041:	41 5f 	popq	%r15
100007043:	5d 	popq	%rbp
100007044:	c3 	retq
-[TestMapTable testHashTableWeakMememory]:
100007045:	55 	pushq	%rbp
100007046:	48 89 e5 	movq	%rsp, %rbp
100007049:	41 57 	pushq	%r15
10000704b:	41 56 	pushq	%r14
10000704d:	41 55 	pushq	%r13
10000704f:	41 54 	pushq	%r12
100007051:	53 	pushq	%rbx
100007052:	50 	pushq	%rax
100007053:	49 89 fe 	movq	%rdi, %r14
100007056:	48 8b 3d 8b a6 01 00 	movq	108171(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMapTable
10000705d:	48 8b 35 54 9e 01 00 	movq	106068(%rip), %rsi ## Objc selector ref: alloc
100007064:	4c 8b 2d fd 2f 01 00 	movq	77821(%rip), %r13 ## Objc message: +[NSMapTable alloc]
10000706b:	41 ff d5 	callq	*%r13
10000706e:	48 8b 35 ab a1 01 00 	movq	106923(%rip), %rsi ## Objc selector ref: initWithKeyOptions:valueOptions:capacity:
100007075:	31 d2 	xorl	%edx, %edx
100007077:	b9 05 00 00 00 	movl	$5, %ecx
10000707c:	45 31 c0 	xorl	%r8d, %r8d
10000707f:	48 89 c7 	movq	%rax, %rdi
100007082:	41 ff d5 	callq	*%r13
100007085:	48 89 c3 	movq	%rax, %rbx
100007088:	48 8b 35 99 a1 01 00 	movq	106905(%rip), %rsi ## Objc selector ref: setWeakCache:
10000708f:	4c 89 f7 	movq	%r14, %rdi
100007092:	48 89 da 	movq	%rbx, %rdx
100007095:	41 ff d5 	callq	*%r13
100007098:	4c 8b 3d d1 2f 01 00 	movq	77777(%rip), %r15 ## literal pool symbol address: _objc_release
10000709f:	48 89 df 	movq	%rbx, %rdi
1000070a2:	41 ff d7 	callq	*%r15
1000070a5:	48 8b 3d ec a5 01 00 	movq	108012(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSObject
1000070ac:	48 8b 35 bd 9d 01 00 	movq	105917(%rip), %rsi ## Objc selector ref: new
1000070b3:	41 ff d5 	callq	*%r13
1000070b6:	49 89 c4 	movq	%rax, %r12
1000070b9:	4c 89 e7 	movq	%r12, %rdi
1000070bc:	e8 39 cb 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
1000070c1:	48 89 c1 	movq	%rax, %rcx
1000070c4:	48 8d 3d 7d 51 01 00 	leaq	86397(%rip), %rdi ## Objc cfstring ref: @"0 ref count obj:%ld"
1000070cb:	31 c0 	xorl	%eax, %eax
1000070cd:	48 89 ce 	movq	%rcx, %rsi
1000070d0:	e8 3d cb 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000070d5:	48 8b 35 54 a1 01 00 	movq	106836(%rip), %rsi ## Objc selector ref: objArray
1000070dc:	4c 89 f7 	movq	%r14, %rdi
1000070df:	41 ff d5 	callq	*%r13
1000070e2:	48 89 c7 	movq	%rax, %rdi
1000070e5:	e8 ea cc 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000070ea:	48 89 c3 	movq	%rax, %rbx
1000070ed:	48 8b 35 64 9e 01 00 	movq	106084(%rip), %rsi ## Objc selector ref: addObject:
1000070f4:	48 89 df 	movq	%rbx, %rdi
1000070f7:	4c 89 e2 	movq	%r12, %rdx
1000070fa:	41 ff d5 	callq	*%r13
1000070fd:	48 89 df 	movq	%rbx, %rdi
100007100:	41 ff d7 	callq	*%r15
100007103:	4c 89 e7 	movq	%r12, %rdi
100007106:	e8 ef ca 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
10000710b:	48 89 c1 	movq	%rax, %rcx
10000710e:	48 8d 3d 53 51 01 00 	leaq	86355(%rip), %rdi ## Objc cfstring ref: @"1 ref count obj:%ld"
100007115:	31 c0 	xorl	%eax, %eax
100007117:	48 89 ce 	movq	%rcx, %rsi
10000711a:	e8 f3 ca 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000711f:	48 8b 35 12 a1 01 00 	movq	106770(%rip), %rsi ## Objc selector ref: weakCache
100007126:	4c 89 f7 	movq	%r14, %rdi
100007129:	41 ff d5 	callq	*%r13
10000712c:	48 89 c7 	movq	%rax, %rdi
10000712f:	e8 a0 cc 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007134:	48 89 c3 	movq	%rax, %rbx
100007137:	48 8b 35 3a 9e 01 00 	movq	106042(%rip), %rsi ## Objc selector ref: setObject:forKey:
10000713e:	48 8d 0d 43 51 01 00 	leaq	86339(%rip), %rcx ## Objc cfstring ref: @"aObj"
100007145:	48 89 df 	movq	%rbx, %rdi
100007148:	4c 89 e2 	movq	%r12, %rdx
10000714b:	41 ff d5 	callq	*%r13
10000714e:	48 89 df 	movq	%rbx, %rdi
100007151:	41 ff d7 	callq	*%r15
100007154:	4c 89 e7 	movq	%r12, %rdi
100007157:	e8 9e ca 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
10000715c:	48 89 c1 	movq	%rax, %rcx
10000715f:	48 8d 3d 42 51 01 00 	leaq	86338(%rip), %rdi ## Objc cfstring ref: @"2 ref count obj:%ld"
100007166:	31 c0 	xorl	%eax, %eax
100007168:	48 89 ce 	movq	%rcx, %rsi
10000716b:	e8 a2 ca 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007170:	4c 89 f7 	movq	%r14, %rdi
100007173:	48 8b 35 b6 a0 01 00 	movq	106678(%rip), %rsi ## Objc selector ref: objArray
10000717a:	41 ff d5 	callq	*%r13
10000717d:	48 89 c7 	movq	%rax, %rdi
100007180:	e8 4f cc 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007185:	48 89 c3 	movq	%rax, %rbx
100007188:	48 8b 35 b1 a0 01 00 	movq	106673(%rip), %rsi ## Objc selector ref: removeAllObjects
10000718f:	48 89 df 	movq	%rbx, %rdi
100007192:	41 ff d5 	callq	*%r13
100007195:	48 89 df 	movq	%rbx, %rdi
100007198:	41 ff d7 	callq	*%r15
10000719b:	4c 89 e7 	movq	%r12, %rdi
10000719e:	e8 57 ca 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
1000071a3:	48 89 c1 	movq	%rax, %rcx
1000071a6:	48 8d 3d 1b 51 01 00 	leaq	86299(%rip), %rdi ## Objc cfstring ref: @"3 ref count obj:%ld"
1000071ad:	31 c0 	xorl	%eax, %eax
1000071af:	48 89 ce 	movq	%rcx, %rsi
1000071b2:	e8 5b ca 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000071b7:	4c 89 e7 	movq	%r12, %rdi
1000071ba:	4c 89 f8 	movq	%r15, %rax
1000071bd:	48 83 c4 08 	addq	$8, %rsp
1000071c1:	5b 	popq	%rbx
1000071c2:	41 5c 	popq	%r12
1000071c4:	41 5d 	popq	%r13
1000071c6:	41 5e 	popq	%r14
1000071c8:	41 5f 	popq	%r15
1000071ca:	5d 	popq	%rbp
1000071cb:	ff e0 	jmpq	*%rax
-[TestMapTable test]:
1000071cd:	55 	pushq	%rbp
1000071ce:	48 89 e5 	movq	%rsp, %rbp
1000071d1:	41 57 	pushq	%r15
1000071d3:	41 56 	pushq	%r14
1000071d5:	41 55 	pushq	%r13
1000071d7:	41 54 	pushq	%r12
1000071d9:	53 	pushq	%rbx
1000071da:	50 	pushq	%rax
1000071db:	49 89 fc 	movq	%rdi, %r12
1000071de:	48 8b 35 53 a0 01 00 	movq	106579(%rip), %rsi ## Objc selector ref: weakCache
1000071e5:	4c 8b 35 7c 2e 01 00 	movq	77436(%rip), %r14 ## Objc message: +[NSObject weakCache]
1000071ec:	41 ff d6 	callq	*%r14
1000071ef:	48 89 c7 	movq	%rax, %rdi
1000071f2:	e8 dd cb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000071f7:	49 89 c5 	movq	%rax, %r13
1000071fa:	48 8b 35 47 a0 01 00 	movq	106567(%rip), %rsi ## Objc selector ref: objectForKey:
100007201:	48 8d 15 80 50 01 00 	leaq	86144(%rip), %rdx ## Objc cfstring ref: @"aObj"
100007208:	4c 89 ef 	movq	%r13, %rdi
10000720b:	41 ff d6 	callq	*%r14
10000720e:	48 89 c7 	movq	%rax, %rdi
100007211:	e8 be cb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007216:	48 89 c3 	movq	%rax, %rbx
100007219:	4c 8b 3d 50 2e 01 00 	movq	77392(%rip), %r15 ## literal pool symbol address: _objc_release
100007220:	48 89 df 	movq	%rbx, %rdi
100007223:	41 ff d7 	callq	*%r15
100007226:	4c 89 ef 	movq	%r13, %rdi
100007229:	41 ff d7 	callq	*%r15
10000722c:	48 85 db 	testq	%rbx, %rbx
10000722f:	74 5f 	je	0x100007290
100007231:	4c 89 e7 	movq	%r12, %rdi
100007234:	48 8b 35 fd 9f 01 00 	movq	106493(%rip), %rsi ## Objc selector ref: weakCache
10000723b:	41 ff d6 	callq	*%r14
10000723e:	48 89 c7 	movq	%rax, %rdi
100007241:	e8 8e cb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007246:	48 89 c3 	movq	%rax, %rbx
100007249:	48 8d 15 38 50 01 00 	leaq	86072(%rip), %rdx ## Objc cfstring ref: @"aObj"
100007250:	48 89 df 	movq	%rbx, %rdi
100007253:	48 8b 35 ee 9f 01 00 	movq	106478(%rip), %rsi ## Objc selector ref: objectForKey:
10000725a:	41 ff d6 	callq	*%r14
10000725d:	48 89 c7 	movq	%rax, %rdi
100007260:	e8 95 c9 00 00 	callq	0x100013bfa ## symbol stub for: _CFGetRetainCount
100007265:	48 89 c1 	movq	%rax, %rcx
100007268:	48 8d 3d 79 50 01 00 	leaq	86137(%rip), %rdi ## Objc cfstring ref: @"5 ref count obj:%ld"
10000726f:	31 c0 	xorl	%eax, %eax
100007271:	48 89 ce 	movq	%rcx, %rsi
100007274:	e8 99 c9 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007279:	48 89 df 	movq	%rbx, %rdi
10000727c:	48 83 c4 08 	addq	$8, %rsp
100007280:	5b 	popq	%rbx
100007281:	41 5c 	popq	%r12
100007283:	41 5d 	popq	%r13
100007285:	41 5e 	popq	%r14
100007287:	41 5f 	popq	%r15
100007289:	5d 	popq	%rbp
10000728a:	ff 25 e0 2d 01 00 	jmpq	*77280(%rip) ## literal pool symbol address: _objc_release
100007290:	48 83 c4 08 	addq	$8, %rsp
100007294:	5b 	popq	%rbx
100007295:	41 5c 	popq	%r12
100007297:	41 5d 	popq	%r13
100007299:	41 5e 	popq	%r14
10000729b:	41 5f 	popq	%r15
10000729d:	5d 	popq	%rbp
10000729e:	c3 	retq
-[TestMapTable weakCache]:
10000729f:	55 	pushq	%rbp
1000072a0:	48 89 e5 	movq	%rsp, %rbp
1000072a3:	48 8b 05 56 a6 01 00 	movq	_OBJC_IVAR_$_TestMapTable._weakCache(%rip), %rax
1000072aa:	48 8b 04 07 	movq	(%rdi,%rax), %rax
1000072ae:	5d 	popq	%rbp
1000072af:	c3 	retq
-[TestMapTable setWeakCache:]:
1000072b0:	55 	pushq	%rbp
1000072b1:	48 89 e5 	movq	%rsp, %rbp
1000072b4:	48 03 3d 45 a6 01 00 	addq	_OBJC_IVAR_$_TestMapTable._weakCache(%rip), %rdi
1000072bb:	48 89 d6 	movq	%rdx, %rsi
1000072be:	5d 	popq	%rbp
1000072bf:	e9 2e cb 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[TestMapTable objArray]:
1000072c4:	55 	pushq	%rbp
1000072c5:	48 89 e5 	movq	%rsp, %rbp
1000072c8:	48 8b 05 39 a6 01 00 	movq	_OBJC_IVAR_$_TestMapTable._objArray(%rip), %rax
1000072cf:	48 8b 04 07 	movq	(%rdi,%rax), %rax
1000072d3:	5d 	popq	%rbp
1000072d4:	c3 	retq
-[TestMapTable setObjArray:]:
1000072d5:	55 	pushq	%rbp
1000072d6:	48 89 e5 	movq	%rsp, %rbp
1000072d9:	48 03 3d 28 a6 01 00 	addq	_OBJC_IVAR_$_TestMapTable._objArray(%rip), %rdi
1000072e0:	48 89 d6 	movq	%rdx, %rsi
1000072e3:	5d 	popq	%rbp
1000072e4:	e9 09 cb 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
-[TestMapTable .cxx_destruct]:
1000072e9:	55 	pushq	%rbp
1000072ea:	48 89 e5 	movq	%rsp, %rbp
1000072ed:	53 	pushq	%rbx
1000072ee:	50 	pushq	%rax
1000072ef:	48 89 fb 	movq	%rdi, %rbx
1000072f2:	48 8b 3d 0f a6 01 00 	movq	_OBJC_IVAR_$_TestMapTable._objArray(%rip), %rdi
1000072f9:	48 01 df 	addq	%rbx, %rdi
1000072fc:	31 f6 	xorl	%esi, %esi
1000072fe:	e8 ef ca 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100007303:	48 03 1d f6 a5 01 00 	addq	_OBJC_IVAR_$_TestMapTable._weakCache(%rip), %rbx
10000730a:	31 f6 	xorl	%esi, %esi
10000730c:	48 89 df 	movq	%rbx, %rdi
10000730f:	48 83 c4 08 	addq	$8, %rsp
100007313:	5b 	popq	%rbx
100007314:	5d 	popq	%rbp
100007315:	e9 d8 ca 00 00 	jmp	0x100013df2 ## symbol stub for: _objc_storeStrong
+[TestCategoryOveride initialize]:
10000731a:	55 	pushq	%rbp
10000731b:	48 89 e5 	movq	%rsp, %rbp
10000731e:	5d 	popq	%rbp
10000731f:	c3 	retq
-[TestCategoryOveride init]:
100007320:	55 	pushq	%rbp
100007321:	48 89 e5 	movq	%rsp, %rbp
100007324:	41 57 	pushq	%r15
100007326:	41 56 	pushq	%r14
100007328:	41 55 	pushq	%r13
10000732a:	41 54 	pushq	%r12
10000732c:	53 	pushq	%rbx
10000732d:	48 83 ec 28 	subq	$40, %rsp
100007331:	48 8d 45 b0 	leaq	-80(%rbp), %rax
100007335:	48 89 38 	movq	%rdi, (%rax)
100007338:	48 8b 0d 19 a5 01 00 	movq	107801(%rip), %rcx ## Objc class ref: TestCategoryOveride
10000733f:	48 89 48 08 	movq	%rcx, 8(%rax)
100007343:	48 8b 35 1e 9b 01 00 	movq	105246(%rip), %rsi ## Objc selector ref: init
10000734a:	48 89 c7 	movq	%rax, %rdi
10000734d:	e8 6a ca 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100007352:	49 89 c5 	movq	%rax, %r13
100007355:	4d 85 ed 	testq	%r13, %r13
100007358:	0f 84 4f 01 00 00 	je	0x1000074ad
10000735e:	48 8b 1d 3b 9b 01 00 	movq	105275(%rip), %rbx ## Objc selector ref: class
100007365:	4c 89 ef 	movq	%r13, %rdi
100007368:	48 89 de 	movq	%rbx, %rsi
10000736b:	ff 15 f7 2c 01 00 	callq	*77047(%rip) ## Objc message: -[%rdi class]
100007371:	4c 8d 65 d4 	leaq	-44(%rbp), %r12
100007375:	48 89 c7 	movq	%rax, %rdi
100007378:	4c 89 e6 	movq	%r12, %rsi
10000737b:	e8 e0 c8 00 00 	callq	0x100013c60 ## symbol stub for: _class_copyMethodList
100007380:	41 83 3c 24 00 	cmpl	$0, (%r12)
100007385:	0f 84 a6 00 00 00 	je	0x100007431
10000738b:	4c 89 6d c8 	movq	%r13, -56(%rbp)
10000738f:	48 8b 0d ba 9e 01 00 	movq	106170(%rip), %rcx ## Objc selector ref: log
100007396:	48 89 4d c0 	movq	%rcx, -64(%rbp)
10000739a:	45 31 ed 	xorl	%r13d, %r13d
10000739d:	45 31 ff 	xorl	%r15d, %r15d
1000073a0:	4a 8b 3c e8 	movq	(%rax,%r13,8), %rdi
1000073a4:	49 89 c4 	movq	%rax, %r12
1000073a7:	e8 98 c9 00 00 	callq	0x100013d44 ## symbol stub for: _method_getDescription
1000073ac:	48 89 c3 	movq	%rax, %rbx
1000073af:	48 8b 3b 	movq	(%rbx), %rdi
1000073b2:	e8 6d c8 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
1000073b7:	48 89 c7 	movq	%rax, %rdi
1000073ba:	e8 15 ca 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000073bf:	49 89 c6 	movq	%rax, %r14
1000073c2:	31 c0 	xorl	%eax, %eax
1000073c4:	48 8d 3d 1d 45 01 00 	leaq	83229(%rip), %rdi ## Objc cfstring ref: @"%@"
1000073cb:	4c 89 f6 	movq	%r14, %rsi
1000073ce:	e8 3f c8 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000073d3:	4c 89 f7 	movq	%r14, %rdi
1000073d6:	ff 15 94 2c 01 00 	callq	*76948(%rip) ## literal pool symbol address: _objc_release
1000073dc:	4c 89 e0 	movq	%r12, %rax
1000073df:	48 8b 4d c0 	movq	-64(%rbp), %rcx
1000073e3:	48 39 0b 	cmpq	%rcx, (%rbx)
1000073e6:	45 0f 44 fd 	cmovel	%r13d, %r15d
1000073ea:	49 ff c5 	incq	%r13
1000073ed:	8b 4d d4 	movl	-44(%rbp), %ecx
1000073f0:	49 39 cd 	cmpq	%rcx, %r13
1000073f3:	72 ab 	jb	0x1000073a0
1000073f5:	45 85 ff 	testl	%r15d, %r15d
1000073f8:	4c 8b 6d c8 	movq	-56(%rbp), %r13
1000073fc:	48 8b 1d 9d 9a 01 00 	movq	105117(%rip), %rbx ## Objc selector ref: class
100007403:	74 2c 	je	0x100007431
100007405:	44 89 f9 	movl	%r15d, %ecx
100007408:	48 8b 1c c8 	movq	(%rax,%rcx,8), %rbx
10000740c:	48 89 df 	movq	%rbx, %rdi
10000740f:	e8 3c c9 00 00 	callq	0x100013d50 ## symbol stub for: _method_getName
100007414:	49 89 c6 	movq	%rax, %r14
100007417:	48 89 df 	movq	%rbx, %rdi
10000741a:	e8 2b c9 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
10000741f:	4c 89 ef 	movq	%r13, %rdi
100007422:	4c 89 f6 	movq	%r14, %rsi
100007425:	48 8b 1d 74 9a 01 00 	movq	105076(%rip), %rbx ## Objc selector ref: class
10000742c:	ff d0 	callq	*%rax
10000742e:	4c 89 e0 	movq	%r12, %rax
100007431:	48 89 c7 	movq	%rax, %rdi
100007434:	e8 e7 c8 00 00 	callq	0x100013d20 ## symbol stub for: _free
100007439:	48 8b 3d 58 a2 01 00 	movq	107096(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSObject
100007440:	4c 8b 35 21 2c 01 00 	movq	76833(%rip), %r14 ## Objc message: +[NSObject class]
100007447:	48 89 de 	movq	%rbx, %rsi
10000744a:	41 ff d6 	callq	*%r14
10000744d:	48 89 c7 	movq	%rax, %rdi
100007450:	e8 bb c9 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
100007455:	48 89 c7 	movq	%rax, %rdi
100007458:	e8 21 c8 00 00 	callq	0x100013c7e ## symbol stub for: _class_isMetaClass
10000745d:	4c 89 ef 	movq	%r13, %rdi
100007460:	48 89 de 	movq	%rbx, %rsi
100007463:	41 ff d6 	callq	*%r14
100007466:	48 89 c7 	movq	%rax, %rdi
100007469:	e8 a2 c9 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
10000746e:	48 89 c7 	movq	%rax, %rdi
100007471:	e8 08 c8 00 00 	callq	0x100013c7e ## symbol stub for: _class_isMetaClass
100007476:	48 8d 3d a5 e5 00 00 	leaq	58789(%rip), %rdi ## literal pool for: "TestCategoryOveride"
10000747d:	e8 22 c9 00 00 	callq	0x100013da4 ## symbol stub for: _objc_getMetaClass
100007482:	48 89 c3 	movq	%rax, %rbx
100007485:	48 89 df 	movq	%rbx, %rdi
100007488:	e8 f1 c7 00 00 	callq	0x100013c7e ## symbol stub for: _class_isMetaClass
10000748d:	48 8b 35 c4 9d 01 00 	movq	105924(%rip), %rsi ## Objc selector ref: log1
100007494:	48 89 df 	movq	%rbx, %rdi
100007497:	e8 ee c7 00 00 	callq	0x100013c8a ## symbol stub for: _class_respondsToSelector
10000749c:	0f b6 f0 	movzbl	%al, %esi
10000749f:	48 8d 3d 62 4e 01 00 	leaq	85602(%rip), %rdi ## Objc cfstring ref: @"cls responds to:%d"
1000074a6:	31 c0 	xorl	%eax, %eax
1000074a8:	e8 65 c7 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000074ad:	4c 89 e8 	movq	%r13, %rax
1000074b0:	48 83 c4 28 	addq	$40, %rsp
1000074b4:	5b 	popq	%rbx
1000074b5:	41 5c 	popq	%r12
1000074b7:	41 5d 	popq	%r13
1000074b9:	41 5e 	popq	%r14
1000074bb:	41 5f 	popq	%r15
1000074bd:	5d 	popq	%rbp
1000074be:	c3 	retq
-[TestCategoryOveride log]:
1000074bf:	55 	pushq	%rbp
1000074c0:	48 89 e5 	movq	%rsp, %rbp
1000074c3:	48 8d 3d 5e 4e 01 00 	leaq	85598(%rip), %rdi ## Objc cfstring ref: @"orginal"
1000074ca:	31 c0 	xorl	%eax, %eax
1000074cc:	e8 41 c7 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000074d1:	5d 	popq	%rbp
1000074d2:	c3 	retq
+[TestCategoryOveride log1]:
1000074d3:	55 	pushq	%rbp
1000074d4:	48 89 e5 	movq	%rsp, %rbp
1000074d7:	48 8d 3d 6a 4e 01 00 	leaq	85610(%rip), %rdi ## Objc cfstring ref: @"log1"
1000074de:	31 c0 	xorl	%eax, %eax
1000074e0:	e8 2d c7 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000074e5:	5d 	popq	%rbp
1000074e6:	c3 	retq
-[TestCategoryOveride(TestOveride) log]:
1000074e7:	55 	pushq	%rbp
1000074e8:	48 89 e5 	movq	%rsp, %rbp
1000074eb:	48 8d 3d 76 4e 01 00 	leaq	85622(%rip), %rdi ## Objc cfstring ref: @"category"
1000074f2:	31 c0 	xorl	%eax, %eax
1000074f4:	e8 19 c7 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000074f9:	5d 	popq	%rbp
1000074fa:	c3 	retq
_main:
1000074fb:	55 	pushq	%rbp
1000074fc:	48 89 e5 	movq	%rsp, %rbp
1000074ff:	53 	pushq	%rbx
100007500:	50 	pushq	%rax
100007501:	e8 68 c8 00 00 	callq	0x100013d6e ## symbol stub for: _objc_autoreleasePoolPush
100007506:	48 89 c3 	movq	%rax, %rbx
100007509:	bf 02 00 00 00 	movl	$2, %edi
10000750e:	be 05 00 00 00 	movl	$5, %esi
100007513:	e8 36 c7 00 00 	callq	0x100013c4e ## symbol stub for: _calculate_add
100007518:	bf 02 00 00 00 	movl	$2, %edi
10000751d:	be 05 00 00 00 	movl	$5, %esi
100007522:	e8 b9 c6 00 00 	callq	_static_calculate_add
100007527:	48 89 df 	movq	%rbx, %rdi
10000752a:	e8 39 c8 00 00 	callq	0x100013d68 ## symbol stub for: _objc_autoreleasePoolPop
10000752f:	31 c0 	xorl	%eax, %eax
100007531:	48 83 c4 08 	addq	$8, %rsp
100007535:	5b 	popq	%rbx
100007536:	5d 	popq	%rbp
100007537:	c3 	retq
_testWaitUsage:
100007538:	55 	pushq	%rbp
100007539:	48 89 e5 	movq	%rsp, %rbp
10000753c:	e8 d3 c7 00 00 	callq	0x100013d14 ## symbol stub for: _fork
100007541:	85 c0 	testl	%eax, %eax
100007543:	79 10 	jns	0x100007555
100007545:	48 8d 3d 3c 4e 01 00 	leaq	85564(%rip), %rdi ## Objc cfstring ref: @"error ocurred!/n"
10000754c:	31 c0 	xorl	%eax, %eax
10000754e:	e8 bf c6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007553:	5d 	popq	%rbp
100007554:	c3 	retq
100007555:	74 1b 	je	0x100007572
100007557:	31 ff 	xorl	%edi, %edi
100007559:	e8 d6 c8 00 00 	callq	0x100013e34 ## symbol stub for: _wait
10000755e:	89 c1 	movl	%eax, %ecx
100007560:	48 8d 3d 61 4e 01 00 	leaq	85601(%rip), %rdi ## Objc cfstring ref: @"I catched a child process with pid of %d/n"
100007567:	31 c0 	xorl	%eax, %eax
100007569:	89 ce 	movl	%ecx, %esi
10000756b:	e8 a2 c6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007570:	eb e1 	jmp	0x100007553
100007572:	e8 af c7 00 00 	callq	0x100013d26 ## symbol stub for: _getpid
100007577:	89 c1 	movl	%eax, %ecx
100007579:	48 8d 3d 28 4e 01 00 	leaq	85544(%rip), %rdi ## Objc cfstring ref: @"This is child process with pid of %d/n"
100007580:	31 c0 	xorl	%eax, %eax
100007582:	89 ce 	movl	%ecx, %esi
100007584:	e8 89 c6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007589:	bf 05 00 00 00 	movl	$5, %edi
10000758e:	5d 	popq	%rbp
10000758f:	e9 94 c8 00 00 	jmp	0x100013e28 ## symbol stub for: _sleep
_testLogicNot:
100007594:	55 	pushq	%rbp
100007595:	48 89 e5 	movq	%rsp, %rbp
100007598:	41 57 	pushq	%r15
10000759a:	41 56 	pushq	%r14
10000759c:	53 	pushq	%rbx
10000759d:	48 83 ec 18 	subq	$24, %rsp
1000075a1:	49 89 fe 	movq	%rdi, %r14
1000075a4:	4d 85 f6 	testq	%r14, %r14
1000075a7:	74 76 	je	0x10000761f
1000075a9:	66 0f 57 c0 	xorpd	%xmm0, %xmm0
1000075ad:	7e 4c 	jle	0x1000075fb
1000075af:	f2 0f 11 45 e0 	movsd	%xmm0, -32(%rbp)
1000075b4:	4c 8d 3d 2d 4e 01 00 	leaq	85549(%rip), %r15 ## Objc cfstring ref: @"time cost: %.4f"
1000075bb:	4c 89 f3 	movq	%r14, %rbx
1000075be:	e8 31 c6 00 00 	callq	0x100013bf4 ## symbol stub for: _CFAbsoluteTimeGetCurrent
1000075c3:	f2 0f 11 45 d8 	movsd	%xmm0, -40(%rbp)
1000075c8:	e8 27 c6 00 00 	callq	0x100013bf4 ## symbol stub for: _CFAbsoluteTimeGetCurrent
1000075cd:	f2 0f 5c 45 d8 	subsd	-40(%rbp), %xmm0
1000075d2:	f2 0f 10 4d e0 	movsd	-32(%rbp), %xmm1
1000075d7:	f2 0f 58 c8 	addsd	%xmm0, %xmm1
1000075db:	f2 0f 11 4d e0 	movsd	%xmm1, -32(%rbp)
1000075e0:	e8 0f c6 00 00 	callq	0x100013bf4 ## symbol stub for: _CFAbsoluteTimeGetCurrent
1000075e5:	f2 0f 5c 45 d8 	subsd	-40(%rbp), %xmm0
1000075ea:	b0 01 	movb	$1, %al
1000075ec:	4c 89 ff 	movq	%r15, %rdi
1000075ef:	e8 1e c6 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000075f4:	48 ff cb 	decq	%rbx
1000075f7:	75 c5 	jne	0x1000075be
1000075f9:	eb 05 	jmp	0x100007600
1000075fb:	f2 0f 11 45 e0 	movsd	%xmm0, -32(%rbp)
100007600:	0f 57 c9 	xorps	%xmm1, %xmm1
100007603:	f2 49 0f 2a ce 	cvtsi2sdq	%r14, %xmm1
100007608:	f2 0f 10 45 e0 	movsd	-32(%rbp), %xmm0
10000760d:	f2 0f 5e c1 	divsd	%xmm1, %xmm0
100007611:	48 8d 3d f0 4d 01 00 	leaq	85488(%rip), %rdi ## Objc cfstring ref: @"average time cost: %.4f"
100007618:	b0 01 	movb	$1, %al
10000761a:	e8 f3 c5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000761f:	48 83 c4 18 	addq	$24, %rsp
100007623:	5b 	popq	%rbx
100007624:	41 5e 	popq	%r14
100007626:	41 5f 	popq	%r15
100007628:	5d 	popq	%rbp
100007629:	c3 	retq
_testLogicEqualNil:
10000762a:	55 	pushq	%rbp
10000762b:	48 89 e5 	movq	%rsp, %rbp
10000762e:	41 57 	pushq	%r15
100007630:	41 56 	pushq	%r14
100007632:	53 	pushq	%rbx
100007633:	48 83 ec 18 	subq	$24, %rsp
100007637:	49 89 fe 	movq	%rdi, %r14
10000763a:	4d 85 f6 	testq	%r14, %r14
10000763d:	74 6f 	je	0x1000076ae
10000763f:	66 0f 57 c0 	xorpd	%xmm0, %xmm0
100007643:	f2 0f 11 45 e0 	movsd	%xmm0, -32(%rbp)
100007648:	bb 14 00 00 00 	movl	$20, %ebx
10000764d:	4c 8d 3d 94 4d 01 00 	leaq	85396(%rip), %r15 ## Objc cfstring ref: @"time cost: %.4f"
100007654:	e8 9b c5 00 00 	callq	0x100013bf4 ## symbol stub for: _CFAbsoluteTimeGetCurrent
100007659:	f2 0f 11 45 d8 	movsd	%xmm0, -40(%rbp)
10000765e:	e8 91 c5 00 00 	callq	0x100013bf4 ## symbol stub for: _CFAbsoluteTimeGetCurrent
100007663:	f2 0f 5c 45 d8 	subsd	-40(%rbp), %xmm0
100007668:	f2 0f 10 4d e0 	movsd	-32(%rbp), %xmm1
10000766d:	f2 0f 58 c8 	addsd	%xmm0, %xmm1
100007671:	f2 0f 11 4d e0 	movsd	%xmm1, -32(%rbp)
100007676:	e8 79 c5 00 00 	callq	0x100013bf4 ## symbol stub for: _CFAbsoluteTimeGetCurrent
10000767b:	f2 0f 5c 45 d8 	subsd	-40(%rbp), %xmm0
100007680:	b0 01 	movb	$1, %al
100007682:	4c 89 ff 	movq	%r15, %rdi
100007685:	e8 88 c5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000768a:	48 ff cb 	decq	%rbx
10000768d:	75 c5 	jne	0x100007654
10000768f:	0f 57 c9 	xorps	%xmm1, %xmm1
100007692:	f2 49 0f 2a ce 	cvtsi2sdq	%r14, %xmm1
100007697:	f2 0f 10 45 e0 	movsd	-32(%rbp), %xmm0
10000769c:	f2 0f 5e c1 	divsd	%xmm1, %xmm0
1000076a0:	48 8d 3d 61 4d 01 00 	leaq	85345(%rip), %rdi ## Objc cfstring ref: @"average time cost: %.4f"
1000076a7:	b0 01 	movb	$1, %al
1000076a9:	e8 64 c5 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000076ae:	48 83 c4 18 	addq	$24, %rsp
1000076b2:	5b 	popq	%rbx
1000076b3:	41 5e 	popq	%r14
1000076b5:	41 5f 	popq	%r15
1000076b7:	5d 	popq	%rbp
1000076b8:	c3 	retq
_testVAList:
1000076b9:	55 	pushq	%rbp
1000076ba:	48 89 e5 	movq	%rsp, %rbp
1000076bd:	41 57 	pushq	%r15
1000076bf:	41 56 	pushq	%r14
1000076c1:	41 55 	pushq	%r13
1000076c3:	41 54 	pushq	%r12
1000076c5:	53 	pushq	%rbx
1000076c6:	48 81 ec d8 00 00 00 	subq	$216, %rsp
1000076cd:	84 c0 	testb	%al, %al
1000076cf:	74 2f 	je	0x100007700
1000076d1:	0f 29 85 30 ff ff ff 	movaps	%xmm0, -208(%rbp)
1000076d8:	0f 29 8d 40 ff ff ff 	movaps	%xmm1, -192(%rbp)
1000076df:	0f 29 95 50 ff ff ff 	movaps	%xmm2, -176(%rbp)
1000076e6:	0f 29 9d 60 ff ff ff 	movaps	%xmm3, -160(%rbp)
1000076ed:	0f 29 a5 70 ff ff ff 	movaps	%xmm4, -144(%rbp)
1000076f4:	0f 29 6d 80 	movaps	%xmm5, -128(%rbp)
1000076f8:	0f 29 75 90 	movaps	%xmm6, -112(%rbp)
1000076fc:	0f 29 7d a0 	movaps	%xmm7, -96(%rbp)
100007700:	48 8d 9d 00 ff ff ff 	leaq	-256(%rbp), %rbx
100007707:	4c 89 4b 28 	movq	%r9, 40(%rbx)
10000770b:	4c 89 43 20 	movq	%r8, 32(%rbx)
10000770f:	48 89 4b 18 	movq	%rcx, 24(%rbx)
100007713:	48 89 53 10 	movq	%rdx, 16(%rbx)
100007717:	48 8b 05 1a 29 01 00 	movq	76058(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000771e:	48 8b 00 	movq	(%rax), %rax
100007721:	48 89 45 d0 	movq	%rax, -48(%rbp)
100007725:	4c 8b 2d 4c 29 01 00 	movq	76108(%rip), %r13 ## literal pool symbol address: _objc_retain
10000772c:	48 89 f7 	movq	%rsi, %rdi
10000772f:	41 ff d5 	callq	*%r13
100007732:	48 89 5d c0 	movq	%rbx, -64(%rbp)
100007736:	48 8d 4d 10 	leaq	16(%rbp), %rcx
10000773a:	48 89 4d b8 	movq	%rcx, -72(%rbp)
10000773e:	48 b9 10 00 00 00 30 00 00 00 	movabsq	$206158430224, %rcx
100007748:	48 89 4d b0 	movq	%rcx, -80(%rbp)
10000774c:	48 89 c7 	movq	%rax, %rdi
10000774f:	41 ff d5 	callq	*%r13
100007752:	49 89 c7 	movq	%rax, %r15
100007755:	4d 85 ff 	testq	%r15, %r15
100007758:	74 5a 	je	0x1000077b4
10000775a:	4c 8b 35 0f 29 01 00 	movq	76047(%rip), %r14 ## literal pool symbol address: _objc_release
100007761:	4c 89 fb 	movq	%r15, %rbx
100007764:	31 c0 	xorl	%eax, %eax
100007766:	48 8d 3d bb 4c 01 00 	leaq	85179(%rip), %rdi ## Objc cfstring ref: @"&param = %p
 and param = %@"
10000776d:	48 89 de 	movq	%rbx, %rsi
100007770:	48 89 da 	movq	%rbx, %rdx
100007773:	e8 9a c4 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007778:	48 63 4d b0 	movslq	-80(%rbp), %rcx
10000777c:	48 83 f9 28 	cmpq	$40, %rcx
100007780:	77 0f 	ja	0x100007791
100007782:	48 89 c8 	movq	%rcx, %rax
100007785:	48 03 45 c0 	addq	-64(%rbp), %rax
100007789:	8d 49 08 	leal	8(%rcx), %ecx
10000778c:	89 4d b0 	movl	%ecx, -80(%rbp)
10000778f:	eb 0c 	jmp	0x10000779d
100007791:	48 8b 45 b8 	movq	-72(%rbp), %rax
100007795:	48 8d 48 08 	leaq	8(%rax), %rcx
100007799:	48 89 4d b8 	movq	%rcx, -72(%rbp)
10000779d:	48 8b 38 	movq	(%rax), %rdi
1000077a0:	41 ff d5 	callq	*%r13
1000077a3:	49 89 c4 	movq	%rax, %r12
1000077a6:	48 89 df 	movq	%rbx, %rdi
1000077a9:	41 ff d6 	callq	*%r14
1000077ac:	4c 89 e3 	movq	%r12, %rbx
1000077af:	4d 85 e4 	testq	%r12, %r12
1000077b2:	75 b0 	jne	0x100007764
1000077b4:	4c 89 ff 	movq	%r15, %rdi
1000077b7:	ff 15 b3 28 01 00 	callq	*75955(%rip) ## literal pool symbol address: _objc_release
1000077bd:	48 8b 05 74 28 01 00 	movq	75892(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000077c4:	48 8b 00 	movq	(%rax), %rax
1000077c7:	48 3b 45 d0 	cmpq	-48(%rbp), %rax
1000077cb:	75 12 	jne	0x1000077df
1000077cd:	48 81 c4 d8 00 00 00 	addq	$216, %rsp
1000077d4:	5b 	popq	%rbx
1000077d5:	41 5c 	popq	%r12
1000077d7:	41 5d 	popq	%r13
1000077d9:	41 5e 	popq	%r14
1000077db:	41 5f 	popq	%r15
1000077dd:	5d 	popq	%rbp
1000077de:	c3 	retq
1000077df:	e8 64 c4 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
_testVAList1:
1000077e4:	55 	pushq	%rbp
1000077e5:	48 89 e5 	movq	%rsp, %rbp
1000077e8:	41 57 	pushq	%r15
1000077ea:	41 56 	pushq	%r14
1000077ec:	41 55 	pushq	%r13
1000077ee:	41 54 	pushq	%r12
1000077f0:	53 	pushq	%rbx
1000077f1:	48 81 ec e8 00 00 00 	subq	$232, %rsp
1000077f8:	84 c0 	testb	%al, %al
1000077fa:	74 32 	je	0x10000782e
1000077fc:	0f 29 85 20 ff ff ff 	movaps	%xmm0, -224(%rbp)
100007803:	0f 29 8d 30 ff ff ff 	movaps	%xmm1, -208(%rbp)
10000780a:	0f 29 95 40 ff ff ff 	movaps	%xmm2, -192(%rbp)
100007811:	0f 29 9d 50 ff ff ff 	movaps	%xmm3, -176(%rbp)
100007818:	0f 29 a5 60 ff ff ff 	movaps	%xmm4, -160(%rbp)
10000781f:	0f 29 ad 70 ff ff ff 	movaps	%xmm5, -144(%rbp)
100007826:	0f 29 75 80 	movaps	%xmm6, -128(%rbp)
10000782a:	0f 29 7d 90 	movaps	%xmm7, -112(%rbp)
10000782e:	48 8d 9d f0 fe ff ff 	leaq	-272(%rbp), %rbx
100007835:	4c 89 4b 28 	movq	%r9, 40(%rbx)
100007839:	4c 89 43 20 	movq	%r8, 32(%rbx)
10000783d:	48 89 4b 18 	movq	%rcx, 24(%rbx)
100007841:	48 89 53 10 	movq	%rdx, 16(%rbx)
100007845:	48 8b 05 ec 27 01 00 	movq	75756(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000784c:	48 8b 00 	movq	(%rax), %rax
10000784f:	48 89 45 d0 	movq	%rax, -48(%rbp)
100007853:	4c 8b 2d 1e 28 01 00 	movq	75806(%rip), %r13 ## literal pool symbol address: _objc_retain
10000785a:	48 89 f7 	movq	%rsi, %rdi
10000785d:	41 ff d5 	callq	*%r13
100007860:	48 89 5d c0 	movq	%rbx, -64(%rbp)
100007864:	48 8d 4d 10 	leaq	16(%rbp), %rcx
100007868:	48 89 4d b8 	movq	%rcx, -72(%rbp)
10000786c:	48 b9 10 00 00 00 30 00 00 00 	movabsq	$206158430224, %rcx
100007876:	48 89 4d b0 	movq	%rcx, -80(%rbp)
10000787a:	48 89 c7 	movq	%rax, %rdi
10000787d:	41 ff d5 	callq	*%r13
100007880:	48 89 45 a8 	movq	%rax, -88(%rbp)
100007884:	48 85 c0 	testq	%rax, %rax
100007887:	74 5e 	je	0x1000078e7
100007889:	4c 8d 3d 98 4b 01 00 	leaq	84888(%rip), %r15 ## Objc cfstring ref: @"&param = %p
 and param = %@"
100007890:	4c 8b 35 d9 27 01 00 	movq	75737(%rip), %r14 ## literal pool symbol address: _objc_release
100007897:	4c 8b 65 a8 	movq	-88(%rbp), %r12
10000789b:	31 c0 	xorl	%eax, %eax
10000789d:	4c 89 ff 	movq	%r15, %rdi
1000078a0:	4c 89 e6 	movq	%r12, %rsi
1000078a3:	4c 89 e2 	movq	%r12, %rdx
1000078a6:	e8 67 c3 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000078ab:	48 63 4d b0 	movslq	-80(%rbp), %rcx
1000078af:	48 83 f9 28 	cmpq	$40, %rcx
1000078b3:	77 0f 	ja	0x1000078c4
1000078b5:	48 89 c8 	movq	%rcx, %rax
1000078b8:	48 03 45 c0 	addq	-64(%rbp), %rax
1000078bc:	8d 49 08 	leal	8(%rcx), %ecx
1000078bf:	89 4d b0 	movl	%ecx, -80(%rbp)
1000078c2:	eb 0c 	jmp	0x1000078d0
1000078c4:	48 8b 45 b8 	movq	-72(%rbp), %rax
1000078c8:	48 8d 48 08 	leaq	8(%rax), %rcx
1000078cc:	48 89 4d b8 	movq	%rcx, -72(%rbp)
1000078d0:	48 8b 38 	movq	(%rax), %rdi
1000078d3:	41 ff d5 	callq	*%r13
1000078d6:	48 89 c3 	movq	%rax, %rbx
1000078d9:	4c 89 e7 	movq	%r12, %rdi
1000078dc:	41 ff d6 	callq	*%r14
1000078df:	49 89 dc 	movq	%rbx, %r12
1000078e2:	48 85 db 	testq	%rbx, %rbx
1000078e5:	75 b4 	jne	0x10000789b
1000078e7:	48 8b 7d a8 	movq	-88(%rbp), %rdi
1000078eb:	ff 15 7f 27 01 00 	callq	*75647(%rip) ## literal pool symbol address: _objc_release
1000078f1:	48 8b 05 40 27 01 00 	movq	75584(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000078f8:	48 8b 00 	movq	(%rax), %rax
1000078fb:	48 3b 45 d0 	cmpq	-48(%rbp), %rax
1000078ff:	75 12 	jne	0x100007913
100007901:	48 81 c4 e8 00 00 00 	addq	$232, %rsp
100007908:	5b 	popq	%rbx
100007909:	41 5c 	popq	%r12
10000790b:	41 5d 	popq	%r13
10000790d:	41 5e 	popq	%r14
10000790f:	41 5f 	popq	%r15
100007911:	5d 	popq	%rbp
100007912:	c3 	retq
100007913:	e8 30 c3 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
_testBenchmark:
100007918:	55 	pushq	%rbp
100007919:	48 89 e5 	movq	%rsp, %rbp
10000791c:	41 56 	pushq	%r14
10000791e:	53 	pushq	%rbx
10000791f:	48 83 ec 30 	subq	$48, %rsp
100007923:	4c 8d 35 1e 4b 01 00 	leaq	84766(%rip), %r14 ## Objc cfstring ref: @"test"
10000792a:	4c 89 f7 	movq	%r14, %rdi
10000792d:	ff 15 45 27 01 00 	callq	*75589(%rip) ## literal pool symbol address: _objc_retain
100007933:	48 8b 05 e6 26 01 00 	movq	75494(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000793a:	48 8d 5d c0 	leaq	-64(%rbp), %rbx
10000793e:	48 89 03 	movq	%rax, (%rbx)
100007941:	b8 00 00 00 c2 	movl	$3254779904, %eax
100007946:	48 89 43 08 	movq	%rax, 8(%rbx)
10000794a:	48 8d 05 4f 00 00 00 	leaq	___testBenchmark_block_invoke(%rip), %rax
100007951:	48 89 43 10 	movq	%rax, 16(%rbx)
100007955:	48 8d 05 74 36 01 00 	leaq	___block_descriptor_tmp(%rip), %rax
10000795c:	48 89 43 18 	movq	%rax, 24(%rbx)
100007960:	48 c7 43 28 e8 03 00 00 	movq	$1000, 40(%rbx)
100007968:	4c 89 73 20 	movq	%r14, 32(%rbx)
10000796c:	bf 64 00 00 00 	movl	$100, %edi
100007971:	48 89 de 	movq	%rbx, %rsi
100007974:	e8 29 c3 00 00 	callq	0x100013ca2 ## symbol stub for: _dispatch_benchmark
100007979:	48 89 c1 	movq	%rax, %rcx
10000797c:	48 8d 3d e5 4a 01 00 	leaq	84709(%rip), %rdi ## Objc cfstring ref: @"[[NSMutableArray array] addObject:] Avg. Runtime: %llu ns"
100007983:	31 c0 	xorl	%eax, %eax
100007985:	48 89 ce 	movq	%rcx, %rsi
100007988:	e8 85 c2 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000798d:	48 8b 7b 20 	movq	32(%rbx), %rdi
100007991:	ff 15 d9 26 01 00 	callq	*75481(%rip) ## literal pool symbol address: _objc_release
100007997:	48 83 c4 30 	addq	$48, %rsp
10000799b:	5b 	popq	%rbx
10000799c:	41 5e 	popq	%r14
10000799e:	5d 	popq	%rbp
10000799f:	c3 	retq
___testBenchmark_block_invoke:
1000079a0:	55 	pushq	%rbp
1000079a1:	48 89 e5 	movq	%rsp, %rbp
1000079a4:	41 57 	pushq	%r15
1000079a6:	41 56 	pushq	%r14
1000079a8:	41 55 	pushq	%r13
1000079aa:	41 54 	pushq	%r12
1000079ac:	53 	pushq	%rbx
1000079ad:	50 	pushq	%rax
1000079ae:	49 89 fd 	movq	%rdi, %r13
1000079b1:	e8 b8 c3 00 00 	callq	0x100013d6e ## symbol stub for: _objc_autoreleasePoolPush
1000079b6:	48 89 45 d0 	movq	%rax, -48(%rbp)
1000079ba:	48 8b 3d df 9c 01 00 	movq	105695(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
1000079c1:	48 8b 35 20 96 01 00 	movq	103968(%rip), %rsi ## Objc selector ref: array
1000079c8:	ff 15 9a 26 01 00 	callq	*75418(%rip) ## Objc message: +[NSMutableArray array]
1000079ce:	48 89 c7 	movq	%rax, %rdi
1000079d1:	e8 fe c3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000079d6:	49 89 c7 	movq	%rax, %r15
1000079d9:	49 83 7d 28 00 	cmpq	$0, 40(%r13)
1000079de:	74 26 	je	0x100007a06
1000079e0:	4c 8b 25 71 95 01 00 	movq	103793(%rip), %r12 ## Objc selector ref: addObject:
1000079e7:	31 db 	xorl	%ebx, %ebx
1000079e9:	4c 8b 35 78 26 01 00 	movq	75384(%rip), %r14 ## Objc message: -[%rdi addObject:]
1000079f0:	49 8b 55 20 	movq	32(%r13), %rdx
1000079f4:	4c 89 ff 	movq	%r15, %rdi
1000079f7:	4c 89 e6 	movq	%r12, %rsi
1000079fa:	41 ff d6 	callq	*%r14
1000079fd:	48 ff c3 	incq	%rbx
100007a00:	49 3b 5d 28 	cmpq	40(%r13), %rbx
100007a04:	72 ea 	jb	0x1000079f0
100007a06:	4c 89 ff 	movq	%r15, %rdi
100007a09:	ff 15 61 26 01 00 	callq	*75361(%rip) ## literal pool symbol address: _objc_release
100007a0f:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100007a13:	48 83 c4 08 	addq	$8, %rsp
100007a17:	5b 	popq	%rbx
100007a18:	41 5c 	popq	%r12
100007a1a:	41 5d 	popq	%r13
100007a1c:	41 5e 	popq	%r14
100007a1e:	41 5f 	popq	%r15
100007a20:	5d 	popq	%rbp
100007a21:	e9 42 c3 00 00 	jmp	0x100013d68 ## symbol stub for: _objc_autoreleasePoolPop
___copy_helper_block_:
100007a26:	55 	pushq	%rbp
100007a27:	48 89 e5 	movq	%rsp, %rbp
100007a2a:	48 8b 7e 20 	movq	32(%rsi), %rdi
100007a2e:	5d 	popq	%rbp
100007a2f:	ff 25 43 26 01 00 	jmpq	*75331(%rip) ## literal pool symbol address: _objc_retain
___destroy_helper_block_:
100007a35:	55 	pushq	%rbp
100007a36:	48 89 e5 	movq	%rsp, %rbp
100007a39:	48 8b 7f 20 	movq	32(%rdi), %rdi
100007a3d:	5d 	popq	%rbp
100007a3e:	ff 25 2c 26 01 00 	jmpq	*75308(%rip) ## literal pool symbol address: _objc_release
-[TestSubClassSwizzle testSubClassSwizzle]:
100007a44:	55 	pushq	%rbp
100007a45:	48 89 e5 	movq	%rsp, %rbp
100007a48:	48 8d 3d b9 37 01 00 	leaq	79801(%rip), %rdi ## Objc cfstring ref: @"%s"
100007a4f:	48 8d 35 ef e0 00 00 	leaq	57583(%rip), %rsi ## literal pool for: "-[TestSubClassSwizzle testSubClassSwizzle]"
100007a56:	31 c0 	xorl	%eax, %eax
100007a58:	e8 b5 c1 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007a5d:	5d 	popq	%rbp
100007a5e:	c3 	retq
-[TestSubClassSwizzle s_testSubClassSwizzle]:
100007a5f:	55 	pushq	%rbp
100007a60:	48 89 e5 	movq	%rsp, %rbp
100007a63:	48 8b 35 de 96 01 00 	movq	104158(%rip), %rsi ## Objc selector ref: s_testSubClassSwizzle
100007a6a:	5d 	popq	%rbp
100007a6b:	ff 25 f7 25 01 00 	jmpq	*75255(%rip) ## Objc message: -[%rdi s_testSubClassSwizzle]
-[TestASubClassSwizzle a_testSubClassSwizzle]:
100007a71:	55 	pushq	%rbp
100007a72:	48 89 e5 	movq	%rsp, %rbp
100007a75:	48 8b 35 c4 96 01 00 	movq	104132(%rip), %rsi ## Objc selector ref: a_testSubClassSwizzle
100007a7c:	ff 15 e6 25 01 00 	callq	*75238(%rip) ## Objc message: -[%rdi a_testSubClassSwizzle]
100007a82:	48 8d 3d 7f 37 01 00 	leaq	79743(%rip), %rdi ## Objc cfstring ref: @"%s"
100007a89:	48 8d 35 e0 e0 00 00 	leaq	57568(%rip), %rsi ## literal pool for: "-[TestASubClassSwizzle a_testSubClassSwizzle]"
100007a90:	31 c0 	xorl	%eax, %eax
100007a92:	e8 7b c1 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007a97:	5d 	popq	%rbp
100007a98:	c3 	retq
-[TestBSubClassSwizzle b_testSubClassSwizzle]:
100007a99:	55 	pushq	%rbp
100007a9a:	48 89 e5 	movq	%rsp, %rbp
100007a9d:	48 8b 35 94 96 01 00 	movq	104084(%rip), %rsi ## Objc selector ref: b_testSubClassSwizzle
100007aa4:	ff 15 be 25 01 00 	callq	*75198(%rip) ## Objc message: -[%rdi b_testSubClassSwizzle]
100007aaa:	48 8d 3d 57 37 01 00 	leaq	79703(%rip), %rdi ## Objc cfstring ref: @"%s"
100007ab1:	48 8d 35 e6 e0 00 00 	leaq	57574(%rip), %rsi ## literal pool for: "-[TestBSubClassSwizzle b_testSubClassSwizzle]"
100007ab8:	31 c0 	xorl	%eax, %eax
100007aba:	e8 53 c1 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
100007abf:	5d 	popq	%rbp
100007ac0:	c3 	retq
+[UIFont(Test) initialize]:
100007ac1:	55 	pushq	%rbp
100007ac2:	48 89 e5 	movq	%rsp, %rbp
100007ac5:	5d 	popq	%rbp
100007ac6:	c3 	retq
___20+[UIFont(Test) load]_block_invoke:
100007ac7:	55 	pushq	%rbp
100007ac8:	48 89 e5 	movq	%rsp, %rbp
100007acb:	41 57 	pushq	%r15
100007acd:	41 56 	pushq	%r14
100007acf:	41 55 	pushq	%r13
100007ad1:	41 54 	pushq	%r12
100007ad3:	53 	pushq	%rbx
100007ad4:	50 	pushq	%rax
100007ad5:	48 89 fb 	movq	%rdi, %rbx
100007ad8:	48 8b 7b 20 	movq	32(%rbx), %rdi
100007adc:	48 8b 35 7d 97 01 00 	movq	104317(%rip), %rsi ## Objc selector ref: fontWithName:size:
100007ae3:	e8 7e c1 00 00 	callq	0x100013c66 ## symbol stub for: _class_getClassMethod
100007ae8:	49 89 c7 	movq	%rax, %r15
100007aeb:	48 8b 7b 20 	movq	32(%rbx), %rdi
100007aef:	48 8b 35 72 97 01 00 	movq	104306(%rip), %rsi ## Objc selector ref: hc_fontWithName:size:
100007af6:	e8 6b c1 00 00 	callq	0x100013c66 ## symbol stub for: _class_getClassMethod
100007afb:	49 89 c4 	movq	%rax, %r12
100007afe:	4c 8b 73 20 	movq	32(%rbx), %r14
100007b02:	4c 89 e7 	movq	%r12, %rdi
100007b05:	e8 40 c2 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100007b0a:	49 89 c5 	movq	%rax, %r13
100007b0d:	4c 89 e7 	movq	%r12, %rdi
100007b10:	e8 41 c2 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100007b15:	4c 89 f7 	movq	%r14, %rdi
100007b18:	48 8b 35 41 97 01 00 	movq	104257(%rip), %rsi ## Objc selector ref: fontWithName:size:
100007b1f:	4c 89 ea 	movq	%r13, %rdx
100007b22:	48 89 c1 	movq	%rax, %rcx
100007b25:	e8 30 c1 00 00 	callq	0x100013c5a ## symbol stub for: _class_addMethod
100007b2a:	84 c0 	testb	%al, %al
100007b2c:	74 3a 	je	0x100007b68
100007b2e:	4c 8b 73 20 	movq	32(%rbx), %r14
100007b32:	4c 89 ff 	movq	%r15, %rdi
100007b35:	e8 10 c2 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100007b3a:	48 89 c3 	movq	%rax, %rbx
100007b3d:	4c 89 ff 	movq	%r15, %rdi
100007b40:	e8 11 c2 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100007b45:	4c 89 f7 	movq	%r14, %rdi
100007b48:	48 8b 35 19 97 01 00 	movq	104217(%rip), %rsi ## Objc selector ref: hc_fontWithName:size:
100007b4f:	48 89 da 	movq	%rbx, %rdx
100007b52:	48 89 c1 	movq	%rax, %rcx
100007b55:	48 83 c4 08 	addq	$8, %rsp
100007b59:	5b 	popq	%rbx
100007b5a:	41 5c 	popq	%r12
100007b5c:	41 5d 	popq	%r13
100007b5e:	41 5e 	popq	%r14
100007b60:	41 5f 	popq	%r15
100007b62:	5d 	popq	%rbp
100007b63:	e9 1c c1 00 00 	jmp	0x100013c84 ## symbol stub for: _class_replaceMethod
100007b68:	4c 89 ff 	movq	%r15, %rdi
100007b6b:	4c 89 e6 	movq	%r12, %rsi
100007b6e:	48 83 c4 08 	addq	$8, %rsp
100007b72:	5b 	popq	%rbx
100007b73:	41 5c 	popq	%r12
100007b75:	41 5d 	popq	%r13
100007b77:	41 5e 	popq	%r14
100007b79:	41 5f 	popq	%r15
100007b7b:	5d 	popq	%rbp
100007b7c:	e9 bd c1 00 00 	jmp	0x100013d3e ## symbol stub for: _method_exchangeImplementations
___copy_helper_block_:
100007b81:	55 	pushq	%rbp
100007b82:	48 89 e5 	movq	%rsp, %rbp
100007b85:	5d 	popq	%rbp
100007b86:	c3 	retq
___destroy_helper_block_:
100007b87:	55 	pushq	%rbp
100007b88:	48 89 e5 	movq	%rsp, %rbp
100007b8b:	5d 	popq	%rbp
100007b8c:	c3 	retq
+[UIFont(Test) hc_fontWithName:size:]:
100007b8d:	55 	pushq	%rbp
100007b8e:	48 89 e5 	movq	%rsp, %rbp
100007b91:	48 8b 3d d8 9b 01 00 	movq	105432(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_UIFont
100007b98:	48 8b 35 d1 96 01 00 	movq	104145(%rip), %rsi ## Objc selector ref: systemFontOfSize:
100007b9f:	5d 	popq	%rbp
100007ba0:	ff 25 c2 24 01 00 	jmpq	*74946(%rip) ## Objc message: +[UIFont systemFontOfSize:]
100007ba6:	90 	nop
100007ba7:	90 	nop
-[UITextField(HCInputType) hcui_shouldChangeCharactersInRange:replacementString:]:
100007ba8:	55 	pushq	%rbp
100007ba9:	48 89 e5 	movq	%rsp, %rbp
100007bac:	41 57 	pushq	%r15
100007bae:	41 56 	pushq	%r14
100007bb0:	41 54 	pushq	%r12
100007bb2:	53 	pushq	%rbx
100007bb3:	49 89 ce 	movq	%rcx, %r14
100007bb6:	49 89 d7 	movq	%rdx, %r15
100007bb9:	48 89 fb 	movq	%rdi, %rbx
100007bbc:	4c 89 c7 	movq	%r8, %rdi
100007bbf:	ff 15 b3 24 01 00 	callq	*74931(%rip) ## literal pool symbol address: _objc_retain
100007bc5:	49 89 c4 	movq	%rax, %r12
100007bc8:	48 8b 35 b1 96 01 00 	movq	104113(%rip), %rsi ## Objc selector ref: hcui_inputType
100007bcf:	48 89 df 	movq	%rbx, %rdi
100007bd2:	ff 15 90 24 01 00 	callq	*74896(%rip) ## Objc message: -[%rdi hcui_inputType]
100007bd8:	48 ff c8 	decq	%rax
100007bdb:	48 83 f8 06 	cmpq	$6, %rax
100007bdf:	77 19 	ja	0x100007bfa
100007be1:	48 8d 0d 80 00 00 00 	leaq	128(%rip), %rcx
100007be8:	48 63 04 81 	movslq	(%rcx,%rax,4), %rax
100007bec:	48 01 c8 	addq	%rcx, %rax
100007bef:	ff e0 	jmpq	*%rax
100007bf1:	48 8b 35 90 96 01 00 	movq	104080(%rip), %rsi ## Objc selector ref: hcui_phoneNumberCheckWithString:
100007bf8:	eb 5e 	jmp	0x100007c58
100007bfa:	b3 01 	movb	$1, %bl
100007bfc:	eb 3f 	jmp	0x100007c3d
100007bfe:	48 8b 35 8b 96 01 00 	movq	104075(%rip), %rsi ## Objc selector ref: hcui_formatedPhoneNumberCheckWithString:range:
100007c05:	eb 22 	jmp	0x100007c29
100007c07:	48 8b 35 8a 96 01 00 	movq	104074(%rip), %rsi ## Objc selector ref: hcui_formatedCardCheckWithString:range:
100007c0e:	eb 19 	jmp	0x100007c29
100007c10:	48 8b 35 89 96 01 00 	movq	104073(%rip), %rsi ## Objc selector ref: hcui_priceCheckWithString:range:
100007c17:	eb 10 	jmp	0x100007c29
100007c19:	48 8b 35 88 96 01 00 	movq	104072(%rip), %rsi ## Objc selector ref: hcui_identityNumberCheckWithString:
100007c20:	eb 36 	jmp	0x100007c58
100007c22:	48 8b 35 87 96 01 00 	movq	104071(%rip), %rsi ## Objc selector ref: hcui_authCodeCheckWithString:range:
100007c29:	48 89 df 	movq	%rbx, %rdi
100007c2c:	4c 89 e2 	movq	%r12, %rdx
100007c2f:	4c 89 f9 	movq	%r15, %rcx
100007c32:	4d 89 f0 	movq	%r14, %r8
100007c35:	ff 15 2d 24 01 00 	callq	*74797(%rip) ## Objc message: -[%rdi hcui_authCodeCheckWithString:range:]
100007c3b:	89 c3 	movl	%eax, %ebx
100007c3d:	4c 89 e7 	movq	%r12, %rdi
100007c40:	ff 15 2a 24 01 00 	callq	*74794(%rip) ## literal pool symbol address: _objc_release
100007c46:	89 d8 	movl	%ebx, %eax
100007c48:	5b 	popq	%rbx
100007c49:	41 5c 	popq	%r12
100007c4b:	41 5e 	popq	%r14
100007c4d:	41 5f 	popq	%r15
100007c4f:	5d 	popq	%rbp
100007c50:	c3 	retq
100007c51:	48 8b 35 60 96 01 00 	movq	104032(%rip), %rsi ## Objc selector ref: hcui_paymentPWDCheckWithString:
100007c58:	48 89 df 	movq	%rbx, %rdi
100007c5b:	4c 89 e2 	movq	%r12, %rdx
100007c5e:	ff 15 04 24 01 00 	callq	*74756(%rip) ## Objc message: -[%rdi hcui_paymentPWDCheckWithString:]
100007c64:	eb d5 	jmp	0x100007c3b
100007c66:	66 90 	nop
100007c68:	89 ff 	movl	%edi, %edi
100007c6a:		.byte 0xff #bad opcode
100007c6b:	ff 96 ff ff ff 9f 	callq	*-1610612737(%rsi)
100007c71:		.byte 0xff #bad opcode
100007c72:		.byte 0xff #bad opcode
100007c73:	ff a8 ff ff ff b1 	ljmpl	*-1308622849(%rax)
100007c79:		.byte 0xff #bad opcode
100007c7a:		.byte 0xff #bad opcode
100007c7b:		.byte 0xff #bad opcode
100007c7c:	ba ff ff ff e9 	movl	$3925868543, %edx
100007c81:		.byte 0xff #bad opcode
100007c82:		.byte 0xff #bad opcode
100007c83:	ff 55 48 	callq	*72(%rbp)
-[UITextField(HCInputType) configKeyboardType]:
100007c84:	55 	pushq	%rbp
100007c85:	48 89 e5 	movq	%rsp, %rbp
100007c88:	41 56 	pushq	%r14
100007c8a:	53 	pushq	%rbx
100007c8b:	48 89 fb 	movq	%rdi, %rbx
100007c8e:	48 8b 35 eb 95 01 00 	movq	103915(%rip), %rsi ## Objc selector ref: hcui_inputType
100007c95:	ff 15 cd 23 01 00 	callq	*74701(%rip) ## Objc message: -[%rdi hcui_inputType]
100007c9b:	48 83 f8 07 	cmpq	$7, %rax
100007c9f:	77 29 	ja	0x100007cca
100007ca1:	48 8d 0d 7c 00 00 00 	leaq	124(%rip), %rcx
100007ca8:	48 63 04 81 	movslq	(%rcx,%rax,4), %rax
100007cac:	48 01 c8 	addq	%rcx, %rax
100007caf:	ff e0 	jmpq	*%rax
100007cb1:	48 8b 35 08 96 01 00 	movq	103944(%rip), %rsi ## Objc selector ref: setKeyboardType:
100007cb8:	ba 04 00 00 00 	movl	$4, %edx
100007cbd:	48 89 df 	movq	%rbx, %rdi
100007cc0:	5b 	popq	%rbx
100007cc1:	41 5e 	popq	%r14
100007cc3:	5d 	popq	%rbp
100007cc4:	ff 25 9e 23 01 00 	jmpq	*74654(%rip) ## Objc message: -[%rdi setKeyboardType:]
100007cca:	48 8b 35 ef 95 01 00 	movq	103919(%rip), %rsi ## Objc selector ref: setKeyboardType:
100007cd1:	31 d2 	xorl	%edx, %edx
100007cd3:	eb e8 	jmp	0x100007cbd
100007cd5:	48 8b 35 e4 95 01 00 	movq	103908(%rip), %rsi ## Objc selector ref: setKeyboardType:
100007cdc:	ba 08 00 00 00 	movl	$8, %edx
100007ce1:	eb da 	jmp	0x100007cbd
100007ce3:	48 8b 35 d6 95 01 00 	movq	103894(%rip), %rsi ## Objc selector ref: setKeyboardType:
100007cea:	4c 8b 35 77 23 01 00 	movq	74615(%rip), %r14 ## Objc message: -[%rdi setKeyboardType:]
100007cf1:	ba 01 00 00 00 	movl	$1, %edx
100007cf6:	48 89 df 	movq	%rbx, %rdi
100007cf9:	41 ff d6 	callq	*%r14
100007cfc:	48 8b 35 c5 95 01 00 	movq	103877(%rip), %rsi ## Objc selector ref: setAutocapitalizationType:
100007d03:	ba 03 00 00 00 	movl	$3, %edx
100007d08:	48 89 df 	movq	%rbx, %rdi
100007d0b:	4c 89 f0 	movq	%r14, %rax
100007d0e:	5b 	popq	%rbx
100007d0f:	41 5e 	popq	%r14
100007d11:	5d 	popq	%rbp
100007d12:	ff e0 	jmpq	*%rax
100007d14:	48 8b 35 a5 95 01 00 	movq	103845(%rip), %rsi ## Objc selector ref: setKeyboardType:
100007d1b:	ba 01 00 00 00 	movl	$1, %edx
100007d20:	eb 9b 	jmp	0x100007cbd
100007d22:	66 90 	nop
100007d24:	a6 	cmpsb	%es:(%rdi), (%rsi)
100007d25:		.byte 0xff #bad opcode
100007d26:		.byte 0xff #bad opcode
100007d27:	ff 8d ff ff ff 8d 	decl	-1912602625(%rbp)
100007d2d:		.byte 0xff #bad opcode
100007d2e:		.byte 0xff #bad opcode
100007d2f:	ff 8d ff ff ff b1 	decl	-1308622849(%rbp)
100007d35:		.byte 0xff #bad opcode
100007d36:		.byte 0xff #bad opcode
100007d37:		.byte 0xff #bad opcode
100007d38:	bf ff ff ff f0 	movl	$4043309055, %edi
100007d3d:		.byte 0xff #bad opcode
100007d3e:		.byte 0xff #bad opcode
100007d3f:	ff 8d ff ff ff 55 	decl	1442840575(%rbp)
-[UITextField(HCInputType) hcui_phoneNumberCheckWithString:]:
100007d44:	55 	pushq	%rbp
100007d45:	48 89 e5 	movq	%rsp, %rbp
100007d48:	41 56 	pushq	%r14
100007d4a:	53 	pushq	%rbx
100007d4b:	49 89 fe 	movq	%rdi, %r14
100007d4e:	48 8b 35 cb 93 01 00 	movq	103371(%rip), %rsi ## Objc selector ref: isEqualToString:
100007d55:	48 8d 05 4c 47 01 00 	leaq	83788(%rip), %rax ## Objc cfstring ref: @""
100007d5c:	48 89 d7 	movq	%rdx, %rdi
100007d5f:	48 89 c2 	movq	%rax, %rdx
100007d62:	ff 15 00 23 01 00 	callq	*74496(%rip) ## Objc message: -[%rdi isEqualToString:]
100007d68:	b3 01 	movb	$1, %bl
100007d6a:	84 c0 	testb	%al, %al
100007d6c:	75 3a 	jne	0x100007da8
100007d6e:	48 8b 35 5b 95 01 00 	movq	103771(%rip), %rsi ## Objc selector ref: text
100007d75:	48 8b 1d ec 22 01 00 	movq	74476(%rip), %rbx ## Objc message: -[%rdi text]
100007d7c:	4c 89 f7 	movq	%r14, %rdi
100007d7f:	ff d3 	callq	*%rbx
100007d81:	48 89 c7 	movq	%rax, %rdi
100007d84:	e8 4b c0 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007d89:	49 89 c6 	movq	%rax, %r14
100007d8c:	48 8b 35 45 95 01 00 	movq	103749(%rip), %rsi ## Objc selector ref: length
100007d93:	4c 89 f7 	movq	%r14, %rdi
100007d96:	ff d3 	callq	*%rbx
100007d98:	48 83 f8 0b 	cmpq	$11, %rax
100007d9c:	0f 92 c3 	setb	%bl
100007d9f:	4c 89 f7 	movq	%r14, %rdi
100007da2:	ff 15 c8 22 01 00 	callq	*74440(%rip) ## literal pool symbol address: _objc_release
100007da8:	89 d8 	movl	%ebx, %eax
100007daa:	5b 	popq	%rbx
100007dab:	41 5e 	popq	%r14
100007dad:	5d 	popq	%rbp
100007dae:	c3 	retq
-[UITextField(HCInputType) hcui_formatedPhoneNumberCheckWithString:range:]:
100007daf:	55 	pushq	%rbp
100007db0:	48 89 e5 	movq	%rsp, %rbp
100007db3:	48 8b 35 26 95 01 00 	movq	103718(%rip), %rsi ## Objc selector ref: _hcui_formatedNumberCheckWithString:range:
100007dba:	5d 	popq	%rbp
100007dbb:	ff 25 a7 22 01 00 	jmpq	*74407(%rip) ## Objc message: -[%rdi _hcui_formatedNumberCheckWithString:range:]
-[UITextField(HCInputType) hcui_identityNumberCheckWithString:]:
100007dc1:	55 	pushq	%rbp
100007dc2:	48 89 e5 	movq	%rsp, %rbp
100007dc5:	41 57 	pushq	%r15
100007dc7:	41 56 	pushq	%r14
100007dc9:	41 55 	pushq	%r13
100007dcb:	41 54 	pushq	%r12
100007dcd:	53 	pushq	%rbx
100007dce:	50 	pushq	%rax
100007dcf:	49 89 fe 	movq	%rdi, %r14
100007dd2:	48 89 d7 	movq	%rdx, %rdi
100007dd5:	ff 15 9d 22 01 00 	callq	*74397(%rip) ## literal pool symbol address: _objc_retain
100007ddb:	49 89 c5 	movq	%rax, %r13
100007dde:	48 8b 35 3b 93 01 00 	movq	103227(%rip), %rsi ## Objc selector ref: isEqualToString:
100007de5:	48 8d 15 bc 46 01 00 	leaq	83644(%rip), %rdx ## Objc cfstring ref: @""
100007dec:	4c 89 ef 	movq	%r13, %rdi
100007def:	ff 15 73 22 01 00 	callq	*74355(%rip) ## Objc message: -[%rdi isEqualToString:]
100007df5:	b3 01 	movb	$1, %bl
100007df7:	84 c0 	testb	%al, %al
100007df9:	74 1a 	je	0x100007e15
100007dfb:	4c 89 ef 	movq	%r13, %rdi
100007dfe:	ff 15 6c 22 01 00 	callq	*74348(%rip) ## literal pool symbol address: _objc_release
100007e04:	89 d8 	movl	%ebx, %eax
100007e06:	48 83 c4 08 	addq	$8, %rsp
100007e0a:	5b 	popq	%rbx
100007e0b:	41 5c 	popq	%r12
100007e0d:	41 5d 	popq	%r13
100007e0f:	41 5e 	popq	%r14
100007e11:	41 5f 	popq	%r15
100007e13:	5d 	popq	%rbp
100007e14:	c3 	retq
100007e15:	48 8b 35 b4 94 01 00 	movq	103604(%rip), %rsi ## Objc selector ref: text
100007e1c:	4c 8b 25 45 22 01 00 	movq	74309(%rip), %r12 ## Objc message: -[%rdi text]
100007e23:	4c 89 f7 	movq	%r14, %rdi
100007e26:	41 ff d4 	callq	*%r12
100007e29:	48 89 c7 	movq	%rax, %rdi
100007e2c:	e8 a3 bf 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007e31:	48 89 c3 	movq	%rax, %rbx
100007e34:	48 8b 35 9d 94 01 00 	movq	103581(%rip), %rsi ## Objc selector ref: length
100007e3b:	48 89 df 	movq	%rbx, %rdi
100007e3e:	41 ff d4 	callq	*%r12
100007e41:	49 89 c7 	movq	%rax, %r15
100007e44:	48 89 df 	movq	%rbx, %rdi
100007e47:	ff 15 23 22 01 00 	callq	*74275(%rip) ## literal pool symbol address: _objc_release
100007e4d:	49 83 ff 11 	cmpq	$17, %r15
100007e51:	77 47 	ja	0x100007e9a
100007e53:	4c 89 f7 	movq	%r14, %rdi
100007e56:	48 8b 35 73 94 01 00 	movq	103539(%rip), %rsi ## Objc selector ref: text
100007e5d:	41 ff d4 	callq	*%r12
100007e60:	48 89 c7 	movq	%rax, %rdi
100007e63:	e8 6c bf 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007e68:	48 89 c3 	movq	%rax, %rbx
100007e6b:	48 89 df 	movq	%rbx, %rdi
100007e6e:	48 8b 35 63 94 01 00 	movq	103523(%rip), %rsi ## Objc selector ref: length
100007e75:	41 ff d4 	callq	*%r12
100007e78:	49 89 c7 	movq	%rax, %r15
100007e7b:	48 89 df 	movq	%rbx, %rdi
100007e7e:	ff 15 ec 21 01 00 	callq	*74220(%rip) ## literal pool symbol address: _objc_release
100007e84:	48 8b 35 5d 94 01 00 	movq	103517(%rip), %rsi ## Objc selector ref: hcui_predicateString:withRegex:
100007e8b:	49 83 ff 10 	cmpq	$16, %r15
100007e8f:	77 10 	ja	0x100007ea1
100007e91:	48 8d 0d 30 46 01 00 	leaq	83504(%rip), %rcx ## Objc cfstring ref: @"[0-9]"
100007e98:	eb 0e 	jmp	0x100007ea8
100007e9a:	31 db 	xorl	%ebx, %ebx
100007e9c:	e9 5a ff ff ff 	jmp	0x100007dfb
100007ea1:	48 8d 0d 40 46 01 00 	leaq	83520(%rip), %rcx ## Objc cfstring ref: @"[0-9X]"
100007ea8:	4c 89 f7 	movq	%r14, %rdi
100007eab:	4c 89 ea 	movq	%r13, %rdx
100007eae:	ff 15 b4 21 01 00 	callq	*74164(%rip) ## Objc message: -[%rdi hcui_predicateString:withRegex:]
100007eb4:	89 c3 	movl	%eax, %ebx
100007eb6:	e9 40 ff ff ff 	jmp	0x100007dfb
-[UITextField(HCInputType) hcui_priceCheckWithString:range:]:
100007ebb:	55 	pushq	%rbp
100007ebc:	48 89 e5 	movq	%rsp, %rbp
100007ebf:	41 57 	pushq	%r15
100007ec1:	41 56 	pushq	%r14
100007ec3:	41 55 	pushq	%r13
100007ec5:	41 54 	pushq	%r12
100007ec7:	53 	pushq	%rbx
100007ec8:	48 83 ec 28 	subq	$40, %rsp
100007ecc:	4c 89 45 c8 	movq	%r8, -56(%rbp)
100007ed0:	48 89 cb 	movq	%rcx, %rbx
100007ed3:	49 89 ff 	movq	%rdi, %r15
100007ed6:	48 89 d7 	movq	%rdx, %rdi
100007ed9:	ff 15 99 21 01 00 	callq	*74137(%rip) ## literal pool symbol address: _objc_retain
100007edf:	49 89 c6 	movq	%rax, %r14
100007ee2:	4c 8b 25 37 92 01 00 	movq	102967(%rip), %r12 ## Objc selector ref: isEqualToString:
100007ee9:	48 8d 15 b8 45 01 00 	leaq	83384(%rip), %rdx ## Objc cfstring ref: @""
100007ef0:	4c 89 f7 	movq	%r14, %rdi
100007ef3:	4c 89 e6 	movq	%r12, %rsi
100007ef6:	ff 15 6c 21 01 00 	callq	*74092(%rip) ## Objc message: -[%rdi isEqualToString:]
100007efc:	41 b5 01 	movb	$1, %r13b
100007eff:	84 c0 	testb	%al, %al
100007f01:	74 1b 	je	0x100007f1e
100007f03:	4c 89 f7 	movq	%r14, %rdi
100007f06:	ff 15 64 21 01 00 	callq	*74084(%rip) ## literal pool symbol address: _objc_release
100007f0c:	44 89 e8 	movl	%r13d, %eax
100007f0f:	48 83 c4 28 	addq	$40, %rsp
100007f13:	5b 	popq	%rbx
100007f14:	41 5c 	popq	%r12
100007f16:	41 5d 	popq	%r13
100007f18:	41 5e 	popq	%r14
100007f1a:	41 5f 	popq	%r15
100007f1c:	5d 	popq	%rbp
100007f1d:	c3 	retq
100007f1e:	48 89 5d b0 	movq	%rbx, -80(%rbp)
100007f22:	4c 8d 2d df 45 01 00 	leaq	83423(%rip), %r13 ## Objc cfstring ref: @"."
100007f29:	4c 89 e6 	movq	%r12, %rsi
100007f2c:	4c 8b 25 35 21 01 00 	movq	74037(%rip), %r12 ## Objc message: -[%rdi isEqualToString:]
100007f33:	4c 89 75 d0 	movq	%r14, -48(%rbp)
100007f37:	4c 89 f7 	movq	%r14, %rdi
100007f3a:	4c 89 ea 	movq	%r13, %rdx
100007f3d:	41 ff d4 	callq	*%r12
100007f40:	41 89 c6 	movl	%eax, %r14d
100007f43:	48 8b 35 86 93 01 00 	movq	103302(%rip), %rsi ## Objc selector ref: text
100007f4a:	4c 89 ff 	movq	%r15, %rdi
100007f4d:	41 ff d4 	callq	*%r12
100007f50:	48 89 c7 	movq	%rax, %rdi
100007f53:	e8 7c be 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007f58:	48 89 c3 	movq	%rax, %rbx
100007f5b:	48 8b 35 8e 93 01 00 	movq	103310(%rip), %rsi ## Objc selector ref: rangeOfString:
100007f62:	48 89 df 	movq	%rbx, %rdi
100007f65:	4c 89 ea 	movq	%r13, %rdx
100007f68:	41 ff d4 	callq	*%r12
100007f6b:	49 89 c5 	movq	%rax, %r13
100007f6e:	45 84 f6 	testb	%r14b, %r14b
100007f71:	0f 84 df 00 00 00 	je	0x100008056
100007f77:	4c 89 6d c0 	movq	%r13, -64(%rbp)
100007f7b:	48 89 df 	movq	%rbx, %rdi
100007f7e:	ff 15 ec 20 01 00 	callq	*73964(%rip) ## literal pool symbol address: _objc_release
100007f84:	4c 89 ff 	movq	%r15, %rdi
100007f87:	48 8b 35 42 93 01 00 	movq	103234(%rip), %rsi ## Objc selector ref: text
100007f8e:	41 ff d4 	callq	*%r12
100007f91:	48 89 c7 	movq	%rax, %rdi
100007f94:	e8 3b be 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007f99:	48 89 c3 	movq	%rax, %rbx
100007f9c:	4c 8b 2d 35 93 01 00 	movq	103221(%rip), %r13 ## Objc selector ref: length
100007fa3:	48 89 df 	movq	%rbx, %rdi
100007fa6:	4c 89 ee 	movq	%r13, %rsi
100007fa9:	41 ff d4 	callq	*%r12
100007fac:	49 89 c6 	movq	%rax, %r14
100007faf:	48 89 df 	movq	%rbx, %rdi
100007fb2:	ff 15 b8 20 01 00 	callq	*73912(%rip) ## literal pool symbol address: _objc_release
100007fb8:	4d 85 f6 	testq	%r14, %r14
100007fbb:	0f 84 be 01 00 00 	je	0x10000817f
100007fc1:	4c 89 7d b8 	movq	%r15, -72(%rbp)
100007fc5:	4c 89 ff 	movq	%r15, %rdi
100007fc8:	4c 8b 3d 01 93 01 00 	movq	103169(%rip), %r15 ## Objc selector ref: text
100007fcf:	4c 89 fe 	movq	%r15, %rsi
100007fd2:	41 ff d4 	callq	*%r12
100007fd5:	48 89 c7 	movq	%rax, %rdi
100007fd8:	e8 f7 bd 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100007fdd:	48 89 c3 	movq	%rax, %rbx
100007fe0:	48 89 df 	movq	%rbx, %rdi
100007fe3:	4c 89 ee 	movq	%r13, %rsi
100007fe6:	41 ff d4 	callq	*%r12
100007fe9:	49 89 c6 	movq	%rax, %r14
100007fec:	48 89 df 	movq	%rbx, %rdi
100007fef:	ff 15 7b 20 01 00 	callq	*73851(%rip) ## literal pool symbol address: _objc_release
100007ff5:	45 31 ed 	xorl	%r13d, %r13d
100007ff8:	48 b8 ff ff ff ff ff ff ff 7f 	movabsq	$9223372036854775807, %rax
100008002:	48 39 45 c0 	cmpq	%rax, -64(%rbp)
100008006:	0f 85 8d 01 00 00 	jne	0x100008199
10000800c:	4c 89 fe 	movq	%r15, %rsi
10000800f:	4d 85 f6 	testq	%r14, %r14
100008012:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100008016:	4c 8b 7d b0 	movq	-80(%rbp), %r15
10000801a:	4c 8b 75 d0 	movq	-48(%rbp), %r14
10000801e:	0f 84 df fe ff ff 	je	0x100007f03
100008024:	41 ff d4 	callq	*%r12
100008027:	48 89 c7 	movq	%rax, %rdi
10000802a:	e8 a5 bd 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000802f:	48 89 c3 	movq	%rax, %rbx
100008032:	48 89 df 	movq	%rbx, %rdi
100008035:	48 8b 35 9c 92 01 00 	movq	103068(%rip), %rsi ## Objc selector ref: length
10000803c:	41 ff d4 	callq	*%r12
10000803f:	48 8b 4d c8 	movq	-56(%rbp), %rcx
100008043:	4c 01 f9 	addq	%r15, %rcx
100008046:	48 29 c8 	subq	%rcx, %rax
100008049:	48 83 f8 03 	cmpq	$3, %rax
10000804d:	41 0f 92 c5 	setb	%r13b
100008051:	48 89 df 	movq	%rbx, %rdi
100008054:	eb 7e 	jmp	0x1000080d4
100008056:	48 89 55 c0 	movq	%rdx, -64(%rbp)
10000805a:	48 89 df 	movq	%rbx, %rdi
10000805d:	ff 15 0d 20 01 00 	callq	*73741(%rip) ## literal pool symbol address: _objc_release
100008063:	4d 89 fe 	movq	%r15, %r14
100008066:	4c 89 ff 	movq	%r15, %rdi
100008069:	48 8b 35 60 92 01 00 	movq	103008(%rip), %rsi ## Objc selector ref: text
100008070:	41 ff d4 	callq	*%r12
100008073:	48 89 c7 	movq	%rax, %rdi
100008076:	e8 59 bd 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000807b:	48 8b 35 56 92 01 00 	movq	102998(%rip), %rsi ## Objc selector ref: length
100008082:	48 89 45 c8 	movq	%rax, -56(%rbp)
100008086:	48 89 c7 	movq	%rax, %rdi
100008089:	41 ff d4 	callq	*%r12
10000808c:	48 89 c3 	movq	%rax, %rbx
10000808f:	48 b8 ff ff ff ff ff ff ff 7f 	movabsq	$9223372036854775807, %rax
100008099:	49 39 c5 	cmpq	%rax, %r13
10000809c:	4c 8b 7d b0 	movq	-80(%rbp), %r15
1000080a0:	74 3d 	je	0x1000080df
1000080a2:	4d 39 fd 	cmpq	%r15, %r13
1000080a5:	73 38 	jae	0x1000080df
1000080a7:	4c 8b 75 d0 	movq	-48(%rbp), %r14
1000080ab:	4c 89 f7 	movq	%r14, %rdi
1000080ae:	48 8b 35 23 92 01 00 	movq	102947(%rip), %rsi ## Objc selector ref: length
1000080b5:	ff 15 ad 1f 01 00 	callq	*73645(%rip) ## Objc message: -[%rdi length]
1000080bb:	48 8b 4d c0 	movq	-64(%rbp), %rcx
1000080bf:	4c 01 e9 	addq	%r13, %rcx
1000080c2:	48 29 cb 	subq	%rcx, %rbx
1000080c5:	48 01 c3 	addq	%rax, %rbx
1000080c8:	48 83 fb 03 	cmpq	$3, %rbx
1000080cc:	41 0f 92 c5 	setb	%r13b
1000080d0:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000080d4:	ff 15 96 1f 01 00 	callq	*73622(%rip) ## literal pool symbol address: _objc_release
1000080da:	e9 24 fe ff ff 	jmp	0x100007f03
1000080df:	48 85 db 	testq	%rbx, %rbx
1000080e2:	0f 84 ba 00 00 00 	je	0x1000081a2
1000080e8:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000080ec:	ff 15 7e 1f 01 00 	callq	*73598(%rip) ## literal pool symbol address: _objc_release
1000080f2:	4c 89 f7 	movq	%r14, %rdi
1000080f5:	48 89 7d b8 	movq	%rdi, -72(%rbp)
1000080f9:	48 8b 35 d0 91 01 00 	movq	102864(%rip), %rsi ## Objc selector ref: text
100008100:	4c 8b 2d 61 1f 01 00 	movq	73569(%rip), %r13 ## Objc message: -[%rdi text]
100008107:	41 ff d5 	callq	*%r13
10000810a:	48 89 c7 	movq	%rax, %rdi
10000810d:	e8 c2 bc 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008112:	48 89 c3 	movq	%rax, %rbx
100008115:	48 8b 35 04 8e 01 00 	movq	101892(%rip), %rsi ## Objc selector ref: mutableCopy
10000811c:	48 89 df 	movq	%rbx, %rdi
10000811f:	41 ff d5 	callq	*%r13
100008122:	49 89 c4 	movq	%rax, %r12
100008125:	4c 8b 35 44 1f 01 00 	movq	73540(%rip), %r14 ## literal pool symbol address: _objc_release
10000812c:	48 89 df 	movq	%rbx, %rdi
10000812f:	41 ff d6 	callq	*%r14
100008132:	4c 89 f3 	movq	%r14, %rbx
100008135:	48 8b 35 c4 91 01 00 	movq	102852(%rip), %rsi ## Objc selector ref: insertString:atIndex:
10000813c:	4c 89 e7 	movq	%r12, %rdi
10000813f:	4c 8b 75 d0 	movq	-48(%rbp), %r14
100008143:	4c 89 f2 	movq	%r14, %rdx
100008146:	4c 89 f9 	movq	%r15, %rcx
100008149:	41 ff d5 	callq	*%r13
10000814c:	48 8b 35 b5 91 01 00 	movq	102837(%rip), %rsi ## Objc selector ref: doubleValue
100008153:	4c 89 e7 	movq	%r12, %rdi
100008156:	41 ff d5 	callq	*%r13
100008159:	f2 0f 11 45 c8 	movsd	%xmm0, -56(%rbp)
10000815e:	48 8b 35 ab 91 01 00 	movq	102827(%rip), %rsi ## Objc selector ref: hcui_maxValue
100008165:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100008169:	41 ff d5 	callq	*%r13
10000816c:	66 0f 2e 45 c8 	ucomisd	-56(%rbp), %xmm0
100008171:	41 0f 93 c5 	setae	%r13b
100008175:	4c 89 e7 	movq	%r12, %rdi
100008178:	ff d3 	callq	*%rbx
10000817a:	e9 84 fd ff ff 	jmp	0x100007f03
10000817f:	48 8b 35 72 91 01 00 	movq	102770(%rip), %rsi ## Objc selector ref: setText:
100008186:	48 8d 15 9b 43 01 00 	leaq	82843(%rip), %rdx ## Objc cfstring ref: @"0."
10000818d:	4c 89 ff 	movq	%r15, %rdi
100008190:	ff 15 d2 1e 01 00 	callq	*73426(%rip) ## Objc message: -[%rdi setText:]
100008196:	45 31 ed 	xorl	%r13d, %r13d
100008199:	4c 8b 75 d0 	movq	-48(%rbp), %r14
10000819d:	e9 61 fd ff ff 	jmp	0x100007f03
1000081a2:	48 8d 15 9f 43 01 00 	leaq	82847(%rip), %rdx ## Objc cfstring ref: @"0"
1000081a9:	48 8b 7d d0 	movq	-48(%rbp), %rdi
1000081ad:	48 8b 35 6c 8f 01 00 	movq	102252(%rip), %rsi ## Objc selector ref: isEqualToString:
1000081b4:	ff 15 ae 1e 01 00 	callq	*73390(%rip) ## Objc message: -[%rdi isEqualToString:]
1000081ba:	89 c3 	movl	%eax, %ebx
1000081bc:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000081c0:	ff 15 aa 1e 01 00 	callq	*73386(%rip) ## literal pool symbol address: _objc_release
1000081c6:	84 db 	testb	%bl, %bl
1000081c8:	4c 89 f7 	movq	%r14, %rdi
1000081cb:	0f 84 24 ff ff ff 	je	0x1000080f5
1000081d1:	48 8b 35 20 91 01 00 	movq	102688(%rip), %rsi ## Objc selector ref: setText:
1000081d8:	48 8d 15 49 43 01 00 	leaq	82761(%rip), %rdx ## Objc cfstring ref: @"0."
1000081df:	eb af 	jmp	0x100008190
-[UITextField(HCInputType) hcui_formatedCardCheckWithString:range:]:
1000081e1:	55 	pushq	%rbp
1000081e2:	48 89 e5 	movq	%rsp, %rbp
1000081e5:	48 8b 35 f4 90 01 00 	movq	102644(%rip), %rsi ## Objc selector ref: _hcui_formatedNumberCheckWithString:range:
1000081ec:	5d 	popq	%rbp
1000081ed:	ff 25 75 1e 01 00 	jmpq	*73333(%rip) ## Objc message: -[%rdi _hcui_formatedNumberCheckWithString:range:]
-[UITextField(HCInputType) hcui_blankCountAfterCursorWithRange:]:
1000081f3:	55 	pushq	%rbp
1000081f4:	48 89 e5 	movq	%rsp, %rbp
1000081f7:	41 57 	pushq	%r15
1000081f9:	41 56 	pushq	%r14
1000081fb:	41 54 	pushq	%r12
1000081fd:	53 	pushq	%rbx
1000081fe:	49 89 d6 	movq	%rdx, %r14
100008201:	48 8b 35 c8 90 01 00 	movq	102600(%rip), %rsi ## Objc selector ref: text
100008208:	4c 8b 25 59 1e 01 00 	movq	73305(%rip), %r12 ## Objc message: -[%rdi text]
10000820f:	41 ff d4 	callq	*%r12
100008212:	48 89 c7 	movq	%rax, %rdi
100008215:	e8 ba bb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000821a:	48 89 c3 	movq	%rax, %rbx
10000821d:	48 8b 35 f4 90 01 00 	movq	102644(%rip), %rsi ## Objc selector ref: substringFromIndex:
100008224:	48 89 df 	movq	%rbx, %rdi
100008227:	4c 89 f2 	movq	%r14, %rdx
10000822a:	41 ff d4 	callq	*%r12
10000822d:	48 89 c7 	movq	%rax, %rdi
100008230:	e8 9f bb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008235:	49 89 c6 	movq	%rax, %r14
100008238:	48 89 df 	movq	%rbx, %rdi
10000823b:	ff 15 2f 1e 01 00 	callq	*73263(%rip) ## literal pool symbol address: _objc_release
100008241:	48 8b 35 90 90 01 00 	movq	102544(%rip), %rsi ## Objc selector ref: length
100008248:	4c 89 f7 	movq	%r14, %rdi
10000824b:	41 ff d4 	callq	*%r12
10000824e:	48 85 c0 	testq	%rax, %rax
100008251:	74 50 	je	0x1000082a3
100008253:	48 8b 35 c6 90 01 00 	movq	102598(%rip), %rsi ## Objc selector ref: componentsSeparatedByString:
10000825a:	48 8d 15 07 43 01 00 	leaq	82695(%rip), %rdx ## Objc cfstring ref: @" "
100008261:	4c 89 f7 	movq	%r14, %rdi
100008264:	41 ff d4 	callq	*%r12
100008267:	48 89 c7 	movq	%rax, %rdi
10000826a:	e8 65 bb 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000826f:	49 89 c7 	movq	%rax, %r15
100008272:	48 8b 35 af 90 01 00 	movq	102575(%rip), %rsi ## Objc selector ref: count
100008279:	4c 89 ff 	movq	%r15, %rdi
10000827c:	41 ff d4 	callq	*%r12
10000827f:	48 89 c3 	movq	%rax, %rbx
100008282:	48 ff cb 	decq	%rbx
100008285:	4c 89 ff 	movq	%r15, %rdi
100008288:	ff 15 e2 1d 01 00 	callq	*73186(%rip) ## literal pool symbol address: _objc_release
10000828e:	4c 89 f7 	movq	%r14, %rdi
100008291:	ff 15 d9 1d 01 00 	callq	*73177(%rip) ## literal pool symbol address: _objc_release
100008297:	48 89 d8 	movq	%rbx, %rax
10000829a:	5b 	popq	%rbx
10000829b:	41 5c 	popq	%r12
10000829d:	41 5e 	popq	%r14
10000829f:	41 5f 	popq	%r15
1000082a1:	5d 	popq	%rbp
1000082a2:	c3 	retq
1000082a3:	31 db 	xorl	%ebx, %ebx
1000082a5:	eb e7 	jmp	0x10000828e
-[UITextField(HCInputType) hcui_authCodeCheckWithString:range:]:
1000082a7:	55 	pushq	%rbp
1000082a8:	48 89 e5 	movq	%rsp, %rbp
1000082ab:	41 57 	pushq	%r15
1000082ad:	41 56 	pushq	%r14
1000082af:	41 55 	pushq	%r13
1000082b1:	41 54 	pushq	%r12
1000082b3:	53 	pushq	%rbx
1000082b4:	50 	pushq	%rax
1000082b5:	49 89 fe 	movq	%rdi, %r14
1000082b8:	48 89 d7 	movq	%rdx, %rdi
1000082bb:	ff 15 b7 1d 01 00 	callq	*73143(%rip) ## literal pool symbol address: _objc_retain
1000082c1:	49 89 c7 	movq	%rax, %r15
1000082c4:	48 8b 35 55 8e 01 00 	movq	101973(%rip), %rsi ## Objc selector ref: isEqualToString:
1000082cb:	48 8d 15 d6 41 01 00 	leaq	82390(%rip), %rdx ## Objc cfstring ref: @""
1000082d2:	4c 89 ff 	movq	%r15, %rdi
1000082d5:	ff 15 8d 1d 01 00 	callq	*73101(%rip) ## Objc message: -[%rdi isEqualToString:]
1000082db:	b3 01 	movb	$1, %bl
1000082dd:	84 c0 	testb	%al, %al
1000082df:	74 1a 	je	0x1000082fb
1000082e1:	4c 89 ff 	movq	%r15, %rdi
1000082e4:	ff 15 86 1d 01 00 	callq	*73094(%rip) ## literal pool symbol address: _objc_release
1000082ea:	89 d8 	movl	%ebx, %eax
1000082ec:	48 83 c4 08 	addq	$8, %rsp
1000082f0:	5b 	popq	%rbx
1000082f1:	41 5c 	popq	%r12
1000082f3:	41 5d 	popq	%r13
1000082f5:	41 5e 	popq	%r14
1000082f7:	41 5f 	popq	%r15
1000082f9:	5d 	popq	%rbp
1000082fa:	c3 	retq
1000082fb:	48 8b 35 ce 8f 01 00 	movq	102350(%rip), %rsi ## Objc selector ref: text
100008302:	4c 8b 2d 5f 1d 01 00 	movq	73055(%rip), %r13 ## Objc message: -[%rdi text]
100008309:	4c 89 f7 	movq	%r14, %rdi
10000830c:	41 ff d5 	callq	*%r13
10000830f:	48 89 c7 	movq	%rax, %rdi
100008312:	e8 bd ba 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008317:	48 89 c3 	movq	%rax, %rbx
10000831a:	48 8b 35 b7 8f 01 00 	movq	102327(%rip), %rsi ## Objc selector ref: length
100008321:	48 89 df 	movq	%rbx, %rdi
100008324:	41 ff d5 	callq	*%r13
100008327:	49 89 c4 	movq	%rax, %r12
10000832a:	48 8b 35 ff 8f 01 00 	movq	102399(%rip), %rsi ## Objc selector ref: hcui_limitLegnth
100008331:	4c 89 f7 	movq	%r14, %rdi
100008334:	41 ff d5 	callq	*%r13
100008337:	49 89 c5 	movq	%rax, %r13
10000833a:	48 89 df 	movq	%rbx, %rdi
10000833d:	ff 15 2d 1d 01 00 	callq	*73005(%rip) ## literal pool symbol address: _objc_release
100008343:	4d 39 ec 	cmpq	%r13, %r12
100008346:	73 21 	jae	0x100008369
100008348:	48 8b 35 99 8f 01 00 	movq	102297(%rip), %rsi ## Objc selector ref: hcui_predicateString:withRegex:
10000834f:	48 8d 0d 32 42 01 00 	leaq	82482(%rip), %rcx ## Objc cfstring ref: @"[a-zA-Z0-9]"
100008356:	4c 89 f7 	movq	%r14, %rdi
100008359:	4c 89 fa 	movq	%r15, %rdx
10000835c:	ff 15 06 1d 01 00 	callq	*72966(%rip) ## Objc message: -[%rdi hcui_predicateString:withRegex:]
100008362:	89 c3 	movl	%eax, %ebx
100008364:	e9 78 ff ff ff 	jmp	0x1000082e1
100008369:	31 db 	xorl	%ebx, %ebx
10000836b:	e9 71 ff ff ff 	jmp	0x1000082e1
-[UITextField(HCInputType) hcui_paymentPWDCheckWithString:]:
100008370:	55 	pushq	%rbp
100008371:	48 89 e5 	movq	%rsp, %rbp
100008374:	41 57 	pushq	%r15
100008376:	41 56 	pushq	%r14
100008378:	41 55 	pushq	%r13
10000837a:	41 54 	pushq	%r12
10000837c:	53 	pushq	%rbx
10000837d:	50 	pushq	%rax
10000837e:	49 89 fe 	movq	%rdi, %r14
100008381:	48 89 d7 	movq	%rdx, %rdi
100008384:	ff 15 ee 1c 01 00 	callq	*72942(%rip) ## literal pool symbol address: _objc_retain
10000838a:	49 89 c7 	movq	%rax, %r15
10000838d:	48 8b 35 8c 8d 01 00 	movq	101772(%rip), %rsi ## Objc selector ref: isEqualToString:
100008394:	48 8d 15 0d 41 01 00 	leaq	82189(%rip), %rdx ## Objc cfstring ref: @""
10000839b:	4c 89 ff 	movq	%r15, %rdi
10000839e:	ff 15 c4 1c 01 00 	callq	*72900(%rip) ## Objc message: -[%rdi isEqualToString:]
1000083a4:	b3 01 	movb	$1, %bl
1000083a6:	84 c0 	testb	%al, %al
1000083a8:	74 1a 	je	0x1000083c4
1000083aa:	4c 89 ff 	movq	%r15, %rdi
1000083ad:	ff 15 bd 1c 01 00 	callq	*72893(%rip) ## literal pool symbol address: _objc_release
1000083b3:	89 d8 	movl	%ebx, %eax
1000083b5:	48 83 c4 08 	addq	$8, %rsp
1000083b9:	5b 	popq	%rbx
1000083ba:	41 5c 	popq	%r12
1000083bc:	41 5d 	popq	%r13
1000083be:	41 5e 	popq	%r14
1000083c0:	41 5f 	popq	%r15
1000083c2:	5d 	popq	%rbp
1000083c3:	c3 	retq
1000083c4:	48 8b 35 05 8f 01 00 	movq	102149(%rip), %rsi ## Objc selector ref: text
1000083cb:	4c 8b 2d 96 1c 01 00 	movq	72854(%rip), %r13 ## Objc message: -[%rdi text]
1000083d2:	4c 89 f7 	movq	%r14, %rdi
1000083d5:	41 ff d5 	callq	*%r13
1000083d8:	48 89 c7 	movq	%rax, %rdi
1000083db:	e8 f4 b9 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000083e0:	48 89 c3 	movq	%rax, %rbx
1000083e3:	48 8b 35 ee 8e 01 00 	movq	102126(%rip), %rsi ## Objc selector ref: length
1000083ea:	48 89 df 	movq	%rbx, %rdi
1000083ed:	41 ff d5 	callq	*%r13
1000083f0:	49 89 c4 	movq	%rax, %r12
1000083f3:	48 8b 35 36 8f 01 00 	movq	102198(%rip), %rsi ## Objc selector ref: hcui_limitLegnth
1000083fa:	4c 89 f7 	movq	%r14, %rdi
1000083fd:	41 ff d5 	callq	*%r13
100008400:	49 89 c5 	movq	%rax, %r13
100008403:	48 89 df 	movq	%rbx, %rdi
100008406:	ff 15 64 1c 01 00 	callq	*72804(%rip) ## literal pool symbol address: _objc_release
10000840c:	4d 39 ec 	cmpq	%r13, %r12
10000840f:	73 21 	jae	0x100008432
100008411:	48 8b 35 d0 8e 01 00 	movq	102096(%rip), %rsi ## Objc selector ref: hcui_predicateString:withRegex:
100008418:	48 8d 0d a9 40 01 00 	leaq	82089(%rip), %rcx ## Objc cfstring ref: @"[0-9]"
10000841f:	4c 89 f7 	movq	%r14, %rdi
100008422:	4c 89 fa 	movq	%r15, %rdx
100008425:	ff 15 3d 1c 01 00 	callq	*72765(%rip) ## Objc message: -[%rdi hcui_predicateString:withRegex:]
10000842b:	89 c3 	movl	%eax, %ebx
10000842d:	e9 78 ff ff ff 	jmp	0x1000083aa
100008432:	31 db 	xorl	%ebx, %ebx
100008434:	e9 71 ff ff ff 	jmp	0x1000083aa
-[UITextField(HCInputType) hcui_predicateString:withRegex:]:
100008439:	55 	pushq	%rbp
10000843a:	48 89 e5 	movq	%rsp, %rbp
10000843d:	41 57 	pushq	%r15
10000843f:	41 56 	pushq	%r14
100008441:	41 55 	pushq	%r13
100008443:	41 54 	pushq	%r12
100008445:	53 	pushq	%rbx
100008446:	50 	pushq	%rax
100008447:	49 89 ce 	movq	%rcx, %r14
10000844a:	49 89 d4 	movq	%rdx, %r12
10000844d:	4c 89 e7 	movq	%r12, %rdi
100008450:	ff 15 22 1c 01 00 	callq	*72738(%rip) ## literal pool symbol address: _objc_retain
100008456:	49 89 c7 	movq	%rax, %r15
100008459:	48 8b 3d 20 93 01 00 	movq	103200(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSPredicate
100008460:	48 8b 35 d1 8e 01 00 	movq	102097(%rip), %rsi ## Objc selector ref: predicateWithFormat:
100008467:	48 8d 15 3a 41 01 00 	leaq	82234(%rip), %rdx ## Objc cfstring ref: @"SELF MATCHES %@"
10000846e:	4c 8b 2d f3 1b 01 00 	movq	72691(%rip), %r13 ## Objc message: +[NSPredicate predicateWithFormat:]
100008475:	31 c0 	xorl	%eax, %eax
100008477:	4c 89 f1 	movq	%r14, %rcx
10000847a:	41 ff d5 	callq	*%r13
10000847d:	48 89 c7 	movq	%rax, %rdi
100008480:	e8 4f b9 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008485:	48 89 c3 	movq	%rax, %rbx
100008488:	48 8b 35 b1 8e 01 00 	movq	102065(%rip), %rsi ## Objc selector ref: evaluateWithObject:
10000848f:	48 89 df 	movq	%rbx, %rdi
100008492:	4c 89 e2 	movq	%r12, %rdx
100008495:	41 ff d5 	callq	*%r13
100008498:	41 89 c6 	movl	%eax, %r14d
10000849b:	4c 8b 25 ce 1b 01 00 	movq	72654(%rip), %r12 ## literal pool symbol address: _objc_release
1000084a2:	4c 89 ff 	movq	%r15, %rdi
1000084a5:	41 ff d4 	callq	*%r12
1000084a8:	48 89 df 	movq	%rbx, %rdi
1000084ab:	41 ff d4 	callq	*%r12
1000084ae:	44 89 f0 	movl	%r14d, %eax
1000084b1:	48 83 c4 08 	addq	$8, %rsp
1000084b5:	5b 	popq	%rbx
1000084b6:	41 5c 	popq	%r12
1000084b8:	41 5d 	popq	%r13
1000084ba:	41 5e 	popq	%r14
1000084bc:	41 5f 	popq	%r15
1000084be:	5d 	popq	%rbp
1000084bf:	c3 	retq
-[UITextField(HCInputType) hcui_formatedCardNo:]:
1000084c0:	55 	pushq	%rbp
1000084c1:	48 89 e5 	movq	%rsp, %rbp
1000084c4:	41 57 	pushq	%r15
1000084c6:	41 56 	pushq	%r14
1000084c8:	41 55 	pushq	%r13
1000084ca:	41 54 	pushq	%r12
1000084cc:	53 	pushq	%rbx
1000084cd:	48 83 ec 28 	subq	$40, %rsp
1000084d1:	48 8b 35 70 8e 01 00 	movq	102000(%rip), %rsi ## Objc selector ref: stringByReplacingOccurrencesOfString:withString:
1000084d8:	48 8d 05 89 40 01 00 	leaq	82057(%rip), %rax ## Objc cfstring ref: @" "
1000084df:	48 8d 0d c2 3f 01 00 	leaq	81858(%rip), %rcx ## Objc cfstring ref: @""
1000084e6:	48 8b 1d 7b 1b 01 00 	movq	72571(%rip), %rbx ## Objc message: -[%rdi stringByReplacingOccurrencesOfString:withString:]
1000084ed:	48 89 d7 	movq	%rdx, %rdi
1000084f0:	48 89 c2 	movq	%rax, %rdx
1000084f3:	ff d3 	callq	*%rbx
1000084f5:	48 89 c7 	movq	%rax, %rdi
1000084f8:	e8 d7 b8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000084fd:	49 89 c7 	movq	%rax, %r15
100008500:	4c 8b 35 d1 8d 01 00 	movq	101841(%rip), %r14 ## Objc selector ref: length
100008507:	4c 89 ff 	movq	%r15, %rdi
10000850a:	4c 89 f6 	movq	%r14, %rsi
10000850d:	ff d3 	callq	*%rbx
10000850f:	48 83 f8 04 	cmpq	$4, %rax
100008513:	77 11 	ja	0x100008526
100008515:	4c 89 ff 	movq	%r15, %rdi
100008518:	ff 15 5a 1b 01 00 	callq	*72538(%rip) ## literal pool symbol address: _objc_retain
10000851e:	49 89 c6 	movq	%rax, %r14
100008521:	e9 ff 00 00 00 	jmp	0x100008625
100008526:	48 8b 3d 73 91 01 00 	movq	102771(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
10000852d:	48 8b 35 b4 8a 01 00 	movq	101044(%rip), %rsi ## Objc selector ref: array
100008534:	ff d3 	callq	*%rbx
100008536:	48 89 c7 	movq	%rax, %rdi
100008539:	e8 96 b8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000853e:	48 89 45 d0 	movq	%rax, -48(%rbp)
100008542:	4c 89 ff 	movq	%r15, %rdi
100008545:	4c 89 f6 	movq	%r14, %rsi
100008548:	ff d3 	callq	*%rbx
10000854a:	66 48 0f 6e c0 	movq	%rax, %xmm0
10000854f:	66 0f 62 05 79 15 01 00 	punpckldq	71033(%rip), %xmm0
100008557:	66 0f 5c 05 81 15 01 00 	subpd	71041(%rip), %xmm0
10000855f:	66 0f 7c c0 	haddpd	%xmm0, %xmm0
100008563:	f2 0f 59 05 85 15 01 00 	mulsd	71045(%rip), %xmm0
10000856b:	e8 e4 b6 00 00 	callq	0x100013c54 ## symbol stub for: _ceil
100008570:	f2 4c 0f 2c e0 	cvttsd2si	%xmm0, %r12
100008575:	4d 85 e4 	testq	%r12, %r12
100008578:	7e 7c 	jle	0x1000085f6
10000857a:	48 8b 05 cf 8d 01 00 	movq	101839(%rip), %rax ## Objc selector ref: substringWithRange:
100008581:	48 89 45 c0 	movq	%rax, -64(%rbp)
100008585:	48 8b 05 cc 89 01 00 	movq	100812(%rip), %rax ## Objc selector ref: addObject:
10000858c:	48 89 45 c8 	movq	%rax, -56(%rbp)
100008590:	45 31 ed 	xorl	%r13d, %r13d
100008593:	45 31 f6 	xorl	%r14d, %r14d
100008596:	4c 89 7d b8 	movq	%r15, -72(%rbp)
10000859a:	4c 89 ff 	movq	%r15, %rdi
10000859d:	48 8b 35 34 8d 01 00 	movq	101684(%rip), %rsi ## Objc selector ref: length
1000085a4:	ff d3 	callq	*%rbx
1000085a6:	4c 01 e8 	addq	%r13, %rax
1000085a9:	b9 04 00 00 00 	movl	$4, %ecx
1000085ae:	48 39 c8 	cmpq	%rcx, %rax
1000085b1:	48 0f 43 c1 	cmovaeq	%rcx, %rax
1000085b5:	4c 89 ff 	movq	%r15, %rdi
1000085b8:	48 8b 75 c0 	movq	-64(%rbp), %rsi
1000085bc:	4c 89 f2 	movq	%r14, %rdx
1000085bf:	48 89 c1 	movq	%rax, %rcx
1000085c2:	ff d3 	callq	*%rbx
1000085c4:	48 89 c7 	movq	%rax, %rdi
1000085c7:	e8 08 b8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000085cc:	49 89 c7 	movq	%rax, %r15
1000085cf:	48 8b 7d d0 	movq	-48(%rbp), %rdi
1000085d3:	48 8b 75 c8 	movq	-56(%rbp), %rsi
1000085d7:	4c 89 fa 	movq	%r15, %rdx
1000085da:	ff d3 	callq	*%rbx
1000085dc:	4c 89 ff 	movq	%r15, %rdi
1000085df:	4c 8b 7d b8 	movq	-72(%rbp), %r15
1000085e3:	ff 15 87 1a 01 00 	callq	*72327(%rip) ## literal pool symbol address: _objc_release
1000085e9:	49 83 c6 04 	addq	$4, %r14
1000085ed:	49 83 c5 fc 	addq	$-4, %r13
1000085f1:	49 ff cc 	decq	%r12
1000085f4:	75 a4 	jne	0x10000859a
1000085f6:	48 8b 35 5b 8d 01 00 	movq	101723(%rip), %rsi ## Objc selector ref: componentsJoinedByString:
1000085fd:	48 8d 15 64 3f 01 00 	leaq	81764(%rip), %rdx ## Objc cfstring ref: @" "
100008604:	48 8b 5d d0 	movq	-48(%rbp), %rbx
100008608:	48 89 df 	movq	%rbx, %rdi
10000860b:	ff 15 57 1a 01 00 	callq	*72279(%rip) ## Objc message: +[NSMutableArray componentsJoinedByString:]
100008611:	48 89 c7 	movq	%rax, %rdi
100008614:	e8 bb b7 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008619:	49 89 c6 	movq	%rax, %r14
10000861c:	48 89 df 	movq	%rbx, %rdi
10000861f:	ff 15 4b 1a 01 00 	callq	*72267(%rip) ## literal pool symbol address: _objc_release
100008625:	4c 89 ff 	movq	%r15, %rdi
100008628:	ff 15 42 1a 01 00 	callq	*72258(%rip) ## literal pool symbol address: _objc_release
10000862e:	4c 89 f7 	movq	%r14, %rdi
100008631:	48 83 c4 28 	addq	$40, %rsp
100008635:	5b 	popq	%rbx
100008636:	41 5c 	popq	%r12
100008638:	41 5d 	popq	%r13
10000863a:	41 5e 	popq	%r14
10000863c:	41 5f 	popq	%r15
10000863e:	5d 	popq	%rbp
10000863f:	e9 30 b7 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
-[UITextField(HCInputType) hcui_formatedPhoneNo:]:
100008644:	55 	pushq	%rbp
100008645:	48 89 e5 	movq	%rsp, %rbp
100008648:	41 57 	pushq	%r15
10000864a:	41 56 	pushq	%r14
10000864c:	41 55 	pushq	%r13
10000864e:	41 54 	pushq	%r12
100008650:	53 	pushq	%rbx
100008651:	48 83 ec 28 	subq	$40, %rsp
100008655:	48 8b 35 ec 8c 01 00 	movq	101612(%rip), %rsi ## Objc selector ref: stringByReplacingOccurrencesOfString:withString:
10000865c:	48 8d 05 05 3f 01 00 	leaq	81669(%rip), %rax ## Objc cfstring ref: @" "
100008663:	48 8d 0d 3e 3e 01 00 	leaq	81470(%rip), %rcx ## Objc cfstring ref: @""
10000866a:	4c 8b 3d f7 19 01 00 	movq	72183(%rip), %r15 ## Objc message: -[%rdi stringByReplacingOccurrencesOfString:withString:]
100008671:	48 89 d7 	movq	%rdx, %rdi
100008674:	48 89 c2 	movq	%rax, %rdx
100008677:	41 ff d7 	callq	*%r15
10000867a:	48 89 c7 	movq	%rax, %rdi
10000867d:	e8 52 b7 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008682:	48 89 c3 	movq	%rax, %rbx
100008685:	4c 8b 2d 4c 8c 01 00 	movq	101452(%rip), %r13 ## Objc selector ref: length
10000868c:	48 89 df 	movq	%rbx, %rdi
10000868f:	4c 89 ee 	movq	%r13, %rsi
100008692:	41 ff d7 	callq	*%r15
100008695:	48 83 f8 03 	cmpq	$3, %rax
100008699:	77 11 	ja	0x1000086ac
10000869b:	48 89 df 	movq	%rbx, %rdi
10000869e:	ff 15 d4 19 01 00 	callq	*72148(%rip) ## literal pool symbol address: _objc_retain
1000086a4:	49 89 c7 	movq	%rax, %r15
1000086a7:	e9 68 01 00 00 	jmp	0x100008814
1000086ac:	48 8b 3d ed 8f 01 00 	movq	102381(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
1000086b3:	48 8b 35 2e 89 01 00 	movq	100654(%rip), %rsi ## Objc selector ref: array
1000086ba:	41 ff d7 	callq	*%r15
1000086bd:	48 89 c7 	movq	%rax, %rdi
1000086c0:	e8 0f b7 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000086c5:	49 89 c6 	movq	%rax, %r14
1000086c8:	48 8b 35 81 8c 01 00 	movq	101505(%rip), %rsi ## Objc selector ref: substringWithRange:
1000086cf:	31 d2 	xorl	%edx, %edx
1000086d1:	b9 03 00 00 00 	movl	$3, %ecx
1000086d6:	48 89 df 	movq	%rbx, %rdi
1000086d9:	41 ff d7 	callq	*%r15
1000086dc:	48 89 c7 	movq	%rax, %rdi
1000086df:	e8 f0 b6 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000086e4:	48 8b 35 6d 88 01 00 	movq	100461(%rip), %rsi ## Objc selector ref: addObject:
1000086eb:	4c 89 75 c8 	movq	%r14, -56(%rbp)
1000086ef:	4c 89 f7 	movq	%r14, %rdi
1000086f2:	48 89 45 c0 	movq	%rax, -64(%rbp)
1000086f6:	48 89 c2 	movq	%rax, %rdx
1000086f9:	41 ff d7 	callq	*%r15
1000086fc:	48 8b 35 15 8c 01 00 	movq	101397(%rip), %rsi ## Objc selector ref: substringFromIndex:
100008703:	ba 03 00 00 00 	movl	$3, %edx
100008708:	48 89 5d b8 	movq	%rbx, -72(%rbp)
10000870c:	48 89 df 	movq	%rbx, %rdi
10000870f:	41 ff d7 	callq	*%r15
100008712:	48 89 c7 	movq	%rax, %rdi
100008715:	e8 ba b6 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000871a:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000871e:	48 89 c7 	movq	%rax, %rdi
100008721:	4c 89 ee 	movq	%r13, %rsi
100008724:	41 ff d7 	callq	*%r15
100008727:	66 48 0f 6e c0 	movq	%rax, %xmm0
10000872c:	66 0f 62 05 9c 13 01 00 	punpckldq	70556(%rip), %xmm0
100008734:	66 0f 5c 05 a4 13 01 00 	subpd	70564(%rip), %xmm0
10000873c:	66 0f 7c c0 	haddpd	%xmm0, %xmm0
100008740:	f2 0f 59 05 a8 13 01 00 	mulsd	70568(%rip), %xmm0
100008748:	e8 07 b5 00 00 	callq	0x100013c54 ## symbol stub for: _ceil
10000874d:	f2 48 0f 2c c8 	cvttsd2si	%xmm0, %rcx
100008752:	48 85 c9 	testq	%rcx, %rcx
100008755:	4d 89 fe 	movq	%r15, %r14
100008758:	7e 75 	jle	0x1000087cf
10000875a:	45 31 e4 	xorl	%r12d, %r12d
10000875d:	45 31 ff 	xorl	%r15d, %r15d
100008760:	48 89 4d b0 	movq	%rcx, -80(%rbp)
100008764:	48 8b 5d d0 	movq	-48(%rbp), %rbx
100008768:	48 89 df 	movq	%rbx, %rdi
10000876b:	4c 89 ee 	movq	%r13, %rsi
10000876e:	41 ff d6 	callq	*%r14
100008771:	4c 01 e0 	addq	%r12, %rax
100008774:	b9 04 00 00 00 	movl	$4, %ecx
100008779:	48 39 c8 	cmpq	%rcx, %rax
10000877c:	48 0f 43 c1 	cmovaeq	%rcx, %rax
100008780:	48 89 df 	movq	%rbx, %rdi
100008783:	48 8b 35 c6 8b 01 00 	movq	101318(%rip), %rsi ## Objc selector ref: substringWithRange:
10000878a:	4c 89 fa 	movq	%r15, %rdx
10000878d:	48 89 c1 	movq	%rax, %rcx
100008790:	41 ff d6 	callq	*%r14
100008793:	48 89 c7 	movq	%rax, %rdi
100008796:	e8 39 b6 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000879b:	4c 89 eb 	movq	%r13, %rbx
10000879e:	49 89 c5 	movq	%rax, %r13
1000087a1:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000087a5:	48 8b 35 ac 87 01 00 	movq	100268(%rip), %rsi ## Objc selector ref: addObject:
1000087ac:	4c 89 ea 	movq	%r13, %rdx
1000087af:	41 ff d6 	callq	*%r14
1000087b2:	4c 89 ef 	movq	%r13, %rdi
1000087b5:	49 89 dd 	movq	%rbx, %r13
1000087b8:	ff 15 b2 18 01 00 	callq	*71858(%rip) ## literal pool symbol address: _objc_release
1000087be:	48 8b 4d b0 	movq	-80(%rbp), %rcx
1000087c2:	49 83 c7 04 	addq	$4, %r15
1000087c6:	49 83 c4 fc 	addq	$-4, %r12
1000087ca:	48 ff c9 	decq	%rcx
1000087cd:	75 91 	jne	0x100008760
1000087cf:	48 8b 35 82 8b 01 00 	movq	101250(%rip), %rsi ## Objc selector ref: componentsJoinedByString:
1000087d6:	48 8d 15 8b 3d 01 00 	leaq	81291(%rip), %rdx ## Objc cfstring ref: @" "
1000087dd:	48 8b 5d c8 	movq	-56(%rbp), %rbx
1000087e1:	48 89 df 	movq	%rbx, %rdi
1000087e4:	ff 15 7e 18 01 00 	callq	*71806(%rip) ## Objc message: +[NSMutableArray componentsJoinedByString:]
1000087ea:	48 89 c7 	movq	%rax, %rdi
1000087ed:	e8 e2 b5 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000087f2:	49 89 c7 	movq	%rax, %r15
1000087f5:	4c 8b 35 74 18 01 00 	movq	71796(%rip), %r14 ## literal pool symbol address: _objc_release
1000087fc:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100008800:	41 ff d6 	callq	*%r14
100008803:	48 8b 7d c0 	movq	-64(%rbp), %rdi
100008807:	41 ff d6 	callq	*%r14
10000880a:	48 89 df 	movq	%rbx, %rdi
10000880d:	41 ff d6 	callq	*%r14
100008810:	48 8b 5d b8 	movq	-72(%rbp), %rbx
100008814:	48 89 df 	movq	%rbx, %rdi
100008817:	ff 15 53 18 01 00 	callq	*71763(%rip) ## literal pool symbol address: _objc_release
10000881d:	4c 89 ff 	movq	%r15, %rdi
100008820:	48 83 c4 28 	addq	$40, %rsp
100008824:	5b 	popq	%rbx
100008825:	41 5c 	popq	%r12
100008827:	41 5d 	popq	%r13
100008829:	41 5e 	popq	%r14
10000882b:	41 5f 	popq	%r15
10000882d:	5d 	popq	%rbp
10000882e:	e9 41 b5 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
-[UITextField(HCInputType) _hcui_formatedNumberCheckWithString:range:]:
100008833:	55 	pushq	%rbp
100008834:	48 89 e5 	movq	%rsp, %rbp
100008837:	41 57 	pushq	%r15
100008839:	41 56 	pushq	%r14
10000883b:	41 55 	pushq	%r13
10000883d:	41 54 	pushq	%r12
10000883f:	53 	pushq	%rbx
100008840:	48 83 ec 78 	subq	$120, %rsp
100008844:	4c 89 45 c8 	movq	%r8, -56(%rbp)
100008848:	48 89 4d b8 	movq	%rcx, -72(%rbp)
10000884c:	49 89 fc 	movq	%rdi, %r12
10000884f:	48 89 d7 	movq	%rdx, %rdi
100008852:	ff 15 20 18 01 00 	callq	*71712(%rip) ## literal pool symbol address: _objc_retain
100008858:	49 89 c6 	movq	%rax, %r14
10000885b:	4c 8b 3d 1e 8e 01 00 	movq	101918(%rip), %r15 ## Objc class ref: _OBJC_CLASS_$_NSMutableString
100008862:	48 8b 35 67 8a 01 00 	movq	100967(%rip), %rsi ## Objc selector ref: text
100008869:	4c 8b 2d f8 17 01 00 	movq	71672(%rip), %r13 ## Objc message: +[NSMutableString text]
100008870:	4c 89 e7 	movq	%r12, %rdi
100008873:	41 ff d5 	callq	*%r13
100008876:	48 89 c7 	movq	%rax, %rdi
100008879:	e8 56 b5 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000887e:	48 89 c3 	movq	%rax, %rbx
100008881:	48 8b 35 40 87 01 00 	movq	100160(%rip), %rsi ## Objc selector ref: stringWithString:
100008888:	4c 89 ff 	movq	%r15, %rdi
10000888b:	48 89 da 	movq	%rbx, %rdx
10000888e:	41 ff d5 	callq	*%r13
100008891:	48 89 c7 	movq	%rax, %rdi
100008894:	e8 3b b5 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008899:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000889d:	48 89 df 	movq	%rbx, %rdi
1000088a0:	ff 15 ca 17 01 00 	callq	*71626(%rip) ## literal pool symbol address: _objc_release
1000088a6:	48 8b 1d 2b 8a 01 00 	movq	100907(%rip), %rbx ## Objc selector ref: length
1000088ad:	4c 89 f7 	movq	%r14, %rdi
1000088b0:	48 89 de 	movq	%rbx, %rsi
1000088b3:	4d 89 ef 	movq	%r13, %r15
1000088b6:	41 ff d5 	callq	*%r13
1000088b9:	48 85 c0 	testq	%rax, %rax
1000088bc:	4c 89 75 b0 	movq	%r14, -80(%rbp)
1000088c0:	0f 84 99 02 00 00 	je	0x100008b5f
1000088c6:	48 8b 35 7b 8a 01 00 	movq	100987(%rip), %rsi ## Objc selector ref: stringByReplacingOccurrencesOfString:withString:
1000088cd:	4d 89 f5 	movq	%r14, %r13
1000088d0:	4c 8d 35 91 3c 01 00 	leaq	81041(%rip), %r14 ## Objc cfstring ref: @" "
1000088d7:	48 8d 1d ca 3b 01 00 	leaq	80842(%rip), %rbx ## Objc cfstring ref: @""
1000088de:	48 8b 7d d0 	movq	-48(%rbp), %rdi
1000088e2:	4c 89 f2 	movq	%r14, %rdx
1000088e5:	48 89 d9 	movq	%rbx, %rcx
1000088e8:	41 ff d7 	callq	*%r15
1000088eb:	48 89 c7 	movq	%rax, %rdi
1000088ee:	e8 e1 b4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000088f3:	4c 89 ef 	movq	%r13, %rdi
1000088f6:	48 8b 35 4b 8a 01 00 	movq	100939(%rip), %rsi ## Objc selector ref: stringByReplacingOccurrencesOfString:withString:
1000088fd:	4c 89 f2 	movq	%r14, %rdx
100008900:	48 89 d9 	movq	%rbx, %rcx
100008903:	48 89 c3 	movq	%rax, %rbx
100008906:	41 ff d7 	callq	*%r15
100008909:	48 89 c7 	movq	%rax, %rdi
10000890c:	e8 c3 b4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008911:	49 89 c5 	movq	%rax, %r13
100008914:	48 89 5d c0 	movq	%rbx, -64(%rbp)
100008918:	48 89 df 	movq	%rbx, %rdi
10000891b:	48 8b 1d b6 89 01 00 	movq	100790(%rip), %rbx ## Objc selector ref: length
100008922:	48 89 de 	movq	%rbx, %rsi
100008925:	41 ff d7 	callq	*%r15
100008928:	49 89 c6 	movq	%rax, %r14
10000892b:	4c 89 ef 	movq	%r13, %rdi
10000892e:	48 89 de 	movq	%rbx, %rsi
100008931:	41 ff d7 	callq	*%r15
100008934:	48 89 c3 	movq	%rax, %rbx
100008937:	4c 01 f3 	addq	%r14, %rbx
10000893a:	48 8b 35 ef 89 01 00 	movq	100847(%rip), %rsi ## Objc selector ref: hcui_limitLegnth
100008941:	4d 89 e6 	movq	%r12, %r14
100008944:	4c 89 e7 	movq	%r12, %rdi
100008947:	41 ff d7 	callq	*%r15
10000894a:	48 39 c3 	cmpq	%rax, %rbx
10000894d:	0f 87 d2 01 00 00 	ja	0x100008b25
100008953:	48 8b 35 3e 8a 01 00 	movq	100926(%rip), %rsi ## Objc selector ref: hcui_blankCountAfterCursorWithRange:
10000895a:	4d 89 f4 	movq	%r14, %r12
10000895d:	4c 89 e7 	movq	%r12, %rdi
100008960:	4c 89 6d 98 	movq	%r13, -104(%rbp)
100008964:	4c 8b 6d b8 	movq	-72(%rbp), %r13
100008968:	4c 89 ea 	movq	%r13, %rdx
10000896b:	48 8b 4d c8 	movq	-56(%rbp), %rcx
10000896f:	41 ff d7 	callq	*%r15
100008972:	48 89 45 a0 	movq	%rax, -96(%rbp)
100008976:	48 8b 35 23 8a 01 00 	movq	100899(%rip), %rsi ## Objc selector ref: selectedTextRange
10000897d:	4c 89 e7 	movq	%r12, %rdi
100008980:	41 ff d7 	callq	*%r15
100008983:	48 89 c7 	movq	%rax, %rdi
100008986:	e8 49 b4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000898b:	48 89 c3 	movq	%rax, %rbx
10000898e:	48 8b 35 13 8a 01 00 	movq	100883(%rip), %rsi ## Objc selector ref: end
100008995:	48 89 df 	movq	%rbx, %rdi
100008998:	41 ff d7 	callq	*%r15
10000899b:	48 89 c7 	movq	%rax, %rdi
10000899e:	e8 31 b4 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000089a3:	48 89 45 c8 	movq	%rax, -56(%rbp)
1000089a7:	48 89 df 	movq	%rbx, %rdi
1000089aa:	ff 15 c0 16 01 00 	callq	*71360(%rip) ## literal pool symbol address: _objc_release
1000089b0:	48 8b 5d d0 	movq	-48(%rbp), %rbx
1000089b4:	48 89 df 	movq	%rbx, %rdi
1000089b7:	48 8b 05 1a 89 01 00 	movq	100634(%rip), %rax ## Objc selector ref: length
1000089be:	48 89 c6 	movq	%rax, %rsi
1000089c1:	41 ff d7 	callq	*%r15
1000089c4:	48 89 45 a8 	movq	%rax, -88(%rbp)
1000089c8:	48 8b 35 31 89 01 00 	movq	100657(%rip), %rsi ## Objc selector ref: insertString:atIndex:
1000089cf:	48 89 df 	movq	%rbx, %rdi
1000089d2:	48 8b 55 b0 	movq	-80(%rbp), %rdx
1000089d6:	4c 89 e9 	movq	%r13, %rcx
1000089d9:	41 ff d7 	callq	*%r15
1000089dc:	48 8b 35 85 89 01 00 	movq	100741(%rip), %rsi ## Objc selector ref: _hcui_formatedNumbers:
1000089e3:	4c 89 e7 	movq	%r12, %rdi
1000089e6:	48 89 da 	movq	%rbx, %rdx
1000089e9:	41 ff d7 	callq	*%r15
1000089ec:	48 89 c7 	movq	%rax, %rdi
1000089ef:	e8 e0 b3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000089f4:	48 89 c3 	movq	%rax, %rbx
1000089f7:	48 8b 35 fa 88 01 00 	movq	100602(%rip), %rsi ## Objc selector ref: setText:
1000089fe:	4c 89 e7 	movq	%r12, %rdi
100008a01:	48 89 da 	movq	%rbx, %rdx
100008a04:	41 ff d7 	callq	*%r15
100008a07:	48 89 df 	movq	%rbx, %rdi
100008a0a:	4c 8b 35 5f 16 01 00 	movq	71263(%rip), %r14 ## literal pool symbol address: _objc_release
100008a11:	41 ff d6 	callq	*%r14
100008a14:	4c 89 e7 	movq	%r12, %rdi
100008a17:	48 8b 35 b2 88 01 00 	movq	100530(%rip), %rsi ## Objc selector ref: text
100008a1e:	4c 89 fb 	movq	%r15, %rbx
100008a21:	ff d3 	callq	*%rbx
100008a23:	48 89 c7 	movq	%rax, %rdi
100008a26:	e8 a9 b3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008a2b:	49 89 c7 	movq	%rax, %r15
100008a2e:	4c 89 ff 	movq	%r15, %rdi
100008a31:	48 8b 35 a0 88 01 00 	movq	100512(%rip), %rsi ## Objc selector ref: length
100008a38:	ff d3 	callq	*%rbx
100008a3a:	48 89 c3 	movq	%rax, %rbx
100008a3d:	4c 89 ff 	movq	%r15, %rdi
100008a40:	41 ff d6 	callq	*%r14
100008a43:	48 2b 5d a8 	subq	-88(%rbp), %rbx
100008a47:	49 01 dd 	addq	%rbx, %r13
100008a4a:	31 c9 	xorl	%ecx, %ecx
100008a4c:	4c 89 e7 	movq	%r12, %rdi
100008a4f:	48 8b 35 42 89 01 00 	movq	100674(%rip), %rsi ## Objc selector ref: hcui_blankCountAfterCursorWithRange:
100008a56:	4c 89 ea 	movq	%r13, %rdx
100008a59:	4c 8b 6d 98 	movq	-104(%rbp), %r13
100008a5d:	4c 8b 35 04 16 01 00 	movq	71172(%rip), %r14 ## Objc message: -[%rdi hcui_blankCountAfterCursorWithRange:]
100008a64:	41 ff d6 	callq	*%r14
100008a67:	48 8b 4d a0 	movq	-96(%rbp), %rcx
100008a6b:	4c 8d 04 0b 	leaq	(%rbx,%rcx), %r8
100008a6f:	49 29 c0 	subq	%rax, %r8
100008a72:	48 8b 35 ff 88 01 00 	movq	100607(%rip), %rsi ## Objc selector ref: positionFromPosition:inDirection:offset:
100008a79:	b9 02 00 00 00 	movl	$2, %ecx
100008a7e:	4c 89 e7 	movq	%r12, %rdi
100008a81:	48 8b 55 c8 	movq	-56(%rbp), %rdx
100008a85:	41 ff d6 	callq	*%r14
100008a88:	48 89 c7 	movq	%rax, %rdi
100008a8b:	e8 44 b3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008a90:	49 89 c6 	movq	%rax, %r14
100008a93:	31 ff 	xorl	%edi, %edi
100008a95:	be 40 42 0f 00 	movl	$1000000, %esi
100008a9a:	e8 51 b2 00 00 	callq	0x100013cf0 ## symbol stub for: _dispatch_time
100008a9f:	48 8b 0d 7a 15 01 00 	movq	71034(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100008aa6:	48 8d 9d 68 ff ff ff 	leaq	-152(%rbp), %rbx
100008aad:	48 89 0b 	movq	%rcx, (%rbx)
100008ab0:	b9 00 00 00 c2 	movl	$3254779904, %ecx
100008ab5:	48 89 4b 08 	movq	%rcx, 8(%rbx)
100008ab9:	48 8d 0d 17 02 00 00 	leaq	"___70-[UITextField(HCInputType) _hcui_formatedNumberCheckWithString:range:]_block_invoke"(%rip), %rcx
100008ac0:	48 89 4b 10 	movq	%rcx, 16(%rbx)
100008ac4:	49 89 c7 	movq	%rax, %r15
100008ac7:	48 8d 05 62 25 01 00 	leaq	___block_descriptor_tmp(%rip), %rax
100008ace:	48 89 43 18 	movq	%rax, 24(%rbx)
100008ad2:	4c 89 63 20 	movq	%r12, 32(%rbx)
100008ad6:	4c 89 73 28 	movq	%r14, 40(%rbx)
100008ada:	4c 89 f7 	movq	%r14, %rdi
100008add:	ff 15 95 15 01 00 	callq	*71061(%rip) ## literal pool symbol address: _objc_retain
100008ae3:	49 89 c6 	movq	%rax, %r14
100008ae6:	48 8b 35 5b 15 01 00 	movq	71003(%rip), %rsi ## literal pool symbol address: __dispatch_main_q
100008aed:	4c 89 ff 	movq	%r15, %rdi
100008af0:	48 89 da 	movq	%rbx, %rdx
100008af3:	e8 98 b1 00 00 	callq	0x100013c90 ## symbol stub for: _dispatch_after
100008af8:	48 8b 35 91 88 01 00 	movq	100497(%rip), %rsi ## Objc selector ref: sendActionsForControlEvents:
100008aff:	ba 00 00 02 00 	movl	$131072, %edx
100008b04:	4c 89 e7 	movq	%r12, %rdi
100008b07:	ff 15 5b 15 01 00 	callq	*71003(%rip) ## Objc message: -[%rdi sendActionsForControlEvents:]
100008b0d:	48 8b 7b 28 	movq	40(%rbx), %rdi
100008b11:	48 8b 1d 58 15 01 00 	movq	71000(%rip), %rbx ## literal pool symbol address: _objc_release
100008b18:	ff d3 	callq	*%rbx
100008b1a:	4c 89 f7 	movq	%r14, %rdi
100008b1d:	ff d3 	callq	*%rbx
100008b1f:	48 8b 7d c8 	movq	-56(%rbp), %rdi
100008b23:	ff d3 	callq	*%rbx
100008b25:	48 8b 1d 44 15 01 00 	movq	70980(%rip), %rbx ## literal pool symbol address: _objc_release
100008b2c:	4c 89 ef 	movq	%r13, %rdi
100008b2f:	ff d3 	callq	*%rbx
100008b31:	48 8b 7d c0 	movq	-64(%rbp), %rdi
100008b35:	ff d3 	callq	*%rbx
100008b37:	45 31 f6 	xorl	%r14d, %r14d
100008b3a:	48 8b 1d 2f 15 01 00 	movq	70959(%rip), %rbx ## literal pool symbol address: _objc_release
100008b41:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100008b45:	ff d3 	callq	*%rbx
100008b47:	48 8b 7d b0 	movq	-80(%rbp), %rdi
100008b4b:	ff d3 	callq	*%rbx
100008b4d:	44 89 f0 	movl	%r14d, %eax
100008b50:	48 83 c4 78 	addq	$120, %rsp
100008b54:	5b 	popq	%rbx
100008b55:	41 5c 	popq	%r12
100008b57:	41 5d 	popq	%r13
100008b59:	41 5e 	popq	%r14
100008b5b:	41 5f 	popq	%r15
100008b5d:	5d 	popq	%rbp
100008b5e:	c3 	retq
100008b5f:	4d 89 e5 	movq	%r12, %r13
100008b62:	4c 8b 65 c8 	movq	-56(%rbp), %r12
100008b66:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100008b6a:	48 89 de 	movq	%rbx, %rsi
100008b6d:	ff 15 f5 14 01 00 	callq	*70901(%rip) ## Objc message: -[%rdi sendActionsForControlEvents:]
100008b73:	41 b6 01 	movb	$1, %r14b
100008b76:	48 83 f8 02 	cmpq	$2, %rax
100008b7a:	72 be 	jb	0x100008b3a
100008b7c:	48 8b 35 cd 87 01 00 	movq	100301(%rip), %rsi ## Objc selector ref: substringWithRange:
100008b83:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100008b87:	4c 8b 7d b8 	movq	-72(%rbp), %r15
100008b8b:	4c 89 fa 	movq	%r15, %rdx
100008b8e:	4c 89 e3 	movq	%r12, %rbx
100008b91:	48 89 d9 	movq	%rbx, %rcx
100008b94:	4c 8b 35 cd 14 01 00 	movq	70861(%rip), %r14 ## Objc message: -[%rdi substringWithRange:]
100008b9b:	41 ff d6 	callq	*%r14
100008b9e:	48 89 c7 	movq	%rax, %rdi
100008ba1:	e8 2e b2 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008ba6:	48 8b 35 73 85 01 00 	movq	99699(%rip), %rsi ## Objc selector ref: isEqualToString:
100008bad:	48 8d 15 b4 39 01 00 	leaq	80308(%rip), %rdx ## Objc cfstring ref: @" "
100008bb4:	48 89 45 c0 	movq	%rax, -64(%rbp)
100008bb8:	48 89 c7 	movq	%rax, %rdi
100008bbb:	41 ff d6 	callq	*%r14
100008bbe:	84 c0 	testb	%al, %al
100008bc0:	4d 89 ec 	movq	%r13, %r12
100008bc3:	74 1f 	je	0x100008be4
100008bc5:	49 ff cf 	decq	%r15
100008bc8:	48 8b 35 91 87 01 00 	movq	100241(%rip), %rsi ## Objc selector ref: replaceCharactersInRange:withString:
100008bcf:	4c 8d 05 d2 38 01 00 	leaq	80082(%rip), %r8 ## Objc cfstring ref: @""
100008bd6:	b9 02 00 00 00 	movl	$2, %ecx
100008bdb:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100008bdf:	4c 89 fa 	movq	%r15, %rdx
100008be2:	eb 18 	jmp	0x100008bfc
100008be4:	48 8b 35 75 87 01 00 	movq	100213(%rip), %rsi ## Objc selector ref: replaceCharactersInRange:withString:
100008beb:	4c 8d 05 b6 38 01 00 	leaq	80054(%rip), %r8 ## Objc cfstring ref: @""
100008bf2:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100008bf6:	4c 89 fa 	movq	%r15, %rdx
100008bf9:	48 89 d9 	movq	%rbx, %rcx
100008bfc:	ff 15 66 14 01 00 	callq	*70758(%rip) ## Objc message: -[%rdi replaceCharactersInRange:withString:]
100008c02:	48 8b 35 5f 87 01 00 	movq	100191(%rip), %rsi ## Objc selector ref: _hcui_formatedNumbers:
100008c09:	4c 89 e7 	movq	%r12, %rdi
100008c0c:	48 8b 55 d0 	movq	-48(%rbp), %rdx
100008c10:	41 ff d6 	callq	*%r14
100008c13:	48 89 c7 	movq	%rax, %rdi
100008c16:	e8 b9 b1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008c1b:	48 89 c3 	movq	%rax, %rbx
100008c1e:	48 8b 35 d3 86 01 00 	movq	100051(%rip), %rsi ## Objc selector ref: setText:
100008c25:	4c 89 e7 	movq	%r12, %rdi
100008c28:	48 89 da 	movq	%rbx, %rdx
100008c2b:	41 ff d6 	callq	*%r14
100008c2e:	4c 8b 2d 3b 14 01 00 	movq	70715(%rip), %r13 ## literal pool symbol address: _objc_release
100008c35:	48 89 df 	movq	%rbx, %rdi
100008c38:	41 ff d5 	callq	*%r13
100008c3b:	48 8b 35 2e 87 01 00 	movq	100142(%rip), %rsi ## Objc selector ref: beginningOfDocument
100008c42:	4c 89 e7 	movq	%r12, %rdi
100008c45:	41 ff d6 	callq	*%r14
100008c48:	48 89 c7 	movq	%rax, %rdi
100008c4b:	e8 84 b1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008c50:	48 89 c3 	movq	%rax, %rbx
100008c53:	48 8b 35 1e 87 01 00 	movq	100126(%rip), %rsi ## Objc selector ref: positionFromPosition:inDirection:offset:
100008c5a:	b9 02 00 00 00 	movl	$2, %ecx
100008c5f:	4c 89 e7 	movq	%r12, %rdi
100008c62:	48 89 da 	movq	%rbx, %rdx
100008c65:	4d 89 f8 	movq	%r15, %r8
100008c68:	41 ff d6 	callq	*%r14
100008c6b:	48 89 c7 	movq	%rax, %rdi
100008c6e:	e8 61 b1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008c73:	4d 89 f7 	movq	%r14, %r15
100008c76:	49 89 c6 	movq	%rax, %r14
100008c79:	48 89 df 	movq	%rbx, %rdi
100008c7c:	41 ff d5 	callq	*%r13
100008c7f:	48 8b 35 fa 86 01 00 	movq	100090(%rip), %rsi ## Objc selector ref: textRangeFromPosition:toPosition:
100008c86:	4c 89 e7 	movq	%r12, %rdi
100008c89:	4c 89 f2 	movq	%r14, %rdx
100008c8c:	4c 89 f1 	movq	%r14, %rcx
100008c8f:	41 ff d7 	callq	*%r15
100008c92:	48 89 c7 	movq	%rax, %rdi
100008c95:	e8 3a b1 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008c9a:	48 89 c3 	movq	%rax, %rbx
100008c9d:	48 8b 35 e4 86 01 00 	movq	100068(%rip), %rsi ## Objc selector ref: setSelectedTextRange:
100008ca4:	4c 89 e7 	movq	%r12, %rdi
100008ca7:	48 89 da 	movq	%rbx, %rdx
100008caa:	41 ff d7 	callq	*%r15
100008cad:	48 89 df 	movq	%rbx, %rdi
100008cb0:	41 ff d5 	callq	*%r13
100008cb3:	48 8b 35 d6 86 01 00 	movq	100054(%rip), %rsi ## Objc selector ref: sendActionsForControlEvents:
100008cba:	ba 00 00 02 00 	movl	$131072, %edx
100008cbf:	4c 89 e7 	movq	%r12, %rdi
100008cc2:	41 ff d7 	callq	*%r15
100008cc5:	4c 89 f7 	movq	%r14, %rdi
100008cc8:	41 ff d5 	callq	*%r13
100008ccb:	48 8b 7d c0 	movq	-64(%rbp), %rdi
100008ccf:	41 ff d5 	callq	*%r13
100008cd2:	e9 60 fe ff ff 	jmp	0x100008b37
___70-[UITextField(HCInputType) _hcui_formatedNumberCheckWithString:range:]_block_invoke:
100008cd7:	55 	pushq	%rbp
100008cd8:	48 89 e5 	movq	%rsp, %rbp
100008cdb:	41 57 	pushq	%r15
100008cdd:	41 56 	pushq	%r14
100008cdf:	53 	pushq	%rbx
100008ce0:	50 	pushq	%rax
100008ce1:	4c 8b 77 20 	movq	32(%rdi), %r14
100008ce5:	48 8b 57 28 	movq	40(%rdi), %rdx
100008ce9:	48 8b 35 90 86 01 00 	movq	99984(%rip), %rsi ## Objc selector ref: textRangeFromPosition:toPosition:
100008cf0:	4c 8b 3d 71 13 01 00 	movq	70513(%rip), %r15 ## Objc message: -[%rdi textRangeFromPosition:toPosition:]
100008cf7:	4c 89 f7 	movq	%r14, %rdi
100008cfa:	48 89 d1 	movq	%rdx, %rcx
100008cfd:	41 ff d7 	callq	*%r15
100008d00:	48 89 c7 	movq	%rax, %rdi
100008d03:	e8 cc b0 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008d08:	48 89 c3 	movq	%rax, %rbx
100008d0b:	48 8b 35 76 86 01 00 	movq	99958(%rip), %rsi ## Objc selector ref: setSelectedTextRange:
100008d12:	4c 89 f7 	movq	%r14, %rdi
100008d15:	48 89 da 	movq	%rbx, %rdx
100008d18:	41 ff d7 	callq	*%r15
100008d1b:	48 89 df 	movq	%rbx, %rdi
100008d1e:	48 83 c4 08 	addq	$8, %rsp
100008d22:	5b 	popq	%rbx
100008d23:	41 5e 	popq	%r14
100008d25:	41 5f 	popq	%r15
100008d27:	5d 	popq	%rbp
100008d28:	ff 25 42 13 01 00 	jmpq	*70466(%rip) ## literal pool symbol address: _objc_release
___copy_helper_block_:
100008d2e:	55 	pushq	%rbp
100008d2f:	48 89 e5 	movq	%rsp, %rbp
100008d32:	41 56 	pushq	%r14
100008d34:	53 	pushq	%rbx
100008d35:	48 89 f3 	movq	%rsi, %rbx
100008d38:	48 8b 7b 20 	movq	32(%rbx), %rdi
100008d3c:	4c 8b 35 35 13 01 00 	movq	70453(%rip), %r14 ## literal pool symbol address: _objc_retain
100008d43:	41 ff d6 	callq	*%r14
100008d46:	48 8b 7b 28 	movq	40(%rbx), %rdi
100008d4a:	4c 89 f0 	movq	%r14, %rax
100008d4d:	5b 	popq	%rbx
100008d4e:	41 5e 	popq	%r14
100008d50:	5d 	popq	%rbp
100008d51:	ff e0 	jmpq	*%rax
___destroy_helper_block_:
100008d53:	55 	pushq	%rbp
100008d54:	48 89 e5 	movq	%rsp, %rbp
100008d57:	41 56 	pushq	%r14
100008d59:	53 	pushq	%rbx
100008d5a:	48 89 fb 	movq	%rdi, %rbx
100008d5d:	48 8b 7b 20 	movq	32(%rbx), %rdi
100008d61:	4c 8b 35 08 13 01 00 	movq	70408(%rip), %r14 ## literal pool symbol address: _objc_release
100008d68:	41 ff d6 	callq	*%r14
100008d6b:	48 8b 7b 28 	movq	40(%rbx), %rdi
100008d6f:	4c 89 f0 	movq	%r14, %rax
100008d72:	5b 	popq	%rbx
100008d73:	41 5e 	popq	%r14
100008d75:	5d 	popq	%rbp
100008d76:	ff e0 	jmpq	*%rax
-[UITextField(HCInputType) _hcui_formatedNumbers:]:
100008d78:	55 	pushq	%rbp
100008d79:	48 89 e5 	movq	%rsp, %rbp
100008d7c:	41 56 	pushq	%r14
100008d7e:	53 	pushq	%rbx
100008d7f:	48 89 fb 	movq	%rdi, %rbx
100008d82:	48 89 d7 	movq	%rdx, %rdi
100008d85:	ff 15 ed 12 01 00 	callq	*70381(%rip) ## literal pool symbol address: _objc_retain
100008d8b:	49 89 c6 	movq	%rax, %r14
100008d8e:	48 8b 35 eb 84 01 00 	movq	99563(%rip), %rsi ## Objc selector ref: hcui_inputType
100008d95:	48 89 df 	movq	%rbx, %rdi
100008d98:	ff 15 ca 12 01 00 	callq	*70346(%rip) ## Objc message: -[%rdi hcui_inputType]
100008d9e:	48 83 f8 03 	cmpq	$3, %rax
100008da2:	74 0f 	je	0x100008db3
100008da4:	48 83 f8 02 	cmpq	$2, %rax
100008da8:	75 3c 	jne	0x100008de6
100008daa:	48 8b 35 ff 85 01 00 	movq	99839(%rip), %rsi ## Objc selector ref: hcui_formatedPhoneNo:
100008db1:	eb 07 	jmp	0x100008dba
100008db3:	48 8b 35 fe 85 01 00 	movq	99838(%rip), %rsi ## Objc selector ref: hcui_formatedCardNo:
100008dba:	48 89 df 	movq	%rbx, %rdi
100008dbd:	4c 89 f2 	movq	%r14, %rdx
100008dc0:	ff 15 a2 12 01 00 	callq	*70306(%rip) ## Objc message: -[%rdi hcui_formatedCardNo:]
100008dc6:	48 89 c7 	movq	%rax, %rdi
100008dc9:	e8 06 b0 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008dce:	48 89 c3 	movq	%rax, %rbx
100008dd1:	4c 89 f7 	movq	%r14, %rdi
100008dd4:	ff 15 96 12 01 00 	callq	*70294(%rip) ## literal pool symbol address: _objc_release
100008dda:	48 89 df 	movq	%rbx, %rdi
100008ddd:	5b 	popq	%rbx
100008dde:	41 5e 	popq	%r14
100008de0:	5d 	popq	%rbp
100008de1:	e9 8e af 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
100008de6:	4c 89 f7 	movq	%r14, %rdi
100008de9:	ff 15 89 12 01 00 	callq	*70281(%rip) ## literal pool symbol address: _objc_retain
100008def:	eb dd 	jmp	0x100008dce
-[UITextField(HCInputType) hcui_inputType]:
100008df1:	55 	pushq	%rbp
100008df2:	48 89 e5 	movq	%rsp, %rbp
100008df5:	41 56 	pushq	%r14
100008df7:	53 	pushq	%rbx
100008df8:	48 8d 35 21 98 01 00 	leaq	_HC_INPUTED_TYPE(%rip), %rsi
100008dff:	e8 94 af 00 00 	callq	0x100013d98 ## symbol stub for: _objc_getAssociatedObject
100008e04:	48 89 c7 	movq	%rax, %rdi
100008e07:	e8 c8 af 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008e0c:	48 89 c3 	movq	%rax, %rbx
100008e0f:	48 8b 35 aa 85 01 00 	movq	99754(%rip), %rsi ## Objc selector ref: integerValue
100008e16:	48 89 df 	movq	%rbx, %rdi
100008e19:	ff 15 49 12 01 00 	callq	*70217(%rip) ## Objc message: -[%rdi integerValue]
100008e1f:	49 89 c6 	movq	%rax, %r14
100008e22:	48 89 df 	movq	%rbx, %rdi
100008e25:	ff 15 45 12 01 00 	callq	*70213(%rip) ## literal pool symbol address: _objc_release
100008e2b:	4c 89 f0 	movq	%r14, %rax
100008e2e:	5b 	popq	%rbx
100008e2f:	41 5e 	popq	%r14
100008e31:	5d 	popq	%rbp
100008e32:	c3 	retq
-[UITextField(HCInputType) setHcui_inputType:]:
100008e33:	55 	pushq	%rbp
100008e34:	48 89 e5 	movq	%rsp, %rbp
100008e37:	41 57 	pushq	%r15
100008e39:	41 56 	pushq	%r14
100008e3b:	53 	pushq	%rbx
100008e3c:	50 	pushq	%rax
100008e3d:	49 89 fe 	movq	%rdi, %r14
100008e40:	48 8b 3d 81 88 01 00 	movq	100481(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
100008e47:	48 8b 35 7a 85 01 00 	movq	99706(%rip), %rsi ## Objc selector ref: numberWithInteger:
100008e4e:	4c 8b 3d 13 12 01 00 	movq	70163(%rip), %r15 ## Objc message: +[NSNumber numberWithInteger:]
100008e55:	41 ff d7 	callq	*%r15
100008e58:	48 89 c7 	movq	%rax, %rdi
100008e5b:	e8 74 af 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008e60:	48 89 c3 	movq	%rax, %rbx
100008e63:	48 8d 35 b6 97 01 00 	leaq	_HC_INPUTED_TYPE(%rip), %rsi
100008e6a:	b9 01 00 00 00 	movl	$1, %ecx
100008e6f:	4c 89 f7 	movq	%r14, %rdi
100008e72:	48 89 da 	movq	%rbx, %rdx
100008e75:	e8 66 af 00 00 	callq	0x100013de0 ## symbol stub for: _objc_setAssociatedObject
100008e7a:	48 89 df 	movq	%rbx, %rdi
100008e7d:	ff 15 ed 11 01 00 	callq	*70125(%rip) ## literal pool symbol address: _objc_release
100008e83:	48 8b 35 46 85 01 00 	movq	99654(%rip), %rsi ## Objc selector ref: configKeyboardType
100008e8a:	4c 89 f7 	movq	%r14, %rdi
100008e8d:	4c 89 f8 	movq	%r15, %rax
100008e90:	48 83 c4 08 	addq	$8, %rsp
100008e94:	5b 	popq	%rbx
100008e95:	41 5e 	popq	%r14
100008e97:	41 5f 	popq	%r15
100008e99:	5d 	popq	%rbp
100008e9a:	ff e0 	jmpq	*%rax
-[UITextField(HCInputType) hcui_limitLegnth]:
100008e9c:	55 	pushq	%rbp
100008e9d:	48 89 e5 	movq	%rsp, %rbp
100008ea0:	41 56 	pushq	%r14
100008ea2:	53 	pushq	%rbx
100008ea3:	48 8d 35 77 97 01 00 	leaq	_HC_INPUTED_LIMIT_LENGTH(%rip), %rsi
100008eaa:	e8 e9 ae 00 00 	callq	0x100013d98 ## symbol stub for: _objc_getAssociatedObject
100008eaf:	48 89 c7 	movq	%rax, %rdi
100008eb2:	e8 1d af 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008eb7:	48 89 c3 	movq	%rax, %rbx
100008eba:	48 85 db 	testq	%rbx, %rbx
100008ebd:	74 24 	je	0x100008ee3
100008ebf:	48 8b 35 fa 84 01 00 	movq	99578(%rip), %rsi ## Objc selector ref: integerValue
100008ec6:	48 89 df 	movq	%rbx, %rdi
100008ec9:	ff 15 99 11 01 00 	callq	*70041(%rip) ## Objc message: -[%rdi integerValue]
100008ecf:	49 89 c6 	movq	%rax, %r14
100008ed2:	48 89 df 	movq	%rbx, %rdi
100008ed5:	ff 15 95 11 01 00 	callq	*70037(%rip) ## literal pool symbol address: _objc_release
100008edb:	4c 89 f0 	movq	%r14, %rax
100008ede:	5b 	popq	%rbx
100008edf:	41 5e 	popq	%r14
100008ee1:	5d 	popq	%rbp
100008ee2:	c3 	retq
100008ee3:	49 be ff ff ff ff ff ff ff 7f 	movabsq	$9223372036854775807, %r14
100008eed:	eb e3 	jmp	0x100008ed2
-[UITextField(HCInputType) setHcui_limitLegnth:]:
100008eef:	55 	pushq	%rbp
100008ef0:	48 89 e5 	movq	%rsp, %rbp
100008ef3:	41 56 	pushq	%r14
100008ef5:	53 	pushq	%rbx
100008ef6:	49 89 fe 	movq	%rdi, %r14
100008ef9:	48 8b 3d c8 87 01 00 	movq	100296(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
100008f00:	48 8b 35 c1 84 01 00 	movq	99521(%rip), %rsi ## Objc selector ref: numberWithInteger:
100008f07:	ff 15 5b 11 01 00 	callq	*69979(%rip) ## Objc message: +[NSNumber numberWithInteger:]
100008f0d:	48 89 c7 	movq	%rax, %rdi
100008f10:	e8 bf ae 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008f15:	48 89 c3 	movq	%rax, %rbx
100008f18:	48 8d 35 02 97 01 00 	leaq	_HC_INPUTED_LIMIT_LENGTH(%rip), %rsi
100008f1f:	b9 01 00 00 00 	movl	$1, %ecx
100008f24:	4c 89 f7 	movq	%r14, %rdi
100008f27:	48 89 da 	movq	%rbx, %rdx
100008f2a:	e8 b1 ae 00 00 	callq	0x100013de0 ## symbol stub for: _objc_setAssociatedObject
100008f2f:	48 89 df 	movq	%rbx, %rdi
100008f32:	5b 	popq	%rbx
100008f33:	41 5e 	popq	%r14
100008f35:	5d 	popq	%rbp
100008f36:	ff 25 34 11 01 00 	jmpq	*69940(%rip) ## literal pool symbol address: _objc_release
-[UITextField(HCInputType) hcui_maxValue]:
100008f3c:	55 	pushq	%rbp
100008f3d:	48 89 e5 	movq	%rsp, %rbp
100008f40:	53 	pushq	%rbx
100008f41:	50 	pushq	%rax
100008f42:	48 8d 35 d9 96 01 00 	leaq	_HC_INPUTED_MAX_VALUE(%rip), %rsi
100008f49:	e8 4a ae 00 00 	callq	0x100013d98 ## symbol stub for: _objc_getAssociatedObject
100008f4e:	48 89 c7 	movq	%rax, %rdi
100008f51:	e8 7e ae 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008f56:	48 89 c3 	movq	%rax, %rbx
100008f59:	48 85 db 	testq	%rbx, %rbx
100008f5c:	74 2a 	je	0x100008f88
100008f5e:	48 8b 35 a3 83 01 00 	movq	99235(%rip), %rsi ## Objc selector ref: doubleValue
100008f65:	48 89 df 	movq	%rbx, %rdi
100008f68:	ff 15 fa 10 01 00 	callq	*69882(%rip) ## Objc message: -[%rdi doubleValue]
100008f6e:	f2 0f 11 45 f0 	movsd	%xmm0, -16(%rbp)
100008f73:	48 89 df 	movq	%rbx, %rdi
100008f76:	ff 15 f4 10 01 00 	callq	*69876(%rip) ## literal pool symbol address: _objc_release
100008f7c:	f2 0f 10 45 f0 	movsd	-16(%rbp), %xmm0
100008f81:	48 83 c4 08 	addq	$8, %rsp
100008f85:	5b 	popq	%rbx
100008f86:	5d 	popq	%rbp
100008f87:	c3 	retq
100008f88:	f2 0f 10 05 68 0b 01 00 	movsd	68456(%rip), %xmm0
100008f90:	eb dc 	jmp	0x100008f6e
-[UITextField(HCInputType) setHcui_maxValue:]:
100008f92:	55 	pushq	%rbp
100008f93:	48 89 e5 	movq	%rsp, %rbp
100008f96:	41 56 	pushq	%r14
100008f98:	53 	pushq	%rbx
100008f99:	49 89 fe 	movq	%rdi, %r14
100008f9c:	48 8b 3d 25 87 01 00 	movq	100133(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSNumber
100008fa3:	48 8b 35 2e 84 01 00 	movq	99374(%rip), %rsi ## Objc selector ref: numberWithDouble:
100008faa:	ff 15 b8 10 01 00 	callq	*69816(%rip) ## Objc message: +[NSNumber numberWithDouble:]
100008fb0:	48 89 c7 	movq	%rax, %rdi
100008fb3:	e8 1c ae 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100008fb8:	48 89 c3 	movq	%rax, %rbx
100008fbb:	48 8d 35 60 96 01 00 	leaq	_HC_INPUTED_MAX_VALUE(%rip), %rsi
100008fc2:	b9 01 00 00 00 	movl	$1, %ecx
100008fc7:	4c 89 f7 	movq	%r14, %rdi
100008fca:	48 89 da 	movq	%rbx, %rdx
100008fcd:	e8 0e ae 00 00 	callq	0x100013de0 ## symbol stub for: _objc_setAssociatedObject
100008fd2:	48 89 df 	movq	%rbx, %rdi
100008fd5:	5b 	popq	%rbx
100008fd6:	41 5e 	popq	%r14
100008fd8:	5d 	popq	%rbp
100008fd9:	ff 25 91 10 01 00 	jmpq	*69777(%rip) ## literal pool symbol address: _objc_release
100008fdf:	90 	nop
+[NSObject(Aspects) aspect_hookSelector:withOptions:usingBlock:error:]:
100008fe0:	55 	pushq	%rbp
100008fe1:	48 89 e5 	movq	%rsp, %rbp
100008fe4:	48 83 ec 50 	subq	$80, %rsp
100008fe8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100008fec:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100008ff0:	48 89 55 e8 	movq	%rdx, -24(%rbp)
100008ff4:	48 89 4d e0 	movq	%rcx, -32(%rbp)
100008ff8:	48 c7 45 d8 00 00 00 00 	movq	$0, -40(%rbp)
100009000:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
100009004:	48 89 cf 	movq	%rcx, %rdi
100009007:	4c 89 c6 	movq	%r8, %rsi
10000900a:	48 89 4d c8 	movq	%rcx, -56(%rbp)
10000900e:	4c 89 4d c0 	movq	%r9, -64(%rbp)
100009012:	e8 db ad 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009017:	48 8b 4d c0 	movq	-64(%rbp), %rcx
10000901b:	48 89 4d d0 	movq	%rcx, -48(%rbp)
10000901f:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100009023:	48 8b 75 e8 	movq	-24(%rbp), %rsi
100009027:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000902b:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000902f:	4c 8b 45 d0 	movq	-48(%rbp), %r8
100009033:	e8 38 00 00 00 	callq	_aspect_add
100009038:	48 89 c7 	movq	%rax, %rdi
10000903b:	e8 94 ad 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009040:	45 31 d2 	xorl	%r10d, %r10d
100009043:	44 89 d6 	movl	%r10d, %esi
100009046:	48 8b 7d c8 	movq	-56(%rbp), %rdi
10000904a:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000904e:	e8 9f ad 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009053:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100009057:	48 83 c4 50 	addq	$80, %rsp
10000905b:	5d 	popq	%rbp
10000905c:	e9 13 ad 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
100009061:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_add:
100009070:	55 	pushq	%rbp
100009071:	48 89 e5 	movq	%rsp, %rbp
100009074:	48 81 ec e0 01 00 00 	subq	$480, %rsp
10000907b:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10000907f:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
100009087:	48 89 bd 10 ff ff ff 	movq	%rdi, -240(%rbp)
10000908e:	48 89 c7 	movq	%rax, %rdi
100009091:	48 8b 85 10 ff ff ff 	movq	-240(%rbp), %rax
100009098:	48 89 b5 08 ff ff ff 	movq	%rsi, -248(%rbp)
10000909f:	48 89 c6 	movq	%rax, %rsi
1000090a2:	48 89 8d 00 ff ff ff 	movq	%rcx, -256(%rbp)
1000090a9:	48 89 95 f8 fe ff ff 	movq	%rdx, -264(%rbp)
1000090b0:	4c 89 85 f0 fe ff ff 	movq	%r8, -272(%rbp)
1000090b7:	e8 36 ad 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000090bc:	48 8d 7d e0 	leaq	-32(%rbp), %rdi
1000090c0:	48 8b 85 08 ff ff ff 	movq	-248(%rbp), %rax
1000090c7:	48 89 45 f0 	movq	%rax, -16(%rbp)
1000090cb:	48 8b 8d f8 fe ff ff 	movq	-264(%rbp), %rcx
1000090d2:	48 89 4d e8 	movq	%rcx, -24(%rbp)
1000090d6:	48 c7 45 e0 00 00 00 00 	movq	$0, -32(%rbp)
1000090de:	48 8b b5 00 ff ff ff 	movq	-256(%rbp), %rsi
1000090e5:	e8 08 ad 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000090ea:	48 8b 85 f0 fe ff ff 	movq	-272(%rbp), %rax
1000090f1:	48 89 45 d8 	movq	%rax, -40(%rbp)
1000090f5:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
1000090fa:	0f 95 c0 	setne	%al
1000090fd:	34 ff 	xorb	$-1, %al
1000090ff:	24 01 	andb	$1, %al
100009101:	0f b6 c8 	movzbl	%al, %ecx
100009104:	48 63 d1 	movslq	%ecx, %rdx
100009107:	48 83 fa 00 	cmpq	$0, %rdx
10000910b:	0f 84 9d 01 00 00 	je	0x1000092ae
100009111:	48 8d 15 86 d0 00 00 	leaq	53382(%rip), %rdx ## literal pool for: "id aspect_add(__strong id, SEL, AspectOptions, __strong id, NSError *__autoreleasing *)"
100009118:	48 8b 05 a1 85 01 00 	movq	99745(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000911f:	48 8b 35 32 83 01 00 	movq	99122(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100009126:	48 89 c7 	movq	%rax, %rdi
100009129:	ff 15 39 0f 01 00 	callq	*69433(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000912f:	48 89 c7 	movq	%rax, %rdi
100009132:	e8 9d ac 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009137:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000913b:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
100009140:	0f 84 10 00 00 00 	je	0x100009156
100009146:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000914a:	48 89 85 e8 fe ff ff 	movq	%rax, -280(%rbp)
100009151:	e9 13 00 00 00 	jmp	0x100009169
100009156:	48 8d 05 0b 35 01 00 	leaq	79115(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000915d:	48 89 85 e8 fe ff ff 	movq	%rax, -280(%rbp)
100009164:	e9 00 00 00 00 	jmp	0x100009169
100009169:	48 8b 85 e8 fe ff ff 	movq	-280(%rbp), %rax
100009170:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
100009174:	48 89 cf 	movq	%rcx, %rdi
100009177:	48 89 c6 	movq	%rax, %rsi
10000917a:	e8 73 ac 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000917f:	48 8d 15 07 cd 00 00 	leaq	52487(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100009186:	48 8b 05 33 85 01 00 	movq	99635(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000918d:	48 8b 35 c4 82 01 00 	movq	99012(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100009194:	48 89 c7 	movq	%rax, %rdi
100009197:	ff 15 cb 0e 01 00 	callq	*69323(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000919d:	48 89 c7 	movq	%rax, %rdi
1000091a0:	e8 2f ac 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000091a5:	48 89 45 c8 	movq	%rax, -56(%rbp)
1000091a9:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
1000091ae:	0f 84 10 00 00 00 	je	0x1000091c4
1000091b4:	48 8b 45 c8 	movq	-56(%rbp), %rax
1000091b8:	48 89 85 e0 fe ff ff 	movq	%rax, -288(%rbp)
1000091bf:	e9 13 00 00 00 	jmp	0x1000091d7
1000091c4:	48 8d 05 bd 34 01 00 	leaq	79037(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
1000091cb:	48 89 85 e0 fe ff ff 	movq	%rax, -288(%rbp)
1000091d2:	e9 00 00 00 00 	jmp	0x1000091d7
1000091d7:	48 8b 85 e0 fe ff ff 	movq	-288(%rbp), %rax
1000091de:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
1000091e2:	48 89 cf 	movq	%rcx, %rdi
1000091e5:	48 89 c6 	movq	%rax, %rsi
1000091e8:	e8 05 ac 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000091ed:	48 8b 05 ac 85 01 00 	movq	99756(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
1000091f4:	48 8b 35 85 82 01 00 	movq	98949(%rip), %rsi ## Objc selector ref: currentHandler
1000091fb:	48 89 c7 	movq	%rax, %rdi
1000091fe:	ff 15 64 0e 01 00 	callq	*69220(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100009204:	48 89 c7 	movq	%rax, %rdi
100009207:	e8 c8 ab 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000920c:	ba 72 00 00 00 	movl	$114, %edx
100009211:	41 89 d0 	movl	%edx, %r8d
100009214:	48 8d 0d 8d 34 01 00 	leaq	78989(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000921b:	48 8d 35 c6 35 01 00 	leaq	79302(%rip), %rsi ## Objc cfstring ref: @"self"
100009222:	48 8b 55 d0 	movq	-48(%rbp), %rdx
100009226:	48 8b 7d c8 	movq	-56(%rbp), %rdi
10000922a:	4c 8b 0d 57 82 01 00 	movq	98903(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100009231:	49 89 c2 	movq	%rax, %r10
100009234:	48 89 bd d8 fe ff ff 	movq	%rdi, -296(%rbp)
10000923b:	4c 89 d7 	movq	%r10, %rdi
10000923e:	48 89 b5 d0 fe ff ff 	movq	%rsi, -304(%rbp)
100009245:	4c 89 ce 	movq	%r9, %rsi
100009248:	4c 8b 8d d8 fe ff ff 	movq	-296(%rbp), %r9
10000924f:	48 89 8d c8 fe ff ff 	movq	%rcx, -312(%rbp)
100009256:	4c 89 c9 	movq	%r9, %rcx
100009259:	4c 8b 8d c8 fe ff ff 	movq	-312(%rbp), %r9
100009260:	4c 8b 95 d0 fe ff ff 	movq	-304(%rbp), %r10
100009267:	4c 89 14 24 	movq	%r10, (%rsp)
10000926b:	48 89 85 c0 fe ff ff 	movq	%rax, -320(%rbp)
100009272:	b0 00 	movb	$0, %al
100009274:	ff 15 ee 0d 01 00 	callq	*69102(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000927a:	48 8b 8d c0 fe ff ff 	movq	-320(%rbp), %rcx
100009281:	48 89 cf 	movq	%rcx, %rdi
100009284:	ff 15 e6 0d 01 00 	callq	*69094(%rip) ## literal pool symbol address: _objc_release
10000928a:	45 31 db 	xorl	%r11d, %r11d
10000928d:	44 89 de 	movl	%r11d, %esi
100009290:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
100009294:	48 89 cf 	movq	%rcx, %rdi
100009297:	e8 56 ab 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000929c:	45 31 db 	xorl	%r11d, %r11d
10000929f:	44 89 de 	movl	%r11d, %esi
1000092a2:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
1000092a6:	48 89 cf 	movq	%rcx, %rdi
1000092a9:	e8 44 ab 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000092ae:	e9 00 00 00 00 	jmp	0x1000092b3
1000092b3:	e9 00 00 00 00 	jmp	0x1000092b8
1000092b8:	e9 00 00 00 00 	jmp	0x1000092bd
1000092bd:	48 83 7d f0 00 	cmpq	$0, -16(%rbp)
1000092c2:	0f 95 c0 	setne	%al
1000092c5:	34 ff 	xorb	$-1, %al
1000092c7:	24 01 	andb	$1, %al
1000092c9:	0f b6 c8 	movzbl	%al, %ecx
1000092cc:	48 63 d1 	movslq	%ecx, %rdx
1000092cf:	48 83 fa 00 	cmpq	$0, %rdx
1000092d3:	0f 84 9d 01 00 00 	je	0x100009476
1000092d9:	48 8d 15 be ce 00 00 	leaq	52926(%rip), %rdx ## literal pool for: "id aspect_add(__strong id, SEL, AspectOptions, __strong id, NSError *__autoreleasing *)"
1000092e0:	48 8b 05 d9 83 01 00 	movq	99289(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000092e7:	48 8b 35 6a 81 01 00 	movq	98666(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000092ee:	48 89 c7 	movq	%rax, %rdi
1000092f1:	ff 15 71 0d 01 00 	callq	*68977(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000092f7:	48 89 c7 	movq	%rax, %rdi
1000092fa:	e8 d5 aa 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000092ff:	48 89 45 c0 	movq	%rax, -64(%rbp)
100009303:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
100009308:	0f 84 10 00 00 00 	je	0x10000931e
10000930e:	48 8b 45 c0 	movq	-64(%rbp), %rax
100009312:	48 89 85 b8 fe ff ff 	movq	%rax, -328(%rbp)
100009319:	e9 13 00 00 00 	jmp	0x100009331
10000931e:	48 8d 05 43 33 01 00 	leaq	78659(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100009325:	48 89 85 b8 fe ff ff 	movq	%rax, -328(%rbp)
10000932c:	e9 00 00 00 00 	jmp	0x100009331
100009331:	48 8b 85 b8 fe ff ff 	movq	-328(%rbp), %rax
100009338:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000933c:	48 89 cf 	movq	%rcx, %rdi
10000933f:	48 89 c6 	movq	%rax, %rsi
100009342:	e8 ab aa 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009347:	48 8d 15 3f cb 00 00 	leaq	52031(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000934e:	48 8b 05 6b 83 01 00 	movq	99179(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100009355:	48 8b 35 fc 80 01 00 	movq	98556(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000935c:	48 89 c7 	movq	%rax, %rdi
10000935f:	ff 15 03 0d 01 00 	callq	*68867(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100009365:	48 89 c7 	movq	%rax, %rdi
100009368:	e8 67 aa 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000936d:	48 89 45 b8 	movq	%rax, -72(%rbp)
100009371:	48 83 7d b8 00 	cmpq	$0, -72(%rbp)
100009376:	0f 84 10 00 00 00 	je	0x10000938c
10000937c:	48 8b 45 b8 	movq	-72(%rbp), %rax
100009380:	48 89 85 b0 fe ff ff 	movq	%rax, -336(%rbp)
100009387:	e9 13 00 00 00 	jmp	0x10000939f
10000938c:	48 8d 05 f5 32 01 00 	leaq	78581(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
100009393:	48 89 85 b0 fe ff ff 	movq	%rax, -336(%rbp)
10000939a:	e9 00 00 00 00 	jmp	0x10000939f
10000939f:	48 8b 85 b0 fe ff ff 	movq	-336(%rbp), %rax
1000093a6:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
1000093aa:	48 89 cf 	movq	%rcx, %rdi
1000093ad:	48 89 c6 	movq	%rax, %rsi
1000093b0:	e8 3d aa 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000093b5:	48 8b 05 e4 83 01 00 	movq	99300(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
1000093bc:	48 8b 35 bd 80 01 00 	movq	98493(%rip), %rsi ## Objc selector ref: currentHandler
1000093c3:	48 89 c7 	movq	%rax, %rdi
1000093c6:	ff 15 9c 0c 01 00 	callq	*68764(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
1000093cc:	48 89 c7 	movq	%rax, %rdi
1000093cf:	e8 00 aa 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000093d4:	ba 73 00 00 00 	movl	$115, %edx
1000093d9:	41 89 d0 	movl	%edx, %r8d
1000093dc:	48 8d 0d c5 32 01 00 	leaq	78533(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
1000093e3:	48 8d 35 fe 32 01 00 	leaq	78590(%rip), %rsi ## Objc cfstring ref: @"selector"
1000093ea:	48 8b 55 c0 	movq	-64(%rbp), %rdx
1000093ee:	48 8b 7d b8 	movq	-72(%rbp), %rdi
1000093f2:	4c 8b 0d 8f 80 01 00 	movq	98447(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
1000093f9:	49 89 c2 	movq	%rax, %r10
1000093fc:	48 89 bd a8 fe ff ff 	movq	%rdi, -344(%rbp)
100009403:	4c 89 d7 	movq	%r10, %rdi
100009406:	48 89 b5 a0 fe ff ff 	movq	%rsi, -352(%rbp)
10000940d:	4c 89 ce 	movq	%r9, %rsi
100009410:	4c 8b 8d a8 fe ff ff 	movq	-344(%rbp), %r9
100009417:	48 89 8d 98 fe ff ff 	movq	%rcx, -360(%rbp)
10000941e:	4c 89 c9 	movq	%r9, %rcx
100009421:	4c 8b 8d 98 fe ff ff 	movq	-360(%rbp), %r9
100009428:	4c 8b 95 a0 fe ff ff 	movq	-352(%rbp), %r10
10000942f:	4c 89 14 24 	movq	%r10, (%rsp)
100009433:	48 89 85 90 fe ff ff 	movq	%rax, -368(%rbp)
10000943a:	b0 00 	movb	$0, %al
10000943c:	ff 15 26 0c 01 00 	callq	*68646(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100009442:	48 8b 8d 90 fe ff ff 	movq	-368(%rbp), %rcx
100009449:	48 89 cf 	movq	%rcx, %rdi
10000944c:	ff 15 1e 0c 01 00 	callq	*68638(%rip) ## literal pool symbol address: _objc_release
100009452:	45 31 db 	xorl	%r11d, %r11d
100009455:	44 89 de 	movl	%r11d, %esi
100009458:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
10000945c:	48 89 cf 	movq	%rcx, %rdi
10000945f:	e8 8e a9 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009464:	45 31 db 	xorl	%r11d, %r11d
100009467:	44 89 de 	movl	%r11d, %esi
10000946a:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000946e:	48 89 cf 	movq	%rcx, %rdi
100009471:	e8 7c a9 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009476:	e9 00 00 00 00 	jmp	0x10000947b
10000947b:	e9 00 00 00 00 	jmp	0x100009480
100009480:	e9 00 00 00 00 	jmp	0x100009485
100009485:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
10000948a:	0f 95 c0 	setne	%al
10000948d:	34 ff 	xorb	$-1, %al
10000948f:	24 01 	andb	$1, %al
100009491:	0f b6 c8 	movzbl	%al, %ecx
100009494:	48 63 d1 	movslq	%ecx, %rdx
100009497:	48 83 fa 00 	cmpq	$0, %rdx
10000949b:	0f 84 9d 01 00 00 	je	0x10000963e
1000094a1:	48 8d 15 f6 cc 00 00 	leaq	52470(%rip), %rdx ## literal pool for: "id aspect_add(__strong id, SEL, AspectOptions, __strong id, NSError *__autoreleasing *)"
1000094a8:	48 8b 05 11 82 01 00 	movq	98833(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000094af:	48 8b 35 a2 7f 01 00 	movq	98210(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000094b6:	48 89 c7 	movq	%rax, %rdi
1000094b9:	ff 15 a9 0b 01 00 	callq	*68521(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000094bf:	48 89 c7 	movq	%rax, %rdi
1000094c2:	e8 0d a9 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000094c7:	48 89 45 b0 	movq	%rax, -80(%rbp)
1000094cb:	48 83 7d b0 00 	cmpq	$0, -80(%rbp)
1000094d0:	0f 84 10 00 00 00 	je	0x1000094e6
1000094d6:	48 8b 45 b0 	movq	-80(%rbp), %rax
1000094da:	48 89 85 88 fe ff ff 	movq	%rax, -376(%rbp)
1000094e1:	e9 13 00 00 00 	jmp	0x1000094f9
1000094e6:	48 8d 05 7b 31 01 00 	leaq	78203(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
1000094ed:	48 89 85 88 fe ff ff 	movq	%rax, -376(%rbp)
1000094f4:	e9 00 00 00 00 	jmp	0x1000094f9
1000094f9:	48 8b 85 88 fe ff ff 	movq	-376(%rbp), %rax
100009500:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
100009504:	48 89 cf 	movq	%rcx, %rdi
100009507:	48 89 c6 	movq	%rax, %rsi
10000950a:	e8 e3 a8 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000950f:	48 8d 15 77 c9 00 00 	leaq	51575(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100009516:	48 8b 05 a3 81 01 00 	movq	98723(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000951d:	48 8b 35 34 7f 01 00 	movq	98100(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100009524:	48 89 c7 	movq	%rax, %rdi
100009527:	ff 15 3b 0b 01 00 	callq	*68411(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000952d:	48 89 c7 	movq	%rax, %rdi
100009530:	e8 9f a8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009535:	48 89 45 a8 	movq	%rax, -88(%rbp)
100009539:	48 83 7d a8 00 	cmpq	$0, -88(%rbp)
10000953e:	0f 84 10 00 00 00 	je	0x100009554
100009544:	48 8b 45 a8 	movq	-88(%rbp), %rax
100009548:	48 89 85 80 fe ff ff 	movq	%rax, -384(%rbp)
10000954f:	e9 13 00 00 00 	jmp	0x100009567
100009554:	48 8d 05 2d 31 01 00 	leaq	78125(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000955b:	48 89 85 80 fe ff ff 	movq	%rax, -384(%rbp)
100009562:	e9 00 00 00 00 	jmp	0x100009567
100009567:	48 8b 85 80 fe ff ff 	movq	-384(%rbp), %rax
10000956e:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
100009572:	48 89 cf 	movq	%rcx, %rdi
100009575:	48 89 c6 	movq	%rax, %rsi
100009578:	e8 75 a8 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000957d:	48 8b 05 1c 82 01 00 	movq	98844(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100009584:	48 8b 35 f5 7e 01 00 	movq	98037(%rip), %rsi ## Objc selector ref: currentHandler
10000958b:	48 89 c7 	movq	%rax, %rdi
10000958e:	ff 15 d4 0a 01 00 	callq	*68308(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100009594:	48 89 c7 	movq	%rax, %rdi
100009597:	e8 38 a8 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000959c:	ba 74 00 00 00 	movl	$116, %edx
1000095a1:	41 89 d0 	movl	%edx, %r8d
1000095a4:	48 8d 0d fd 30 01 00 	leaq	78077(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
1000095ab:	48 8d 35 16 31 01 00 	leaq	78102(%rip), %rsi ## Objc cfstring ref: @"block"
1000095b2:	48 8b 55 b0 	movq	-80(%rbp), %rdx
1000095b6:	48 8b 7d a8 	movq	-88(%rbp), %rdi
1000095ba:	4c 8b 0d c7 7e 01 00 	movq	97991(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
1000095c1:	49 89 c2 	movq	%rax, %r10
1000095c4:	48 89 bd 78 fe ff ff 	movq	%rdi, -392(%rbp)
1000095cb:	4c 89 d7 	movq	%r10, %rdi
1000095ce:	48 89 b5 70 fe ff ff 	movq	%rsi, -400(%rbp)
1000095d5:	4c 89 ce 	movq	%r9, %rsi
1000095d8:	4c 8b 8d 78 fe ff ff 	movq	-392(%rbp), %r9
1000095df:	48 89 8d 68 fe ff ff 	movq	%rcx, -408(%rbp)
1000095e6:	4c 89 c9 	movq	%r9, %rcx
1000095e9:	4c 8b 8d 68 fe ff ff 	movq	-408(%rbp), %r9
1000095f0:	4c 8b 95 70 fe ff ff 	movq	-400(%rbp), %r10
1000095f7:	4c 89 14 24 	movq	%r10, (%rsp)
1000095fb:	48 89 85 60 fe ff ff 	movq	%rax, -416(%rbp)
100009602:	b0 00 	movb	$0, %al
100009604:	ff 15 5e 0a 01 00 	callq	*68190(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000960a:	48 8b 8d 60 fe ff ff 	movq	-416(%rbp), %rcx
100009611:	48 89 cf 	movq	%rcx, %rdi
100009614:	ff 15 56 0a 01 00 	callq	*68182(%rip) ## literal pool symbol address: _objc_release
10000961a:	45 31 db 	xorl	%r11d, %r11d
10000961d:	44 89 de 	movl	%r11d, %esi
100009620:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
100009624:	48 89 cf 	movq	%rcx, %rdi
100009627:	e8 c6 a7 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000962c:	45 31 db 	xorl	%r11d, %r11d
10000962f:	44 89 de 	movl	%r11d, %esi
100009632:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
100009636:	48 89 cf 	movq	%rcx, %rdi
100009639:	e8 b4 a7 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000963e:	e9 00 00 00 00 	jmp	0x100009643
100009643:	e9 00 00 00 00 	jmp	0x100009648
100009648:	48 c7 85 78 ff ff ff 00 00 00 00 	movq	$0, -136(%rbp)
100009653:	48 8d 85 78 ff ff ff 	leaq	-136(%rbp), %rax
10000965a:	48 89 45 80 	movq	%rax, -128(%rbp)
10000965e:	c7 45 88 00 00 00 32 	movl	$838860800, -120(%rbp)
100009665:	c7 45 8c 30 00 00 00 	movl	$48, -116(%rbp)
10000966c:	48 8d 0d 0d 44 00 00 	leaq	___Block_byref_object_copy_(%rip), %rcx
100009673:	48 89 4d 90 	movq	%rcx, -112(%rbp)
100009677:	48 8d 0d 62 44 00 00 	leaq	___Block_byref_object_dispose_(%rip), %rcx
10000967e:	48 89 4d 98 	movq	%rcx, -104(%rbp)
100009682:	48 8d 7d a0 	leaq	-96(%rbp), %rdi
100009686:	48 c7 45 a0 00 00 00 00 	movq	$0, -96(%rbp)
10000968e:	48 8d 8d 48 ff ff ff 	leaq	-184(%rbp), %rcx
100009695:	48 8d 95 50 ff ff ff 	leaq	-176(%rbp), %rdx
10000969c:	48 8b 35 7d 09 01 00 	movq	67965(%rip), %rsi ## literal pool symbol address: __NSConcreteStackBlock
1000096a3:	48 89 b5 28 ff ff ff 	movq	%rsi, -216(%rbp)
1000096aa:	c7 85 30 ff ff ff 00 00 00 c2 	movl	$3254779904, -208(%rbp)
1000096b4:	c7 85 34 ff ff ff 00 00 00 00 	movl	$0, -204(%rbp)
1000096be:	48 8d 35 ab 44 00 00 	leaq	___aspect_add_block_invoke(%rip), %rsi
1000096c5:	48 89 b5 38 ff ff ff 	movq	%rsi, -200(%rbp)
1000096cc:	48 8d 35 95 19 01 00 	leaq	___block_descriptor_tmp(%rip), %rsi
1000096d3:	48 89 b5 40 ff ff ff 	movq	%rsi, -192(%rbp)
1000096da:	48 8b 75 f8 	movq	-8(%rbp), %rsi
1000096de:	4c 8b 05 93 09 01 00 	movq	67987(%rip), %r8 ## literal pool symbol address: _objc_retain
1000096e5:	48 89 bd 58 fe ff ff 	movq	%rdi, -424(%rbp)
1000096ec:	48 89 f7 	movq	%rsi, %rdi
1000096ef:	48 89 85 50 fe ff ff 	movq	%rax, -432(%rbp)
1000096f6:	4c 89 85 48 fe ff ff 	movq	%r8, -440(%rbp)
1000096fd:	48 89 8d 40 fe ff ff 	movq	%rcx, -448(%rbp)
100009704:	48 89 95 38 fe ff ff 	movq	%rdx, -456(%rbp)
10000970b:	41 ff d0 	callq	*%r8
10000970e:	48 89 85 48 ff ff ff 	movq	%rax, -184(%rbp)
100009715:	48 8b 45 f0 	movq	-16(%rbp), %rax
100009719:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
100009720:	48 8b 45 e8 	movq	-24(%rbp), %rax
100009724:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000972b:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000972f:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
100009736:	48 8b 85 50 fe ff ff 	movq	-432(%rbp), %rax
10000973d:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
100009744:	48 8b 7d e0 	movq	-32(%rbp), %rdi
100009748:	48 8b 8d 48 fe ff ff 	movq	-440(%rbp), %rcx
10000974f:	ff d1 	callq	*%rcx
100009751:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
100009758:	48 8d bd 28 ff ff ff 	leaq	-216(%rbp), %rdi
10000975f:	e8 ac 43 00 00 	callq	_aspect_performLocked
100009764:	e9 00 00 00 00 	jmp	0x100009769
100009769:	48 8b 45 80 	movq	-128(%rbp), %rax
10000976d:	48 8b 78 28 	movq	40(%rax), %rdi
100009771:	48 8b 05 00 09 01 00 	movq	67840(%rip), %rax ## literal pool symbol address: _objc_retain
100009778:	ff d0 	callq	*%rax
10000977a:	31 c9 	xorl	%ecx, %ecx
10000977c:	89 cf 	movl	%ecx, %edi
10000977e:	48 8b 95 38 fe ff ff 	movq	-456(%rbp), %rdx
100009785:	48 89 bd 30 fe ff ff 	movq	%rdi, -464(%rbp)
10000978c:	48 89 d7 	movq	%rdx, %rdi
10000978f:	48 8b b5 30 fe ff ff 	movq	-464(%rbp), %rsi
100009796:	48 89 85 28 fe ff ff 	movq	%rax, -472(%rbp)
10000979d:	e8 50 a6 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000097a2:	48 8b bd 40 fe ff ff 	movq	-448(%rbp), %rdi
1000097a9:	48 8b b5 30 fe ff ff 	movq	-464(%rbp), %rsi
1000097b0:	e8 3d a6 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000097b5:	48 8d bd 78 ff ff ff 	leaq	-136(%rbp), %rdi
1000097bc:	be 08 00 00 00 	movl	$8, %esi
1000097c1:	e8 76 a4 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
1000097c6:	48 8b bd 58 fe ff ff 	movq	-424(%rbp), %rdi
1000097cd:	48 8b b5 30 fe ff ff 	movq	-464(%rbp), %rsi
1000097d4:	e8 19 a6 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000097d9:	48 8d 7d e0 	leaq	-32(%rbp), %rdi
1000097dd:	48 8b b5 30 fe ff ff 	movq	-464(%rbp), %rsi
1000097e4:	e8 09 a6 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000097e9:	48 8d 7d f8 	leaq	-8(%rbp), %rdi
1000097ed:	48 8b b5 30 fe ff ff 	movq	-464(%rbp), %rsi
1000097f4:	e8 f9 a5 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000097f9:	48 8b bd 28 fe ff ff 	movq	-472(%rbp), %rdi
100009800:	48 81 c4 e0 01 00 00 	addq	$480, %rsp
100009807:	5d 	popq	%rbp
100009808:	e9 67 a5 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000980d:	be 08 00 00 00 	movl	$8, %esi
100009812:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
100009819:	89 d7 	movl	%edx, %edi
10000981b:	48 89 85 20 ff ff ff 	movq	%rax, -224(%rbp)
100009822:	89 bd 1c ff ff ff 	movl	%edi, -228(%rbp)
100009828:	48 89 cf 	movq	%rcx, %rdi
10000982b:	e8 0c a4 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
100009830:	48 8b bd 20 ff ff ff 	movq	-224(%rbp), %rdi
100009837:	e8 06 a4 00 00 	callq	0x100013c42 ## symbol stub for: __Unwind_Resume
10000983c:	0f 0b 	ud2
10000983e:	66 90 	nop
-[NSObject(Aspects) aspect_hookSelector:withOptions:usingBlock:error:]:
100009840:	55 	pushq	%rbp
100009841:	48 89 e5 	movq	%rsp, %rbp
100009844:	48 83 ec 50 	subq	$80, %rsp
100009848:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000984c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009850:	48 89 55 e8 	movq	%rdx, -24(%rbp)
100009854:	48 89 4d e0 	movq	%rcx, -32(%rbp)
100009858:	48 c7 45 d8 00 00 00 00 	movq	$0, -40(%rbp)
100009860:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
100009864:	48 89 cf 	movq	%rcx, %rdi
100009867:	4c 89 c6 	movq	%r8, %rsi
10000986a:	48 89 4d c8 	movq	%rcx, -56(%rbp)
10000986e:	4c 89 4d c0 	movq	%r9, -64(%rbp)
100009872:	e8 7b a5 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009877:	48 8b 4d c0 	movq	-64(%rbp), %rcx
10000987b:	48 89 4d d0 	movq	%rcx, -48(%rbp)
10000987f:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100009883:	48 8b 75 e8 	movq	-24(%rbp), %rsi
100009887:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000988b:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000988f:	4c 8b 45 d0 	movq	-48(%rbp), %r8
100009893:	e8 d8 f7 ff ff 	callq	_aspect_add
100009898:	48 89 c7 	movq	%rax, %rdi
10000989b:	e8 34 a5 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000098a0:	45 31 d2 	xorl	%r10d, %r10d
1000098a3:	44 89 d6 	movl	%r10d, %esi
1000098a6:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000098aa:	48 89 45 b8 	movq	%rax, -72(%rbp)
1000098ae:	e8 3f a5 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000098b3:	48 8b 7d b8 	movq	-72(%rbp), %rdi
1000098b7:	48 83 c4 50 	addq	$80, %rsp
1000098bb:	5d 	popq	%rbp
1000098bc:	e9 b3 a4 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
1000098c1:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectTracker initWithTrackedClass:parent:]:
1000098d0:	55 	pushq	%rbp
1000098d1:	48 89 e5 	movq	%rsp, %rbp
1000098d4:	48 83 ec 50 	subq	$80, %rsp
1000098d8:	48 8d 45 e0 	leaq	-32(%rbp), %rax
1000098dc:	48 89 7d f8 	movq	%rdi, -8(%rbp)
1000098e0:	48 89 75 f0 	movq	%rsi, -16(%rbp)
1000098e4:	48 89 55 e8 	movq	%rdx, -24(%rbp)
1000098e8:	48 c7 45 e0 00 00 00 00 	movq	$0, -32(%rbp)
1000098f0:	48 89 c7 	movq	%rax, %rdi
1000098f3:	48 89 ce 	movq	%rcx, %rsi
1000098f6:	e8 f7 a4 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000098fb:	48 8d 7d d0 	leaq	-48(%rbp), %rdi
1000098ff:	48 8b 45 f8 	movq	-8(%rbp), %rax
100009903:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
10000990b:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000990f:	48 8b 05 4a 7f 01 00 	movq	98122(%rip), %rax ## Objc class ref: AspectTracker
100009916:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000991a:	48 8b 35 47 75 01 00 	movq	95559(%rip), %rsi ## Objc selector ref: init
100009921:	e8 96 a4 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
100009926:	48 8d 4d f8 	leaq	-8(%rbp), %rcx
10000992a:	48 89 c2 	movq	%rax, %rdx
10000992d:	48 89 55 f8 	movq	%rdx, -8(%rbp)
100009931:	48 89 c2 	movq	%rax, %rdx
100009934:	48 89 cf 	movq	%rcx, %rdi
100009937:	48 89 d6 	movq	%rdx, %rsi
10000993a:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000993e:	e8 af a4 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009943:	48 8b 45 c8 	movq	-56(%rbp), %rax
100009947:	48 83 f8 00 	cmpq	$0, %rax
10000994b:	0f 84 6b 00 00 00 	je	0x1000099bc
100009951:	48 8b 75 e8 	movq	-24(%rbp), %rsi
100009955:	48 8b 45 f8 	movq	-8(%rbp), %rax
100009959:	48 8b 0d b8 7f 01 00 	movq	_OBJC_IVAR_$_AspectTracker._trackedClass(%rip), %rcx
100009960:	48 01 c8 	addq	%rcx, %rax
100009963:	48 89 c7 	movq	%rax, %rdi
100009966:	e8 87 a4 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000996b:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000996f:	48 8b 4d f8 	movq	-8(%rbp), %rcx
100009973:	48 8b 35 a6 7f 01 00 	movq	_OBJC_IVAR_$_AspectTracker._parentEntry(%rip), %rsi
10000997a:	48 01 f1 	addq	%rsi, %rcx
10000997d:	48 89 cf 	movq	%rcx, %rdi
100009980:	48 89 c6 	movq	%rax, %rsi
100009983:	e8 70 a4 00 00 	callq	0x100013df8 ## symbol stub for: _objc_storeWeak
100009988:	48 8b 0d f9 7d 01 00 	movq	97785(%rip), %rcx ## Objc class ref: _OBJC_CLASS_$_NSMutableSet
10000998f:	48 8b 35 da 74 01 00 	movq	95450(%rip), %rsi ## Objc selector ref: new
100009996:	48 89 cf 	movq	%rcx, %rdi
100009999:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000999d:	ff 15 c5 06 01 00 	callq	*67269(%rip) ## Objc message: +[NSMutableSet new]
1000099a3:	48 8b 4d f8 	movq	-8(%rbp), %rcx
1000099a7:	48 8b 35 7a 7f 01 00 	movq	_OBJC_IVAR_$_AspectTracker._selectorNames(%rip), %rsi
1000099ae:	48 8b 3c 31 	movq	(%rcx,%rsi), %rdi
1000099b2:	48 89 04 31 	movq	%rax, (%rcx,%rsi)
1000099b6:	ff 15 b4 06 01 00 	callq	*67252(%rip) ## literal pool symbol address: _objc_release
1000099bc:	48 8b 45 f8 	movq	-8(%rbp), %rax
1000099c0:	48 89 c7 	movq	%rax, %rdi
1000099c3:	ff 15 af 06 01 00 	callq	*67247(%rip) ## literal pool symbol address: _objc_retain
1000099c9:	31 c9 	xorl	%ecx, %ecx
1000099cb:	89 ce 	movl	%ecx, %esi
1000099cd:	48 8d 7d e0 	leaq	-32(%rbp), %rdi
1000099d1:	48 89 45 b8 	movq	%rax, -72(%rbp)
1000099d5:	e8 18 a4 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000099da:	31 c9 	xorl	%ecx, %ecx
1000099dc:	89 ce 	movl	%ecx, %esi
1000099de:	48 8d 45 f8 	leaq	-8(%rbp), %rax
1000099e2:	48 89 c7 	movq	%rax, %rdi
1000099e5:	e8 08 a4 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000099ea:	48 8b 45 b8 	movq	-72(%rbp), %rax
1000099ee:	48 83 c4 50 	addq	$80, %rsp
1000099f2:	5d 	popq	%rbp
1000099f3:	c3 	retq
1000099f4:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectTracker description]:
100009a00:	55 	pushq	%rbp
100009a01:	48 89 e5 	movq	%rsp, %rbp
100009a04:	53 	pushq	%rbx
100009a05:	48 83 ec 78 	subq	$120, %rsp
100009a09:	48 89 7d f0 	movq	%rdi, -16(%rbp)
100009a0d:	48 89 75 e8 	movq	%rsi, -24(%rbp)
100009a11:	48 8b 3d a8 7c 01 00 	movq	97448(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
100009a18:	48 8b 75 f0 	movq	-16(%rbp), %rsi
100009a1c:	48 8b 05 7d 74 01 00 	movq	95357(%rip), %rax ## Objc selector ref: class
100009a23:	48 8b 0d 3e 06 01 00 	movq	67134(%rip), %rcx ## Objc message: +[NSString class]
100009a2a:	48 89 7d e0 	movq	%rdi, -32(%rbp)
100009a2e:	48 89 f7 	movq	%rsi, %rdi
100009a31:	48 89 c6 	movq	%rax, %rsi
100009a34:	48 89 4d d8 	movq	%rcx, -40(%rbp)
100009a38:	ff d1 	callq	*%rcx
100009a3a:	48 8b 4d f0 	movq	-16(%rbp), %rcx
100009a3e:	48 8b 35 9b 79 01 00 	movq	96667(%rip), %rsi ## Objc selector ref: trackedClass
100009a45:	48 89 cf 	movq	%rcx, %rdi
100009a48:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100009a4c:	48 89 45 d0 	movq	%rax, -48(%rbp)
100009a50:	48 89 4d c8 	movq	%rcx, -56(%rbp)
100009a54:	ff d2 	callq	*%rdx
100009a56:	48 89 c7 	movq	%rax, %rdi
100009a59:	e8 c0 a1 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
100009a5e:	48 89 c7 	movq	%rax, %rdi
100009a61:	e8 6e a3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009a66:	48 8b 7d f0 	movq	-16(%rbp), %rdi
100009a6a:	48 8b 35 77 79 01 00 	movq	96631(%rip), %rsi ## Objc selector ref: selectorNames
100009a71:	48 8b 4d d8 	movq	-40(%rbp), %rcx
100009a75:	48 89 45 c0 	movq	%rax, -64(%rbp)
100009a79:	ff d1 	callq	*%rcx
100009a7b:	48 89 c7 	movq	%rax, %rdi
100009a7e:	e8 51 a3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009a83:	48 8b 7d f0 	movq	-16(%rbp), %rdi
100009a87:	48 8b 35 62 79 01 00 	movq	96610(%rip), %rsi ## Objc selector ref: parentEntry
100009a8e:	48 8b 4d d8 	movq	-40(%rbp), %rcx
100009a92:	48 89 45 b8 	movq	%rax, -72(%rbp)
100009a96:	ff d1 	callq	*%rcx
100009a98:	48 89 c7 	movq	%rax, %rdi
100009a9b:	e8 34 a3 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009aa0:	48 8b 35 19 75 01 00 	movq	95513(%rip), %rsi ## Objc selector ref: stringWithFormat:
100009aa7:	48 89 e1 	movq	%rsp, %rcx
100009aaa:	48 89 41 08 	movq	%rax, 8(%rcx)
100009aae:	48 8b 55 b8 	movq	-72(%rbp), %rdx
100009ab2:	48 89 11 	movq	%rdx, (%rcx)
100009ab5:	48 8d 15 8c 2b 01 00 	leaq	76684(%rip), %rdx ## Objc cfstring ref: @"<%@: %@, trackedClass: %@, selectorNames:%@, parent:%p>"
100009abc:	45 31 c0 	xorl	%r8d, %r8d
100009abf:	45 88 c1 	movb	%r8b, %r9b
100009ac2:	48 8b 7d e0 	movq	-32(%rbp), %rdi
100009ac6:	48 8b 4d d0 	movq	-48(%rbp), %rcx
100009aca:	4c 8b 45 c8 	movq	-56(%rbp), %r8
100009ace:	4c 8b 55 c0 	movq	-64(%rbp), %r10
100009ad2:	44 88 4d b7 	movb	%r9b, -73(%rbp)
100009ad6:	4d 89 d1 	movq	%r10, %r9
100009ad9:	44 8a 5d b7 	movb	-73(%rbp), %r11b
100009add:	48 89 45 a8 	movq	%rax, -88(%rbp)
100009ae1:	44 88 d8 	movb	%r11b, %al
100009ae4:	48 8b 5d d8 	movq	-40(%rbp), %rbx
100009ae8:	ff d3 	callq	*%rbx
100009aea:	48 89 c7 	movq	%rax, %rdi
100009aed:	e8 e2 a2 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009af2:	48 8b 0d 77 05 01 00 	movq	66935(%rip), %rcx ## literal pool symbol address: _objc_release
100009af9:	48 8b 7d a8 	movq	-88(%rbp), %rdi
100009afd:	48 89 45 a0 	movq	%rax, -96(%rbp)
100009b01:	48 89 4d 98 	movq	%rcx, -104(%rbp)
100009b05:	ff d1 	callq	*%rcx
100009b07:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100009b0b:	48 8b 45 98 	movq	-104(%rbp), %rax
100009b0f:	ff d0 	callq	*%rax
100009b11:	48 8b 7d c0 	movq	-64(%rbp), %rdi
100009b15:	48 8b 45 98 	movq	-104(%rbp), %rax
100009b19:	ff d0 	callq	*%rax
100009b1b:	48 8b 45 a0 	movq	-96(%rbp), %rax
100009b1f:	48 89 c7 	movq	%rax, %rdi
100009b22:	48 83 c4 78 	addq	$120, %rsp
100009b26:	5b 	popq	%rbx
100009b27:	5d 	popq	%rbp
100009b28:	e9 47 a2 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
100009b2d:	0f 1f 00 	nopl	(%rax)
-[AspectTracker trackedClass]:
100009b30:	55 	pushq	%rbp
100009b31:	48 89 e5 	movq	%rsp, %rbp
100009b34:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100009b38:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009b3c:	48 8b 75 f8 	movq	-8(%rbp), %rsi
100009b40:	48 8b 3d d1 7d 01 00 	movq	_OBJC_IVAR_$_AspectTracker._trackedClass(%rip), %rdi
100009b47:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
100009b4b:	5d 	popq	%rbp
100009b4c:	c3 	retq
100009b4d:	0f 1f 00 	nopl	(%rax)
-[AspectTracker setTrackedClass:]:
100009b50:	55 	pushq	%rbp
100009b51:	48 89 e5 	movq	%rsp, %rbp
100009b54:	48 83 ec 20 	subq	$32, %rsp
100009b58:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100009b5c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009b60:	48 89 55 e8 	movq	%rdx, -24(%rbp)
100009b64:	48 8b 75 e8 	movq	-24(%rbp), %rsi
100009b68:	48 8b 55 f8 	movq	-8(%rbp), %rdx
100009b6c:	48 8b 3d a5 7d 01 00 	movq	_OBJC_IVAR_$_AspectTracker._trackedClass(%rip), %rdi
100009b73:	48 01 fa 	addq	%rdi, %rdx
100009b76:	48 89 d7 	movq	%rdx, %rdi
100009b79:	e8 74 a2 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009b7e:	48 83 c4 20 	addq	$32, %rsp
100009b82:	5d 	popq	%rbp
100009b83:	c3 	retq
100009b84:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectTracker selectorNames]:
100009b90:	55 	pushq	%rbp
100009b91:	48 89 e5 	movq	%rsp, %rbp
100009b94:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100009b98:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009b9c:	48 8b 75 f8 	movq	-8(%rbp), %rsi
100009ba0:	48 8b 3d 81 7d 01 00 	movq	_OBJC_IVAR_$_AspectTracker._selectorNames(%rip), %rdi
100009ba7:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
100009bab:	5d 	popq	%rbp
100009bac:	c3 	retq
100009bad:	0f 1f 00 	nopl	(%rax)
-[AspectTracker setSelectorNames:]:
100009bb0:	55 	pushq	%rbp
100009bb1:	48 89 e5 	movq	%rsp, %rbp
100009bb4:	48 83 ec 20 	subq	$32, %rsp
100009bb8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100009bbc:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009bc0:	48 89 55 e8 	movq	%rdx, -24(%rbp)
100009bc4:	48 8b 55 e8 	movq	-24(%rbp), %rdx
100009bc8:	48 8b 75 f8 	movq	-8(%rbp), %rsi
100009bcc:	48 8b 3d 55 7d 01 00 	movq	_OBJC_IVAR_$_AspectTracker._selectorNames(%rip), %rdi
100009bd3:	48 01 fe 	addq	%rdi, %rsi
100009bd6:	48 89 f7 	movq	%rsi, %rdi
100009bd9:	48 89 d6 	movq	%rdx, %rsi
100009bdc:	e8 11 a2 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009be1:	48 83 c4 20 	addq	$32, %rsp
100009be5:	5d 	popq	%rbp
100009be6:	c3 	retq
100009be7:	66 0f 1f 84 00 00 00 00 00 	nopw	(%rax,%rax)
-[AspectTracker parentEntry]:
100009bf0:	55 	pushq	%rbp
100009bf1:	48 89 e5 	movq	%rsp, %rbp
100009bf4:	48 83 ec 10 	subq	$16, %rsp
100009bf8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100009bfc:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009c00:	48 8b 75 f8 	movq	-8(%rbp), %rsi
100009c04:	48 8b 3d 15 7d 01 00 	movq	_OBJC_IVAR_$_AspectTracker._parentEntry(%rip), %rdi
100009c0b:	48 01 fe 	addq	%rdi, %rsi
100009c0e:	48 89 f7 	movq	%rsi, %rdi
100009c11:	e8 a0 a1 00 00 	callq	0x100013db6 ## symbol stub for: _objc_loadWeakRetained
100009c16:	48 89 c7 	movq	%rax, %rdi
100009c19:	48 83 c4 10 	addq	$16, %rsp
100009c1d:	5d 	popq	%rbp
100009c1e:	e9 51 a1 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
100009c23:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectTracker setParentEntry:]:
100009c30:	55 	pushq	%rbp
100009c31:	48 89 e5 	movq	%rsp, %rbp
100009c34:	48 83 ec 20 	subq	$32, %rsp
100009c38:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100009c3c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009c40:	48 89 55 e8 	movq	%rdx, -24(%rbp)
100009c44:	48 8b 55 e8 	movq	-24(%rbp), %rdx
100009c48:	48 8b 75 f8 	movq	-8(%rbp), %rsi
100009c4c:	48 8b 3d cd 7c 01 00 	movq	_OBJC_IVAR_$_AspectTracker._parentEntry(%rip), %rdi
100009c53:	48 01 fe 	addq	%rdi, %rsi
100009c56:	48 89 f7 	movq	%rsi, %rdi
100009c59:	48 89 d6 	movq	%rdx, %rsi
100009c5c:	e8 97 a1 00 00 	callq	0x100013df8 ## symbol stub for: _objc_storeWeak
100009c61:	48 89 45 e0 	movq	%rax, -32(%rbp)
100009c65:	48 83 c4 20 	addq	$32, %rsp
100009c69:	5d 	popq	%rbp
100009c6a:	c3 	retq
100009c6b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
-[AspectTracker .cxx_destruct]:
100009c70:	55 	pushq	%rbp
100009c71:	48 89 e5 	movq	%rsp, %rbp
100009c74:	48 83 ec 20 	subq	$32, %rsp
100009c78:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100009c7c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100009c80:	48 8b 75 f8 	movq	-8(%rbp), %rsi
100009c84:	48 8b 3d 95 7c 01 00 	movq	_OBJC_IVAR_$_AspectTracker._parentEntry(%rip), %rdi
100009c8b:	48 89 f0 	movq	%rsi, %rax
100009c8e:	48 01 f8 	addq	%rdi, %rax
100009c91:	48 89 c7 	movq	%rax, %rdi
100009c94:	48 89 75 e8 	movq	%rsi, -24(%rbp)
100009c98:	e8 e9 a0 00 00 	callq	0x100013d86 ## symbol stub for: _objc_destroyWeak
100009c9d:	31 c9 	xorl	%ecx, %ecx
100009c9f:	89 ce 	movl	%ecx, %esi
100009ca1:	48 8b 05 80 7c 01 00 	movq	_OBJC_IVAR_$_AspectTracker._selectorNames(%rip), %rax
100009ca8:	48 8b 7d e8 	movq	-24(%rbp), %rdi
100009cac:	48 01 c7 	addq	%rax, %rdi
100009caf:	e8 3e a1 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009cb4:	31 c9 	xorl	%ecx, %ecx
100009cb6:	89 ce 	movl	%ecx, %esi
100009cb8:	48 8b 05 59 7c 01 00 	movq	_OBJC_IVAR_$_AspectTracker._trackedClass(%rip), %rax
100009cbf:	48 8b 7d e8 	movq	-24(%rbp), %rdi
100009cc3:	48 01 c7 	addq	%rax, %rdi
100009cc6:	e8 27 a1 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100009ccb:	48 83 c4 20 	addq	$32, %rsp
100009ccf:	5d 	popq	%rbp
100009cd0:	c3 	retq
100009cd1:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[NSInvocation(Aspects) aspect_argumentAtIndex:]:
100009ce0:	55 	pushq	%rbp
100009ce1:	48 89 e5 	movq	%rsp, %rbp
100009ce4:	48 81 ec 70 01 00 00 	subq	$368, %rsp
100009ceb:	48 8b 05 46 03 01 00 	movq	66374(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100009cf2:	48 8b 00 	movq	(%rax), %rax
100009cf5:	48 89 45 f8 	movq	%rax, -8(%rbp)
100009cf9:	48 89 7d e8 	movq	%rdi, -24(%rbp)
100009cfd:	48 89 75 e0 	movq	%rsi, -32(%rbp)
100009d01:	48 89 55 d8 	movq	%rdx, -40(%rbp)
100009d05:	48 8b 45 e8 	movq	-24(%rbp), %rax
100009d09:	48 8b 35 e8 76 01 00 	movq	95976(%rip), %rsi ## Objc selector ref: methodSignature
100009d10:	48 89 c7 	movq	%rax, %rdi
100009d13:	ff 15 4f 03 01 00 	callq	*66383(%rip) ## Objc message: -[%rdi methodSignature]
100009d19:	48 89 c7 	movq	%rax, %rdi
100009d1c:	e8 b3 a0 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009d21:	48 89 c2 	movq	%rax, %rdx
100009d24:	48 89 d7 	movq	%rdx, %rdi
100009d27:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
100009d2e:	e8 95 a0 00 00 	callq	0x100013dc8 ## symbol stub for: _objc_retainAutorelease
100009d33:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100009d37:	48 8b 35 c2 76 01 00 	movq	95938(%rip), %rsi ## Objc selector ref: getArgumentTypeAtIndex:
100009d3e:	48 89 c7 	movq	%rax, %rdi
100009d41:	ff 15 21 03 01 00 	callq	*66337(%rip) ## Objc message: -[%rdi getArgumentTypeAtIndex:]
100009d47:	48 8b 95 38 ff ff ff 	movq	-200(%rbp), %rdx
100009d4e:	48 89 d7 	movq	%rdx, %rdi
100009d51:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
100009d58:	ff 15 12 03 01 00 	callq	*66322(%rip) ## literal pool symbol address: _objc_release
100009d5e:	48 8b 85 30 ff ff ff 	movq	-208(%rbp), %rax
100009d65:	48 89 45 d0 	movq	%rax, -48(%rbp)
100009d69:	48 8b 45 d0 	movq	-48(%rbp), %rax
100009d6d:	0f be 08 	movsbl	(%rax), %ecx
100009d70:	83 f9 72 	cmpl	$114, %ecx
100009d73:	0f 85 0c 00 00 00 	jne	0x100009d85
100009d79:	48 8b 45 d0 	movq	-48(%rbp), %rax
100009d7d:	48 83 c0 01 	addq	$1, %rax
100009d81:	48 89 45 d0 	movq	%rax, -48(%rbp)
100009d85:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100009d89:	48 8d 35 86 c0 00 00 	leaq	49286(%rip), %rsi ## literal pool for: "@"
100009d90:	e8 99 a0 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
100009d95:	83 f8 00 	cmpl	$0, %eax
100009d98:	0f 84 19 00 00 00 	je	0x100009db7
100009d9e:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100009da2:	48 8d 35 6f c0 00 00 	leaq	49263(%rip), %rsi ## literal pool for: "#"
100009da9:	e8 80 a0 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
100009dae:	83 f8 00 	cmpl	$0, %eax
100009db1:	0f 85 48 00 00 00 	jne	0x100009dff
100009db7:	48 8d 45 c8 	leaq	-56(%rbp), %rax
100009dbb:	48 c7 45 c8 00 00 00 00 	movq	$0, -56(%rbp)
100009dc3:	48 8b 4d e8 	movq	-24(%rbp), %rcx
100009dc7:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100009dcb:	48 8b 35 36 76 01 00 	movq	95798(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
100009dd2:	48 89 cf 	movq	%rcx, %rdi
100009dd5:	48 89 95 28 ff ff ff 	movq	%rdx, -216(%rbp)
100009ddc:	48 89 c2 	movq	%rax, %rdx
100009ddf:	48 8b 8d 28 ff ff ff 	movq	-216(%rbp), %rcx
100009de6:	ff 15 7c 02 01 00 	callq	*66172(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
100009dec:	48 8b 7d c8 	movq	-56(%rbp), %rdi
100009df0:	ff 15 82 02 01 00 	callq	*66178(%rip) ## literal pool symbol address: _objc_retain
100009df6:	48 89 45 f0 	movq	%rax, -16(%rbp)
100009dfa:	e9 60 09 00 00 	jmp	0x10000a75f
100009dff:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100009e03:	48 8d 35 10 c0 00 00 	leaq	49168(%rip), %rsi ## literal pool for: ":"
100009e0a:	e8 1f a0 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
100009e0f:	83 f8 00 	cmpl	$0, %eax
100009e12:	0f 85 4f 00 00 00 	jne	0x100009e67
100009e18:	48 8d 45 c0 	leaq	-64(%rbp), %rax
100009e1c:	48 c7 45 c0 00 00 00 00 	movq	$0, -64(%rbp)
100009e24:	48 8b 4d e8 	movq	-24(%rbp), %rcx
100009e28:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100009e2c:	48 8b 35 d5 75 01 00 	movq	95701(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
100009e33:	48 89 cf 	movq	%rcx, %rdi
100009e36:	48 89 95 20 ff ff ff 	movq	%rdx, -224(%rbp)
100009e3d:	48 89 c2 	movq	%rax, %rdx
100009e40:	48 8b 8d 20 ff ff ff 	movq	-224(%rbp), %rcx
100009e47:	ff 15 1b 02 01 00 	callq	*66075(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
100009e4d:	48 8b 7d c0 	movq	-64(%rbp), %rdi
100009e51:	e8 ce 9d 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
100009e56:	48 89 c7 	movq	%rax, %rdi
100009e59:	e8 76 9f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009e5e:	48 89 45 f0 	movq	%rax, -16(%rbp)
100009e62:	e9 f8 08 00 00 	jmp	0x10000a75f
100009e67:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100009e6b:	48 8d 35 a6 bf 00 00 	leaq	49062(%rip), %rsi ## literal pool for: "#"
100009e72:	e8 b7 9f 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
100009e77:	83 f8 00 	cmpl	$0, %eax
100009e7a:	0f 85 48 00 00 00 	jne	0x100009ec8
100009e80:	48 8d 45 b8 	leaq	-72(%rbp), %rax
100009e84:	48 c7 45 b8 00 00 00 00 	movq	$0, -72(%rbp)
100009e8c:	48 8b 4d e8 	movq	-24(%rbp), %rcx
100009e90:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100009e94:	48 8b 35 6d 75 01 00 	movq	95597(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
100009e9b:	48 89 cf 	movq	%rcx, %rdi
100009e9e:	48 89 95 18 ff ff ff 	movq	%rdx, -232(%rbp)
100009ea5:	48 89 c2 	movq	%rax, %rdx
100009ea8:	48 8b 8d 18 ff ff ff 	movq	-232(%rbp), %rcx
100009eaf:	ff 15 b3 01 01 00 	callq	*65971(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
100009eb5:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100009eb9:	ff 15 b9 01 01 00 	callq	*65977(%rip) ## literal pool symbol address: _objc_retain
100009ebf:	48 89 45 f0 	movq	%rax, -16(%rbp)
100009ec3:	e9 97 08 00 00 	jmp	0x10000a75f
100009ec8:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100009ecc:	48 8d 35 78 b0 00 00 	leaq	45176(%rip), %rsi ## literal pool for: "c"
100009ed3:	e8 56 9f 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
100009ed8:	83 f8 00 	cmpl	$0, %eax
100009edb:	0f 85 55 00 00 00 	jne	0x100009f36
100009ee1:	e9 00 00 00 00 	jmp	0x100009ee6
100009ee6:	48 8d 55 b7 	leaq	-73(%rbp), %rdx
100009eea:	c6 45 b7 00 	movb	$0, -73(%rbp)
100009eee:	48 8b 45 e8 	movq	-24(%rbp), %rax
100009ef2:	48 8b 4d d8 	movq	-40(%rbp), %rcx
100009ef6:	48 8b 35 0b 75 01 00 	movq	95499(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
100009efd:	48 89 c7 	movq	%rax, %rdi
100009f00:	ff 15 62 01 01 00 	callq	*65890(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
100009f06:	48 8b 05 bb 77 01 00 	movq	96187(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
100009f0d:	44 8a 45 b7 	movb	-73(%rbp), %r8b
100009f11:	48 8b 35 f8 74 01 00 	movq	95480(%rip), %rsi ## Objc selector ref: numberWithChar:
100009f18:	48 89 c7 	movq	%rax, %rdi
100009f1b:	41 0f be d0 	movsbl	%r8b, %edx
100009f1f:	ff 15 43 01 01 00 	callq	*65859(%rip) ## Objc message: +[NSNumber numberWithChar:]
100009f25:	48 89 c7 	movq	%rax, %rdi
100009f28:	e8 a7 9e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009f2d:	48 89 45 f0 	movq	%rax, -16(%rbp)
100009f31:	e9 29 08 00 00 	jmp	0x10000a75f
100009f36:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100009f3a:	48 8d 35 db be 00 00 	leaq	48859(%rip), %rsi ## literal pool for: "i"
100009f41:	e8 e8 9e 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
100009f46:	83 f8 00 	cmpl	$0, %eax
100009f49:	0f 85 64 00 00 00 	jne	0x100009fb3
100009f4f:	e9 00 00 00 00 	jmp	0x100009f54
100009f54:	48 8d 45 b0 	leaq	-80(%rbp), %rax
100009f58:	c7 45 b0 00 00 00 00 	movl	$0, -80(%rbp)
100009f5f:	48 8b 4d e8 	movq	-24(%rbp), %rcx
100009f63:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100009f67:	48 8b 35 9a 74 01 00 	movq	95386(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
100009f6e:	48 89 cf 	movq	%rcx, %rdi
100009f71:	48 89 95 10 ff ff ff 	movq	%rdx, -240(%rbp)
100009f78:	48 89 c2 	movq	%rax, %rdx
100009f7b:	48 8b 8d 10 ff ff ff 	movq	-240(%rbp), %rcx
100009f82:	ff 15 e0 00 01 00 	callq	*65760(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
100009f88:	48 8b 05 39 77 01 00 	movq	96057(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
100009f8f:	8b 55 b0 	movl	-80(%rbp), %edx
100009f92:	48 8b 35 47 70 01 00 	movq	94279(%rip), %rsi ## Objc selector ref: numberWithInt:
100009f99:	48 89 c7 	movq	%rax, %rdi
100009f9c:	ff 15 c6 00 01 00 	callq	*65734(%rip) ## Objc message: +[NSNumber numberWithInt:]
100009fa2:	48 89 c7 	movq	%rax, %rdi
100009fa5:	e8 2a 9e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100009faa:	48 89 45 f0 	movq	%rax, -16(%rbp)
100009fae:	e9 ac 07 00 00 	jmp	0x10000a75f
100009fb3:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100009fb7:	48 8d 35 60 be 00 00 	leaq	48736(%rip), %rsi ## literal pool for: "s"
100009fbe:	e8 6b 9e 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
100009fc3:	83 f8 00 	cmpl	$0, %eax
100009fc6:	0f 85 69 00 00 00 	jne	0x10000a035
100009fcc:	e9 00 00 00 00 	jmp	0x100009fd1
100009fd1:	48 8d 45 ae 	leaq	-82(%rbp), %rax
100009fd5:	66 c7 45 ae 00 00 	movw	$0, -82(%rbp)
100009fdb:	48 8b 4d e8 	movq	-24(%rbp), %rcx
100009fdf:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100009fe3:	48 8b 35 1e 74 01 00 	movq	95262(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
100009fea:	48 89 cf 	movq	%rcx, %rdi
100009fed:	48 89 95 08 ff ff ff 	movq	%rdx, -248(%rbp)
100009ff4:	48 89 c2 	movq	%rax, %rdx
100009ff7:	48 8b 8d 08 ff ff ff 	movq	-248(%rbp), %rcx
100009ffe:	ff 15 64 00 01 00 	callq	*65636(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a004:	48 8b 05 bd 76 01 00 	movq	95933(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a00b:	66 44 8b 45 ae 	movw	-82(%rbp), %r8w
10000a010:	48 8b 35 01 74 01 00 	movq	95233(%rip), %rsi ## Objc selector ref: numberWithShort:
10000a017:	48 89 c7 	movq	%rax, %rdi
10000a01a:	41 0f bf d0 	movswl	%r8w, %edx
10000a01e:	ff 15 44 00 01 00 	callq	*65604(%rip) ## Objc message: +[NSNumber numberWithShort:]
10000a024:	48 89 c7 	movq	%rax, %rdi
10000a027:	e8 a8 9d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a02c:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a030:	e9 2a 07 00 00 	jmp	0x10000a75f
10000a035:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a039:	48 8d 35 e0 bd 00 00 	leaq	48608(%rip), %rsi ## literal pool for: "q"
10000a040:	e8 e9 9d 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a045:	83 f8 00 	cmpl	$0, %eax
10000a048:	0f 85 66 00 00 00 	jne	0x10000a0b4
10000a04e:	e9 00 00 00 00 	jmp	0x10000a053
10000a053:	48 8d 45 a0 	leaq	-96(%rbp), %rax
10000a057:	48 c7 45 a0 00 00 00 00 	movq	$0, -96(%rbp)
10000a05f:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a063:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a067:	48 8b 35 9a 73 01 00 	movq	95130(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a06e:	48 89 cf 	movq	%rcx, %rdi
10000a071:	48 89 95 00 ff ff ff 	movq	%rdx, -256(%rbp)
10000a078:	48 89 c2 	movq	%rax, %rdx
10000a07b:	48 8b 8d 00 ff ff ff 	movq	-256(%rbp), %rcx
10000a082:	ff 15 e0 ff 00 00 	callq	*65504(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a088:	48 8b 05 39 76 01 00 	movq	95801(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a08f:	48 8b 55 a0 	movq	-96(%rbp), %rdx
10000a093:	48 8b 35 56 6f 01 00 	movq	94038(%rip), %rsi ## Objc selector ref: numberWithLong:
10000a09a:	48 89 c7 	movq	%rax, %rdi
10000a09d:	ff 15 c5 ff 00 00 	callq	*65477(%rip) ## Objc message: +[NSNumber numberWithLong:]
10000a0a3:	48 89 c7 	movq	%rax, %rdi
10000a0a6:	e8 29 9d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a0ab:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a0af:	e9 ab 06 00 00 	jmp	0x10000a75f
10000a0b4:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a0b8:	48 8d 35 61 bd 00 00 	leaq	48481(%rip), %rsi ## literal pool for: "q"
10000a0bf:	e8 6a 9d 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a0c4:	83 f8 00 	cmpl	$0, %eax
10000a0c7:	0f 85 66 00 00 00 	jne	0x10000a133
10000a0cd:	e9 00 00 00 00 	jmp	0x10000a0d2
10000a0d2:	48 8d 45 98 	leaq	-104(%rbp), %rax
10000a0d6:	48 c7 45 98 00 00 00 00 	movq	$0, -104(%rbp)
10000a0de:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a0e2:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a0e6:	48 8b 35 1b 73 01 00 	movq	95003(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a0ed:	48 89 cf 	movq	%rcx, %rdi
10000a0f0:	48 89 95 f8 fe ff ff 	movq	%rdx, -264(%rbp)
10000a0f7:	48 89 c2 	movq	%rax, %rdx
10000a0fa:	48 8b 8d f8 fe ff ff 	movq	-264(%rbp), %rcx
10000a101:	ff 15 61 ff 00 00 	callq	*65377(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a107:	48 8b 05 ba 75 01 00 	movq	95674(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a10e:	48 8b 55 98 	movq	-104(%rbp), %rdx
10000a112:	48 8b 35 07 73 01 00 	movq	94983(%rip), %rsi ## Objc selector ref: numberWithLongLong:
10000a119:	48 89 c7 	movq	%rax, %rdi
10000a11c:	ff 15 46 ff 00 00 	callq	*65350(%rip) ## Objc message: +[NSNumber numberWithLongLong:]
10000a122:	48 89 c7 	movq	%rax, %rdi
10000a125:	e8 aa 9c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a12a:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a12e:	e9 2c 06 00 00 	jmp	0x10000a75f
10000a133:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a137:	48 8d 35 e4 bc 00 00 	leaq	48356(%rip), %rsi ## literal pool for: "C"
10000a13e:	e8 eb 9c 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a143:	83 f8 00 	cmpl	$0, %eax
10000a146:	0f 85 55 00 00 00 	jne	0x10000a1a1
10000a14c:	e9 00 00 00 00 	jmp	0x10000a151
10000a151:	48 8d 55 97 	leaq	-105(%rbp), %rdx
10000a155:	c6 45 97 00 	movb	$0, -105(%rbp)
10000a159:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000a15d:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000a161:	48 8b 35 a0 72 01 00 	movq	94880(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a168:	48 89 c7 	movq	%rax, %rdi
10000a16b:	ff 15 f7 fe 00 00 	callq	*65271(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a171:	48 8b 05 50 75 01 00 	movq	95568(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a178:	44 8a 45 97 	movb	-105(%rbp), %r8b
10000a17c:	48 8b 35 a5 72 01 00 	movq	94885(%rip), %rsi ## Objc selector ref: numberWithUnsignedChar:
10000a183:	48 89 c7 	movq	%rax, %rdi
10000a186:	41 0f b6 d0 	movzbl	%r8b, %edx
10000a18a:	ff 15 d8 fe 00 00 	callq	*65240(%rip) ## Objc message: +[NSNumber numberWithUnsignedChar:]
10000a190:	48 89 c7 	movq	%rax, %rdi
10000a193:	e8 3c 9c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a198:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a19c:	e9 be 05 00 00 	jmp	0x10000a75f
10000a1a1:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a1a5:	48 8d 35 78 bc 00 00 	leaq	48248(%rip), %rsi ## literal pool for: "I"
10000a1ac:	e8 7d 9c 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a1b1:	83 f8 00 	cmpl	$0, %eax
10000a1b4:	0f 85 64 00 00 00 	jne	0x10000a21e
10000a1ba:	e9 00 00 00 00 	jmp	0x10000a1bf
10000a1bf:	48 8d 45 90 	leaq	-112(%rbp), %rax
10000a1c3:	c7 45 90 00 00 00 00 	movl	$0, -112(%rbp)
10000a1ca:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a1ce:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a1d2:	48 8b 35 2f 72 01 00 	movq	94767(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a1d9:	48 89 cf 	movq	%rcx, %rdi
10000a1dc:	48 89 95 f0 fe ff ff 	movq	%rdx, -272(%rbp)
10000a1e3:	48 89 c2 	movq	%rax, %rdx
10000a1e6:	48 8b 8d f0 fe ff ff 	movq	-272(%rbp), %rcx
10000a1ed:	ff 15 75 fe 00 00 	callq	*65141(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a1f3:	48 8b 05 ce 74 01 00 	movq	95438(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a1fa:	8b 55 90 	movl	-112(%rbp), %edx
10000a1fd:	48 8b 35 2c 72 01 00 	movq	94764(%rip), %rsi ## Objc selector ref: numberWithUnsignedInt:
10000a204:	48 89 c7 	movq	%rax, %rdi
10000a207:	ff 15 5b fe 00 00 	callq	*65115(%rip) ## Objc message: +[NSNumber numberWithUnsignedInt:]
10000a20d:	48 89 c7 	movq	%rax, %rdi
10000a210:	e8 bf 9b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a215:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a219:	e9 41 05 00 00 	jmp	0x10000a75f
10000a21e:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a222:	48 8d 35 fd bb 00 00 	leaq	48125(%rip), %rsi ## literal pool for: "S"
10000a229:	e8 00 9c 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a22e:	83 f8 00 	cmpl	$0, %eax
10000a231:	0f 85 69 00 00 00 	jne	0x10000a2a0
10000a237:	e9 00 00 00 00 	jmp	0x10000a23c
10000a23c:	48 8d 45 8e 	leaq	-114(%rbp), %rax
10000a240:	66 c7 45 8e 00 00 	movw	$0, -114(%rbp)
10000a246:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a24a:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a24e:	48 8b 35 b3 71 01 00 	movq	94643(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a255:	48 89 cf 	movq	%rcx, %rdi
10000a258:	48 89 95 e8 fe ff ff 	movq	%rdx, -280(%rbp)
10000a25f:	48 89 c2 	movq	%rax, %rdx
10000a262:	48 8b 8d e8 fe ff ff 	movq	-280(%rbp), %rcx
10000a269:	ff 15 f9 fd 00 00 	callq	*65017(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a26f:	48 8b 05 52 74 01 00 	movq	95314(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a276:	66 44 8b 45 8e 	movw	-114(%rbp), %r8w
10000a27b:	48 8b 35 b6 71 01 00 	movq	94646(%rip), %rsi ## Objc selector ref: numberWithUnsignedShort:
10000a282:	48 89 c7 	movq	%rax, %rdi
10000a285:	41 0f b7 d0 	movzwl	%r8w, %edx
10000a289:	ff 15 d9 fd 00 00 	callq	*64985(%rip) ## Objc message: +[NSNumber numberWithUnsignedShort:]
10000a28f:	48 89 c7 	movq	%rax, %rdi
10000a292:	e8 3d 9b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a297:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a29b:	e9 bf 04 00 00 	jmp	0x10000a75f
10000a2a0:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a2a4:	48 8d 35 7d bb 00 00 	leaq	47997(%rip), %rsi ## literal pool for: "Q"
10000a2ab:	e8 7e 9b 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a2b0:	83 f8 00 	cmpl	$0, %eax
10000a2b3:	0f 85 66 00 00 00 	jne	0x10000a31f
10000a2b9:	e9 00 00 00 00 	jmp	0x10000a2be
10000a2be:	48 8d 45 80 	leaq	-128(%rbp), %rax
10000a2c2:	48 c7 45 80 00 00 00 00 	movq	$0, -128(%rbp)
10000a2ca:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a2ce:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a2d2:	48 8b 35 2f 71 01 00 	movq	94511(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a2d9:	48 89 cf 	movq	%rcx, %rdi
10000a2dc:	48 89 95 e0 fe ff ff 	movq	%rdx, -288(%rbp)
10000a2e3:	48 89 c2 	movq	%rax, %rdx
10000a2e6:	48 8b 8d e0 fe ff ff 	movq	-288(%rbp), %rcx
10000a2ed:	ff 15 75 fd 00 00 	callq	*64885(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a2f3:	48 8b 05 ce 73 01 00 	movq	95182(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a2fa:	48 8b 55 80 	movq	-128(%rbp), %rdx
10000a2fe:	48 8b 35 3b 71 01 00 	movq	94523(%rip), %rsi ## Objc selector ref: numberWithUnsignedLong:
10000a305:	48 89 c7 	movq	%rax, %rdi
10000a308:	ff 15 5a fd 00 00 	callq	*64858(%rip) ## Objc message: +[NSNumber numberWithUnsignedLong:]
10000a30e:	48 89 c7 	movq	%rax, %rdi
10000a311:	e8 be 9a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a316:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a31a:	e9 40 04 00 00 	jmp	0x10000a75f
10000a31f:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a323:	48 8d 35 fe ba 00 00 	leaq	47870(%rip), %rsi ## literal pool for: "Q"
10000a32a:	e8 ff 9a 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a32f:	83 f8 00 	cmpl	$0, %eax
10000a332:	0f 85 6f 00 00 00 	jne	0x10000a3a7
10000a338:	e9 00 00 00 00 	jmp	0x10000a33d
10000a33d:	48 8d 85 78 ff ff ff 	leaq	-136(%rbp), %rax
10000a344:	48 c7 85 78 ff ff ff 00 00 00 00 	movq	$0, -136(%rbp)
10000a34f:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a353:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a357:	48 8b 35 aa 70 01 00 	movq	94378(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a35e:	48 89 cf 	movq	%rcx, %rdi
10000a361:	48 89 95 d8 fe ff ff 	movq	%rdx, -296(%rbp)
10000a368:	48 89 c2 	movq	%rax, %rdx
10000a36b:	48 8b 8d d8 fe ff ff 	movq	-296(%rbp), %rcx
10000a372:	ff 15 f0 fc 00 00 	callq	*64752(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a378:	48 8b 05 49 73 01 00 	movq	95049(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a37f:	48 8b 95 78 ff ff ff 	movq	-136(%rbp), %rdx
10000a386:	48 8b 35 bb 70 01 00 	movq	94395(%rip), %rsi ## Objc selector ref: numberWithUnsignedLongLong:
10000a38d:	48 89 c7 	movq	%rax, %rdi
10000a390:	ff 15 d2 fc 00 00 	callq	*64722(%rip) ## Objc message: +[NSNumber numberWithUnsignedLongLong:]
10000a396:	48 89 c7 	movq	%rax, %rdi
10000a399:	e8 36 9a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a39e:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a3a2:	e9 b8 03 00 00 	jmp	0x10000a75f
10000a3a7:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a3ab:	48 8d 35 78 ba 00 00 	leaq	47736(%rip), %rsi ## literal pool for: "f"
10000a3b2:	e8 77 9a 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a3b7:	83 f8 00 	cmpl	$0, %eax
10000a3ba:	0f 85 70 00 00 00 	jne	0x10000a430
10000a3c0:	e9 00 00 00 00 	jmp	0x10000a3c5
10000a3c5:	48 8d 85 74 ff ff ff 	leaq	-140(%rbp), %rax
10000a3cc:	0f 57 c0 	xorps	%xmm0, %xmm0
10000a3cf:	f3 0f 11 85 74 ff ff ff 	movss	%xmm0, -140(%rbp)
10000a3d7:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a3db:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a3df:	48 8b 35 22 70 01 00 	movq	94242(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a3e6:	48 89 cf 	movq	%rcx, %rdi
10000a3e9:	48 89 95 d0 fe ff ff 	movq	%rdx, -304(%rbp)
10000a3f0:	48 89 c2 	movq	%rax, %rdx
10000a3f3:	48 8b 8d d0 fe ff ff 	movq	-304(%rbp), %rcx
10000a3fa:	ff 15 68 fc 00 00 	callq	*64616(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a400:	48 8b 05 c1 72 01 00 	movq	94913(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a407:	f3 0f 10 85 74 ff ff ff 	movss	-140(%rbp), %xmm0
10000a40f:	48 8b 35 3a 70 01 00 	movq	94266(%rip), %rsi ## Objc selector ref: numberWithFloat:
10000a416:	48 89 c7 	movq	%rax, %rdi
10000a419:	ff 15 49 fc 00 00 	callq	*64585(%rip) ## Objc message: +[NSNumber numberWithFloat:]
10000a41f:	48 89 c7 	movq	%rax, %rdi
10000a422:	e8 ad 99 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a427:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a42b:	e9 2f 03 00 00 	jmp	0x10000a75f
10000a430:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a434:	48 8d 35 1b ab 00 00 	leaq	43803(%rip), %rsi ## literal pool for: "d"
10000a43b:	e8 ee 99 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a440:	83 f8 00 	cmpl	$0, %eax
10000a443:	0f 85 70 00 00 00 	jne	0x10000a4b9
10000a449:	e9 00 00 00 00 	jmp	0x10000a44e
10000a44e:	48 8d 85 68 ff ff ff 	leaq	-152(%rbp), %rax
10000a455:	0f 57 c0 	xorps	%xmm0, %xmm0
10000a458:	f2 0f 11 85 68 ff ff ff 	movsd	%xmm0, -152(%rbp)
10000a460:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a464:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a468:	48 8b 35 99 6f 01 00 	movq	94105(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a46f:	48 89 cf 	movq	%rcx, %rdi
10000a472:	48 89 95 c8 fe ff ff 	movq	%rdx, -312(%rbp)
10000a479:	48 89 c2 	movq	%rax, %rdx
10000a47c:	48 8b 8d c8 fe ff ff 	movq	-312(%rbp), %rcx
10000a483:	ff 15 df fb 00 00 	callq	*64479(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a489:	48 8b 05 38 72 01 00 	movq	94776(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a490:	f2 0f 10 85 68 ff ff ff 	movsd	-152(%rbp), %xmm0
10000a498:	48 8b 35 39 6f 01 00 	movq	94009(%rip), %rsi ## Objc selector ref: numberWithDouble:
10000a49f:	48 89 c7 	movq	%rax, %rdi
10000a4a2:	ff 15 c0 fb 00 00 	callq	*64448(%rip) ## Objc message: +[NSNumber numberWithDouble:]
10000a4a8:	48 89 c7 	movq	%rax, %rdi
10000a4ab:	e8 24 99 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a4b0:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a4b4:	e9 a6 02 00 00 	jmp	0x10000a75f
10000a4b9:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a4bd:	48 8d 35 68 b9 00 00 	leaq	47464(%rip), %rsi ## literal pool for: "B"
10000a4c4:	e8 65 99 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a4c9:	83 f8 00 	cmpl	$0, %eax
10000a4cc:	0f 85 62 00 00 00 	jne	0x10000a534
10000a4d2:	e9 00 00 00 00 	jmp	0x10000a4d7
10000a4d7:	48 8d 95 67 ff ff ff 	leaq	-153(%rbp), %rdx
10000a4de:	c6 85 67 ff ff ff 00 	movb	$0, -153(%rbp)
10000a4e5:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000a4e9:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000a4ed:	48 8b 35 14 6f 01 00 	movq	93972(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a4f4:	48 89 c7 	movq	%rax, %rdi
10000a4f7:	ff 15 6b fb 00 00 	callq	*64363(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a4fd:	48 8b 05 c4 71 01 00 	movq	94660(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a504:	44 8a 85 67 ff ff ff 	movb	-153(%rbp), %r8b
10000a50b:	48 8b 35 a6 6b 01 00 	movq	93094(%rip), %rsi ## Objc selector ref: numberWithBool:
10000a512:	41 80 e0 01 	andb	$1, %r8b
10000a516:	48 89 c7 	movq	%rax, %rdi
10000a519:	41 0f b6 d0 	movzbl	%r8b, %edx
10000a51d:	ff 15 45 fb 00 00 	callq	*64325(%rip) ## Objc message: +[NSNumber numberWithBool:]
10000a523:	48 89 c7 	movq	%rax, %rdi
10000a526:	e8 a9 98 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a52b:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a52f:	e9 2b 02 00 00 	jmp	0x10000a75f
10000a534:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a538:	48 8d 35 ed b8 00 00 	leaq	47341(%rip), %rsi ## literal pool for: "B"
10000a53f:	e8 ea 98 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a544:	83 f8 00 	cmpl	$0, %eax
10000a547:	0f 85 62 00 00 00 	jne	0x10000a5af
10000a54d:	e9 00 00 00 00 	jmp	0x10000a552
10000a552:	48 8d 95 66 ff ff ff 	leaq	-154(%rbp), %rdx
10000a559:	c6 85 66 ff ff ff 00 	movb	$0, -154(%rbp)
10000a560:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000a564:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000a568:	48 8b 35 99 6e 01 00 	movq	93849(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a56f:	48 89 c7 	movq	%rax, %rdi
10000a572:	ff 15 f0 fa 00 00 	callq	*64240(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a578:	48 8b 05 49 71 01 00 	movq	94537(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNumber
10000a57f:	44 8a 85 66 ff ff ff 	movb	-154(%rbp), %r8b
10000a586:	48 8b 35 2b 6b 01 00 	movq	92971(%rip), %rsi ## Objc selector ref: numberWithBool:
10000a58d:	41 80 e0 01 	andb	$1, %r8b
10000a591:	48 89 c7 	movq	%rax, %rdi
10000a594:	41 0f b6 d0 	movzbl	%r8b, %edx
10000a598:	ff 15 ca fa 00 00 	callq	*64202(%rip) ## Objc message: +[NSNumber numberWithBool:]
10000a59e:	48 89 c7 	movq	%rax, %rdi
10000a5a1:	e8 2e 98 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a5a6:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a5aa:	e9 b0 01 00 00 	jmp	0x10000a75f
10000a5af:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a5b3:	48 8d 35 74 b8 00 00 	leaq	47220(%rip), %rsi ## literal pool for: "*"
10000a5ba:	e8 6f 98 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a5bf:	83 f8 00 	cmpl	$0, %eax
10000a5c2:	0f 85 6f 00 00 00 	jne	0x10000a637
10000a5c8:	e9 00 00 00 00 	jmp	0x10000a5cd
10000a5cd:	48 8d 85 58 ff ff ff 	leaq	-168(%rbp), %rax
10000a5d4:	48 c7 85 58 ff ff ff 00 00 00 00 	movq	$0, -168(%rbp)
10000a5df:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a5e3:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a5e7:	48 8b 35 1a 6e 01 00 	movq	93722(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a5ee:	48 89 cf 	movq	%rcx, %rdi
10000a5f1:	48 89 95 c0 fe ff ff 	movq	%rdx, -320(%rbp)
10000a5f8:	48 89 c2 	movq	%rax, %rdx
10000a5fb:	48 8b 8d c0 fe ff ff 	movq	-320(%rbp), %rcx
10000a602:	ff 15 60 fa 00 00 	callq	*64096(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a608:	48 8b 05 b1 70 01 00 	movq	94385(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000a60f:	48 8b 95 58 ff ff ff 	movq	-168(%rbp), %rdx
10000a616:	48 8b 35 3b 6e 01 00 	movq	93755(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000a61d:	48 89 c7 	movq	%rax, %rdi
10000a620:	ff 15 42 fa 00 00 	callq	*64066(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000a626:	48 89 c7 	movq	%rax, %rdi
10000a629:	e8 a6 97 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a62e:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a632:	e9 28 01 00 00 	jmp	0x10000a75f
10000a637:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a63b:	48 8d 35 ee b7 00 00 	leaq	47086(%rip), %rsi ## literal pool for: "@?"
10000a642:	e8 e7 97 00 00 	callq	0x100013e2e ## symbol stub for: _strcmp
10000a647:	83 f8 00 	cmpl	$0, %eax
10000a64a:	0f 85 58 00 00 00 	jne	0x10000a6a8
10000a650:	48 8d 85 50 ff ff ff 	leaq	-176(%rbp), %rax
10000a657:	48 c7 85 50 ff ff ff 00 00 00 00 	movq	$0, -176(%rbp)
10000a662:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000a666:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000a66a:	48 8b 35 97 6d 01 00 	movq	93591(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000a671:	48 89 cf 	movq	%rcx, %rdi
10000a674:	48 89 95 b8 fe ff ff 	movq	%rdx, -328(%rbp)
10000a67b:	48 89 c2 	movq	%rax, %rdx
10000a67e:	48 8b 8d b8 fe ff ff 	movq	-328(%rbp), %rcx
10000a685:	ff 15 dd f9 00 00 	callq	*63965(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a68b:	48 8b bd 50 ff ff ff 	movq	-176(%rbp), %rdi
10000a692:	48 8b 35 7f 68 01 00 	movq	92287(%rip), %rsi ## Objc selector ref: copy
10000a699:	ff 15 c9 f9 00 00 	callq	*63945(%rip) ## Objc message: -[%rdi copy]
10000a69f:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a6a3:	e9 b7 00 00 00 	jmp	0x10000a75f
10000a6a8:	48 c7 85 48 ff ff ff 00 00 00 00 	movq	$0, -184(%rbp)
10000a6b3:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000a6b7:	31 c0 	xorl	%eax, %eax
10000a6b9:	89 c2 	movl	%eax, %edx
10000a6bb:	48 8d b5 48 ff ff ff 	leaq	-184(%rbp), %rsi
10000a6c2:	e8 3f 95 00 00 	callq	0x100013c06 ## symbol stub for: _NSGetSizeAndAlignment
10000a6c7:	48 8b 95 48 ff ff ff 	movq	-184(%rbp), %rdx
10000a6ce:	48 89 e6 	movq	%rsp, %rsi
10000a6d1:	48 89 b5 40 ff ff ff 	movq	%rsi, -192(%rbp)
10000a6d8:	48 83 c2 0f 	addq	$15, %rdx
10000a6dc:	48 83 e2 f0 	andq	$-16, %rdx
10000a6e0:	48 89 e6 	movq	%rsp, %rsi
10000a6e3:	48 29 d6 	subq	%rdx, %rsi
10000a6e6:	48 89 f4 	movq	%rsi, %rsp
10000a6e9:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000a6ed:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000a6f1:	48 8b 3d 10 6d 01 00 	movq	93456(%rip), %rdi ## Objc selector ref: getArgument:atIndex:
10000a6f8:	48 89 bd b0 fe ff ff 	movq	%rdi, -336(%rbp)
10000a6ff:	48 89 d7 	movq	%rdx, %rdi
10000a702:	48 8b 95 b0 fe ff ff 	movq	-336(%rbp), %rdx
10000a709:	48 89 b5 a8 fe ff ff 	movq	%rsi, -344(%rbp)
10000a710:	48 89 d6 	movq	%rdx, %rsi
10000a713:	48 8b 95 a8 fe ff ff 	movq	-344(%rbp), %rdx
10000a71a:	48 89 85 a0 fe ff ff 	movq	%rax, -352(%rbp)
10000a721:	ff 15 41 f9 00 00 	callq	*63809(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000a727:	48 8b 05 62 70 01 00 	movq	94306(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSValue
10000a72e:	48 8b 4d d0 	movq	-48(%rbp), %rcx
10000a732:	48 8b 35 27 6d 01 00 	movq	93479(%rip), %rsi ## Objc selector ref: valueWithBytes:objCType:
10000a739:	48 89 c7 	movq	%rax, %rdi
10000a73c:	48 8b 95 a8 fe ff ff 	movq	-344(%rbp), %rdx
10000a743:	ff 15 1f f9 00 00 	callq	*63775(%rip) ## Objc message: +[NSValue valueWithBytes:objCType:]
10000a749:	48 89 c7 	movq	%rax, %rdi
10000a74c:	e8 83 96 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a751:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000a755:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10000a75c:	48 89 c4 	movq	%rax, %rsp
10000a75f:	48 8b 7d f0 	movq	-16(%rbp), %rdi
10000a763:	e8 0c 96 00 00 	callq	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000a768:	48 8b 3d c9 f8 00 00 	movq	63689(%rip), %rdi ## literal pool symbol address: ___stack_chk_guard
10000a76f:	48 8b 3f 	movq	(%rdi), %rdi
10000a772:	48 8b 4d f8 	movq	-8(%rbp), %rcx
10000a776:	48 39 cf 	cmpq	%rcx, %rdi
10000a779:	48 89 85 98 fe ff ff 	movq	%rax, -360(%rbp)
10000a780:	0f 85 0c 00 00 00 	jne	0x10000a792
10000a786:	48 8b 85 98 fe ff ff 	movq	-360(%rbp), %rax
10000a78d:	48 89 ec 	movq	%rbp, %rsp
10000a790:	5d 	popq	%rbp
10000a791:	c3 	retq
10000a792:	e8 b1 94 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
10000a797:	0f 0b 	ud2
10000a799:	0f 1f 80 00 00 00 00 	nopl	(%rax)
-[NSInvocation(Aspects) aspects_arguments]:
10000a7a0:	55 	pushq	%rbp
10000a7a1:	48 89 e5 	movq	%rsp, %rbp
10000a7a4:	48 83 ec 70 	subq	$112, %rsp
10000a7a8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000a7ac:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000a7b0:	48 8b 35 e9 6e 01 00 	movq	93929(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
10000a7b7:	48 8b 3d 2a 68 01 00 	movq	92202(%rip), %rdi ## Objc selector ref: array
10000a7be:	48 89 7d c8 	movq	%rdi, -56(%rbp)
10000a7c2:	48 89 f7 	movq	%rsi, %rdi
10000a7c5:	48 8b 75 c8 	movq	-56(%rbp), %rsi
10000a7c9:	ff 15 99 f8 00 00 	callq	*63641(%rip) ## Objc message: +[NSMutableArray array]
10000a7cf:	48 89 c7 	movq	%rax, %rdi
10000a7d2:	e8 fd 95 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a7d7:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000a7db:	48 c7 45 e0 02 00 00 00 	movq	$2, -32(%rbp)
10000a7e3:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000a7e7:	48 8b 4d f8 	movq	-8(%rbp), %rcx
10000a7eb:	48 8b 35 06 6c 01 00 	movq	93190(%rip), %rsi ## Objc selector ref: methodSignature
10000a7f2:	48 89 cf 	movq	%rcx, %rdi
10000a7f5:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000a7f9:	ff 15 69 f8 00 00 	callq	*63593(%rip) ## Objc message: -[%rdi methodSignature]
10000a7ff:	48 89 c7 	movq	%rax, %rdi
10000a802:	e8 cd 95 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a807:	48 8b 35 5a 6c 01 00 	movq	93274(%rip), %rsi ## Objc selector ref: numberOfArguments
10000a80e:	48 89 c1 	movq	%rax, %rcx
10000a811:	48 89 cf 	movq	%rcx, %rdi
10000a814:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000a818:	ff 15 4a f8 00 00 	callq	*63562(%rip) ## Objc message: -[%rdi numberOfArguments]
10000a81e:	48 8b 4d b8 	movq	-72(%rbp), %rcx
10000a822:	48 89 cf 	movq	%rcx, %rdi
10000a825:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000a829:	ff 15 41 f8 00 00 	callq	*63553(%rip) ## literal pool symbol address: _objc_release
10000a82f:	48 8b 45 c0 	movq	-64(%rbp), %rax
10000a833:	48 8b 4d b0 	movq	-80(%rbp), %rcx
10000a837:	48 39 c8 	cmpq	%rcx, %rax
10000a83a:	0f 83 c4 00 00 00 	jae	0x10000a904
10000a840:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000a844:	48 8b 4d f8 	movq	-8(%rbp), %rcx
10000a848:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000a84c:	48 8b 35 1d 6c 01 00 	movq	93213(%rip), %rsi ## Objc selector ref: aspect_argumentAtIndex:
10000a853:	48 89 cf 	movq	%rcx, %rdi
10000a856:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000a85a:	ff 15 08 f8 00 00 	callq	*63496(%rip) ## Objc message: -[%rdi aspect_argumentAtIndex:]
10000a860:	48 89 c7 	movq	%rax, %rdi
10000a863:	e8 6c 95 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a868:	c6 45 d7 00 	movb	$0, -41(%rbp)
10000a86c:	48 83 f8 00 	cmpq	$0, %rax
10000a870:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000a874:	0f 84 0d 00 00 00 	je	0x10000a887
10000a87a:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000a87e:	48 89 45 98 	movq	%rax, -104(%rbp)
10000a882:	e9 2b 00 00 00 	jmp	0x10000a8b2
10000a887:	48 8b 05 0a 6f 01 00 	movq	93962(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSNull
10000a88e:	48 8b 35 e3 6b 01 00 	movq	93155(%rip), %rsi ## Objc selector ref: null
10000a895:	48 89 c7 	movq	%rax, %rdi
10000a898:	ff 15 ca f7 00 00 	callq	*63434(%rip) ## Objc message: +[NSNull null]
10000a89e:	48 89 c7 	movq	%rax, %rdi
10000a8a1:	e8 2e 95 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a8a6:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000a8aa:	c6 45 d7 01 	movb	$1, -41(%rbp)
10000a8ae:	48 89 45 98 	movq	%rax, -104(%rbp)
10000a8b2:	48 8b 45 98 	movq	-104(%rbp), %rax
10000a8b6:	48 8b 35 9b 66 01 00 	movq	91803(%rip), %rsi ## Objc selector ref: addObject:
10000a8bd:	48 8b 4d a8 	movq	-88(%rbp), %rcx
10000a8c1:	48 89 cf 	movq	%rcx, %rdi
10000a8c4:	48 89 c2 	movq	%rax, %rdx
10000a8c7:	ff 15 9b f7 00 00 	callq	*63387(%rip) ## Objc message: -[%rdi addObject:]
10000a8cd:	f6 45 d7 01 	testb	$1, -41(%rbp)
10000a8d1:	0f 85 05 00 00 00 	jne	0x10000a8dc
10000a8d7:	e9 0d 00 00 00 	jmp	0x10000a8e9
10000a8dc:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000a8e0:	48 89 c7 	movq	%rax, %rdi
10000a8e3:	ff 15 87 f7 00 00 	callq	*63367(%rip) ## literal pool symbol address: _objc_release
10000a8e9:	48 8b 7d a0 	movq	-96(%rbp), %rdi
10000a8ed:	ff 15 7d f7 00 00 	callq	*63357(%rip) ## literal pool symbol address: _objc_release
10000a8f3:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000a8f7:	48 83 c0 01 	addq	$1, %rax
10000a8fb:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000a8ff:	e9 df fe ff ff 	jmp	0x10000a7e3
10000a904:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000a908:	48 8b 35 09 66 01 00 	movq	91657(%rip), %rsi ## Objc selector ref: copy
10000a90f:	48 8b 05 52 f7 00 00 	movq	63314(%rip), %rax ## Objc message: -[%rdi copy]
10000a916:	ff d0 	callq	*%rax
10000a918:	31 c9 	xorl	%ecx, %ecx
10000a91a:	89 ce 	movl	%ecx, %esi
10000a91c:	48 8d 7d e8 	leaq	-24(%rbp), %rdi
10000a920:	48 89 45 90 	movq	%rax, -112(%rbp)
10000a924:	e8 c9 94 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000a929:	48 8b 45 90 	movq	-112(%rbp), %rax
10000a92d:	48 89 c7 	movq	%rax, %rdi
10000a930:	48 83 c4 70 	addq	$112, %rsp
10000a934:	5d 	popq	%rbp
10000a935:	e9 3a 94 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000a93a:	66 0f 1f 44 00 00 	nopw	(%rax,%rax)
+[AspectIdentifier identifierWithSelector:object:options:block:error:]:
10000a940:	55 	pushq	%rbp
10000a941:	48 89 e5 	movq	%rsp, %rbp
10000a944:	48 81 ec 00 01 00 00 	subq	$256, %rsp
10000a94b:	48 8b 45 10 	movq	16(%rbp), %rax
10000a94f:	4c 8d 55 d8 	leaq	-40(%rbp), %r10
10000a953:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000a957:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000a95b:	48 89 55 e0 	movq	%rdx, -32(%rbp)
10000a95f:	48 c7 45 d8 00 00 00 00 	movq	$0, -40(%rbp)
10000a967:	4c 89 d7 	movq	%r10, %rdi
10000a96a:	48 89 ce 	movq	%rcx, %rsi
10000a96d:	48 89 45 88 	movq	%rax, -120(%rbp)
10000a971:	4c 89 4d 80 	movq	%r9, -128(%rbp)
10000a975:	4c 89 85 78 ff ff ff 	movq	%r8, -136(%rbp)
10000a97c:	e8 71 94 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000a981:	48 8d 7d c8 	leaq	-56(%rbp), %rdi
10000a985:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000a98c:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000a990:	48 c7 45 c8 00 00 00 00 	movq	$0, -56(%rbp)
10000a998:	48 8b 75 80 	movq	-128(%rbp), %rsi
10000a99c:	e8 51 94 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000a9a1:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
10000a9a6:	0f 95 c0 	setne	%al
10000a9a9:	34 ff 	xorb	$-1, %al
10000a9ab:	24 01 	andb	$1, %al
10000a9ad:	0f b6 c8 	movzbl	%al, %ecx
10000a9b0:	48 63 d1 	movslq	%ecx, %rdx
10000a9b3:	48 83 fa 00 	cmpq	$0, %rdx
10000a9b7:	0f 84 9d 01 00 00 	je	0x10000ab5a
10000a9bd:	48 8d 15 6f b4 00 00 	leaq	46191(%rip), %rdx ## literal pool for: "+[AspectIdentifier identifierWithSelector:object:options:block:error:]"
10000a9c4:	48 8b 05 f5 6c 01 00 	movq	93429(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000a9cb:	48 8b 35 86 6a 01 00 	movq	92806(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000a9d2:	48 89 c7 	movq	%rax, %rdi
10000a9d5:	ff 15 8d f6 00 00 	callq	*63117(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000a9db:	48 89 c7 	movq	%rax, %rdi
10000a9de:	e8 f1 93 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000a9e3:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000a9e7:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
10000a9ec:	0f 84 10 00 00 00 	je	0x10000aa02
10000a9f2:	48 8b 45 c0 	movq	-64(%rbp), %rax
10000a9f6:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000a9fd:	e9 13 00 00 00 	jmp	0x10000aa15
10000aa02:	48 8d 05 5f 1c 01 00 	leaq	72799(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000aa09:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000aa10:	e9 00 00 00 00 	jmp	0x10000aa15
10000aa15:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
10000aa1c:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000aa20:	48 89 cf 	movq	%rcx, %rdi
10000aa23:	48 89 c6 	movq	%rax, %rsi
10000aa26:	e8 c7 93 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000aa2b:	48 8d 15 5b b4 00 00 	leaq	46171(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000aa32:	48 8b 05 87 6c 01 00 	movq	93319(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000aa39:	48 8b 35 18 6a 01 00 	movq	92696(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000aa40:	48 89 c7 	movq	%rax, %rdi
10000aa43:	ff 15 1f f6 00 00 	callq	*63007(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000aa49:	48 89 c7 	movq	%rax, %rdi
10000aa4c:	e8 83 93 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000aa51:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000aa55:	48 83 7d b8 00 	cmpq	$0, -72(%rbp)
10000aa5a:	0f 84 10 00 00 00 	je	0x10000aa70
10000aa60:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000aa64:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000aa6b:	e9 13 00 00 00 	jmp	0x10000aa83
10000aa70:	48 8d 05 11 1c 01 00 	leaq	72721(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000aa77:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000aa7e:	e9 00 00 00 00 	jmp	0x10000aa83
10000aa83:	48 8b 85 68 ff ff ff 	movq	-152(%rbp), %rax
10000aa8a:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
10000aa8e:	48 89 cf 	movq	%rcx, %rdi
10000aa91:	48 89 c6 	movq	%rax, %rsi
10000aa94:	e8 59 93 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000aa99:	48 8b 05 00 6d 01 00 	movq	93440(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000aaa0:	48 8b 35 d9 69 01 00 	movq	92633(%rip), %rsi ## Objc selector ref: currentHandler
10000aaa7:	48 89 c7 	movq	%rax, %rdi
10000aaaa:	ff 15 b8 f5 00 00 	callq	*62904(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000aab0:	48 89 c7 	movq	%rax, %rdi
10000aab3:	e8 1c 93 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000aab8:	ba f8 02 00 00 	movl	$760, %edx
10000aabd:	41 89 d0 	movl	%edx, %r8d
10000aac0:	48 8d 0d e1 1b 01 00 	leaq	72673(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000aac7:	48 8d 35 fa 1b 01 00 	leaq	72698(%rip), %rsi ## Objc cfstring ref: @"block"
10000aace:	48 8b 55 c0 	movq	-64(%rbp), %rdx
10000aad2:	48 8b 7d b8 	movq	-72(%rbp), %rdi
10000aad6:	4c 8b 0d ab 69 01 00 	movq	92587(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000aadd:	49 89 c2 	movq	%rax, %r10
10000aae0:	48 89 bd 60 ff ff ff 	movq	%rdi, -160(%rbp)
10000aae7:	4c 89 d7 	movq	%r10, %rdi
10000aaea:	48 89 b5 58 ff ff ff 	movq	%rsi, -168(%rbp)
10000aaf1:	4c 89 ce 	movq	%r9, %rsi
10000aaf4:	4c 8b 8d 60 ff ff ff 	movq	-160(%rbp), %r9
10000aafb:	48 89 8d 50 ff ff ff 	movq	%rcx, -176(%rbp)
10000ab02:	4c 89 c9 	movq	%r9, %rcx
10000ab05:	4c 8b 8d 50 ff ff ff 	movq	-176(%rbp), %r9
10000ab0c:	4c 8b 95 58 ff ff ff 	movq	-168(%rbp), %r10
10000ab13:	4c 89 14 24 	movq	%r10, (%rsp)
10000ab17:	48 89 85 48 ff ff ff 	movq	%rax, -184(%rbp)
10000ab1e:	b0 00 	movb	$0, %al
10000ab20:	ff 15 42 f5 00 00 	callq	*62786(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000ab26:	48 8b 8d 48 ff ff ff 	movq	-184(%rbp), %rcx
10000ab2d:	48 89 cf 	movq	%rcx, %rdi
10000ab30:	ff 15 3a f5 00 00 	callq	*62778(%rip) ## literal pool symbol address: _objc_release
10000ab36:	45 31 db 	xorl	%r11d, %r11d
10000ab39:	44 89 de 	movl	%r11d, %esi
10000ab3c:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
10000ab40:	48 89 cf 	movq	%rcx, %rdi
10000ab43:	e8 aa 92 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ab48:	45 31 db 	xorl	%r11d, %r11d
10000ab4b:	44 89 de 	movl	%r11d, %esi
10000ab4e:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000ab52:	48 89 cf 	movq	%rcx, %rdi
10000ab55:	e8 98 92 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ab5a:	e9 00 00 00 00 	jmp	0x10000ab5f
10000ab5f:	e9 00 00 00 00 	jmp	0x10000ab64
10000ab64:	e9 00 00 00 00 	jmp	0x10000ab69
10000ab69:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
10000ab6e:	0f 95 c0 	setne	%al
10000ab71:	34 ff 	xorb	$-1, %al
10000ab73:	24 01 	andb	$1, %al
10000ab75:	0f b6 c8 	movzbl	%al, %ecx
10000ab78:	48 63 d1 	movslq	%ecx, %rdx
10000ab7b:	48 83 fa 00 	cmpq	$0, %rdx
10000ab7f:	0f 84 9d 01 00 00 	je	0x10000ad22
10000ab85:	48 8d 15 a7 b2 00 00 	leaq	45735(%rip), %rdx ## literal pool for: "+[AspectIdentifier identifierWithSelector:object:options:block:error:]"
10000ab8c:	48 8b 05 2d 6b 01 00 	movq	92973(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000ab93:	48 8b 35 be 68 01 00 	movq	92350(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000ab9a:	48 89 c7 	movq	%rax, %rdi
10000ab9d:	ff 15 c5 f4 00 00 	callq	*62661(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000aba3:	48 89 c7 	movq	%rax, %rdi
10000aba6:	e8 29 92 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000abab:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000abaf:	48 83 7d b0 00 	cmpq	$0, -80(%rbp)
10000abb4:	0f 84 10 00 00 00 	je	0x10000abca
10000abba:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000abbe:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000abc5:	e9 13 00 00 00 	jmp	0x10000abdd
10000abca:	48 8d 05 97 1a 01 00 	leaq	72343(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000abd1:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000abd8:	e9 00 00 00 00 	jmp	0x10000abdd
10000abdd:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10000abe4:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
10000abe8:	48 89 cf 	movq	%rcx, %rdi
10000abeb:	48 89 c6 	movq	%rax, %rsi
10000abee:	e8 ff 91 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000abf3:	48 8d 15 93 b2 00 00 	leaq	45715(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000abfa:	48 8b 05 bf 6a 01 00 	movq	92863(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000ac01:	48 8b 35 50 68 01 00 	movq	92240(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000ac08:	48 89 c7 	movq	%rax, %rdi
10000ac0b:	ff 15 57 f4 00 00 	callq	*62551(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000ac11:	48 89 c7 	movq	%rax, %rdi
10000ac14:	e8 bb 91 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ac19:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000ac1d:	48 83 7d a8 00 	cmpq	$0, -88(%rbp)
10000ac22:	0f 84 10 00 00 00 	je	0x10000ac38
10000ac28:	48 8b 45 a8 	movq	-88(%rbp), %rax
10000ac2c:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000ac33:	e9 13 00 00 00 	jmp	0x10000ac4b
10000ac38:	48 8d 05 49 1a 01 00 	leaq	72265(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000ac3f:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000ac46:	e9 00 00 00 00 	jmp	0x10000ac4b
10000ac4b:	48 8b 85 38 ff ff ff 	movq	-200(%rbp), %rax
10000ac52:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000ac56:	48 89 cf 	movq	%rcx, %rdi
10000ac59:	48 89 c6 	movq	%rax, %rsi
10000ac5c:	e8 91 91 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ac61:	48 8b 05 38 6b 01 00 	movq	92984(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000ac68:	48 8b 35 11 68 01 00 	movq	92177(%rip), %rsi ## Objc selector ref: currentHandler
10000ac6f:	48 89 c7 	movq	%rax, %rdi
10000ac72:	ff 15 f0 f3 00 00 	callq	*62448(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000ac78:	48 89 c7 	movq	%rax, %rdi
10000ac7b:	e8 54 91 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ac80:	ba f9 02 00 00 	movl	$761, %edx
10000ac85:	41 89 d0 	movl	%edx, %r8d
10000ac88:	48 8d 0d 19 1a 01 00 	leaq	72217(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000ac8f:	48 8d 35 52 1a 01 00 	leaq	72274(%rip), %rsi ## Objc cfstring ref: @"selector"
10000ac96:	48 8b 55 b0 	movq	-80(%rbp), %rdx
10000ac9a:	48 8b 7d a8 	movq	-88(%rbp), %rdi
10000ac9e:	4c 8b 0d e3 67 01 00 	movq	92131(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000aca5:	49 89 c2 	movq	%rax, %r10
10000aca8:	48 89 bd 30 ff ff ff 	movq	%rdi, -208(%rbp)
10000acaf:	4c 89 d7 	movq	%r10, %rdi
10000acb2:	48 89 b5 28 ff ff ff 	movq	%rsi, -216(%rbp)
10000acb9:	4c 89 ce 	movq	%r9, %rsi
10000acbc:	4c 8b 8d 30 ff ff ff 	movq	-208(%rbp), %r9
10000acc3:	48 89 8d 20 ff ff ff 	movq	%rcx, -224(%rbp)
10000acca:	4c 89 c9 	movq	%r9, %rcx
10000accd:	4c 8b 8d 20 ff ff ff 	movq	-224(%rbp), %r9
10000acd4:	4c 8b 95 28 ff ff ff 	movq	-216(%rbp), %r10
10000acdb:	4c 89 14 24 	movq	%r10, (%rsp)
10000acdf:	48 89 85 18 ff ff ff 	movq	%rax, -232(%rbp)
10000ace6:	b0 00 	movb	$0, %al
10000ace8:	ff 15 7a f3 00 00 	callq	*62330(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000acee:	48 8b 8d 18 ff ff ff 	movq	-232(%rbp), %rcx
10000acf5:	48 89 cf 	movq	%rcx, %rdi
10000acf8:	ff 15 72 f3 00 00 	callq	*62322(%rip) ## literal pool symbol address: _objc_release
10000acfe:	45 31 db 	xorl	%r11d, %r11d
10000ad01:	44 89 de 	movl	%r11d, %esi
10000ad04:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000ad08:	48 89 cf 	movq	%rcx, %rdi
10000ad0b:	e8 e2 90 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ad10:	45 31 db 	xorl	%r11d, %r11d
10000ad13:	44 89 de 	movl	%r11d, %esi
10000ad16:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
10000ad1a:	48 89 cf 	movq	%rcx, %rdi
10000ad1d:	e8 d0 90 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ad22:	e9 00 00 00 00 	jmp	0x10000ad27
10000ad27:	e9 00 00 00 00 	jmp	0x10000ad2c
10000ad2c:	48 8b 7d c8 	movq	-56(%rbp), %rdi
10000ad30:	48 8b 75 10 	movq	16(%rbp), %rsi
10000ad34:	e8 67 01 00 00 	callq	_aspect_blockMethodSignature
10000ad39:	48 89 c7 	movq	%rax, %rdi
10000ad3c:	e8 93 90 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ad41:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000ad45:	48 8b 7d a0 	movq	-96(%rbp), %rdi
10000ad49:	48 8b 75 d8 	movq	-40(%rbp), %rsi
10000ad4d:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000ad51:	48 8b 4d 10 	movq	16(%rbp), %rcx
10000ad55:	e8 26 05 00 00 	callq	_aspect_isCompatibleBlockSignature
10000ad5a:	a8 01 	testb	$1, %al
10000ad5c:	0f 85 14 00 00 00 	jne	0x10000ad76
10000ad62:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
10000ad6a:	c7 45 9c 01 00 00 00 	movl	$1, -100(%rbp)
10000ad71:	e9 d8 00 00 00 	jmp	0x10000ae4e
10000ad76:	48 c7 45 90 00 00 00 00 	movq	$0, -112(%rbp)
10000ad7e:	48 83 7d a0 00 	cmpq	$0, -96(%rbp)
10000ad83:	0f 84 a0 00 00 00 	je	0x10000ae29
10000ad89:	48 8b 05 18 6a 01 00 	movq	92696(%rip), %rax ## Objc class ref: AspectIdentifier
10000ad90:	48 8b 35 d9 60 01 00 	movq	90329(%rip), %rsi ## Objc selector ref: new
10000ad97:	48 89 c7 	movq	%rax, %rdi
10000ad9a:	ff 15 c8 f2 00 00 	callq	*62152(%rip) ## Objc message: +[AspectIdentifier new]
10000ada0:	48 8b 75 90 	movq	-112(%rbp), %rsi
10000ada4:	48 89 45 90 	movq	%rax, -112(%rbp)
10000ada8:	48 89 f7 	movq	%rsi, %rdi
10000adab:	ff 15 bf f2 00 00 	callq	*62143(%rip) ## literal pool symbol address: _objc_release
10000adb1:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000adb5:	48 8b 45 90 	movq	-112(%rbp), %rax
10000adb9:	48 8b 35 d0 66 01 00 	movq	91856(%rip), %rsi ## Objc selector ref: setSelector:
10000adc0:	48 89 c7 	movq	%rax, %rdi
10000adc3:	ff 15 9f f2 00 00 	callq	*62111(%rip) ## Objc message: -[%rdi setSelector:]
10000adc9:	48 8b 55 c8 	movq	-56(%rbp), %rdx
10000adcd:	48 8b 45 90 	movq	-112(%rbp), %rax
10000add1:	48 8b 35 c0 66 01 00 	movq	91840(%rip), %rsi ## Objc selector ref: setBlock:
10000add8:	48 89 c7 	movq	%rax, %rdi
10000addb:	ff 15 87 f2 00 00 	callq	*62087(%rip) ## Objc message: -[%rdi setBlock:]
10000ade1:	48 8b 55 a0 	movq	-96(%rbp), %rdx
10000ade5:	48 8b 45 90 	movq	-112(%rbp), %rax
10000ade9:	48 8b 35 b0 66 01 00 	movq	91824(%rip), %rsi ## Objc selector ref: setBlockSignature:
10000adf0:	48 89 c7 	movq	%rax, %rdi
10000adf3:	ff 15 6f f2 00 00 	callq	*62063(%rip) ## Objc message: -[%rdi setBlockSignature:]
10000adf9:	48 8b 55 d0 	movq	-48(%rbp), %rdx
10000adfd:	48 8b 45 90 	movq	-112(%rbp), %rax
10000ae01:	48 8b 35 a0 66 01 00 	movq	91808(%rip), %rsi ## Objc selector ref: setOptions:
10000ae08:	48 89 c7 	movq	%rax, %rdi
10000ae0b:	ff 15 57 f2 00 00 	callq	*62039(%rip) ## Objc message: -[%rdi setOptions:]
10000ae11:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000ae15:	48 8b 45 90 	movq	-112(%rbp), %rax
10000ae19:	48 8b 35 90 66 01 00 	movq	91792(%rip), %rsi ## Objc selector ref: setObject:
10000ae20:	48 89 c7 	movq	%rax, %rdi
10000ae23:	ff 15 3f f2 00 00 	callq	*62015(%rip) ## Objc message: -[%rdi setObject:]
10000ae29:	48 8b 45 90 	movq	-112(%rbp), %rax
10000ae2d:	48 89 c7 	movq	%rax, %rdi
10000ae30:	ff 15 42 f2 00 00 	callq	*62018(%rip) ## literal pool symbol address: _objc_retain
10000ae36:	31 c9 	xorl	%ecx, %ecx
10000ae38:	89 ce 	movl	%ecx, %esi
10000ae3a:	48 8d 7d 90 	leaq	-112(%rbp), %rdi
10000ae3e:	48 89 45 f8 	movq	%rax, -8(%rbp)
10000ae42:	c7 45 9c 01 00 00 00 	movl	$1, -100(%rbp)
10000ae49:	e8 a4 8f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ae4e:	31 c0 	xorl	%eax, %eax
10000ae50:	89 c1 	movl	%eax, %ecx
10000ae52:	48 8d 7d a0 	leaq	-96(%rbp), %rdi
10000ae56:	48 89 ce 	movq	%rcx, %rsi
10000ae59:	48 89 8d 10 ff ff ff 	movq	%rcx, -240(%rbp)
10000ae60:	e8 8d 8f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ae65:	48 8d 7d c8 	leaq	-56(%rbp), %rdi
10000ae69:	48 8b b5 10 ff ff ff 	movq	-240(%rbp), %rsi
10000ae70:	e8 7d 8f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ae75:	48 8d 7d d8 	leaq	-40(%rbp), %rdi
10000ae79:	48 8b b5 10 ff ff ff 	movq	-240(%rbp), %rsi
10000ae80:	e8 6d 8f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ae85:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000ae89:	48 81 c4 00 01 00 00 	addq	$256, %rsp
10000ae90:	5d 	popq	%rbp
10000ae91:	e9 de 8e 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000ae96:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_blockMethodSignature:
10000aea0:	55 	pushq	%rbp
10000aea1:	48 89 e5 	movq	%rsp, %rbp
10000aea4:	48 81 ec d0 00 00 00 	subq	$208, %rsp
10000aeab:	48 8d 45 c8 	leaq	-56(%rbp), %rax
10000aeaf:	48 8b 0d 82 f1 00 00 	movq	61826(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000aeb6:	48 8b 09 	movq	(%rcx), %rcx
10000aeb9:	48 89 4d f8 	movq	%rcx, -8(%rbp)
10000aebd:	48 c7 45 c8 00 00 00 00 	movq	$0, -56(%rbp)
10000aec5:	48 89 7d 88 	movq	%rdi, -120(%rbp)
10000aec9:	48 89 c7 	movq	%rax, %rdi
10000aecc:	48 8b 45 88 	movq	-120(%rbp), %rax
10000aed0:	48 89 75 80 	movq	%rsi, -128(%rbp)
10000aed4:	48 89 c6 	movq	%rax, %rsi
10000aed7:	e8 16 8f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000aedc:	48 8b 45 80 	movq	-128(%rbp), %rax
10000aee0:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000aee4:	48 8b 4d c8 	movq	-56(%rbp), %rcx
10000aee8:	48 89 4d b8 	movq	%rcx, -72(%rbp)
10000aeec:	48 8b 4d b8 	movq	-72(%rbp), %rcx
10000aef0:	8b 51 08 	movl	8(%rcx), %edx
10000aef3:	81 e2 00 00 00 40 	andl	$1073741824, %edx
10000aef9:	83 fa 00 	cmpl	$0, %edx
10000aefc:	0f 85 55 01 00 00 	jne	0x10000b057
10000af02:	48 8d 05 ff 1a 01 00 	leaq	72447(%rip), %rax ## Objc cfstring ref: @"The block %@ doesn't contain a type signature."
10000af09:	48 8b 0d b0 67 01 00 	movq	92080(%rip), %rcx ## Objc class ref: _OBJC_CLASS_$_NSString
10000af10:	48 8b 55 c8 	movq	-56(%rbp), %rdx
10000af14:	48 8b 35 a5 60 01 00 	movq	90277(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000af1b:	48 89 cf 	movq	%rcx, %rdi
10000af1e:	48 89 95 78 ff ff ff 	movq	%rdx, -136(%rbp)
10000af25:	48 89 c2 	movq	%rax, %rdx
10000af28:	48 8b 8d 78 ff ff ff 	movq	-136(%rbp), %rcx
10000af2f:	b0 00 	movb	$0, %al
10000af31:	ff 15 31 f1 00 00 	callq	*61745(%rip) ## Objc message: +[NSString stringWithFormat:]
10000af37:	48 89 c7 	movq	%rax, %rdi
10000af3a:	e8 95 8e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000af3f:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000af43:	e9 00 00 00 00 	jmp	0x10000af48
10000af48:	48 8d 05 59 19 01 00 	leaq	72025(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000af4f:	48 8b 75 b0 	movq	-80(%rbp), %rsi
10000af53:	48 89 c7 	movq	%rax, %rdi
10000af56:	b0 00 	movb	$0, %al
10000af58:	e8 b5 8c 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000af5d:	e9 00 00 00 00 	jmp	0x10000af62
10000af62:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
10000af67:	0f 84 bc 00 00 00 	je	0x10000b029
10000af6d:	b8 01 00 00 00 	movl	$1, %eax
10000af72:	41 89 c0 	movl	%eax, %r8d
10000af75:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000af79:	48 8d 55 f0 	leaq	-16(%rbp), %rdx
10000af7d:	48 8b 35 8c f0 00 00 	movq	61580(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000af84:	48 8b 3d 2d 68 01 00 	movq	92205(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000af8b:	48 8b 36 	movq	(%rsi), %rsi
10000af8e:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000af92:	48 8b 75 b0 	movq	-80(%rbp), %rsi
10000af96:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000af9a:	48 8b 35 07 67 01 00 	movq	91911(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000afa1:	4c 8b 0d f8 65 01 00 	movq	91640(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000afa8:	48 89 bd 70 ff ff ff 	movq	%rdi, -144(%rbp)
10000afaf:	48 89 f7 	movq	%rsi, %rdi
10000afb2:	4c 89 ce 	movq	%r9, %rsi
10000afb5:	ff 15 ad f0 00 00 	callq	*61613(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000afbb:	48 89 c7 	movq	%rax, %rdi
10000afbe:	e8 11 8e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000afc3:	48 8d 0d fe 15 01 00 	leaq	71166(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000afca:	41 ba 05 00 00 00 	movl	$5, %r10d
10000afd0:	44 89 d2 	movl	%r10d, %edx
10000afd3:	48 8b 35 ce 65 01 00 	movq	91598(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000afda:	48 8b bd 70 ff ff ff 	movq	-144(%rbp), %rdi
10000afe1:	48 89 95 68 ff ff ff 	movq	%rdx, -152(%rbp)
10000afe8:	48 89 ca 	movq	%rcx, %rdx
10000afeb:	48 8b 8d 68 ff ff ff 	movq	-152(%rbp), %rcx
10000aff2:	49 89 c0 	movq	%rax, %r8
10000aff5:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
10000affc:	ff 15 66 f0 00 00 	callq	*61542(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000b002:	48 89 c7 	movq	%rax, %rdi
10000b005:	e8 ca 8d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b00a:	48 89 c7 	movq	%rax, %rdi
10000b00d:	e8 50 8d 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000b012:	48 8b 4d c0 	movq	-64(%rbp), %rcx
10000b016:	48 89 01 	movq	%rax, (%rcx)
10000b019:	48 8b 85 60 ff ff ff 	movq	-160(%rbp), %rax
10000b020:	48 89 c7 	movq	%rax, %rdi
10000b023:	ff 15 47 f0 00 00 	callq	*61511(%rip) ## literal pool symbol address: _objc_release
10000b029:	e9 00 00 00 00 	jmp	0x10000b02e
10000b02e:	e9 00 00 00 00 	jmp	0x10000b033
10000b033:	31 c0 	xorl	%eax, %eax
10000b035:	89 c6 	movl	%eax, %esi
10000b037:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
10000b03b:	48 c7 45 d0 00 00 00 00 	movq	$0, -48(%rbp)
10000b043:	c7 45 ac 01 00 00 00 	movl	$1, -84(%rbp)
10000b04a:	48 89 cf 	movq	%rcx, %rdi
10000b04d:	e8 a0 8d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b052:	e9 d3 01 00 00 	jmp	0x10000b22a
10000b057:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000b05b:	48 8b 40 18 	movq	24(%rax), %rax
10000b05f:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000b063:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000b067:	48 83 c0 10 	addq	$16, %rax
10000b06b:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000b06f:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000b073:	8b 48 08 	movl	8(%rax), %ecx
10000b076:	81 e1 00 00 00 02 	andl	$33554432, %ecx
10000b07c:	83 f9 00 	cmpl	$0, %ecx
10000b07f:	0f 84 0c 00 00 00 	je	0x10000b091
10000b085:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000b089:	48 83 c0 10 	addq	$16, %rax
10000b08d:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000b091:	48 83 7d a0 00 	cmpq	$0, -96(%rbp)
10000b096:	0f 85 55 01 00 00 	jne	0x10000b1f1
10000b09c:	48 8d 05 85 19 01 00 	leaq	72069(%rip), %rax ## Objc cfstring ref: @"The block %@ doesn't has a type signature."
10000b0a3:	48 8b 0d 16 66 01 00 	movq	91670(%rip), %rcx ## Objc class ref: _OBJC_CLASS_$_NSString
10000b0aa:	48 8b 55 c8 	movq	-56(%rbp), %rdx
10000b0ae:	48 8b 35 0b 5f 01 00 	movq	89867(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000b0b5:	48 89 cf 	movq	%rcx, %rdi
10000b0b8:	48 89 95 58 ff ff ff 	movq	%rdx, -168(%rbp)
10000b0bf:	48 89 c2 	movq	%rax, %rdx
10000b0c2:	48 8b 8d 58 ff ff ff 	movq	-168(%rbp), %rcx
10000b0c9:	b0 00 	movb	$0, %al
10000b0cb:	ff 15 97 ef 00 00 	callq	*61335(%rip) ## Objc message: +[NSString stringWithFormat:]
10000b0d1:	48 89 c7 	movq	%rax, %rdi
10000b0d4:	e8 fb 8c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b0d9:	48 89 45 98 	movq	%rax, -104(%rbp)
10000b0dd:	e9 00 00 00 00 	jmp	0x10000b0e2
10000b0e2:	48 8d 05 bf 17 01 00 	leaq	71615(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000b0e9:	48 8b 75 98 	movq	-104(%rbp), %rsi
10000b0ed:	48 89 c7 	movq	%rax, %rdi
10000b0f0:	b0 00 	movb	$0, %al
10000b0f2:	e8 1b 8b 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000b0f7:	e9 00 00 00 00 	jmp	0x10000b0fc
10000b0fc:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
10000b101:	0f 84 bc 00 00 00 	je	0x10000b1c3
10000b107:	b8 01 00 00 00 	movl	$1, %eax
10000b10c:	41 89 c0 	movl	%eax, %r8d
10000b10f:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000b113:	48 8d 55 e0 	leaq	-32(%rbp), %rdx
10000b117:	48 8b 35 f2 ee 00 00 	movq	61170(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000b11e:	48 8b 3d 93 66 01 00 	movq	91795(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000b125:	48 8b 36 	movq	(%rsi), %rsi
10000b128:	48 89 75 d8 	movq	%rsi, -40(%rbp)
10000b12c:	48 8b 75 98 	movq	-104(%rbp), %rsi
10000b130:	48 89 75 e0 	movq	%rsi, -32(%rbp)
10000b134:	48 8b 35 6d 65 01 00 	movq	91501(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000b13b:	4c 8b 0d 5e 64 01 00 	movq	91230(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000b142:	48 89 bd 50 ff ff ff 	movq	%rdi, -176(%rbp)
10000b149:	48 89 f7 	movq	%rsi, %rdi
10000b14c:	4c 89 ce 	movq	%r9, %rsi
10000b14f:	ff 15 13 ef 00 00 	callq	*61203(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000b155:	48 89 c7 	movq	%rax, %rdi
10000b158:	e8 77 8c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b15d:	48 8d 0d 64 14 01 00 	leaq	70756(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000b164:	41 ba 05 00 00 00 	movl	$5, %r10d
10000b16a:	44 89 d2 	movl	%r10d, %edx
10000b16d:	48 8b 35 34 64 01 00 	movq	91188(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000b174:	48 8b bd 50 ff ff ff 	movq	-176(%rbp), %rdi
10000b17b:	48 89 95 48 ff ff ff 	movq	%rdx, -184(%rbp)
10000b182:	48 89 ca 	movq	%rcx, %rdx
10000b185:	48 8b 8d 48 ff ff ff 	movq	-184(%rbp), %rcx
10000b18c:	49 89 c0 	movq	%rax, %r8
10000b18f:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000b196:	ff 15 cc ee 00 00 	callq	*61132(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000b19c:	48 89 c7 	movq	%rax, %rdi
10000b19f:	e8 30 8c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b1a4:	48 89 c7 	movq	%rax, %rdi
10000b1a7:	e8 b6 8b 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000b1ac:	48 8b 4d c0 	movq	-64(%rbp), %rcx
10000b1b0:	48 89 01 	movq	%rax, (%rcx)
10000b1b3:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10000b1ba:	48 89 c7 	movq	%rax, %rdi
10000b1bd:	ff 15 ad ee 00 00 	callq	*61101(%rip) ## literal pool symbol address: _objc_release
10000b1c3:	e9 00 00 00 00 	jmp	0x10000b1c8
10000b1c8:	e9 00 00 00 00 	jmp	0x10000b1cd
10000b1cd:	31 c0 	xorl	%eax, %eax
10000b1cf:	89 c6 	movl	%eax, %esi
10000b1d1:	48 8d 4d 98 	leaq	-104(%rbp), %rcx
10000b1d5:	48 c7 45 d0 00 00 00 00 	movq	$0, -48(%rbp)
10000b1dd:	c7 45 ac 01 00 00 00 	movl	$1, -84(%rbp)
10000b1e4:	48 89 cf 	movq	%rcx, %rdi
10000b1e7:	e8 06 8c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b1ec:	e9 39 00 00 00 	jmp	0x10000b22a
10000b1f1:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000b1f5:	48 8b 00 	movq	(%rax), %rax
10000b1f8:	48 89 45 90 	movq	%rax, -112(%rbp)
10000b1fc:	48 8b 05 d5 65 01 00 	movq	91605(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSMethodSignature
10000b203:	48 8b 55 90 	movq	-112(%rbp), %rdx
10000b207:	48 8b 35 32 64 01 00 	movq	91186(%rip), %rsi ## Objc selector ref: signatureWithObjCTypes:
10000b20e:	48 89 c7 	movq	%rax, %rdi
10000b211:	ff 15 51 ee 00 00 	callq	*61009(%rip) ## Objc message: +[NSMethodSignature signatureWithObjCTypes:]
10000b217:	48 89 c7 	movq	%rax, %rdi
10000b21a:	e8 b5 8b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b21f:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000b223:	c7 45 ac 01 00 00 00 	movl	$1, -84(%rbp)
10000b22a:	48 8d 7d c8 	leaq	-56(%rbp), %rdi
10000b22e:	31 c0 	xorl	%eax, %eax
10000b230:	89 c6 	movl	%eax, %esi
10000b232:	e8 bb 8b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b237:	48 8b 75 d0 	movq	-48(%rbp), %rsi
10000b23b:	48 89 f7 	movq	%rsi, %rdi
10000b23e:	e8 31 8b 00 00 	callq	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000b243:	48 8b 35 ee ed 00 00 	movq	60910(%rip), %rsi ## literal pool symbol address: ___stack_chk_guard
10000b24a:	48 8b 36 	movq	(%rsi), %rsi
10000b24d:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000b251:	48 39 fe 	cmpq	%rdi, %rsi
10000b254:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000b25b:	0f 85 10 00 00 00 	jne	0x10000b271
10000b261:	48 8b 85 38 ff ff ff 	movq	-200(%rbp), %rax
10000b268:	48 81 c4 d0 00 00 00 	addq	$208, %rsp
10000b26f:	5d 	popq	%rbp
10000b270:	c3 	retq
10000b271:	e8 d2 89 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
10000b276:	0f 0b 	ud2
10000b278:	0f 1f 84 00 00 00 00 00 	nopl	(%rax,%rax)
_aspect_isCompatibleBlockSignature:
10000b280:	55 	pushq	%rbp
10000b281:	48 89 e5 	movq	%rsp, %rbp
10000b284:	48 81 ec a0 01 00 00 	subq	$416, %rsp
10000b28b:	48 8d 45 d8 	leaq	-40(%rbp), %rax
10000b28f:	4c 8b 05 a2 ed 00 00 	movq	60834(%rip), %r8 ## literal pool symbol address: ___stack_chk_guard
10000b296:	4d 8b 00 	movq	(%r8), %r8
10000b299:	4c 89 45 f8 	movq	%r8, -8(%rbp)
10000b29d:	48 c7 45 d8 00 00 00 00 	movq	$0, -40(%rbp)
10000b2a5:	48 89 bd 48 ff ff ff 	movq	%rdi, -184(%rbp)
10000b2ac:	48 89 c7 	movq	%rax, %rdi
10000b2af:	48 8b 85 48 ff ff ff 	movq	-184(%rbp), %rax
10000b2b6:	48 89 b5 40 ff ff ff 	movq	%rsi, -192(%rbp)
10000b2bd:	48 89 c6 	movq	%rax, %rsi
10000b2c0:	48 89 95 38 ff ff ff 	movq	%rdx, -200(%rbp)
10000b2c7:	48 89 8d 30 ff ff ff 	movq	%rcx, -208(%rbp)
10000b2ce:	e8 1f 8b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b2d3:	48 8d 7d d0 	leaq	-48(%rbp), %rdi
10000b2d7:	48 c7 45 d0 00 00 00 00 	movq	$0, -48(%rbp)
10000b2df:	48 8b b5 40 ff ff ff 	movq	-192(%rbp), %rsi
10000b2e6:	e8 07 8b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b2eb:	48 8b 85 38 ff ff ff 	movq	-200(%rbp), %rax
10000b2f2:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000b2f6:	48 8b 8d 30 ff ff ff 	movq	-208(%rbp), %rcx
10000b2fd:	48 89 4d c0 	movq	%rcx, -64(%rbp)
10000b301:	48 83 7d d8 00 	cmpq	$0, -40(%rbp)
10000b306:	0f 95 c0 	setne	%al
10000b309:	34 ff 	xorb	$-1, %al
10000b30b:	24 01 	andb	$1, %al
10000b30d:	0f b6 c8 	movzbl	%al, %ecx
10000b310:	48 63 d1 	movslq	%ecx, %rdx
10000b313:	48 83 fa 00 	cmpq	$0, %rdx
10000b317:	0f 84 9d 01 00 00 	je	0x10000b4ba
10000b31d:	48 8d 15 85 b3 00 00 	leaq	45957(%rip), %rdx ## literal pool for: "BOOL aspect_isCompatibleBlockSignature(NSMethodSignature *__strong, __strong id, SEL, NSError *__autoreleasing *)"
10000b324:	48 8b 05 95 63 01 00 	movq	91029(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000b32b:	48 8b 35 26 61 01 00 	movq	90406(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000b332:	48 89 c7 	movq	%rax, %rdi
10000b335:	ff 15 2d ed 00 00 	callq	*60717(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000b33b:	48 89 c7 	movq	%rax, %rdi
10000b33e:	e8 91 8a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b343:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000b347:	48 83 7d b8 00 	cmpq	$0, -72(%rbp)
10000b34c:	0f 84 10 00 00 00 	je	0x10000b362
10000b352:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000b356:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000b35d:	e9 13 00 00 00 	jmp	0x10000b375
10000b362:	48 8d 05 ff 12 01 00 	leaq	70399(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000b369:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000b370:	e9 00 00 00 00 	jmp	0x10000b375
10000b375:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
10000b37c:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
10000b380:	48 89 cf 	movq	%rcx, %rdi
10000b383:	48 89 c6 	movq	%rax, %rsi
10000b386:	e8 67 8a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b38b:	48 8d 15 fb aa 00 00 	leaq	43771(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000b392:	48 8b 05 27 63 01 00 	movq	90919(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000b399:	48 8b 35 b8 60 01 00 	movq	90296(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000b3a0:	48 89 c7 	movq	%rax, %rdi
10000b3a3:	ff 15 bf ec 00 00 	callq	*60607(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000b3a9:	48 89 c7 	movq	%rax, %rdi
10000b3ac:	e8 23 8a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b3b1:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000b3b5:	48 83 7d b0 00 	cmpq	$0, -80(%rbp)
10000b3ba:	0f 84 10 00 00 00 	je	0x10000b3d0
10000b3c0:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000b3c4:	48 89 85 20 ff ff ff 	movq	%rax, -224(%rbp)
10000b3cb:	e9 13 00 00 00 	jmp	0x10000b3e3
10000b3d0:	48 8d 05 b1 12 01 00 	leaq	70321(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000b3d7:	48 89 85 20 ff ff ff 	movq	%rax, -224(%rbp)
10000b3de:	e9 00 00 00 00 	jmp	0x10000b3e3
10000b3e3:	48 8b 85 20 ff ff ff 	movq	-224(%rbp), %rax
10000b3ea:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
10000b3ee:	48 89 cf 	movq	%rcx, %rdi
10000b3f1:	48 89 c6 	movq	%rax, %rsi
10000b3f4:	e8 f9 89 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b3f9:	48 8b 05 a0 63 01 00 	movq	91040(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000b400:	48 8b 35 79 60 01 00 	movq	90233(%rip), %rsi ## Objc selector ref: currentHandler
10000b407:	48 89 c7 	movq	%rax, %rdi
10000b40a:	ff 15 58 ec 00 00 	callq	*60504(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000b410:	48 89 c7 	movq	%rax, %rdi
10000b413:	e8 bc 89 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b418:	ba c2 00 00 00 	movl	$194, %edx
10000b41d:	41 89 d0 	movl	%edx, %r8d
10000b420:	48 8d 0d 81 12 01 00 	leaq	70273(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000b427:	48 8d 35 1a 16 01 00 	leaq	71194(%rip), %rsi ## Objc cfstring ref: @"blockSignature"
10000b42e:	48 8b 55 b8 	movq	-72(%rbp), %rdx
10000b432:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000b436:	4c 8b 0d 4b 60 01 00 	movq	90187(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000b43d:	49 89 c2 	movq	%rax, %r10
10000b440:	48 89 bd 18 ff ff ff 	movq	%rdi, -232(%rbp)
10000b447:	4c 89 d7 	movq	%r10, %rdi
10000b44a:	48 89 b5 10 ff ff ff 	movq	%rsi, -240(%rbp)
10000b451:	4c 89 ce 	movq	%r9, %rsi
10000b454:	4c 8b 8d 18 ff ff ff 	movq	-232(%rbp), %r9
10000b45b:	48 89 8d 08 ff ff ff 	movq	%rcx, -248(%rbp)
10000b462:	4c 89 c9 	movq	%r9, %rcx
10000b465:	4c 8b 8d 08 ff ff ff 	movq	-248(%rbp), %r9
10000b46c:	4c 8b 95 10 ff ff ff 	movq	-240(%rbp), %r10
10000b473:	4c 89 14 24 	movq	%r10, (%rsp)
10000b477:	48 89 85 00 ff ff ff 	movq	%rax, -256(%rbp)
10000b47e:	b0 00 	movb	$0, %al
10000b480:	ff 15 e2 eb 00 00 	callq	*60386(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000b486:	48 8b 8d 00 ff ff ff 	movq	-256(%rbp), %rcx
10000b48d:	48 89 cf 	movq	%rcx, %rdi
10000b490:	ff 15 da eb 00 00 	callq	*60378(%rip) ## literal pool symbol address: _objc_release
10000b496:	45 31 db 	xorl	%r11d, %r11d
10000b499:	44 89 de 	movl	%r11d, %esi
10000b49c:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
10000b4a0:	48 89 cf 	movq	%rcx, %rdi
10000b4a3:	e8 4a 89 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b4a8:	45 31 db 	xorl	%r11d, %r11d
10000b4ab:	44 89 de 	movl	%r11d, %esi
10000b4ae:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
10000b4b2:	48 89 cf 	movq	%rcx, %rdi
10000b4b5:	e8 38 89 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b4ba:	e9 00 00 00 00 	jmp	0x10000b4bf
10000b4bf:	e9 00 00 00 00 	jmp	0x10000b4c4
10000b4c4:	e9 00 00 00 00 	jmp	0x10000b4c9
10000b4c9:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
10000b4ce:	0f 95 c0 	setne	%al
10000b4d1:	34 ff 	xorb	$-1, %al
10000b4d3:	24 01 	andb	$1, %al
10000b4d5:	0f b6 c8 	movzbl	%al, %ecx
10000b4d8:	48 63 d1 	movslq	%ecx, %rdx
10000b4db:	48 83 fa 00 	cmpq	$0, %rdx
10000b4df:	0f 84 9d 01 00 00 	je	0x10000b682
10000b4e5:	48 8d 15 bd b1 00 00 	leaq	45501(%rip), %rdx ## literal pool for: "BOOL aspect_isCompatibleBlockSignature(NSMethodSignature *__strong, __strong id, SEL, NSError *__autoreleasing *)"
10000b4ec:	48 8b 05 cd 61 01 00 	movq	90573(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000b4f3:	48 8b 35 5e 5f 01 00 	movq	89950(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000b4fa:	48 89 c7 	movq	%rax, %rdi
10000b4fd:	ff 15 65 eb 00 00 	callq	*60261(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000b503:	48 89 c7 	movq	%rax, %rdi
10000b506:	e8 c9 88 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b50b:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000b50f:	48 83 7d a8 00 	cmpq	$0, -88(%rbp)
10000b514:	0f 84 10 00 00 00 	je	0x10000b52a
10000b51a:	48 8b 45 a8 	movq	-88(%rbp), %rax
10000b51e:	48 89 85 f8 fe ff ff 	movq	%rax, -264(%rbp)
10000b525:	e9 13 00 00 00 	jmp	0x10000b53d
10000b52a:	48 8d 05 37 11 01 00 	leaq	69943(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000b531:	48 89 85 f8 fe ff ff 	movq	%rax, -264(%rbp)
10000b538:	e9 00 00 00 00 	jmp	0x10000b53d
10000b53d:	48 8b 85 f8 fe ff ff 	movq	-264(%rbp), %rax
10000b544:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000b548:	48 89 cf 	movq	%rcx, %rdi
10000b54b:	48 89 c6 	movq	%rax, %rsi
10000b54e:	e8 9f 88 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b553:	48 8d 15 33 a9 00 00 	leaq	43315(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000b55a:	48 8b 05 5f 61 01 00 	movq	90463(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000b561:	48 8b 35 f0 5e 01 00 	movq	89840(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000b568:	48 89 c7 	movq	%rax, %rdi
10000b56b:	ff 15 f7 ea 00 00 	callq	*60151(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000b571:	48 89 c7 	movq	%rax, %rdi
10000b574:	e8 5b 88 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b579:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000b57d:	48 83 7d a0 00 	cmpq	$0, -96(%rbp)
10000b582:	0f 84 10 00 00 00 	je	0x10000b598
10000b588:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000b58c:	48 89 85 f0 fe ff ff 	movq	%rax, -272(%rbp)
10000b593:	e9 13 00 00 00 	jmp	0x10000b5ab
10000b598:	48 8d 05 e9 10 01 00 	leaq	69865(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000b59f:	48 89 85 f0 fe ff ff 	movq	%rax, -272(%rbp)
10000b5a6:	e9 00 00 00 00 	jmp	0x10000b5ab
10000b5ab:	48 8b 85 f0 fe ff ff 	movq	-272(%rbp), %rax
10000b5b2:	48 8d 4d a0 	leaq	-96(%rbp), %rcx
10000b5b6:	48 89 cf 	movq	%rcx, %rdi
10000b5b9:	48 89 c6 	movq	%rax, %rsi
10000b5bc:	e8 31 88 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b5c1:	48 8b 05 d8 61 01 00 	movq	90584(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000b5c8:	48 8b 35 b1 5e 01 00 	movq	89777(%rip), %rsi ## Objc selector ref: currentHandler
10000b5cf:	48 89 c7 	movq	%rax, %rdi
10000b5d2:	ff 15 90 ea 00 00 	callq	*60048(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000b5d8:	48 89 c7 	movq	%rax, %rdi
10000b5db:	e8 f4 87 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b5e0:	ba c3 00 00 00 	movl	$195, %edx
10000b5e5:	41 89 d0 	movl	%edx, %r8d
10000b5e8:	48 8d 0d b9 10 01 00 	leaq	69817(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000b5ef:	48 8d 35 72 14 01 00 	leaq	70770(%rip), %rsi ## Objc cfstring ref: @"object"
10000b5f6:	48 8b 55 a8 	movq	-88(%rbp), %rdx
10000b5fa:	48 8b 7d a0 	movq	-96(%rbp), %rdi
10000b5fe:	4c 8b 0d 83 5e 01 00 	movq	89731(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000b605:	49 89 c2 	movq	%rax, %r10
10000b608:	48 89 bd e8 fe ff ff 	movq	%rdi, -280(%rbp)
10000b60f:	4c 89 d7 	movq	%r10, %rdi
10000b612:	48 89 b5 e0 fe ff ff 	movq	%rsi, -288(%rbp)
10000b619:	4c 89 ce 	movq	%r9, %rsi
10000b61c:	4c 8b 8d e8 fe ff ff 	movq	-280(%rbp), %r9
10000b623:	48 89 8d d8 fe ff ff 	movq	%rcx, -296(%rbp)
10000b62a:	4c 89 c9 	movq	%r9, %rcx
10000b62d:	4c 8b 8d d8 fe ff ff 	movq	-296(%rbp), %r9
10000b634:	4c 8b 95 e0 fe ff ff 	movq	-288(%rbp), %r10
10000b63b:	4c 89 14 24 	movq	%r10, (%rsp)
10000b63f:	48 89 85 d0 fe ff ff 	movq	%rax, -304(%rbp)
10000b646:	b0 00 	movb	$0, %al
10000b648:	ff 15 1a ea 00 00 	callq	*59930(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000b64e:	48 8b 8d d0 fe ff ff 	movq	-304(%rbp), %rcx
10000b655:	48 89 cf 	movq	%rcx, %rdi
10000b658:	ff 15 12 ea 00 00 	callq	*59922(%rip) ## literal pool symbol address: _objc_release
10000b65e:	45 31 db 	xorl	%r11d, %r11d
10000b661:	44 89 de 	movl	%r11d, %esi
10000b664:	48 8d 4d a0 	leaq	-96(%rbp), %rcx
10000b668:	48 89 cf 	movq	%rcx, %rdi
10000b66b:	e8 82 87 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b670:	45 31 db 	xorl	%r11d, %r11d
10000b673:	44 89 de 	movl	%r11d, %esi
10000b676:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000b67a:	48 89 cf 	movq	%rcx, %rdi
10000b67d:	e8 70 87 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b682:	e9 00 00 00 00 	jmp	0x10000b687
10000b687:	e9 00 00 00 00 	jmp	0x10000b68c
10000b68c:	e9 00 00 00 00 	jmp	0x10000b691
10000b691:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
10000b696:	0f 95 c0 	setne	%al
10000b699:	34 ff 	xorb	$-1, %al
10000b69b:	24 01 	andb	$1, %al
10000b69d:	0f b6 c8 	movzbl	%al, %ecx
10000b6a0:	48 63 d1 	movslq	%ecx, %rdx
10000b6a3:	48 83 fa 00 	cmpq	$0, %rdx
10000b6a7:	0f 84 9d 01 00 00 	je	0x10000b84a
10000b6ad:	48 8d 15 f5 af 00 00 	leaq	45045(%rip), %rdx ## literal pool for: "BOOL aspect_isCompatibleBlockSignature(NSMethodSignature *__strong, __strong id, SEL, NSError *__autoreleasing *)"
10000b6b4:	48 8b 05 05 60 01 00 	movq	90117(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000b6bb:	48 8b 35 96 5d 01 00 	movq	89494(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000b6c2:	48 89 c7 	movq	%rax, %rdi
10000b6c5:	ff 15 9d e9 00 00 	callq	*59805(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000b6cb:	48 89 c7 	movq	%rax, %rdi
10000b6ce:	e8 01 87 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b6d3:	48 89 45 98 	movq	%rax, -104(%rbp)
10000b6d7:	48 83 7d 98 00 	cmpq	$0, -104(%rbp)
10000b6dc:	0f 84 10 00 00 00 	je	0x10000b6f2
10000b6e2:	48 8b 45 98 	movq	-104(%rbp), %rax
10000b6e6:	48 89 85 c8 fe ff ff 	movq	%rax, -312(%rbp)
10000b6ed:	e9 13 00 00 00 	jmp	0x10000b705
10000b6f2:	48 8d 05 6f 0f 01 00 	leaq	69487(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000b6f9:	48 89 85 c8 fe ff ff 	movq	%rax, -312(%rbp)
10000b700:	e9 00 00 00 00 	jmp	0x10000b705
10000b705:	48 8b 85 c8 fe ff ff 	movq	-312(%rbp), %rax
10000b70c:	48 8d 4d 98 	leaq	-104(%rbp), %rcx
10000b710:	48 89 cf 	movq	%rcx, %rdi
10000b713:	48 89 c6 	movq	%rax, %rsi
10000b716:	e8 d7 86 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b71b:	48 8d 15 6b a7 00 00 	leaq	42859(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000b722:	48 8b 05 97 5f 01 00 	movq	90007(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000b729:	48 8b 35 28 5d 01 00 	movq	89384(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000b730:	48 89 c7 	movq	%rax, %rdi
10000b733:	ff 15 2f e9 00 00 	callq	*59695(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000b739:	48 89 c7 	movq	%rax, %rdi
10000b73c:	e8 93 86 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b741:	48 89 45 90 	movq	%rax, -112(%rbp)
10000b745:	48 83 7d 90 00 	cmpq	$0, -112(%rbp)
10000b74a:	0f 84 10 00 00 00 	je	0x10000b760
10000b750:	48 8b 45 90 	movq	-112(%rbp), %rax
10000b754:	48 89 85 c0 fe ff ff 	movq	%rax, -320(%rbp)
10000b75b:	e9 13 00 00 00 	jmp	0x10000b773
10000b760:	48 8d 05 21 0f 01 00 	leaq	69409(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000b767:	48 89 85 c0 fe ff ff 	movq	%rax, -320(%rbp)
10000b76e:	e9 00 00 00 00 	jmp	0x10000b773
10000b773:	48 8b 85 c0 fe ff ff 	movq	-320(%rbp), %rax
10000b77a:	48 8d 4d 90 	leaq	-112(%rbp), %rcx
10000b77e:	48 89 cf 	movq	%rcx, %rdi
10000b781:	48 89 c6 	movq	%rax, %rsi
10000b784:	e8 69 86 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b789:	48 8b 05 10 60 01 00 	movq	90128(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000b790:	48 8b 35 e9 5c 01 00 	movq	89321(%rip), %rsi ## Objc selector ref: currentHandler
10000b797:	48 89 c7 	movq	%rax, %rdi
10000b79a:	ff 15 c8 e8 00 00 	callq	*59592(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000b7a0:	48 89 c7 	movq	%rax, %rdi
10000b7a3:	e8 2c 86 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b7a8:	ba c4 00 00 00 	movl	$196, %edx
10000b7ad:	41 89 d0 	movl	%edx, %r8d
10000b7b0:	48 8d 0d f1 0e 01 00 	leaq	69361(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000b7b7:	48 8d 35 2a 0f 01 00 	leaq	69418(%rip), %rsi ## Objc cfstring ref: @"selector"
10000b7be:	48 8b 55 98 	movq	-104(%rbp), %rdx
10000b7c2:	48 8b 7d 90 	movq	-112(%rbp), %rdi
10000b7c6:	4c 8b 0d bb 5c 01 00 	movq	89275(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000b7cd:	49 89 c2 	movq	%rax, %r10
10000b7d0:	48 89 bd b8 fe ff ff 	movq	%rdi, -328(%rbp)
10000b7d7:	4c 89 d7 	movq	%r10, %rdi
10000b7da:	48 89 b5 b0 fe ff ff 	movq	%rsi, -336(%rbp)
10000b7e1:	4c 89 ce 	movq	%r9, %rsi
10000b7e4:	4c 8b 8d b8 fe ff ff 	movq	-328(%rbp), %r9
10000b7eb:	48 89 8d a8 fe ff ff 	movq	%rcx, -344(%rbp)
10000b7f2:	4c 89 c9 	movq	%r9, %rcx
10000b7f5:	4c 8b 8d a8 fe ff ff 	movq	-344(%rbp), %r9
10000b7fc:	4c 8b 95 b0 fe ff ff 	movq	-336(%rbp), %r10
10000b803:	4c 89 14 24 	movq	%r10, (%rsp)
10000b807:	48 89 85 a0 fe ff ff 	movq	%rax, -352(%rbp)
10000b80e:	b0 00 	movb	$0, %al
10000b810:	ff 15 52 e8 00 00 	callq	*59474(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000b816:	48 8b 8d a0 fe ff ff 	movq	-352(%rbp), %rcx
10000b81d:	48 89 cf 	movq	%rcx, %rdi
10000b820:	ff 15 4a e8 00 00 	callq	*59466(%rip) ## literal pool symbol address: _objc_release
10000b826:	45 31 db 	xorl	%r11d, %r11d
10000b829:	44 89 de 	movl	%r11d, %esi
10000b82c:	48 8d 4d 90 	leaq	-112(%rbp), %rcx
10000b830:	48 89 cf 	movq	%rcx, %rdi
10000b833:	e8 ba 85 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b838:	45 31 db 	xorl	%r11d, %r11d
10000b83b:	44 89 de 	movl	%r11d, %esi
10000b83e:	48 8d 4d 98 	leaq	-104(%rbp), %rcx
10000b842:	48 89 cf 	movq	%rcx, %rdi
10000b845:	e8 a8 85 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000b84a:	e9 00 00 00 00 	jmp	0x10000b84f
10000b84f:	e9 00 00 00 00 	jmp	0x10000b854
10000b854:	c6 45 8f 01 	movb	$1, -113(%rbp)
10000b858:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000b85c:	48 8b 35 3d 56 01 00 	movq	87613(%rip), %rsi ## Objc selector ref: class
10000b863:	ff 15 ff e7 00 00 	callq	*59391(%rip) ## Objc message: -[%rdi class]
10000b869:	48 8b 55 c8 	movq	-56(%rbp), %rdx
10000b86d:	48 8b 35 d4 5d 01 00 	movq	89556(%rip), %rsi ## Objc selector ref: instanceMethodSignatureForSelector:
10000b874:	48 89 c7 	movq	%rax, %rdi
10000b877:	ff 15 eb e7 00 00 	callq	*59371(%rip) ## Objc message: -[%rdi instanceMethodSignatureForSelector:]
10000b87d:	48 89 c7 	movq	%rax, %rdi
10000b880:	e8 4f 85 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000b885:	48 89 45 80 	movq	%rax, -128(%rbp)
10000b889:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000b88d:	48 8b 35 d4 5b 01 00 	movq	89044(%rip), %rsi ## Objc selector ref: numberOfArguments
10000b894:	48 89 c7 	movq	%rax, %rdi
10000b897:	ff 15 cb e7 00 00 	callq	*59339(%rip) ## Objc message: -[%rdi numberOfArguments]
10000b89d:	48 8b 55 80 	movq	-128(%rbp), %rdx
10000b8a1:	48 8b 35 c0 5b 01 00 	movq	89024(%rip), %rsi ## Objc selector ref: numberOfArguments
10000b8a8:	48 89 d7 	movq	%rdx, %rdi
10000b8ab:	48 89 85 98 fe ff ff 	movq	%rax, -360(%rbp)
10000b8b2:	ff 15 b0 e7 00 00 	callq	*59312(%rip) ## Objc message: -[%rdi numberOfArguments]
10000b8b8:	48 8b 95 98 fe ff ff 	movq	-360(%rbp), %rdx
10000b8bf:	48 39 c2 	cmpq	%rax, %rdx
10000b8c2:	0f 86 09 00 00 00 	jbe	0x10000b8d1
10000b8c8:	c6 45 8f 00 	movb	$0, -113(%rbp)
10000b8cc:	e9 66 01 00 00 	jmp	0x10000ba37
10000b8d1:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000b8d5:	48 8b 35 8c 5b 01 00 	movq	88972(%rip), %rsi ## Objc selector ref: numberOfArguments
10000b8dc:	48 89 c7 	movq	%rax, %rdi
10000b8df:	ff 15 83 e7 00 00 	callq	*59267(%rip) ## Objc message: -[%rdi numberOfArguments]
10000b8e5:	48 83 f8 01 	cmpq	$1, %rax
10000b8e9:	0f 86 46 00 00 00 	jbe	0x10000b935
10000b8ef:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000b8f3:	48 89 c7 	movq	%rax, %rdi
10000b8f6:	e8 cd 84 00 00 	callq	0x100013dc8 ## symbol stub for: _objc_retainAutorelease
10000b8fb:	b9 01 00 00 00 	movl	$1, %ecx
10000b900:	89 ca 	movl	%ecx, %edx
10000b902:	48 8b 35 f7 5a 01 00 	movq	88823(%rip), %rsi ## Objc selector ref: getArgumentTypeAtIndex:
10000b909:	48 89 c7 	movq	%rax, %rdi
10000b90c:	ff 15 56 e7 00 00 	callq	*59222(%rip) ## Objc message: -[%rdi getArgumentTypeAtIndex:]
10000b912:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000b919:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000b920:	0f be 08 	movsbl	(%rax), %ecx
10000b923:	83 f9 40 	cmpl	$64, %ecx
10000b926:	0f 84 04 00 00 00 	je	0x10000b930
10000b92c:	c6 45 8f 00 	movb	$0, -113(%rbp)
10000b930:	e9 00 00 00 00 	jmp	0x10000b935
10000b935:	f6 45 8f 01 	testb	$1, -113(%rbp)
10000b939:	0f 84 f3 00 00 00 	je	0x10000ba32
10000b93f:	48 c7 85 70 ff ff ff 02 00 00 00 	movq	$2, -144(%rbp)
10000b94a:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
10000b951:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000b955:	48 8b 35 0c 5b 01 00 	movq	88844(%rip), %rsi ## Objc selector ref: numberOfArguments
10000b95c:	48 89 cf 	movq	%rcx, %rdi
10000b95f:	48 89 85 90 fe ff ff 	movq	%rax, -368(%rbp)
10000b966:	ff 15 fc e6 00 00 	callq	*59132(%rip) ## Objc message: -[%rdi numberOfArguments]
10000b96c:	48 8b 8d 90 fe ff ff 	movq	-368(%rbp), %rcx
10000b973:	48 39 c1 	cmpq	%rax, %rcx
10000b976:	0f 83 b1 00 00 00 	jae	0x10000ba2d
10000b97c:	48 8b 45 80 	movq	-128(%rbp), %rax
10000b980:	48 89 c7 	movq	%rax, %rdi
10000b983:	e8 40 84 00 00 	callq	0x100013dc8 ## symbol stub for: _objc_retainAutorelease
10000b988:	48 8b 95 70 ff ff ff 	movq	-144(%rbp), %rdx
10000b98f:	48 8b 35 6a 5a 01 00 	movq	88682(%rip), %rsi ## Objc selector ref: getArgumentTypeAtIndex:
10000b996:	48 89 c7 	movq	%rax, %rdi
10000b999:	ff 15 c9 e6 00 00 	callq	*59081(%rip) ## Objc message: -[%rdi getArgumentTypeAtIndex:]
10000b99f:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000b9a6:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000b9aa:	48 89 c7 	movq	%rax, %rdi
10000b9ad:	e8 16 84 00 00 	callq	0x100013dc8 ## symbol stub for: _objc_retainAutorelease
10000b9b2:	48 8b 95 70 ff ff ff 	movq	-144(%rbp), %rdx
10000b9b9:	48 8b 35 40 5a 01 00 	movq	88640(%rip), %rsi ## Objc selector ref: getArgumentTypeAtIndex:
10000b9c0:	48 89 c7 	movq	%rax, %rdi
10000b9c3:	ff 15 9f e6 00 00 	callq	*59039(%rip) ## Objc message: -[%rdi getArgumentTypeAtIndex:]
10000b9c9:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
10000b9d0:	48 83 bd 68 ff ff ff 00 	cmpq	$0, -152(%rbp)
10000b9d8:	0f 84 2a 00 00 00 	je	0x10000ba08
10000b9de:	48 83 bd 60 ff ff ff 00 	cmpq	$0, -160(%rbp)
10000b9e6:	0f 84 1c 00 00 00 	je	0x10000ba08
10000b9ec:	48 8b 85 68 ff ff ff 	movq	-152(%rbp), %rax
10000b9f3:	0f be 08 	movsbl	(%rax), %ecx
10000b9f6:	48 8b 85 60 ff ff ff 	movq	-160(%rbp), %rax
10000b9fd:	0f be 10 	movsbl	(%rax), %edx
10000ba00:	39 d1 	cmpl	%edx, %ecx
10000ba02:	0f 84 09 00 00 00 	je	0x10000ba11
10000ba08:	c6 45 8f 00 	movb	$0, -113(%rbp)
10000ba0c:	e9 1c 00 00 00 	jmp	0x10000ba2d
10000ba11:	e9 00 00 00 00 	jmp	0x10000ba16
10000ba16:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
10000ba1d:	48 83 c0 01 	addq	$1, %rax
10000ba21:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000ba28:	e9 1d ff ff ff 	jmp	0x10000b94a
10000ba2d:	e9 00 00 00 00 	jmp	0x10000ba32
10000ba32:	e9 00 00 00 00 	jmp	0x10000ba37
10000ba37:	f6 45 8f 01 	testb	$1, -113(%rbp)
10000ba3b:	0f 85 64 01 00 00 	jne	0x10000bba5
10000ba41:	48 8d 05 40 10 01 00 	leaq	69696(%rip), %rax ## Objc cfstring ref: @"Blog signature %@ doesn't match %@."
10000ba48:	48 8b 0d 71 5c 01 00 	movq	89201(%rip), %rcx ## Objc class ref: _OBJC_CLASS_$_NSString
10000ba4f:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000ba53:	4c 8b 45 80 	movq	-128(%rbp), %r8
10000ba57:	48 8b 35 62 55 01 00 	movq	87394(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000ba5e:	48 89 cf 	movq	%rcx, %rdi
10000ba61:	48 89 95 88 fe ff ff 	movq	%rdx, -376(%rbp)
10000ba68:	48 89 c2 	movq	%rax, %rdx
10000ba6b:	48 8b 8d 88 fe ff ff 	movq	-376(%rbp), %rcx
10000ba72:	b0 00 	movb	$0, %al
10000ba74:	ff 15 ee e5 00 00 	callq	*58862(%rip) ## Objc message: +[NSString stringWithFormat:]
10000ba7a:	48 89 c7 	movq	%rax, %rdi
10000ba7d:	e8 52 83 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ba82:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
10000ba89:	e9 00 00 00 00 	jmp	0x10000ba8e
10000ba8e:	48 8d 05 13 0e 01 00 	leaq	69139(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000ba95:	48 8b b5 58 ff ff ff 	movq	-168(%rbp), %rsi
10000ba9c:	48 89 c7 	movq	%rax, %rdi
10000ba9f:	b0 00 	movb	$0, %al
10000baa1:	e8 6c 81 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000baa6:	e9 00 00 00 00 	jmp	0x10000baab
10000baab:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
10000bab0:	0f 84 bf 00 00 00 	je	0x10000bb75
10000bab6:	b8 01 00 00 00 	movl	$1, %eax
10000babb:	41 89 c0 	movl	%eax, %r8d
10000babe:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000bac2:	48 8d 55 f0 	leaq	-16(%rbp), %rdx
10000bac6:	48 8b 35 43 e5 00 00 	movq	58691(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000bacd:	48 8b 3d e4 5c 01 00 	movq	89316(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000bad4:	48 8b 36 	movq	(%rsi), %rsi
10000bad7:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000badb:	48 8b b5 58 ff ff ff 	movq	-168(%rbp), %rsi
10000bae2:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000bae6:	48 8b 35 bb 5b 01 00 	movq	89019(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000baed:	4c 8b 0d ac 5a 01 00 	movq	88748(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000baf4:	48 89 bd 80 fe ff ff 	movq	%rdi, -384(%rbp)
10000bafb:	48 89 f7 	movq	%rsi, %rdi
10000bafe:	4c 89 ce 	movq	%r9, %rsi
10000bb01:	ff 15 61 e5 00 00 	callq	*58721(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000bb07:	48 89 c7 	movq	%rax, %rdi
10000bb0a:	e8 c5 82 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bb0f:	48 8d 0d b2 0a 01 00 	leaq	68274(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000bb16:	41 ba 06 00 00 00 	movl	$6, %r10d
10000bb1c:	44 89 d2 	movl	%r10d, %edx
10000bb1f:	48 8b 35 82 5a 01 00 	movq	88706(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000bb26:	48 8b bd 80 fe ff ff 	movq	-384(%rbp), %rdi
10000bb2d:	48 89 95 78 fe ff ff 	movq	%rdx, -392(%rbp)
10000bb34:	48 89 ca 	movq	%rcx, %rdx
10000bb37:	48 8b 8d 78 fe ff ff 	movq	-392(%rbp), %rcx
10000bb3e:	49 89 c0 	movq	%rax, %r8
10000bb41:	48 89 85 70 fe ff ff 	movq	%rax, -400(%rbp)
10000bb48:	ff 15 1a e5 00 00 	callq	*58650(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000bb4e:	48 89 c7 	movq	%rax, %rdi
10000bb51:	e8 7e 82 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bb56:	48 89 c7 	movq	%rax, %rdi
10000bb59:	e8 04 82 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000bb5e:	48 8b 4d c0 	movq	-64(%rbp), %rcx
10000bb62:	48 89 01 	movq	%rax, (%rcx)
10000bb65:	48 8b 85 70 fe ff ff 	movq	-400(%rbp), %rax
10000bb6c:	48 89 c7 	movq	%rax, %rdi
10000bb6f:	ff 15 fb e4 00 00 	callq	*58619(%rip) ## literal pool symbol address: _objc_release
10000bb75:	e9 00 00 00 00 	jmp	0x10000bb7a
10000bb7a:	e9 00 00 00 00 	jmp	0x10000bb7f
10000bb7f:	31 c0 	xorl	%eax, %eax
10000bb81:	89 c6 	movl	%eax, %esi
10000bb83:	48 8d 8d 58 ff ff ff 	leaq	-168(%rbp), %rcx
10000bb8a:	c6 45 e7 00 	movb	$0, -25(%rbp)
10000bb8e:	c7 85 54 ff ff ff 01 00 00 00 	movl	$1, -172(%rbp)
10000bb98:	48 89 cf 	movq	%rcx, %rdi
10000bb9b:	e8 52 82 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bba0:	e9 0e 00 00 00 	jmp	0x10000bbb3
10000bba5:	c6 45 e7 01 	movb	$1, -25(%rbp)
10000bba9:	c7 85 54 ff ff ff 01 00 00 00 	movl	$1, -172(%rbp)
10000bbb3:	31 c0 	xorl	%eax, %eax
10000bbb5:	89 c6 	movl	%eax, %esi
10000bbb7:	48 8d 4d 80 	leaq	-128(%rbp), %rcx
10000bbbb:	48 89 cf 	movq	%rcx, %rdi
10000bbbe:	e8 2f 82 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bbc3:	48 8d 7d d0 	leaq	-48(%rbp), %rdi
10000bbc7:	31 c0 	xorl	%eax, %eax
10000bbc9:	89 c6 	movl	%eax, %esi
10000bbcb:	e8 22 82 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bbd0:	31 c0 	xorl	%eax, %eax
10000bbd2:	89 c6 	movl	%eax, %esi
10000bbd4:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000bbd8:	48 89 cf 	movq	%rcx, %rdi
10000bbdb:	e8 12 82 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bbe0:	8a 55 e7 	movb	-25(%rbp), %dl
10000bbe3:	48 8b 0d 4e e4 00 00 	movq	58446(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000bbea:	48 8b 09 	movq	(%rcx), %rcx
10000bbed:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000bbf1:	48 39 f1 	cmpq	%rsi, %rcx
10000bbf4:	88 95 6f fe ff ff 	movb	%dl, -401(%rbp)
10000bbfa:	0f 85 14 00 00 00 	jne	0x10000bc14
10000bc00:	8a 85 6f fe ff ff 	movb	-401(%rbp), %al
10000bc06:	24 01 	andb	$1, %al
10000bc08:	0f b6 c0 	movzbl	%al, %eax
10000bc0b:	48 81 c4 a0 01 00 00 	addq	$416, %rsp
10000bc12:	5d 	popq	%rbp
10000bc13:	c3 	retq
10000bc14:	e8 2f 80 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
10000bc19:	0f 0b 	ud2
10000bc1b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
-[AspectIdentifier invokeWithInfo:]:
10000bc20:	55 	pushq	%rbp
10000bc21:	48 89 e5 	movq	%rsp, %rbp
10000bc24:	48 81 ec d0 00 00 00 	subq	$208, %rsp
10000bc2b:	48 8d 45 e0 	leaq	-32(%rbp), %rax
10000bc2f:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000bc33:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000bc37:	48 c7 45 e0 00 00 00 00 	movq	$0, -32(%rbp)
10000bc3f:	48 89 c7 	movq	%rax, %rdi
10000bc42:	48 89 d6 	movq	%rdx, %rsi
10000bc45:	e8 a8 81 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bc4a:	48 8b 05 5f 5b 01 00 	movq	88927(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSInvocation
10000bc51:	48 8b 55 f0 	movq	-16(%rbp), %rdx
10000bc55:	48 8b 35 5c 58 01 00 	movq	88156(%rip), %rsi ## Objc selector ref: blockSignature
10000bc5c:	48 89 d7 	movq	%rdx, %rdi
10000bc5f:	48 89 45 98 	movq	%rax, -104(%rbp)
10000bc63:	ff 15 ff e3 00 00 	callq	*58367(%rip) ## Objc message: +[NSInvocation blockSignature]
10000bc69:	48 89 c7 	movq	%rax, %rdi
10000bc6c:	e8 63 81 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bc71:	48 8b 35 48 58 01 00 	movq	88136(%rip), %rsi ## Objc selector ref: invocationWithMethodSignature:
10000bc78:	48 8b 55 98 	movq	-104(%rbp), %rdx
10000bc7c:	48 89 d7 	movq	%rdx, %rdi
10000bc7f:	48 89 c2 	movq	%rax, %rdx
10000bc82:	48 89 45 90 	movq	%rax, -112(%rbp)
10000bc86:	ff 15 dc e3 00 00 	callq	*58332(%rip) ## Objc message: -[%rdi invocationWithMethodSignature:]
10000bc8c:	48 89 c7 	movq	%rax, %rdi
10000bc8f:	e8 40 81 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bc94:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000bc98:	48 8b 45 90 	movq	-112(%rbp), %rax
10000bc9c:	48 89 c7 	movq	%rax, %rdi
10000bc9f:	ff 15 cb e3 00 00 	callq	*58315(%rip) ## literal pool symbol address: _objc_release
10000bca5:	48 8b 7d e0 	movq	-32(%rbp), %rdi
10000bca9:	48 8b 35 18 58 01 00 	movq	88088(%rip), %rsi ## Objc selector ref: originalInvocation
10000bcb0:	ff 15 b2 e3 00 00 	callq	*58290(%rip) ## Objc message: -[%rdi originalInvocation]
10000bcb6:	48 89 c7 	movq	%rax, %rdi
10000bcb9:	e8 16 81 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bcbe:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000bcc2:	48 8b 45 f0 	movq	-16(%rbp), %rax
10000bcc6:	48 8b 35 eb 57 01 00 	movq	88043(%rip), %rsi ## Objc selector ref: blockSignature
10000bccd:	48 89 c7 	movq	%rax, %rdi
10000bcd0:	ff 15 92 e3 00 00 	callq	*58258(%rip) ## Objc message: -[%rdi blockSignature]
10000bcd6:	48 89 c7 	movq	%rax, %rdi
10000bcd9:	e8 f6 80 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bcde:	48 8b 35 83 57 01 00 	movq	87939(%rip), %rsi ## Objc selector ref: numberOfArguments
10000bce5:	48 89 c2 	movq	%rax, %rdx
10000bce8:	48 89 d7 	movq	%rdx, %rdi
10000bceb:	48 89 45 88 	movq	%rax, -120(%rbp)
10000bcef:	ff 15 73 e3 00 00 	callq	*58227(%rip) ## Objc message: -[%rdi numberOfArguments]
10000bcf5:	48 8b 55 88 	movq	-120(%rbp), %rdx
10000bcf9:	48 89 d7 	movq	%rdx, %rdi
10000bcfc:	48 89 45 80 	movq	%rax, -128(%rbp)
10000bd00:	ff 15 6a e3 00 00 	callq	*58218(%rip) ## literal pool symbol address: _objc_release
10000bd06:	48 8b 45 80 	movq	-128(%rbp), %rax
10000bd0a:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000bd0e:	48 8b 45 c8 	movq	-56(%rbp), %rax
10000bd12:	48 8b 55 d0 	movq	-48(%rbp), %rdx
10000bd16:	48 8b 35 db 56 01 00 	movq	87771(%rip), %rsi ## Objc selector ref: methodSignature
10000bd1d:	48 89 d7 	movq	%rdx, %rdi
10000bd20:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000bd27:	ff 15 3b e3 00 00 	callq	*58171(%rip) ## Objc message: -[%rdi methodSignature]
10000bd2d:	48 89 c7 	movq	%rax, %rdi
10000bd30:	e8 9f 80 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bd35:	48 8b 35 2c 57 01 00 	movq	87852(%rip), %rsi ## Objc selector ref: numberOfArguments
10000bd3c:	48 89 c2 	movq	%rax, %rdx
10000bd3f:	48 89 d7 	movq	%rdx, %rdi
10000bd42:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000bd49:	ff 15 19 e3 00 00 	callq	*58137(%rip) ## Objc message: -[%rdi numberOfArguments]
10000bd4f:	48 8b 95 70 ff ff ff 	movq	-144(%rbp), %rdx
10000bd56:	48 89 d7 	movq	%rdx, %rdi
10000bd59:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000bd60:	ff 15 0a e3 00 00 	callq	*58122(%rip) ## literal pool symbol address: _objc_release
10000bd66:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000bd6d:	48 8b 95 68 ff ff ff 	movq	-152(%rbp), %rdx
10000bd74:	48 39 d0 	cmpq	%rdx, %rax
10000bd77:	0f 86 2f 00 00 00 	jbe	0x10000bdac
10000bd7d:	e9 00 00 00 00 	jmp	0x10000bd82
10000bd82:	48 8d 05 7f 09 01 00 	leaq	67967(%rip), %rax ## Objc cfstring ref: @"Block has too many arguments. Not calling %@"
10000bd89:	48 8b 75 e0 	movq	-32(%rbp), %rsi
10000bd8d:	48 89 c7 	movq	%rax, %rdi
10000bd90:	b0 00 	movb	$0, %al
10000bd92:	e8 7b 7e 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000bd97:	e9 00 00 00 00 	jmp	0x10000bd9c
10000bd9c:	c6 45 ff 00 	movb	$0, -1(%rbp)
10000bda0:	c7 45 c4 01 00 00 00 	movl	$1, -60(%rbp)
10000bda7:	e9 d5 01 00 00 	jmp	0x10000bf81
10000bdac:	48 83 7d c8 01 	cmpq	$1, -56(%rbp)
10000bdb1:	0f 86 2d 00 00 00 	jbe	0x10000bde4
10000bdb7:	b8 01 00 00 00 	movl	$1, %eax
10000bdbc:	89 c1 	movl	%eax, %ecx
10000bdbe:	48 8d 55 e0 	leaq	-32(%rbp), %rdx
10000bdc2:	48 8b 75 d8 	movq	-40(%rbp), %rsi
10000bdc6:	48 8b 3d 03 57 01 00 	movq	87811(%rip), %rdi ## Objc selector ref: setArgument:atIndex:
10000bdcd:	48 89 bd 60 ff ff ff 	movq	%rdi, -160(%rbp)
10000bdd4:	48 89 f7 	movq	%rsi, %rdi
10000bdd7:	48 8b b5 60 ff ff ff 	movq	-160(%rbp), %rsi
10000bdde:	ff 15 84 e2 00 00 	callq	*57988(%rip) ## Objc message: -[%rdi setArgument:atIndex:]
10000bde4:	48 c7 45 b8 00 00 00 00 	movq	$0, -72(%rbp)
10000bdec:	48 c7 45 b0 02 00 00 00 	movq	$2, -80(%rbp)
10000bdf4:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000bdf8:	48 3b 45 c8 	cmpq	-56(%rbp), %rax
10000bdfc:	0f 83 0b 01 00 00 	jae	0x10000bf0d
10000be02:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000be06:	48 8b 35 eb 55 01 00 	movq	87531(%rip), %rsi ## Objc selector ref: methodSignature
10000be0d:	48 89 c7 	movq	%rax, %rdi
10000be10:	ff 15 52 e2 00 00 	callq	*57938(%rip) ## Objc message: -[%rdi methodSignature]
10000be16:	48 89 c7 	movq	%rax, %rdi
10000be19:	e8 b6 7f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000be1e:	48 89 c6 	movq	%rax, %rsi
10000be21:	48 89 f7 	movq	%rsi, %rdi
10000be24:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
10000be2b:	e8 98 7f 00 00 	callq	0x100013dc8 ## symbol stub for: _objc_retainAutorelease
10000be30:	48 8b 55 b0 	movq	-80(%rbp), %rdx
10000be34:	48 8b 35 c5 55 01 00 	movq	87493(%rip), %rsi ## Objc selector ref: getArgumentTypeAtIndex:
10000be3b:	48 89 c7 	movq	%rax, %rdi
10000be3e:	ff 15 24 e2 00 00 	callq	*57892(%rip) ## Objc message: -[%rdi getArgumentTypeAtIndex:]
10000be44:	48 8b 95 58 ff ff ff 	movq	-168(%rbp), %rdx
10000be4b:	48 89 d7 	movq	%rdx, %rdi
10000be4e:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
10000be55:	ff 15 15 e2 00 00 	callq	*57877(%rip) ## literal pool symbol address: _objc_release
10000be5b:	48 8d 75 a0 	leaq	-96(%rbp), %rsi
10000be5f:	31 c9 	xorl	%ecx, %ecx
10000be61:	89 ca 	movl	%ecx, %edx
10000be63:	48 8b 85 50 ff ff ff 	movq	-176(%rbp), %rax
10000be6a:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000be6e:	48 8b 7d a8 	movq	-88(%rbp), %rdi
10000be72:	e8 8f 7d 00 00 	callq	0x100013c06 ## symbol stub for: _NSGetSizeAndAlignment
10000be77:	48 8b 7d b8 	movq	-72(%rbp), %rdi
10000be7b:	48 8b 75 a0 	movq	-96(%rbp), %rsi
10000be7f:	48 89 85 48 ff ff ff 	movq	%rax, -184(%rbp)
10000be86:	e8 97 7f 00 00 	callq	0x100013e22 ## symbol stub for: _reallocf
10000be8b:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000be8f:	48 83 f8 00 	cmpq	$0, %rax
10000be93:	0f 85 2b 00 00 00 	jne	0x10000bec4
10000be99:	e9 00 00 00 00 	jmp	0x10000be9e
10000be9e:	48 8d 05 83 08 01 00 	leaq	67715(%rip), %rax ## Objc cfstring ref: @"Failed to allocate memory for block invocation."
10000bea5:	48 89 c7 	movq	%rax, %rdi
10000bea8:	b0 00 	movb	$0, %al
10000beaa:	e8 63 7d 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000beaf:	e9 00 00 00 00 	jmp	0x10000beb4
10000beb4:	c6 45 ff 00 	movb	$0, -1(%rbp)
10000beb8:	c7 45 c4 01 00 00 00 	movl	$1, -60(%rbp)
10000bebf:	e9 bd 00 00 00 	jmp	0x10000bf81
10000bec4:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000bec8:	48 8b 55 b8 	movq	-72(%rbp), %rdx
10000becc:	48 8b 4d b0 	movq	-80(%rbp), %rcx
10000bed0:	48 8b 35 31 55 01 00 	movq	87345(%rip), %rsi ## Objc selector ref: getArgument:atIndex:
10000bed7:	48 89 c7 	movq	%rax, %rdi
10000beda:	ff 15 88 e1 00 00 	callq	*57736(%rip) ## Objc message: -[%rdi getArgument:atIndex:]
10000bee0:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000bee4:	48 8b 55 b8 	movq	-72(%rbp), %rdx
10000bee8:	48 8b 4d b0 	movq	-80(%rbp), %rcx
10000beec:	48 8b 35 dd 55 01 00 	movq	87517(%rip), %rsi ## Objc selector ref: setArgument:atIndex:
10000bef3:	48 89 c7 	movq	%rax, %rdi
10000bef6:	ff 15 6c e1 00 00 	callq	*57708(%rip) ## Objc message: -[%rdi setArgument:atIndex:]
10000befc:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000bf00:	48 83 c0 01 	addq	$1, %rax
10000bf04:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000bf08:	e9 e7 fe ff ff 	jmp	0x10000bdf4
10000bf0d:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000bf11:	48 8b 4d f0 	movq	-16(%rbp), %rcx
10000bf15:	48 8b 35 bc 55 01 00 	movq	87484(%rip), %rsi ## Objc selector ref: block
10000bf1c:	48 89 cf 	movq	%rcx, %rdi
10000bf1f:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000bf26:	ff 15 3c e1 00 00 	callq	*57660(%rip) ## Objc message: -[%rdi block]
10000bf2c:	48 89 c7 	movq	%rax, %rdi
10000bf2f:	e8 a0 7e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000bf34:	48 8b 35 a5 55 01 00 	movq	87461(%rip), %rsi ## Objc selector ref: invokeWithTarget:
10000bf3b:	48 8b 8d 40 ff ff ff 	movq	-192(%rbp), %rcx
10000bf42:	48 89 cf 	movq	%rcx, %rdi
10000bf45:	48 89 c2 	movq	%rax, %rdx
10000bf48:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000bf4f:	ff 15 13 e1 00 00 	callq	*57619(%rip) ## Objc message: -[%rdi invokeWithTarget:]
10000bf55:	48 8b bd 38 ff ff ff 	movq	-200(%rbp), %rdi
10000bf5c:	ff 15 0e e1 00 00 	callq	*57614(%rip) ## literal pool symbol address: _objc_release
10000bf62:	48 83 7d b8 00 	cmpq	$0, -72(%rbp)
10000bf67:	0f 84 09 00 00 00 	je	0x10000bf76
10000bf6d:	48 8b 7d b8 	movq	-72(%rbp), %rdi
10000bf71:	e8 aa 7d 00 00 	callq	0x100013d20 ## symbol stub for: _free
10000bf76:	c6 45 ff 01 	movb	$1, -1(%rbp)
10000bf7a:	c7 45 c4 01 00 00 00 	movl	$1, -60(%rbp)
10000bf81:	31 c0 	xorl	%eax, %eax
10000bf83:	89 c6 	movl	%eax, %esi
10000bf85:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
10000bf89:	48 89 cf 	movq	%rcx, %rdi
10000bf8c:	e8 61 7e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bf91:	31 c0 	xorl	%eax, %eax
10000bf93:	89 c6 	movl	%eax, %esi
10000bf95:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000bf99:	48 89 cf 	movq	%rcx, %rdi
10000bf9c:	e8 51 7e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bfa1:	48 8d 7d e0 	leaq	-32(%rbp), %rdi
10000bfa5:	31 c0 	xorl	%eax, %eax
10000bfa7:	89 c6 	movl	%eax, %esi
10000bfa9:	e8 44 7e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000bfae:	8a 55 ff 	movb	-1(%rbp), %dl
10000bfb1:	80 e2 01 	andb	$1, %dl
10000bfb4:	0f b6 c2 	movzbl	%dl, %eax
10000bfb7:	48 81 c4 d0 00 00 00 	addq	$208, %rsp
10000bfbe:	5d 	popq	%rbp
10000bfbf:	c3 	retq
-[AspectIdentifier description]:
10000bfc0:	55 	pushq	%rbp
10000bfc1:	48 89 e5 	movq	%rsp, %rbp
10000bfc4:	48 81 ec 90 00 00 00 	subq	$144, %rsp
10000bfcb:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000bfcf:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000bfd3:	48 8b 3d e6 56 01 00 	movq	87782(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
10000bfda:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000bfde:	48 8b 05 bb 4e 01 00 	movq	85691(%rip), %rax ## Objc selector ref: class
10000bfe5:	48 8b 0d 7c e0 00 00 	movq	57468(%rip), %rcx ## Objc message: +[NSString class]
10000bfec:	48 89 7d e8 	movq	%rdi, -24(%rbp)
10000bff0:	48 89 f7 	movq	%rsi, %rdi
10000bff3:	48 89 c6 	movq	%rax, %rsi
10000bff6:	48 89 4d e0 	movq	%rcx, -32(%rbp)
10000bffa:	ff d1 	callq	*%rcx
10000bffc:	48 8b 4d f8 	movq	-8(%rbp), %rcx
10000c000:	48 8b 35 e1 54 01 00 	movq	87265(%rip), %rsi ## Objc selector ref: selector
10000c007:	48 89 cf 	movq	%rcx, %rdi
10000c00a:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000c00e:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000c012:	48 89 4d d0 	movq	%rcx, -48(%rbp)
10000c016:	ff d2 	callq	*%rdx
10000c018:	48 89 c7 	movq	%rax, %rdi
10000c01b:	e8 04 7c 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000c020:	48 89 c7 	movq	%rax, %rdi
10000c023:	e8 ac 7d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c028:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000c02c:	48 8b 35 bd 54 01 00 	movq	87229(%rip), %rsi ## Objc selector ref: object
10000c033:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000c037:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000c03b:	ff d1 	callq	*%rcx
10000c03d:	48 89 c7 	movq	%rax, %rdi
10000c040:	e8 8f 7d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c045:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000c049:	48 8b 35 a8 54 01 00 	movq	87208(%rip), %rsi ## Objc selector ref: options
10000c050:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000c054:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000c058:	ff d1 	callq	*%rcx
10000c05a:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000c05e:	48 8b 35 73 54 01 00 	movq	87155(%rip), %rsi ## Objc selector ref: block
10000c065:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000c069:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000c06d:	ff d1 	callq	*%rcx
10000c06f:	48 89 c7 	movq	%rax, %rdi
10000c072:	e8 5d 7d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c077:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000c07b:	48 8b 35 36 54 01 00 	movq	87094(%rip), %rsi ## Objc selector ref: blockSignature
10000c082:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000c086:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000c08a:	ff d1 	callq	*%rcx
10000c08c:	48 89 c7 	movq	%rax, %rdi
10000c08f:	e8 40 7d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c094:	48 8b 35 cd 53 01 00 	movq	86989(%rip), %rsi ## Objc selector ref: numberOfArguments
10000c09b:	48 89 c7 	movq	%rax, %rdi
10000c09e:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000c0a2:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000c0a6:	ff d1 	callq	*%rcx
10000c0a8:	48 8b 35 11 4f 01 00 	movq	85777(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000c0af:	48 89 e1 	movq	%rsp, %rcx
10000c0b2:	48 89 41 18 	movq	%rax, 24(%rcx)
10000c0b6:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000c0ba:	48 89 41 10 	movq	%rax, 16(%rcx)
10000c0be:	48 8b 55 b8 	movq	-72(%rbp), %rdx
10000c0c2:	48 89 51 08 	movq	%rdx, 8(%rcx)
10000c0c6:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000c0ca:	48 89 39 	movq	%rdi, (%rcx)
10000c0cd:	48 8d 15 74 06 01 00 	leaq	67188(%rip), %rdx ## Objc cfstring ref: @"<%@: %p, SEL:%@ object:%@ options:%tu block:%@ (#%tu args)>"
10000c0d4:	45 31 c0 	xorl	%r8d, %r8d
10000c0d7:	45 88 c1 	movb	%r8b, %r9b
10000c0da:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000c0de:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000c0e2:	4c 8b 45 d0 	movq	-48(%rbp), %r8
10000c0e6:	4c 8b 55 c8 	movq	-56(%rbp), %r10
10000c0ea:	44 88 4d a7 	movb	%r9b, -89(%rbp)
10000c0ee:	4d 89 d1 	movq	%r10, %r9
10000c0f1:	8a 45 a7 	movb	-89(%rbp), %al
10000c0f4:	4c 8b 5d e0 	movq	-32(%rbp), %r11
10000c0f8:	41 ff d3 	callq	*%r11
10000c0fb:	48 89 c7 	movq	%rax, %rdi
10000c0fe:	e8 d1 7c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c103:	48 8b 0d 66 df 00 00 	movq	57190(%rip), %rcx ## literal pool symbol address: _objc_release
10000c10a:	48 8b 7d a8 	movq	-88(%rbp), %rdi
10000c10e:	48 89 45 98 	movq	%rax, -104(%rbp)
10000c112:	48 89 4d 90 	movq	%rcx, -112(%rbp)
10000c116:	ff d1 	callq	*%rcx
10000c118:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000c11c:	48 8b 45 90 	movq	-112(%rbp), %rax
10000c120:	ff d0 	callq	*%rax
10000c122:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000c126:	48 8b 45 90 	movq	-112(%rbp), %rax
10000c12a:	ff d0 	callq	*%rax
10000c12c:	48 8b 7d c8 	movq	-56(%rbp), %rdi
10000c130:	48 8b 45 90 	movq	-112(%rbp), %rax
10000c134:	ff d0 	callq	*%rax
10000c136:	48 8b 45 98 	movq	-104(%rbp), %rax
10000c13a:	48 89 c7 	movq	%rax, %rdi
10000c13d:	48 81 c4 90 00 00 00 	addq	$144, %rsp
10000c144:	5d 	popq	%rbp
10000c145:	e9 2a 7c 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000c14a:	66 0f 1f 44 00 00 	nopw	(%rax,%rax)
-[AspectIdentifier remove]:
10000c150:	55 	pushq	%rbp
10000c151:	48 89 e5 	movq	%rsp, %rbp
10000c154:	48 83 ec 10 	subq	$16, %rsp
10000c158:	31 c0 	xorl	%eax, %eax
10000c15a:	89 c1 	movl	%eax, %ecx
10000c15c:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c160:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c164:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000c168:	48 89 ce 	movq	%rcx, %rsi
10000c16b:	e8 10 00 00 00 	callq	_aspect_remove
10000c170:	24 01 	andb	$1, %al
10000c172:	0f b6 c0 	movzbl	%al, %eax
10000c175:	48 83 c4 10 	addq	$16, %rsp
10000c179:	5d 	popq	%rbp
10000c17a:	c3 	retq
10000c17b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
_aspect_remove:
10000c180:	55 	pushq	%rbp
10000c181:	48 89 e5 	movq	%rsp, %rbp
10000c184:	48 81 ec f0 00 00 00 	subq	$240, %rsp
10000c18b:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10000c18f:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
10000c197:	48 89 bd 70 ff ff ff 	movq	%rdi, -144(%rbp)
10000c19e:	48 89 c7 	movq	%rax, %rdi
10000c1a1:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
10000c1a8:	48 89 b5 68 ff ff ff 	movq	%rsi, -152(%rbp)
10000c1af:	48 89 c6 	movq	%rax, %rsi
10000c1b2:	e8 3b 7c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c1b7:	48 8b 85 68 ff ff ff 	movq	-152(%rbp), %rax
10000c1be:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000c1c2:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000c1c6:	48 8b 0d db 55 01 00 	movq	87515(%rip), %rcx ## Objc class ref: AspectIdentifier
10000c1cd:	48 8b 35 cc 4c 01 00 	movq	85196(%rip), %rsi ## Objc selector ref: class
10000c1d4:	48 89 cf 	movq	%rcx, %rdi
10000c1d7:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
10000c1de:	ff 15 84 de 00 00 	callq	*56964(%rip) ## Objc message: +[AspectIdentifier class]
10000c1e4:	48 8b 35 c5 4e 01 00 	movq	85701(%rip), %rsi ## Objc selector ref: isKindOfClass:
10000c1eb:	48 8b 8d 60 ff ff ff 	movq	-160(%rbp), %rcx
10000c1f2:	48 89 cf 	movq	%rcx, %rdi
10000c1f5:	48 89 c2 	movq	%rax, %rdx
10000c1f8:	ff 15 6a de 00 00 	callq	*56938(%rip) ## Objc message: -[%rdi isKindOfClass:]
10000c1fe:	34 ff 	xorb	$-1, %al
10000c200:	24 01 	andb	$1, %al
10000c202:	44 0f b6 c0 	movzbl	%al, %r8d
10000c206:	49 63 c8 	movslq	%r8d, %rcx
10000c209:	48 83 f9 00 	cmpq	$0, %rcx
10000c20d:	0f 84 92 01 00 00 	je	0x10000c3a5
10000c213:	48 8d 15 25 a5 00 00 	leaq	42277(%rip), %rdx ## literal pool for: "BOOL aspect_remove(AspectIdentifier *__strong, NSError *__autoreleasing *)"
10000c21a:	48 8b 05 9f 54 01 00 	movq	87199(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000c221:	48 8b 35 30 52 01 00 	movq	86576(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000c228:	48 89 c7 	movq	%rax, %rdi
10000c22b:	ff 15 37 de 00 00 	callq	*56887(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000c231:	48 89 c7 	movq	%rax, %rdi
10000c234:	e8 9b 7b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c239:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000c23d:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10000c242:	0f 84 10 00 00 00 	je	0x10000c258
10000c248:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000c24c:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
10000c253:	e9 13 00 00 00 	jmp	0x10000c26b
10000c258:	48 8d 05 09 04 01 00 	leaq	66569(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000c25f:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
10000c266:	e9 00 00 00 00 	jmp	0x10000c26b
10000c26b:	48 8b 85 58 ff ff ff 	movq	-168(%rbp), %rax
10000c272:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000c276:	48 89 cf 	movq	%rcx, %rdi
10000c279:	48 89 c6 	movq	%rax, %rsi
10000c27c:	e8 71 7b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c281:	48 8d 15 05 9c 00 00 	leaq	39941(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000c288:	48 8b 05 31 54 01 00 	movq	87089(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000c28f:	48 8b 35 c2 51 01 00 	movq	86466(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000c296:	48 89 c7 	movq	%rax, %rdi
10000c299:	ff 15 c9 dd 00 00 	callq	*56777(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000c29f:	48 89 c7 	movq	%rax, %rdi
10000c2a2:	e8 2d 7b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c2a7:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000c2ab:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
10000c2b0:	0f 84 10 00 00 00 	je	0x10000c2c6
10000c2b6:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000c2ba:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
10000c2c1:	e9 13 00 00 00 	jmp	0x10000c2d9
10000c2c6:	48 8d 05 bb 03 01 00 	leaq	66491(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000c2cd:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
10000c2d4:	e9 00 00 00 00 	jmp	0x10000c2d9
10000c2d9:	48 8b 85 50 ff ff ff 	movq	-176(%rbp), %rax
10000c2e0:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10000c2e4:	48 89 cf 	movq	%rcx, %rdi
10000c2e7:	48 89 c6 	movq	%rax, %rsi
10000c2ea:	e8 03 7b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c2ef:	48 8b 05 aa 54 01 00 	movq	87210(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000c2f6:	48 8b 35 83 51 01 00 	movq	86403(%rip), %rsi ## Objc selector ref: currentHandler
10000c2fd:	48 89 c7 	movq	%rax, %rdi
10000c300:	ff 15 62 dd 00 00 	callq	*56674(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000c306:	48 89 c7 	movq	%rax, %rdi
10000c309:	e8 c6 7a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c30e:	ba 87 00 00 00 	movl	$135, %edx
10000c313:	41 89 d0 	movl	%edx, %r8d
10000c316:	48 8d 0d 8b 07 01 00 	leaq	67467(%rip), %rcx ## Objc cfstring ref: @"Must have correct type."
10000c31d:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000c321:	48 8b 75 e0 	movq	-32(%rbp), %rsi
10000c325:	48 8b 3d 5c 51 01 00 	movq	86364(%rip), %rdi ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000c32c:	49 89 c1 	movq	%rax, %r9
10000c32f:	48 89 bd 48 ff ff ff 	movq	%rdi, -184(%rbp)
10000c336:	4c 89 cf 	movq	%r9, %rdi
10000c339:	4c 8b 8d 48 ff ff ff 	movq	-184(%rbp), %r9
10000c340:	48 89 b5 40 ff ff ff 	movq	%rsi, -192(%rbp)
10000c347:	4c 89 ce 	movq	%r9, %rsi
10000c34a:	4c 8b 95 40 ff ff ff 	movq	-192(%rbp), %r10
10000c351:	48 89 8d 38 ff ff ff 	movq	%rcx, -200(%rbp)
10000c358:	4c 89 d1 	movq	%r10, %rcx
10000c35b:	4c 8b 8d 38 ff ff ff 	movq	-200(%rbp), %r9
10000c362:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
10000c369:	b0 00 	movb	$0, %al
10000c36b:	ff 15 f7 dc 00 00 	callq	*56567(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000c371:	48 8b 8d 30 ff ff ff 	movq	-208(%rbp), %rcx
10000c378:	48 89 cf 	movq	%rcx, %rdi
10000c37b:	ff 15 ef dc 00 00 	callq	*56559(%rip) ## literal pool symbol address: _objc_release
10000c381:	45 31 db 	xorl	%r11d, %r11d
10000c384:	44 89 de 	movl	%r11d, %esi
10000c387:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10000c38b:	48 89 cf 	movq	%rcx, %rdi
10000c38e:	e8 5f 7a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c393:	45 31 db 	xorl	%r11d, %r11d
10000c396:	44 89 de 	movl	%r11d, %esi
10000c399:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000c39d:	48 89 cf 	movq	%rcx, %rdi
10000c3a0:	e8 4d 7a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c3a5:	e9 00 00 00 00 	jmp	0x10000c3aa
10000c3aa:	e9 00 00 00 00 	jmp	0x10000c3af
10000c3af:	48 c7 45 c0 00 00 00 00 	movq	$0, -64(%rbp)
10000c3b7:	48 8d 45 c0 	leaq	-64(%rbp), %rax
10000c3bb:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000c3bf:	c7 45 d0 00 00 00 20 	movl	$536870912, -48(%rbp)
10000c3c6:	c7 45 d4 20 00 00 00 	movl	$32, -44(%rbp)
10000c3cd:	c6 45 d8 00 	movb	$0, -40(%rbp)
10000c3d1:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000c3d5:	48 8b 15 44 dc 00 00 	movq	56388(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
10000c3dc:	48 89 55 88 	movq	%rdx, -120(%rbp)
10000c3e0:	c7 45 90 00 00 00 c2 	movl	$3254779904, -112(%rbp)
10000c3e7:	c7 45 94 00 00 00 00 	movl	$0, -108(%rbp)
10000c3ee:	48 8d 15 2b 60 00 00 	leaq	___aspect_remove_block_invoke(%rip), %rdx
10000c3f5:	48 89 55 98 	movq	%rdx, -104(%rbp)
10000c3f9:	48 8d 15 a8 ed 00 00 	leaq	___block_descriptor_tmp.438(%rip), %rdx
10000c400:	48 89 55 a0 	movq	%rdx, -96(%rbp)
10000c404:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000c408:	48 8b 15 69 dc 00 00 	movq	56425(%rip), %rdx ## literal pool symbol address: _objc_retain
10000c40f:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000c416:	48 89 8d 20 ff ff ff 	movq	%rcx, -224(%rbp)
10000c41d:	ff d2 	callq	*%rdx
10000c41f:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000c423:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
10000c42a:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000c42e:	48 8b 4d f0 	movq	-16(%rbp), %rcx
10000c432:	48 89 4d b8 	movq	%rcx, -72(%rbp)
10000c436:	48 8d 7d 88 	leaq	-120(%rbp), %rdi
10000c43a:	e8 d1 16 00 00 	callq	_aspect_performLocked
10000c43f:	e9 00 00 00 00 	jmp	0x10000c444
10000c444:	31 c0 	xorl	%eax, %eax
10000c446:	89 c6 	movl	%eax, %esi
10000c448:	48 8b 4d c8 	movq	-56(%rbp), %rcx
10000c44c:	8a 51 18 	movb	24(%rcx), %dl
10000c44f:	48 8b 8d 20 ff ff ff 	movq	-224(%rbp), %rcx
10000c456:	48 89 cf 	movq	%rcx, %rdi
10000c459:	88 95 1f ff ff ff 	movb	%dl, -225(%rbp)
10000c45f:	e8 8e 79 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c464:	be 08 00 00 00 	movl	$8, %esi
10000c469:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000c46d:	48 89 cf 	movq	%rcx, %rdi
10000c470:	e8 c7 77 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
10000c475:	31 c0 	xorl	%eax, %eax
10000c477:	89 c6 	movl	%eax, %esi
10000c479:	48 8d 4d f8 	leaq	-8(%rbp), %rcx
10000c47d:	48 89 cf 	movq	%rcx, %rdi
10000c480:	e8 6d 79 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c485:	8a 95 1f ff ff ff 	movb	-225(%rbp), %dl
10000c48b:	80 e2 01 	andb	$1, %dl
10000c48e:	0f b6 c2 	movzbl	%dl, %eax
10000c491:	48 81 c4 f0 00 00 00 	addq	$240, %rsp
10000c498:	5d 	popq	%rbp
10000c499:	c3 	retq
10000c49a:	be 08 00 00 00 	movl	$8, %esi
10000c49f:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000c4a3:	89 d7 	movl	%edx, %edi
10000c4a5:	48 89 45 80 	movq	%rax, -128(%rbp)
10000c4a9:	89 bd 7c ff ff ff 	movl	%edi, -132(%rbp)
10000c4af:	48 89 cf 	movq	%rcx, %rdi
10000c4b2:	e8 85 77 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
10000c4b7:	48 8b 7d 80 	movq	-128(%rbp), %rdi
10000c4bb:	e8 82 77 00 00 	callq	0x100013c42 ## symbol stub for: __Unwind_Resume
10000c4c0:	0f 0b 	ud2
10000c4c2:	66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectIdentifier selector]:
10000c4d0:	55 	pushq	%rbp
10000c4d1:	48 89 e5 	movq	%rsp, %rbp
10000c4d4:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c4d8:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c4dc:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c4e0:	48 8b 3d 49 54 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._selector(%rip), %rdi
10000c4e7:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
10000c4eb:	5d 	popq	%rbp
10000c4ec:	c3 	retq
10000c4ed:	0f 1f 00 	nopl	(%rax)
-[AspectIdentifier setSelector:]:
10000c4f0:	55 	pushq	%rbp
10000c4f1:	48 89 e5 	movq	%rsp, %rbp
10000c4f4:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c4f8:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c4fc:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000c500:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000c504:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c508:	48 8b 3d 21 54 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._selector(%rip), %rdi
10000c50f:	48 89 14 3e 	movq	%rdx, (%rsi,%rdi)
10000c513:	5d 	popq	%rbp
10000c514:	c3 	retq
10000c515:	66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectIdentifier block]:
10000c520:	55 	pushq	%rbp
10000c521:	48 89 e5 	movq	%rsp, %rbp
10000c524:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c528:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c52c:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c530:	48 8b 3d 01 54 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._block(%rip), %rdi
10000c537:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
10000c53b:	5d 	popq	%rbp
10000c53c:	c3 	retq
10000c53d:	0f 1f 00 	nopl	(%rax)
-[AspectIdentifier setBlock:]:
10000c540:	55 	pushq	%rbp
10000c541:	48 89 e5 	movq	%rsp, %rbp
10000c544:	48 83 ec 20 	subq	$32, %rsp
10000c548:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c54c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c550:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000c554:	48 8b 75 e8 	movq	-24(%rbp), %rsi
10000c558:	48 8b 55 f8 	movq	-8(%rbp), %rdx
10000c55c:	48 8b 3d d5 53 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._block(%rip), %rdi
10000c563:	48 01 fa 	addq	%rdi, %rdx
10000c566:	48 89 d7 	movq	%rdx, %rdi
10000c569:	e8 84 78 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c56e:	48 83 c4 20 	addq	$32, %rsp
10000c572:	5d 	popq	%rbp
10000c573:	c3 	retq
10000c574:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectIdentifier blockSignature]:
10000c580:	55 	pushq	%rbp
10000c581:	48 89 e5 	movq	%rsp, %rbp
10000c584:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c588:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c58c:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c590:	48 8b 3d a9 53 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._blockSignature(%rip), %rdi
10000c597:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
10000c59b:	5d 	popq	%rbp
10000c59c:	c3 	retq
10000c59d:	0f 1f 00 	nopl	(%rax)
-[AspectIdentifier setBlockSignature:]:
10000c5a0:	55 	pushq	%rbp
10000c5a1:	48 89 e5 	movq	%rsp, %rbp
10000c5a4:	48 83 ec 20 	subq	$32, %rsp
10000c5a8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c5ac:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c5b0:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000c5b4:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000c5b8:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c5bc:	48 8b 3d 7d 53 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._blockSignature(%rip), %rdi
10000c5c3:	48 01 fe 	addq	%rdi, %rsi
10000c5c6:	48 89 f7 	movq	%rsi, %rdi
10000c5c9:	48 89 d6 	movq	%rdx, %rsi
10000c5cc:	e8 21 78 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c5d1:	48 83 c4 20 	addq	$32, %rsp
10000c5d5:	5d 	popq	%rbp
10000c5d6:	c3 	retq
10000c5d7:	66 0f 1f 84 00 00 00 00 00 	nopw	(%rax,%rax)
-[AspectIdentifier object]:
10000c5e0:	55 	pushq	%rbp
10000c5e1:	48 89 e5 	movq	%rsp, %rbp
10000c5e4:	48 83 ec 10 	subq	$16, %rsp
10000c5e8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c5ec:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c5f0:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c5f4:	48 8b 3d 4d 53 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._object(%rip), %rdi
10000c5fb:	48 01 fe 	addq	%rdi, %rsi
10000c5fe:	48 89 f7 	movq	%rsi, %rdi
10000c601:	e8 b0 77 00 00 	callq	0x100013db6 ## symbol stub for: _objc_loadWeakRetained
10000c606:	48 89 c7 	movq	%rax, %rdi
10000c609:	48 83 c4 10 	addq	$16, %rsp
10000c60d:	5d 	popq	%rbp
10000c60e:	e9 61 77 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000c613:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectIdentifier setObject:]:
10000c620:	55 	pushq	%rbp
10000c621:	48 89 e5 	movq	%rsp, %rbp
10000c624:	48 83 ec 20 	subq	$32, %rsp
10000c628:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c62c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c630:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000c634:	48 8b 75 e8 	movq	-24(%rbp), %rsi
10000c638:	48 8b 55 f8 	movq	-8(%rbp), %rdx
10000c63c:	48 8b 3d 05 53 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._object(%rip), %rdi
10000c643:	48 01 fa 	addq	%rdi, %rdx
10000c646:	48 89 d7 	movq	%rdx, %rdi
10000c649:	e8 aa 77 00 00 	callq	0x100013df8 ## symbol stub for: _objc_storeWeak
10000c64e:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000c652:	48 83 c4 20 	addq	$32, %rsp
10000c656:	5d 	popq	%rbp
10000c657:	c3 	retq
10000c658:	0f 1f 84 00 00 00 00 00 	nopl	(%rax,%rax)
-[AspectIdentifier options]:
10000c660:	55 	pushq	%rbp
10000c661:	48 89 e5 	movq	%rsp, %rbp
10000c664:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c668:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c66c:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c670:	48 8b 3d d9 52 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._options(%rip), %rdi
10000c677:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
10000c67b:	5d 	popq	%rbp
10000c67c:	c3 	retq
10000c67d:	0f 1f 00 	nopl	(%rax)
-[AspectIdentifier setOptions:]:
10000c680:	55 	pushq	%rbp
10000c681:	48 89 e5 	movq	%rsp, %rbp
10000c684:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c688:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c68c:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000c690:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000c694:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c698:	48 8b 3d b1 52 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._options(%rip), %rdi
10000c69f:	48 89 14 3e 	movq	%rdx, (%rsi,%rdi)
10000c6a3:	5d 	popq	%rbp
10000c6a4:	c3 	retq
10000c6a5:	66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectIdentifier .cxx_destruct]:
10000c6b0:	55 	pushq	%rbp
10000c6b1:	48 89 e5 	movq	%rsp, %rbp
10000c6b4:	48 83 ec 20 	subq	$32, %rsp
10000c6b8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000c6bc:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000c6c0:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000c6c4:	48 8b 3d 7d 52 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._object(%rip), %rdi
10000c6cb:	48 89 f0 	movq	%rsi, %rax
10000c6ce:	48 01 f8 	addq	%rdi, %rax
10000c6d1:	48 89 c7 	movq	%rax, %rdi
10000c6d4:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000c6d8:	e8 a9 76 00 00 	callq	0x100013d86 ## symbol stub for: _objc_destroyWeak
10000c6dd:	31 c9 	xorl	%ecx, %ecx
10000c6df:	89 ce 	movl	%ecx, %esi
10000c6e1:	48 8b 05 58 52 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._blockSignature(%rip), %rax
10000c6e8:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000c6ec:	48 01 c7 	addq	%rax, %rdi
10000c6ef:	e8 fe 76 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c6f4:	31 c9 	xorl	%ecx, %ecx
10000c6f6:	89 ce 	movl	%ecx, %esi
10000c6f8:	48 8b 05 39 52 01 00 	movq	_OBJC_IVAR_$_AspectIdentifier._block(%rip), %rax
10000c6ff:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000c703:	48 01 c7 	addq	%rax, %rdi
10000c706:	e8 e7 76 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c70b:	48 83 c4 20 	addq	$32, %rsp
10000c70f:	5d 	popq	%rbp
10000c710:	c3 	retq
10000c711:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectsContainer hasAspects]:
10000c720:	55 	pushq	%rbp
10000c721:	48 89 e5 	movq	%rsp, %rbp
10000c724:	48 83 ec 50 	subq	$80, %rsp
10000c728:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000c72c:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000c730:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000c734:	48 8b 3d c5 4d 01 00 	movq	85445(%rip), %rdi ## Objc selector ref: beforeAspects
10000c73b:	48 89 7d c0 	movq	%rdi, -64(%rbp)
10000c73f:	48 89 f7 	movq	%rsi, %rdi
10000c742:	48 8b 75 c0 	movq	-64(%rbp), %rsi
10000c746:	ff 15 1c d9 00 00 	callq	*55580(%rip) ## Objc message: -[%rdi beforeAspects]
10000c74c:	48 89 c7 	movq	%rax, %rdi
10000c74f:	e8 80 76 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c754:	48 8b 35 cd 4b 01 00 	movq	84941(%rip), %rsi ## Objc selector ref: count
10000c75b:	48 89 c7 	movq	%rax, %rdi
10000c75e:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000c762:	ff 15 00 d9 00 00 	callq	*55552(%rip) ## Objc message: -[%rdi count]
10000c768:	b1 01 	movb	$1, %cl
10000c76a:	c6 45 df 00 	movb	$0, -33(%rbp)
10000c76e:	c6 45 cf 00 	movb	$0, -49(%rbp)
10000c772:	48 83 f8 00 	cmpq	$0, %rax
10000c776:	88 4d b7 	movb	%cl, -73(%rbp)
10000c779:	0f 87 81 00 00 00 	ja	0x10000c800
10000c77f:	48 8b 45 f0 	movq	-16(%rbp), %rax
10000c783:	48 8b 35 7e 4d 01 00 	movq	85374(%rip), %rsi ## Objc selector ref: insteadAspects
10000c78a:	48 89 c7 	movq	%rax, %rdi
10000c78d:	ff 15 d5 d8 00 00 	callq	*55509(%rip) ## Objc message: -[%rdi insteadAspects]
10000c793:	48 89 c7 	movq	%rax, %rdi
10000c796:	e8 39 76 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c79b:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000c79f:	c6 45 df 01 	movb	$1, -33(%rbp)
10000c7a3:	48 8b 35 7e 4b 01 00 	movq	84862(%rip), %rsi ## Objc selector ref: count
10000c7aa:	48 89 c7 	movq	%rax, %rdi
10000c7ad:	ff 15 b5 d8 00 00 	callq	*55477(%rip) ## Objc message: -[%rdi count]
10000c7b3:	b1 01 	movb	$1, %cl
10000c7b5:	48 83 f8 00 	cmpq	$0, %rax
10000c7b9:	88 4d b7 	movb	%cl, -73(%rbp)
10000c7bc:	0f 87 3e 00 00 00 	ja	0x10000c800
10000c7c2:	48 8b 45 f0 	movq	-16(%rbp), %rax
10000c7c6:	48 8b 35 43 4d 01 00 	movq	85315(%rip), %rsi ## Objc selector ref: afterAspects
10000c7cd:	48 89 c7 	movq	%rax, %rdi
10000c7d0:	ff 15 92 d8 00 00 	callq	*55442(%rip) ## Objc message: -[%rdi afterAspects]
10000c7d6:	48 89 c7 	movq	%rax, %rdi
10000c7d9:	e8 f6 75 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c7de:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000c7e2:	c6 45 cf 01 	movb	$1, -49(%rbp)
10000c7e6:	48 8b 35 3b 4b 01 00 	movq	84795(%rip), %rsi ## Objc selector ref: count
10000c7ed:	48 89 c7 	movq	%rax, %rdi
10000c7f0:	ff 15 72 d8 00 00 	callq	*55410(%rip) ## Objc message: -[%rdi count]
10000c7f6:	48 83 f8 00 	cmpq	$0, %rax
10000c7fa:	0f 97 c1 	seta	%cl
10000c7fd:	88 4d b7 	movb	%cl, -73(%rbp)
10000c800:	8a 45 b7 	movb	-73(%rbp), %al
10000c803:	24 01 	andb	$1, %al
10000c805:	88 45 ff 	movb	%al, -1(%rbp)
10000c808:	f6 45 cf 01 	testb	$1, -49(%rbp)
10000c80c:	0f 85 05 00 00 00 	jne	0x10000c817
10000c812:	e9 0d 00 00 00 	jmp	0x10000c824
10000c817:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000c81b:	48 89 c7 	movq	%rax, %rdi
10000c81e:	ff 15 4c d8 00 00 	callq	*55372(%rip) ## literal pool symbol address: _objc_release
10000c824:	f6 45 df 01 	testb	$1, -33(%rbp)
10000c828:	0f 85 05 00 00 00 	jne	0x10000c833
10000c82e:	e9 0d 00 00 00 	jmp	0x10000c840
10000c833:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000c837:	48 89 c7 	movq	%rax, %rdi
10000c83a:	ff 15 30 d8 00 00 	callq	*55344(%rip) ## literal pool symbol address: _objc_release
10000c840:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000c844:	48 89 c7 	movq	%rax, %rdi
10000c847:	ff 15 23 d8 00 00 	callq	*55331(%rip) ## literal pool symbol address: _objc_release
10000c84d:	8a 4d ff 	movb	-1(%rbp), %cl
10000c850:	80 e1 01 	andb	$1, %cl
10000c853:	0f b6 c1 	movzbl	%cl, %eax
10000c856:	48 83 c4 50 	addq	$80, %rsp
10000c85a:	5d 	popq	%rbp
10000c85b:	c3 	retq
10000c85c:	0f 1f 40 00 	nopl	(%rax)
-[AspectsContainer addAspect:withOptions:]:
10000c860:	55 	pushq	%rbp
10000c861:	48 89 e5 	movq	%rsp, %rbp
10000c864:	41 56 	pushq	%r14
10000c866:	53 	pushq	%rbx
10000c867:	48 81 ec 20 01 00 00 	subq	$288, %rsp
10000c86e:	48 8d 45 d8 	leaq	-40(%rbp), %rax
10000c872:	48 89 7d e8 	movq	%rdi, -24(%rbp)
10000c876:	48 89 75 e0 	movq	%rsi, -32(%rbp)
10000c87a:	48 c7 45 d8 00 00 00 00 	movq	$0, -40(%rbp)
10000c882:	48 89 c7 	movq	%rax, %rdi
10000c885:	48 89 d6 	movq	%rdx, %rsi
10000c888:	48 89 4d 80 	movq	%rcx, -128(%rbp)
10000c88c:	e8 61 75 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c891:	48 8b 45 80 	movq	-128(%rbp), %rax
10000c895:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000c899:	48 83 7d d8 00 	cmpq	$0, -40(%rbp)
10000c89e:	0f 95 c0 	setne	%al
10000c8a1:	34 ff 	xorb	$-1, %al
10000c8a3:	24 01 	andb	$1, %al
10000c8a5:	0f b6 c8 	movzbl	%al, %ecx
10000c8a8:	48 63 d1 	movslq	%ecx, %rdx
10000c8ab:	48 83 fa 00 	cmpq	$0, %rdx
10000c8af:	0f 84 26 01 00 00 	je	0x10000c9db
10000c8b5:	48 8d 15 d1 95 00 00 	leaq	38353(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000c8bc:	48 8b 05 fd 4d 01 00 	movq	85501(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000c8c3:	48 8b 35 8e 4b 01 00 	movq	84878(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000c8ca:	48 89 c7 	movq	%rax, %rdi
10000c8cd:	ff 15 95 d7 00 00 	callq	*55189(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000c8d3:	48 89 c7 	movq	%rax, %rdi
10000c8d6:	e8 f9 74 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c8db:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000c8df:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
10000c8e4:	0f 84 10 00 00 00 	je	0x10000c8fa
10000c8ea:	48 8b 45 c8 	movq	-56(%rbp), %rax
10000c8ee:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000c8f5:	e9 13 00 00 00 	jmp	0x10000c90d
10000c8fa:	48 8d 05 87 fd 00 00 	leaq	64903(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000c901:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000c908:	e9 00 00 00 00 	jmp	0x10000c90d
10000c90d:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000c914:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000c918:	48 89 cf 	movq	%rcx, %rdi
10000c91b:	48 89 c6 	movq	%rax, %rsi
10000c91e:	e8 cf 74 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c923:	48 8b 05 76 4e 01 00 	movq	85622(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000c92a:	48 8b 35 4f 4b 01 00 	movq	84815(%rip), %rsi ## Objc selector ref: currentHandler
10000c931:	48 89 c7 	movq	%rax, %rdi
10000c934:	ff 15 2e d7 00 00 	callq	*55086(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000c93a:	48 89 c7 	movq	%rax, %rdi
10000c93d:	e8 92 74 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000c942:	ba 46 03 00 00 	movl	$838, %edx
10000c947:	41 89 d1 	movl	%edx, %r9d
10000c94a:	48 8d 0d 57 fd 00 00 	leaq	64855(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000c951:	48 8d 35 10 fe 00 00 	leaq	65040(%rip), %rsi ## Objc cfstring ref: @"aspect"
10000c958:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000c95c:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000c960:	4c 8b 45 c8 	movq	-56(%rbp), %r8
10000c964:	4c 8b 15 ad 4b 01 00 	movq	84909(%rip), %r10 ## Objc selector ref: handleFailureInMethod:object:file:lineNumber:description:
10000c96b:	49 89 c3 	movq	%rax, %r11
10000c96e:	48 89 bd 70 ff ff ff 	movq	%rdi, -144(%rbp)
10000c975:	4c 89 df 	movq	%r11, %rdi
10000c978:	48 89 b5 68 ff ff ff 	movq	%rsi, -152(%rbp)
10000c97f:	4c 89 d6 	movq	%r10, %rsi
10000c982:	4c 8b 95 70 ff ff ff 	movq	-144(%rbp), %r10
10000c989:	48 89 8d 60 ff ff ff 	movq	%rcx, -160(%rbp)
10000c990:	4c 89 d1 	movq	%r10, %rcx
10000c993:	4c 8b 9d 60 ff ff ff 	movq	-160(%rbp), %r11
10000c99a:	4c 89 1c 24 	movq	%r11, (%rsp)
10000c99e:	48 8b 9d 68 ff ff ff 	movq	-152(%rbp), %rbx
10000c9a5:	48 89 5c 24 08 	movq	%rbx, 8(%rsp)
10000c9aa:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
10000c9b1:	b0 00 	movb	$0, %al
10000c9b3:	ff 15 af d6 00 00 	callq	*54959(%rip) ## Objc message: -[%rdi handleFailureInMethod:object:file:lineNumber:description:]
10000c9b9:	48 8b 8d 58 ff ff ff 	movq	-168(%rbp), %rcx
10000c9c0:	48 89 cf 	movq	%rcx, %rdi
10000c9c3:	ff 15 a7 d6 00 00 	callq	*54951(%rip) ## literal pool symbol address: _objc_release
10000c9c9:	45 31 f6 	xorl	%r14d, %r14d
10000c9cc:	44 89 f6 	movl	%r14d, %esi
10000c9cf:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000c9d3:	48 89 cf 	movq	%rcx, %rdi
10000c9d6:	e8 17 74 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000c9db:	e9 00 00 00 00 	jmp	0x10000c9e0
10000c9e0:	e9 00 00 00 00 	jmp	0x10000c9e5
10000c9e5:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000c9e9:	89 c1 	movl	%eax, %ecx
10000c9eb:	83 e1 07 	andl	$7, %ecx
10000c9ee:	89 c8 	movl	%ecx, %eax
10000c9f0:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000c9f4:	48 8b 45 c0 	movq	-64(%rbp), %rax
10000c9f8:	48 85 c0 	testq	%rax, %rax
10000c9fb:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
10000ca02:	0f 84 59 02 00 00 	je	0x10000cc61
10000ca08:	e9 00 00 00 00 	jmp	0x10000ca0d
10000ca0d:	48 8b 85 50 ff ff ff 	movq	-176(%rbp), %rax
10000ca14:	48 83 e8 01 	subq	$1, %rax
10000ca18:	48 89 85 48 ff ff ff 	movq	%rax, -184(%rbp)
10000ca1f:	0f 84 2f 01 00 00 	je	0x10000cb54
10000ca25:	e9 00 00 00 00 	jmp	0x10000ca2a
10000ca2a:	48 8b 85 50 ff ff ff 	movq	-176(%rbp), %rax
10000ca31:	48 83 e8 02 	subq	$2, %rax
10000ca35:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000ca3c:	0f 85 27 03 00 00 	jne	0x10000cd69
10000ca42:	e9 00 00 00 00 	jmp	0x10000ca47
10000ca47:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000ca4b:	48 8b 35 ae 4a 01 00 	movq	84654(%rip), %rsi ## Objc selector ref: beforeAspects
10000ca52:	48 89 c7 	movq	%rax, %rdi
10000ca55:	ff 15 0d d6 00 00 	callq	*54797(%rip) ## Objc message: -[%rdi beforeAspects]
10000ca5b:	48 89 c7 	movq	%rax, %rdi
10000ca5e:	e8 71 73 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ca63:	c6 45 af 00 	movb	$0, -81(%rbp)
10000ca67:	48 83 f8 00 	cmpq	$0, %rax
10000ca6b:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000ca72:	0f 84 13 00 00 00 	je	0x10000ca8b
10000ca78:	48 8b 85 38 ff ff ff 	movq	-200(%rbp), %rax
10000ca7f:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
10000ca86:	e9 44 00 00 00 	jmp	0x10000cacf
10000ca8b:	31 c0 	xorl	%eax, %eax
10000ca8d:	89 c1 	movl	%eax, %ecx
10000ca8f:	48 8d 55 b8 	leaq	-72(%rbp), %rdx
10000ca93:	48 8b 35 f6 4b 01 00 	movq	84982(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
10000ca9a:	48 8b 3d 7f 4a 01 00 	movq	84607(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
10000caa1:	48 89 bd 28 ff ff ff 	movq	%rdi, -216(%rbp)
10000caa8:	48 89 f7 	movq	%rsi, %rdi
10000caab:	48 8b b5 28 ff ff ff 	movq	-216(%rbp), %rsi
10000cab2:	ff 15 b0 d5 00 00 	callq	*54704(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
10000cab8:	48 89 c7 	movq	%rax, %rdi
10000cabb:	e8 14 73 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000cac0:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000cac4:	c6 45 af 01 	movb	$1, -81(%rbp)
10000cac8:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
10000cacf:	48 8b 85 30 ff ff ff 	movq	-208(%rbp), %rax
10000cad6:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000cada:	48 8b 35 47 4a 01 00 	movq	84551(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
10000cae1:	48 89 c7 	movq	%rax, %rdi
10000cae4:	48 89 ca 	movq	%rcx, %rdx
10000cae7:	ff 15 7b d5 00 00 	callq	*54651(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
10000caed:	48 89 c7 	movq	%rax, %rdi
10000caf0:	e8 df 72 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000caf5:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000caf9:	48 8b 35 30 4a 01 00 	movq	84528(%rip), %rsi ## Objc selector ref: setBeforeAspects:
10000cb00:	48 89 cf 	movq	%rcx, %rdi
10000cb03:	48 89 c2 	movq	%rax, %rdx
10000cb06:	48 89 85 20 ff ff ff 	movq	%rax, -224(%rbp)
10000cb0d:	ff 15 55 d5 00 00 	callq	*54613(%rip) ## Objc message: -[%rdi setBeforeAspects:]
10000cb13:	48 8b 85 20 ff ff ff 	movq	-224(%rbp), %rax
10000cb1a:	48 89 c7 	movq	%rax, %rdi
10000cb1d:	ff 15 4d d5 00 00 	callq	*54605(%rip) ## literal pool symbol address: _objc_release
10000cb23:	f6 45 af 01 	testb	$1, -81(%rbp)
10000cb27:	0f 85 05 00 00 00 	jne	0x10000cb32
10000cb2d:	e9 0d 00 00 00 	jmp	0x10000cb3f
10000cb32:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000cb36:	48 89 c7 	movq	%rax, %rdi
10000cb39:	ff 15 31 d5 00 00 	callq	*54577(%rip) ## literal pool symbol address: _objc_release
10000cb3f:	48 8b 85 38 ff ff ff 	movq	-200(%rbp), %rax
10000cb46:	48 89 c7 	movq	%rax, %rdi
10000cb49:	ff 15 21 d5 00 00 	callq	*54561(%rip) ## literal pool symbol address: _objc_release
10000cb4f:	e9 15 02 00 00 	jmp	0x10000cd69
10000cb54:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000cb58:	48 8b 35 a9 49 01 00 	movq	84393(%rip), %rsi ## Objc selector ref: insteadAspects
10000cb5f:	48 89 c7 	movq	%rax, %rdi
10000cb62:	ff 15 00 d5 00 00 	callq	*54528(%rip) ## Objc message: -[%rdi insteadAspects]
10000cb68:	48 89 c7 	movq	%rax, %rdi
10000cb6b:	e8 64 72 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000cb70:	c6 45 9f 00 	movb	$0, -97(%rbp)
10000cb74:	48 83 f8 00 	cmpq	$0, %rax
10000cb78:	48 89 85 18 ff ff ff 	movq	%rax, -232(%rbp)
10000cb7f:	0f 84 13 00 00 00 	je	0x10000cb98
10000cb85:	48 8b 85 18 ff ff ff 	movq	-232(%rbp), %rax
10000cb8c:	48 89 85 10 ff ff ff 	movq	%rax, -240(%rbp)
10000cb93:	e9 44 00 00 00 	jmp	0x10000cbdc
10000cb98:	31 c0 	xorl	%eax, %eax
10000cb9a:	89 c1 	movl	%eax, %ecx
10000cb9c:	48 8d 55 a8 	leaq	-88(%rbp), %rdx
10000cba0:	48 8b 35 e9 4a 01 00 	movq	84713(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
10000cba7:	48 8b 3d 72 49 01 00 	movq	84338(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
10000cbae:	48 89 bd 08 ff ff ff 	movq	%rdi, -248(%rbp)
10000cbb5:	48 89 f7 	movq	%rsi, %rdi
10000cbb8:	48 8b b5 08 ff ff ff 	movq	-248(%rbp), %rsi
10000cbbf:	ff 15 a3 d4 00 00 	callq	*54435(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
10000cbc5:	48 89 c7 	movq	%rax, %rdi
10000cbc8:	e8 07 72 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000cbcd:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000cbd1:	c6 45 9f 01 	movb	$1, -97(%rbp)
10000cbd5:	48 89 85 10 ff ff ff 	movq	%rax, -240(%rbp)
10000cbdc:	48 8b 85 10 ff ff ff 	movq	-240(%rbp), %rax
10000cbe3:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000cbe7:	48 8b 35 3a 49 01 00 	movq	84282(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
10000cbee:	48 89 c7 	movq	%rax, %rdi
10000cbf1:	48 89 ca 	movq	%rcx, %rdx
10000cbf4:	ff 15 6e d4 00 00 	callq	*54382(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
10000cbfa:	48 89 c7 	movq	%rax, %rdi
10000cbfd:	e8 d2 71 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000cc02:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000cc06:	48 8b 35 2b 49 01 00 	movq	84267(%rip), %rsi ## Objc selector ref: setInsteadAspects:
10000cc0d:	48 89 cf 	movq	%rcx, %rdi
10000cc10:	48 89 c2 	movq	%rax, %rdx
10000cc13:	48 89 85 00 ff ff ff 	movq	%rax, -256(%rbp)
10000cc1a:	ff 15 48 d4 00 00 	callq	*54344(%rip) ## Objc message: -[%rdi setInsteadAspects:]
10000cc20:	48 8b 85 00 ff ff ff 	movq	-256(%rbp), %rax
10000cc27:	48 89 c7 	movq	%rax, %rdi
10000cc2a:	ff 15 40 d4 00 00 	callq	*54336(%rip) ## literal pool symbol address: _objc_release
10000cc30:	f6 45 9f 01 	testb	$1, -97(%rbp)
10000cc34:	0f 85 05 00 00 00 	jne	0x10000cc3f
10000cc3a:	e9 0d 00 00 00 	jmp	0x10000cc4c
10000cc3f:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000cc43:	48 89 c7 	movq	%rax, %rdi
10000cc46:	ff 15 24 d4 00 00 	callq	*54308(%rip) ## literal pool symbol address: _objc_release
10000cc4c:	48 8b 85 18 ff ff ff 	movq	-232(%rbp), %rax
10000cc53:	48 89 c7 	movq	%rax, %rdi
10000cc56:	ff 15 14 d4 00 00 	callq	*54292(%rip) ## literal pool symbol address: _objc_release
10000cc5c:	e9 08 01 00 00 	jmp	0x10000cd69
10000cc61:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000cc65:	48 8b 35 a4 48 01 00 	movq	84132(%rip), %rsi ## Objc selector ref: afterAspects
10000cc6c:	48 89 c7 	movq	%rax, %rdi
10000cc6f:	ff 15 f3 d3 00 00 	callq	*54259(%rip) ## Objc message: -[%rdi afterAspects]
10000cc75:	48 89 c7 	movq	%rax, %rdi
10000cc78:	e8 57 71 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000cc7d:	c6 45 8f 00 	movb	$0, -113(%rbp)
10000cc81:	48 83 f8 00 	cmpq	$0, %rax
10000cc85:	48 89 85 f8 fe ff ff 	movq	%rax, -264(%rbp)
10000cc8c:	0f 84 13 00 00 00 	je	0x10000cca5
10000cc92:	48 8b 85 f8 fe ff ff 	movq	-264(%rbp), %rax
10000cc99:	48 89 85 f0 fe ff ff 	movq	%rax, -272(%rbp)
10000cca0:	e9 44 00 00 00 	jmp	0x10000cce9
10000cca5:	31 c0 	xorl	%eax, %eax
10000cca7:	89 c1 	movl	%eax, %ecx
10000cca9:	48 8d 55 98 	leaq	-104(%rbp), %rdx
10000ccad:	48 8b 35 dc 49 01 00 	movq	84444(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
10000ccb4:	48 8b 3d 65 48 01 00 	movq	84069(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
10000ccbb:	48 89 bd e8 fe ff ff 	movq	%rdi, -280(%rbp)
10000ccc2:	48 89 f7 	movq	%rsi, %rdi
10000ccc5:	48 8b b5 e8 fe ff ff 	movq	-280(%rbp), %rsi
10000cccc:	ff 15 96 d3 00 00 	callq	*54166(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
10000ccd2:	48 89 c7 	movq	%rax, %rdi
10000ccd5:	e8 fa 70 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ccda:	48 89 45 90 	movq	%rax, -112(%rbp)
10000ccde:	c6 45 8f 01 	movb	$1, -113(%rbp)
10000cce2:	48 89 85 f0 fe ff ff 	movq	%rax, -272(%rbp)
10000cce9:	48 8b 85 f0 fe ff ff 	movq	-272(%rbp), %rax
10000ccf0:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000ccf4:	48 8b 35 2d 48 01 00 	movq	84013(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
10000ccfb:	48 89 c7 	movq	%rax, %rdi
10000ccfe:	48 89 ca 	movq	%rcx, %rdx
10000cd01:	ff 15 61 d3 00 00 	callq	*54113(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
10000cd07:	48 89 c7 	movq	%rax, %rdi
10000cd0a:	e8 c5 70 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000cd0f:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000cd13:	48 8b 35 26 48 01 00 	movq	84006(%rip), %rsi ## Objc selector ref: setAfterAspects:
10000cd1a:	48 89 cf 	movq	%rcx, %rdi
10000cd1d:	48 89 c2 	movq	%rax, %rdx
10000cd20:	48 89 85 e0 fe ff ff 	movq	%rax, -288(%rbp)
10000cd27:	ff 15 3b d3 00 00 	callq	*54075(%rip) ## Objc message: -[%rdi setAfterAspects:]
10000cd2d:	48 8b 85 e0 fe ff ff 	movq	-288(%rbp), %rax
10000cd34:	48 89 c7 	movq	%rax, %rdi
10000cd37:	ff 15 33 d3 00 00 	callq	*54067(%rip) ## literal pool symbol address: _objc_release
10000cd3d:	f6 45 8f 01 	testb	$1, -113(%rbp)
10000cd41:	0f 85 05 00 00 00 	jne	0x10000cd4c
10000cd47:	e9 0d 00 00 00 	jmp	0x10000cd59
10000cd4c:	48 8b 45 90 	movq	-112(%rbp), %rax
10000cd50:	48 89 c7 	movq	%rax, %rdi
10000cd53:	ff 15 17 d3 00 00 	callq	*54039(%rip) ## literal pool symbol address: _objc_release
10000cd59:	48 8b 85 f8 fe ff ff 	movq	-264(%rbp), %rax
10000cd60:	48 89 c7 	movq	%rax, %rdi
10000cd63:	ff 15 07 d3 00 00 	callq	*54023(%rip) ## literal pool symbol address: _objc_release
10000cd69:	31 c0 	xorl	%eax, %eax
10000cd6b:	89 c6 	movl	%eax, %esi
10000cd6d:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000cd71:	48 89 cf 	movq	%rcx, %rdi
10000cd74:	e8 79 70 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000cd79:	48 81 c4 20 01 00 00 	addq	$288, %rsp
10000cd80:	5b 	popq	%rbx
10000cd81:	41 5e 	popq	%r14
10000cd83:	5d 	popq	%rbp
10000cd84:	c3 	retq
10000cd85:	66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectsContainer removeAspect:]:
10000cd90:	55 	pushq	%rbp
10000cd91:	48 89 e5 	movq	%rsp, %rbp
10000cd94:	48 81 ec 90 01 00 00 	subq	$400, %rsp
10000cd9b:	48 8d 85 40 ff ff ff 	leaq	-192(%rbp), %rax
10000cda2:	48 8b 0d 8f d2 00 00 	movq	53903(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000cda9:	48 8b 09 	movq	(%rcx), %rcx
10000cdac:	48 89 4d f8 	movq	%rcx, -8(%rbp)
10000cdb0:	48 89 bd 50 ff ff ff 	movq	%rdi, -176(%rbp)
10000cdb7:	48 89 b5 48 ff ff ff 	movq	%rsi, -184(%rbp)
10000cdbe:	48 c7 85 40 ff ff ff 00 00 00 00 	movq	$0, -192(%rbp)
10000cdc9:	48 89 c7 	movq	%rax, %rdi
10000cdcc:	48 89 d6 	movq	%rdx, %rsi
10000cdcf:	e8 1e 70 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000cdd4:	31 f6 	xorl	%esi, %esi
10000cdd6:	41 b8 40 00 00 00 	movl	$64, %r8d
10000cddc:	44 89 c2 	movl	%r8d, %edx
10000cddf:	48 8d 85 f8 fe ff ff 	leaq	-264(%rbp), %rax
10000cde6:	48 89 c7 	movq	%rax, %rdi
10000cde9:	e8 4a 6f 00 00 	callq	0x100013d38 ## symbol stub for: _memset
10000cdee:	48 8b 3d 0b 47 01 00 	movq	83723(%rip), %rdi ## Objc selector ref: beforeAspects
10000cdf5:	e8 2a 6e 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000cdfa:	48 89 c7 	movq	%rax, %rdi
10000cdfd:	e8 d2 6f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ce02:	48 89 c1 	movq	%rax, %rcx
10000ce05:	48 89 8d 60 ff ff ff 	movq	%rcx, -160(%rbp)
10000ce0c:	48 8b 3d f5 46 01 00 	movq	83701(%rip), %rdi ## Objc selector ref: insteadAspects
10000ce13:	48 89 85 d0 fe ff ff 	movq	%rax, -304(%rbp)
10000ce1a:	e8 05 6e 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000ce1f:	48 89 c7 	movq	%rax, %rdi
10000ce22:	e8 ad 6f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ce27:	48 89 c1 	movq	%rax, %rcx
10000ce2a:	48 89 8d 68 ff ff ff 	movq	%rcx, -152(%rbp)
10000ce31:	48 8b 3d d8 46 01 00 	movq	83672(%rip), %rdi ## Objc selector ref: afterAspects
10000ce38:	48 89 85 c8 fe ff ff 	movq	%rax, -312(%rbp)
10000ce3f:	e8 e0 6d 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000ce44:	48 89 c7 	movq	%rax, %rdi
10000ce47:	e8 88 6f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ce4c:	be 03 00 00 00 	movl	$3, %esi
10000ce51:	89 f1 	movl	%esi, %ecx
10000ce53:	48 8d 95 60 ff ff ff 	leaq	-160(%rbp), %rdx
10000ce5a:	48 89 c7 	movq	%rax, %rdi
10000ce5d:	48 89 bd 70 ff ff ff 	movq	%rdi, -144(%rbp)
10000ce64:	48 8b 3d 25 48 01 00 	movq	84005(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSArray
10000ce6b:	48 8b 35 ae 46 01 00 	movq	83630(%rip), %rsi ## Objc selector ref: arrayWithObjects:count:
10000ce72:	48 89 85 c0 fe ff ff 	movq	%rax, -320(%rbp)
10000ce79:	ff 15 e9 d1 00 00 	callq	*53737(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
10000ce7f:	48 89 c7 	movq	%rax, %rdi
10000ce82:	e8 4d 6f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ce87:	48 8b 8d c0 fe ff ff 	movq	-320(%rbp), %rcx
10000ce8e:	48 89 cf 	movq	%rcx, %rdi
10000ce91:	48 89 85 b8 fe ff ff 	movq	%rax, -328(%rbp)
10000ce98:	ff 15 d2 d1 00 00 	callq	*53714(%rip) ## literal pool symbol address: _objc_release
10000ce9e:	48 8b 85 c8 fe ff ff 	movq	-312(%rbp), %rax
10000cea5:	48 89 c7 	movq	%rax, %rdi
10000cea8:	ff 15 c2 d1 00 00 	callq	*53698(%rip) ## literal pool symbol address: _objc_release
10000ceae:	48 8b 85 d0 fe ff ff 	movq	-304(%rbp), %rax
10000ceb5:	48 89 c7 	movq	%rax, %rdi
10000ceb8:	ff 15 b2 d1 00 00 	callq	*53682(%rip) ## literal pool symbol address: _objc_release
10000cebe:	48 8d 95 f8 fe ff ff 	leaq	-264(%rbp), %rdx
10000cec5:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
10000cecc:	41 b8 10 00 00 00 	movl	$16, %r8d
10000ced2:	48 8b 35 6f 46 01 00 	movq	83567(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
10000ced9:	48 8b 85 b8 fe ff ff 	movq	-328(%rbp), %rax
10000cee0:	48 89 c7 	movq	%rax, %rdi
10000cee3:	ff 15 7f d1 00 00 	callq	*53631(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
10000cee9:	48 83 f8 00 	cmpq	$0, %rax
10000ceed:	48 89 85 b0 fe ff ff 	movq	%rax, -336(%rbp)
10000cef4:	0f 84 4f 02 00 00 	je	0x10000d149
10000cefa:	31 c0 	xorl	%eax, %eax
10000cefc:	89 c1 	movl	%eax, %ecx
10000cefe:	48 8d 95 f8 fe ff ff 	leaq	-264(%rbp), %rdx
10000cf05:	48 83 c2 10 	addq	$16, %rdx
10000cf09:	48 8b b5 08 ff ff ff 	movq	-248(%rbp), %rsi
10000cf10:	48 8b 36 	movq	(%rsi), %rsi
10000cf13:	48 8b bd b0 fe ff ff 	movq	-336(%rbp), %rdi
10000cf1a:	48 89 b5 a8 fe ff ff 	movq	%rsi, -344(%rbp)
10000cf21:	48 89 95 a0 fe ff ff 	movq	%rdx, -352(%rbp)
10000cf28:	48 89 8d 98 fe ff ff 	movq	%rcx, -360(%rbp)
10000cf2f:	48 89 bd 90 fe ff ff 	movq	%rdi, -368(%rbp)
10000cf36:	48 8b 85 90 fe ff ff 	movq	-368(%rbp), %rax
10000cf3d:	48 8b 8d 98 fe ff ff 	movq	-360(%rbp), %rcx
10000cf44:	48 8b 95 a0 fe ff ff 	movq	-352(%rbp), %rdx
10000cf4b:	48 8b 32 	movq	(%rdx), %rsi
10000cf4e:	48 8b bd a8 fe ff ff 	movq	-344(%rbp), %rdi
10000cf55:	48 39 3e 	cmpq	%rdi, (%rsi)
10000cf58:	48 89 85 88 fe ff ff 	movq	%rax, -376(%rbp)
10000cf5f:	48 89 8d 80 fe ff ff 	movq	%rcx, -384(%rbp)
10000cf66:	0f 84 0f 00 00 00 	je	0x10000cf7b
10000cf6c:	48 8b 85 b8 fe ff ff 	movq	-328(%rbp), %rax
10000cf73:	48 89 c7 	movq	%rax, %rdi
10000cf76:	e8 17 6e 00 00 	callq	0x100013d92 ## symbol stub for: _objc_enumerationMutation
10000cf7b:	48 8b 85 00 ff ff ff 	movq	-256(%rbp), %rax
10000cf82:	48 8b 8d 80 fe ff ff 	movq	-384(%rbp), %rcx
10000cf89:	48 8b 04 c8 	movq	(%rax,%rcx,8), %rax
10000cf8d:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000cf94:	48 8b 85 50 ff ff ff 	movq	-176(%rbp), %rax
10000cf9b:	48 8b 95 38 ff ff ff 	movq	-200(%rbp), %rdx
10000cfa2:	48 8b 35 a7 45 01 00 	movq	83367(%rip), %rsi ## Objc selector ref: valueForKey:
10000cfa9:	48 89 c7 	movq	%rax, %rdi
10000cfac:	ff 15 b6 d0 00 00 	callq	*53430(%rip) ## Objc message: -[%rdi valueForKey:]
10000cfb2:	48 89 c7 	movq	%rax, %rdi
10000cfb5:	e8 1a 6e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000cfba:	48 89 85 f0 fe ff ff 	movq	%rax, -272(%rbp)
10000cfc1:	48 8b 85 f0 fe ff ff 	movq	-272(%rbp), %rax
10000cfc8:	48 8b 95 40 ff ff ff 	movq	-192(%rbp), %rdx
10000cfcf:	48 8b 35 82 45 01 00 	movq	83330(%rip), %rsi ## Objc selector ref: indexOfObjectIdenticalTo:
10000cfd6:	48 89 c7 	movq	%rax, %rdi
10000cfd9:	ff 15 89 d0 00 00 	callq	*53385(%rip) ## Objc message: -[%rdi indexOfObjectIdenticalTo:]
10000cfdf:	48 89 85 e8 fe ff ff 	movq	%rax, -280(%rbp)
10000cfe6:	48 83 bd f0 fe ff ff 00 	cmpq	$0, -272(%rbp)
10000cfee:	0f 84 b2 00 00 00 	je	0x10000d0a6
10000cff4:	48 b8 ff ff ff ff ff ff ff 7f 	movabsq	$9223372036854775807, %rax
10000cffe:	48 39 85 e8 fe ff ff 	cmpq	%rax, -280(%rbp)
10000d005:	0f 84 9b 00 00 00 	je	0x10000d0a6
10000d00b:	48 8b 05 8e 46 01 00 	movq	83598(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSMutableArray
10000d012:	48 8b 95 f0 fe ff ff 	movq	-272(%rbp), %rdx
10000d019:	48 8b 35 40 45 01 00 	movq	83264(%rip), %rsi ## Objc selector ref: arrayWithArray:
10000d020:	48 89 c7 	movq	%rax, %rdi
10000d023:	ff 15 3f d0 00 00 	callq	*53311(%rip) ## Objc message: +[NSMutableArray arrayWithArray:]
10000d029:	48 89 c7 	movq	%rax, %rdi
10000d02c:	e8 a3 6d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d031:	48 89 85 e0 fe ff ff 	movq	%rax, -288(%rbp)
10000d038:	48 8b 85 e0 fe ff ff 	movq	-288(%rbp), %rax
10000d03f:	48 8b 95 e8 fe ff ff 	movq	-280(%rbp), %rdx
10000d046:	48 8b 35 1b 45 01 00 	movq	83227(%rip), %rsi ## Objc selector ref: removeObjectAtIndex:
10000d04d:	48 89 c7 	movq	%rax, %rdi
10000d050:	ff 15 12 d0 00 00 	callq	*53266(%rip) ## Objc message: -[%rdi removeObjectAtIndex:]
10000d056:	48 8b 85 50 ff ff ff 	movq	-176(%rbp), %rax
10000d05d:	48 8b 95 e0 fe ff ff 	movq	-288(%rbp), %rdx
10000d064:	48 8b 8d 38 ff ff ff 	movq	-200(%rbp), %rcx
10000d06b:	48 8b 35 fe 44 01 00 	movq	83198(%rip), %rsi ## Objc selector ref: setValue:forKey:
10000d072:	48 89 c7 	movq	%rax, %rdi
10000d075:	ff 15 ed cf 00 00 	callq	*53229(%rip) ## Objc message: -[%rdi setValue:forKey:]
10000d07b:	45 31 c0 	xorl	%r8d, %r8d
10000d07e:	44 89 c6 	movl	%r8d, %esi
10000d081:	48 8d 85 e0 fe ff ff 	leaq	-288(%rbp), %rax
10000d088:	c6 85 5f ff ff ff 01 	movb	$1, -161(%rbp)
10000d08f:	c7 85 dc fe ff ff 01 00 00 00 	movl	$1, -292(%rbp)
10000d099:	48 89 c7 	movq	%rax, %rdi
10000d09c:	e8 51 6d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d0a1:	e9 0a 00 00 00 	jmp	0x10000d0b0
10000d0a6:	c7 85 dc fe ff ff 00 00 00 00 	movl	$0, -292(%rbp)
10000d0b0:	31 c0 	xorl	%eax, %eax
10000d0b2:	89 c6 	movl	%eax, %esi
10000d0b4:	48 8d bd f0 fe ff ff 	leaq	-272(%rbp), %rdi
10000d0bb:	e8 32 6d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d0c0:	8b 85 dc fe ff ff 	movl	-292(%rbp), %eax
10000d0c6:	85 c0 	testl	%eax, %eax
10000d0c8:	0f 85 85 00 00 00 	jne	0x10000d153
10000d0ce:	e9 00 00 00 00 	jmp	0x10000d0d3
10000d0d3:	e9 00 00 00 00 	jmp	0x10000d0d8
10000d0d8:	48 8b 85 80 fe ff ff 	movq	-384(%rbp), %rax
10000d0df:	48 83 c0 01 	addq	$1, %rax
10000d0e3:	48 8b 8d 88 fe ff ff 	movq	-376(%rbp), %rcx
10000d0ea:	48 39 c8 	cmpq	%rcx, %rax
10000d0ed:	48 89 8d 90 fe ff ff 	movq	%rcx, -368(%rbp)
10000d0f4:	48 89 85 98 fe ff ff 	movq	%rax, -360(%rbp)
10000d0fb:	0f 82 35 fe ff ff 	jb	0x10000cf36
10000d101:	48 8d 95 f8 fe ff ff 	leaq	-264(%rbp), %rdx
10000d108:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
10000d10f:	b8 10 00 00 00 	movl	$16, %eax
10000d114:	41 89 c0 	movl	%eax, %r8d
10000d117:	48 8b 35 2a 44 01 00 	movq	82986(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
10000d11e:	48 8b bd b8 fe ff ff 	movq	-328(%rbp), %rdi
10000d125:	ff 15 3d cf 00 00 	callq	*53053(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
10000d12b:	45 31 c9 	xorl	%r9d, %r9d
10000d12e:	44 89 c9 	movl	%r9d, %ecx
10000d131:	48 83 f8 00 	cmpq	$0, %rax
10000d135:	48 89 8d 98 fe ff ff 	movq	%rcx, -360(%rbp)
10000d13c:	48 89 85 90 fe ff ff 	movq	%rax, -368(%rbp)
10000d143:	0f 85 ed fd ff ff 	jne	0x10000cf36
10000d149:	c7 85 dc fe ff ff 00 00 00 00 	movl	$0, -292(%rbp)
10000d153:	48 8b 05 16 cf 00 00 	movq	53014(%rip), %rax ## literal pool symbol address: _objc_release
10000d15a:	48 8b bd b8 fe ff ff 	movq	-328(%rbp), %rdi
10000d161:	ff d0 	callq	*%rax
10000d163:	8b 8d dc fe ff ff 	movl	-292(%rbp), %ecx
10000d169:	85 c9 	testl	%ecx, %ecx
10000d16b:	0f 85 1b 00 00 00 	jne	0x10000d18c
10000d171:	e9 00 00 00 00 	jmp	0x10000d176
10000d176:	e9 00 00 00 00 	jmp	0x10000d17b
10000d17b:	c6 85 5f ff ff ff 00 	movb	$0, -161(%rbp)
10000d182:	c7 85 dc fe ff ff 01 00 00 00 	movl	$1, -292(%rbp)
10000d18c:	48 8d bd 40 ff ff ff 	leaq	-192(%rbp), %rdi
10000d193:	31 c0 	xorl	%eax, %eax
10000d195:	89 c6 	movl	%eax, %esi
10000d197:	e8 56 6c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d19c:	8a 8d 5f ff ff ff 	movb	-161(%rbp), %cl
10000d1a2:	48 8b 35 8f ce 00 00 	movq	52879(%rip), %rsi ## literal pool symbol address: ___stack_chk_guard
10000d1a9:	48 8b 36 	movq	(%rsi), %rsi
10000d1ac:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000d1b0:	48 39 fe 	cmpq	%rdi, %rsi
10000d1b3:	88 8d 7f fe ff ff 	movb	%cl, -385(%rbp)
10000d1b9:	0f 85 14 00 00 00 	jne	0x10000d1d3
10000d1bf:	8a 85 7f fe ff ff 	movb	-385(%rbp), %al
10000d1c5:	24 01 	andb	$1, %al
10000d1c7:	0f b6 c0 	movzbl	%al, %eax
10000d1ca:	48 81 c4 90 01 00 00 	addq	$400, %rsp
10000d1d1:	5d 	popq	%rbp
10000d1d2:	c3 	retq
10000d1d3:	e8 70 6a 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
10000d1d8:	0f 0b 	ud2
10000d1da:	66 0f 1f 44 00 00 	nopw	(%rax,%rax)
-[AspectsContainer description]:
10000d1e0:	55 	pushq	%rbp
10000d1e1:	48 89 e5 	movq	%rsp, %rbp
10000d1e4:	53 	pushq	%rbx
10000d1e5:	48 83 ec 78 	subq	$120, %rsp
10000d1e9:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000d1ed:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000d1f1:	48 8b 3d c8 44 01 00 	movq	83144(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSString
10000d1f8:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000d1fc:	48 8b 05 9d 3c 01 00 	movq	81053(%rip), %rax ## Objc selector ref: class
10000d203:	48 8b 0d 5e ce 00 00 	movq	52830(%rip), %rcx ## Objc message: +[NSString class]
10000d20a:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10000d20e:	48 89 f7 	movq	%rsi, %rdi
10000d211:	48 89 c6 	movq	%rax, %rsi
10000d214:	48 89 4d d8 	movq	%rcx, -40(%rbp)
10000d218:	ff d1 	callq	*%rcx
10000d21a:	48 8b 4d f0 	movq	-16(%rbp), %rcx
10000d21e:	48 8b 35 db 42 01 00 	movq	82651(%rip), %rsi ## Objc selector ref: beforeAspects
10000d225:	48 89 cf 	movq	%rcx, %rdi
10000d228:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000d22c:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000d230:	48 89 4d c8 	movq	%rcx, -56(%rbp)
10000d234:	ff d2 	callq	*%rdx
10000d236:	48 89 c7 	movq	%rax, %rdi
10000d239:	e8 96 6b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d23e:	48 8b 7d f0 	movq	-16(%rbp), %rdi
10000d242:	48 8b 35 bf 42 01 00 	movq	82623(%rip), %rsi ## Objc selector ref: insteadAspects
10000d249:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000d24d:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000d251:	ff d1 	callq	*%rcx
10000d253:	48 89 c7 	movq	%rax, %rdi
10000d256:	e8 79 6b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d25b:	48 8b 7d f0 	movq	-16(%rbp), %rdi
10000d25f:	48 8b 35 aa 42 01 00 	movq	82602(%rip), %rsi ## Objc selector ref: afterAspects
10000d266:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000d26a:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000d26e:	ff d1 	callq	*%rcx
10000d270:	48 89 c7 	movq	%rax, %rdi
10000d273:	e8 5c 6b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d278:	48 8b 35 41 3d 01 00 	movq	81217(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000d27f:	48 89 e1 	movq	%rsp, %rcx
10000d282:	48 89 41 08 	movq	%rax, 8(%rcx)
10000d286:	48 8b 55 b8 	movq	-72(%rbp), %rdx
10000d28a:	48 89 11 	movq	%rdx, (%rcx)
10000d28d:	48 8d 15 f4 f4 00 00 	leaq	62708(%rip), %rdx ## Objc cfstring ref: @"<%@: %p, before:%@, instead:%@, after:%@>"
10000d294:	45 31 c0 	xorl	%r8d, %r8d
10000d297:	45 88 c1 	movb	%r8b, %r9b
10000d29a:	48 8b 7d e0 	movq	-32(%rbp), %rdi
10000d29e:	48 8b 4d d0 	movq	-48(%rbp), %rcx
10000d2a2:	4c 8b 45 c8 	movq	-56(%rbp), %r8
10000d2a6:	4c 8b 55 c0 	movq	-64(%rbp), %r10
10000d2aa:	44 88 4d b7 	movb	%r9b, -73(%rbp)
10000d2ae:	4d 89 d1 	movq	%r10, %r9
10000d2b1:	44 8a 5d b7 	movb	-73(%rbp), %r11b
10000d2b5:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000d2b9:	44 88 d8 	movb	%r11b, %al
10000d2bc:	48 8b 5d d8 	movq	-40(%rbp), %rbx
10000d2c0:	ff d3 	callq	*%rbx
10000d2c2:	48 89 c7 	movq	%rax, %rdi
10000d2c5:	e8 0a 6b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d2ca:	48 8b 0d 9f cd 00 00 	movq	52639(%rip), %rcx ## literal pool symbol address: _objc_release
10000d2d1:	48 8b 7d a8 	movq	-88(%rbp), %rdi
10000d2d5:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000d2d9:	48 89 4d 98 	movq	%rcx, -104(%rbp)
10000d2dd:	ff d1 	callq	*%rcx
10000d2df:	48 8b 7d b8 	movq	-72(%rbp), %rdi
10000d2e3:	48 8b 45 98 	movq	-104(%rbp), %rax
10000d2e7:	ff d0 	callq	*%rax
10000d2e9:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000d2ed:	48 8b 45 98 	movq	-104(%rbp), %rax
10000d2f1:	ff d0 	callq	*%rax
10000d2f3:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000d2f7:	48 89 c7 	movq	%rax, %rdi
10000d2fa:	48 83 c4 78 	addq	$120, %rsp
10000d2fe:	5b 	popq	%rbx
10000d2ff:	5d 	popq	%rbp
10000d300:	e9 6f 6a 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000d305:	66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectsContainer beforeAspects]:
10000d310:	55 	pushq	%rbp
10000d311:	48 89 e5 	movq	%rsp, %rbp
10000d314:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d318:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d31c:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000d320:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000d324:	48 8b 15 2d 46 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._beforeAspects(%rip), %rdx
10000d32b:	b9 01 00 00 00 	movl	$1, %ecx
10000d330:	5d 	popq	%rbp
10000d331:	e9 74 6a 00 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
10000d336:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectsContainer setBeforeAspects:]:
10000d340:	55 	pushq	%rbp
10000d341:	48 89 e5 	movq	%rsp, %rbp
10000d344:	48 83 ec 20 	subq	$32, %rsp
10000d348:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d34c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d350:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000d354:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000d358:	48 8b 55 f8 	movq	-8(%rbp), %rdx
10000d35c:	48 8b 0d f5 45 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._beforeAspects(%rip), %rcx
10000d363:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000d367:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10000d36b:	48 89 d7 	movq	%rdx, %rdi
10000d36e:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000d372:	e8 6f 6a 00 00 	callq	0x100013de6 ## symbol stub for: _objc_setProperty_atomic_copy
10000d377:	48 83 c4 20 	addq	$32, %rsp
10000d37b:	5d 	popq	%rbp
10000d37c:	c3 	retq
10000d37d:	0f 1f 00 	nopl	(%rax)
-[AspectsContainer insteadAspects]:
10000d380:	55 	pushq	%rbp
10000d381:	48 89 e5 	movq	%rsp, %rbp
10000d384:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d388:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d38c:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000d390:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000d394:	48 8b 15 c5 45 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._insteadAspects(%rip), %rdx
10000d39b:	b9 01 00 00 00 	movl	$1, %ecx
10000d3a0:	5d 	popq	%rbp
10000d3a1:	e9 04 6a 00 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
10000d3a6:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectsContainer setInsteadAspects:]:
10000d3b0:	55 	pushq	%rbp
10000d3b1:	48 89 e5 	movq	%rsp, %rbp
10000d3b4:	48 83 ec 20 	subq	$32, %rsp
10000d3b8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d3bc:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d3c0:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000d3c4:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000d3c8:	48 8b 55 f8 	movq	-8(%rbp), %rdx
10000d3cc:	48 8b 0d 8d 45 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._insteadAspects(%rip), %rcx
10000d3d3:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000d3d7:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10000d3db:	48 89 d7 	movq	%rdx, %rdi
10000d3de:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000d3e2:	e8 ff 69 00 00 	callq	0x100013de6 ## symbol stub for: _objc_setProperty_atomic_copy
10000d3e7:	48 83 c4 20 	addq	$32, %rsp
10000d3eb:	5d 	popq	%rbp
10000d3ec:	c3 	retq
10000d3ed:	0f 1f 00 	nopl	(%rax)
-[AspectsContainer afterAspects]:
10000d3f0:	55 	pushq	%rbp
10000d3f1:	48 89 e5 	movq	%rsp, %rbp
10000d3f4:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d3f8:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d3fc:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000d400:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000d404:	48 8b 15 5d 45 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._afterAspects(%rip), %rdx
10000d40b:	b9 01 00 00 00 	movl	$1, %ecx
10000d410:	5d 	popq	%rbp
10000d411:	e9 94 69 00 00 	jmp	0x100013daa ## symbol stub for: _objc_getProperty
10000d416:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
-[AspectsContainer setAfterAspects:]:
10000d420:	55 	pushq	%rbp
10000d421:	48 89 e5 	movq	%rsp, %rbp
10000d424:	48 83 ec 20 	subq	$32, %rsp
10000d428:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d42c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d430:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000d434:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000d438:	48 8b 55 f8 	movq	-8(%rbp), %rdx
10000d43c:	48 8b 0d 25 45 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._afterAspects(%rip), %rcx
10000d443:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000d447:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10000d44b:	48 89 d7 	movq	%rdx, %rdi
10000d44e:	48 8b 55 e0 	movq	-32(%rbp), %rdx
10000d452:	e8 8f 69 00 00 	callq	0x100013de6 ## symbol stub for: _objc_setProperty_atomic_copy
10000d457:	48 83 c4 20 	addq	$32, %rsp
10000d45b:	5d 	popq	%rbp
10000d45c:	c3 	retq
10000d45d:	0f 1f 00 	nopl	(%rax)
-[AspectsContainer .cxx_destruct]:
10000d460:	55 	pushq	%rbp
10000d461:	48 89 e5 	movq	%rsp, %rbp
10000d464:	48 83 ec 20 	subq	$32, %rsp
10000d468:	31 c0 	xorl	%eax, %eax
10000d46a:	89 c1 	movl	%eax, %ecx
10000d46c:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d470:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d474:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000d478:	48 8b 3d e9 44 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._afterAspects(%rip), %rdi
10000d47f:	48 89 f2 	movq	%rsi, %rdx
10000d482:	48 01 fa 	addq	%rdi, %rdx
10000d485:	48 89 d7 	movq	%rdx, %rdi
10000d488:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000d48c:	48 89 ce 	movq	%rcx, %rsi
10000d48f:	e8 5e 69 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d494:	31 c0 	xorl	%eax, %eax
10000d496:	89 c6 	movl	%eax, %esi
10000d498:	48 8b 0d c1 44 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._insteadAspects(%rip), %rcx
10000d49f:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000d4a3:	48 01 ca 	addq	%rcx, %rdx
10000d4a6:	48 89 d7 	movq	%rdx, %rdi
10000d4a9:	e8 44 69 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d4ae:	31 c0 	xorl	%eax, %eax
10000d4b0:	89 c6 	movl	%eax, %esi
10000d4b2:	48 8b 0d 9f 44 01 00 	movq	_OBJC_IVAR_$_AspectsContainer._beforeAspects(%rip), %rcx
10000d4b9:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000d4bd:	48 01 ca 	addq	%rcx, %rdx
10000d4c0:	48 89 d7 	movq	%rdx, %rdi
10000d4c3:	e8 2a 69 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d4c8:	48 83 c4 20 	addq	$32, %rsp
10000d4cc:	5d 	popq	%rbp
10000d4cd:	c3 	retq
10000d4ce:	66 90 	nop
-[AspectInfo initWithInstance:invocation:]:
10000d4d0:	55 	pushq	%rbp
10000d4d1:	48 89 e5 	movq	%rsp, %rbp
10000d4d4:	48 81 ec d0 00 00 00 	subq	$208, %rsp
10000d4db:	48 8d 45 e0 	leaq	-32(%rbp), %rax
10000d4df:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d4e3:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d4e7:	48 89 55 e8 	movq	%rdx, -24(%rbp)
10000d4eb:	48 c7 45 e0 00 00 00 00 	movq	$0, -32(%rbp)
10000d4f3:	48 89 c7 	movq	%rax, %rdi
10000d4f6:	48 89 ce 	movq	%rcx, %rsi
10000d4f9:	e8 f4 68 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d4fe:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10000d503:	0f 95 c0 	setne	%al
10000d506:	34 ff 	xorb	$-1, %al
10000d508:	24 01 	andb	$1, %al
10000d50a:	0f b6 c8 	movzbl	%al, %ecx
10000d50d:	48 63 d1 	movslq	%ecx, %rdx
10000d510:	48 83 fa 00 	cmpq	$0, %rdx
10000d514:	0f 84 73 01 00 00 	je	0x10000d68d
10000d51a:	48 8d 15 c9 8b 00 00 	leaq	35785(%rip), %rdx ## literal pool for: "-[AspectInfo initWithInstance:invocation:]"
10000d521:	48 8b 05 98 41 01 00 	movq	82328(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000d528:	48 8b 35 29 3f 01 00 	movq	81705(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000d52f:	48 89 c7 	movq	%rax, %rdi
10000d532:	ff 15 30 cb 00 00 	callq	*52016(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000d538:	48 89 c7 	movq	%rax, %rdi
10000d53b:	e8 94 68 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d540:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000d544:	48 83 7d d8 00 	cmpq	$0, -40(%rbp)
10000d549:	0f 84 0d 00 00 00 	je	0x10000d55c
10000d54f:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000d553:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000d557:	e9 10 00 00 00 	jmp	0x10000d56c
10000d55c:	48 8d 05 05 f1 00 00 	leaq	61701(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000d563:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000d567:	e9 00 00 00 00 	jmp	0x10000d56c
10000d56c:	48 8b 45 a8 	movq	-88(%rbp), %rax
10000d570:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000d574:	48 89 cf 	movq	%rcx, %rdi
10000d577:	48 89 c6 	movq	%rax, %rsi
10000d57a:	e8 73 68 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d57f:	48 8d 15 07 89 00 00 	leaq	35079(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000d586:	48 8b 05 33 41 01 00 	movq	82227(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000d58d:	48 8b 35 c4 3e 01 00 	movq	81604(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000d594:	48 89 c7 	movq	%rax, %rdi
10000d597:	ff 15 cb ca 00 00 	callq	*51915(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000d59d:	48 89 c7 	movq	%rax, %rdi
10000d5a0:	e8 2f 68 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d5a5:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000d5a9:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
10000d5ae:	0f 84 0d 00 00 00 	je	0x10000d5c1
10000d5b4:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000d5b8:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000d5bc:	e9 10 00 00 00 	jmp	0x10000d5d1
10000d5c1:	48 8d 05 c0 f0 00 00 	leaq	61632(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000d5c8:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000d5cc:	e9 00 00 00 00 	jmp	0x10000d5d1
10000d5d1:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000d5d5:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
10000d5d9:	48 89 cf 	movq	%rcx, %rdi
10000d5dc:	48 89 c6 	movq	%rax, %rsi
10000d5df:	e8 0e 68 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d5e4:	48 8b 05 b5 41 01 00 	movq	82357(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000d5eb:	48 8b 35 8e 3e 01 00 	movq	81550(%rip), %rsi ## Objc selector ref: currentHandler
10000d5f2:	48 89 c7 	movq	%rax, %rdi
10000d5f5:	ff 15 6d ca 00 00 	callq	*51821(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000d5fb:	48 89 c7 	movq	%rax, %rdi
10000d5fe:	e8 d1 67 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d603:	ba 6d 03 00 00 	movl	$877, %edx
10000d608:	41 89 d0 	movl	%edx, %r8d
10000d60b:	48 8d 0d 96 f0 00 00 	leaq	61590(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000d612:	48 8d 35 8f f1 00 00 	leaq	61839(%rip), %rsi ## Objc cfstring ref: @"instance"
10000d619:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10000d61d:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000d621:	4c 8b 0d 60 3e 01 00 	movq	81504(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000d628:	49 89 c2 	movq	%rax, %r10
10000d62b:	48 89 7d 98 	movq	%rdi, -104(%rbp)
10000d62f:	4c 89 d7 	movq	%r10, %rdi
10000d632:	48 89 75 90 	movq	%rsi, -112(%rbp)
10000d636:	4c 89 ce 	movq	%r9, %rsi
10000d639:	4c 8b 4d 98 	movq	-104(%rbp), %r9
10000d63d:	48 89 4d 88 	movq	%rcx, -120(%rbp)
10000d641:	4c 89 c9 	movq	%r9, %rcx
10000d644:	4c 8b 4d 88 	movq	-120(%rbp), %r9
10000d648:	4c 8b 55 90 	movq	-112(%rbp), %r10
10000d64c:	4c 89 14 24 	movq	%r10, (%rsp)
10000d650:	48 89 45 80 	movq	%rax, -128(%rbp)
10000d654:	b0 00 	movb	$0, %al
10000d656:	ff 15 0c ca 00 00 	callq	*51724(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000d65c:	48 8b 4d 80 	movq	-128(%rbp), %rcx
10000d660:	48 89 cf 	movq	%rcx, %rdi
10000d663:	ff 15 07 ca 00 00 	callq	*51719(%rip) ## literal pool symbol address: _objc_release
10000d669:	45 31 db 	xorl	%r11d, %r11d
10000d66c:	44 89 de 	movl	%r11d, %esi
10000d66f:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
10000d673:	48 89 cf 	movq	%rcx, %rdi
10000d676:	e8 77 67 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d67b:	45 31 db 	xorl	%r11d, %r11d
10000d67e:	44 89 de 	movl	%r11d, %esi
10000d681:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000d685:	48 89 cf 	movq	%rcx, %rdi
10000d688:	e8 65 67 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d68d:	e9 00 00 00 00 	jmp	0x10000d692
10000d692:	e9 00 00 00 00 	jmp	0x10000d697
10000d697:	e9 00 00 00 00 	jmp	0x10000d69c
10000d69c:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
10000d6a1:	0f 95 c0 	setne	%al
10000d6a4:	34 ff 	xorb	$-1, %al
10000d6a6:	24 01 	andb	$1, %al
10000d6a8:	0f b6 c8 	movzbl	%al, %ecx
10000d6ab:	48 63 d1 	movslq	%ecx, %rdx
10000d6ae:	48 83 fa 00 	cmpq	$0, %rdx
10000d6b2:	0f 84 9d 01 00 00 	je	0x10000d855
10000d6b8:	48 8d 15 2b 8a 00 00 	leaq	35371(%rip), %rdx ## literal pool for: "-[AspectInfo initWithInstance:invocation:]"
10000d6bf:	48 8b 05 fa 3f 01 00 	movq	81914(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000d6c6:	48 8b 35 8b 3d 01 00 	movq	81291(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000d6cd:	48 89 c7 	movq	%rax, %rdi
10000d6d0:	ff 15 92 c9 00 00 	callq	*51602(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000d6d6:	48 89 c7 	movq	%rax, %rdi
10000d6d9:	e8 f6 66 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d6de:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000d6e2:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
10000d6e7:	0f 84 10 00 00 00 	je	0x10000d6fd
10000d6ed:	48 8b 45 c8 	movq	-56(%rbp), %rax
10000d6f1:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000d6f8:	e9 13 00 00 00 	jmp	0x10000d710
10000d6fd:	48 8d 05 64 ef 00 00 	leaq	61284(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000d704:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000d70b:	e9 00 00 00 00 	jmp	0x10000d710
10000d710:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000d717:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000d71b:	48 89 cf 	movq	%rcx, %rdi
10000d71e:	48 89 c6 	movq	%rax, %rsi
10000d721:	e8 cc 66 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d726:	48 8d 15 60 87 00 00 	leaq	34656(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000d72d:	48 8b 05 8c 3f 01 00 	movq	81804(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000d734:	48 8b 35 1d 3d 01 00 	movq	81181(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000d73b:	48 89 c7 	movq	%rax, %rdi
10000d73e:	ff 15 24 c9 00 00 	callq	*51492(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000d744:	48 89 c7 	movq	%rax, %rdi
10000d747:	e8 88 66 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d74c:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000d750:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
10000d755:	0f 84 10 00 00 00 	je	0x10000d76b
10000d75b:	48 8b 45 c0 	movq	-64(%rbp), %rax
10000d75f:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000d766:	e9 13 00 00 00 	jmp	0x10000d77e
10000d76b:	48 8d 05 16 ef 00 00 	leaq	61206(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000d772:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000d779:	e9 00 00 00 00 	jmp	0x10000d77e
10000d77e:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
10000d785:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000d789:	48 89 cf 	movq	%rcx, %rdi
10000d78c:	48 89 c6 	movq	%rax, %rsi
10000d78f:	e8 5e 66 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d794:	48 8b 05 05 40 01 00 	movq	81925(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000d79b:	48 8b 35 de 3c 01 00 	movq	81118(%rip), %rsi ## Objc selector ref: currentHandler
10000d7a2:	48 89 c7 	movq	%rax, %rdi
10000d7a5:	ff 15 bd c8 00 00 	callq	*51389(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000d7ab:	48 89 c7 	movq	%rax, %rdi
10000d7ae:	e8 21 66 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d7b3:	ba 6e 03 00 00 	movl	$878, %edx
10000d7b8:	41 89 d0 	movl	%edx, %r8d
10000d7bb:	48 8d 0d e6 ee 00 00 	leaq	61158(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000d7c2:	48 8d 35 ff ef 00 00 	leaq	61439(%rip), %rsi ## Objc cfstring ref: @"invocation"
10000d7c9:	48 8b 55 c8 	movq	-56(%rbp), %rdx
10000d7cd:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000d7d1:	4c 8b 0d b0 3c 01 00 	movq	81072(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000d7d8:	49 89 c2 	movq	%rax, %r10
10000d7db:	48 89 bd 68 ff ff ff 	movq	%rdi, -152(%rbp)
10000d7e2:	4c 89 d7 	movq	%r10, %rdi
10000d7e5:	48 89 b5 60 ff ff ff 	movq	%rsi, -160(%rbp)
10000d7ec:	4c 89 ce 	movq	%r9, %rsi
10000d7ef:	4c 8b 8d 68 ff ff ff 	movq	-152(%rbp), %r9
10000d7f6:	48 89 8d 58 ff ff ff 	movq	%rcx, -168(%rbp)
10000d7fd:	4c 89 c9 	movq	%r9, %rcx
10000d800:	4c 8b 8d 58 ff ff ff 	movq	-168(%rbp), %r9
10000d807:	4c 8b 95 60 ff ff ff 	movq	-160(%rbp), %r10
10000d80e:	4c 89 14 24 	movq	%r10, (%rsp)
10000d812:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
10000d819:	b0 00 	movb	$0, %al
10000d81b:	ff 15 47 c8 00 00 	callq	*51271(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000d821:	48 8b 8d 50 ff ff ff 	movq	-176(%rbp), %rcx
10000d828:	48 89 cf 	movq	%rcx, %rdi
10000d82b:	ff 15 3f c8 00 00 	callq	*51263(%rip) ## literal pool symbol address: _objc_release
10000d831:	45 31 db 	xorl	%r11d, %r11d
10000d834:	44 89 de 	movl	%r11d, %esi
10000d837:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000d83b:	48 89 cf 	movq	%rcx, %rdi
10000d83e:	e8 af 65 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d843:	45 31 db 	xorl	%r11d, %r11d
10000d846:	44 89 de 	movl	%r11d, %esi
10000d849:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000d84d:	48 89 cf 	movq	%rcx, %rdi
10000d850:	e8 9d 65 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d855:	e9 00 00 00 00 	jmp	0x10000d85a
10000d85a:	e9 00 00 00 00 	jmp	0x10000d85f
10000d85f:	48 8d 7d b0 	leaq	-80(%rbp), %rdi
10000d863:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000d867:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
10000d86f:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000d873:	48 8b 05 ee 3f 01 00 	movq	81902(%rip), %rax ## Objc class ref: AspectInfo
10000d87a:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000d87e:	48 8b 35 e3 35 01 00 	movq	79331(%rip), %rsi ## Objc selector ref: init
10000d885:	e8 32 65 00 00 	callq	0x100013dbc ## Objc message: -[[%rdi super] init]
10000d88a:	48 8d 75 f8 	leaq	-8(%rbp), %rsi
10000d88e:	48 89 c7 	movq	%rax, %rdi
10000d891:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d895:	48 89 c7 	movq	%rax, %rdi
10000d898:	48 89 bd 48 ff ff ff 	movq	%rdi, -184(%rbp)
10000d89f:	48 89 f7 	movq	%rsi, %rdi
10000d8a2:	48 8b b5 48 ff ff ff 	movq	-184(%rbp), %rsi
10000d8a9:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000d8b0:	e8 3d 65 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d8b5:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10000d8bc:	48 83 f8 00 	cmpq	$0, %rax
10000d8c0:	0f 84 30 00 00 00 	je	0x10000d8f6
10000d8c6:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000d8ca:	48 8b 4d f8 	movq	-8(%rbp), %rcx
10000d8ce:	48 8b 15 9b 40 01 00 	movq	_OBJC_IVAR_$_AspectInfo._instance(%rip), %rdx
10000d8d5:	48 89 04 11 	movq	%rax, (%rcx,%rdx)
10000d8d9:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000d8dd:	48 8b 4d f8 	movq	-8(%rbp), %rcx
10000d8e1:	48 8b 15 90 40 01 00 	movq	_OBJC_IVAR_$_AspectInfo._originalInvocation(%rip), %rdx
10000d8e8:	48 01 d1 	addq	%rdx, %rcx
10000d8eb:	48 89 cf 	movq	%rcx, %rdi
10000d8ee:	48 89 c6 	movq	%rax, %rsi
10000d8f1:	e8 fc 64 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d8f6:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000d8fa:	48 89 c7 	movq	%rax, %rdi
10000d8fd:	ff 15 75 c7 00 00 	callq	*51061(%rip) ## literal pool symbol address: _objc_retain
10000d903:	31 c9 	xorl	%ecx, %ecx
10000d905:	89 ce 	movl	%ecx, %esi
10000d907:	48 8d 7d e0 	leaq	-32(%rbp), %rdi
10000d90b:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000d912:	e8 db 64 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d917:	31 c9 	xorl	%ecx, %ecx
10000d919:	89 ce 	movl	%ecx, %esi
10000d91b:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10000d91f:	48 89 c7 	movq	%rax, %rdi
10000d922:	e8 cb 64 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000d927:	48 8b 85 38 ff ff ff 	movq	-200(%rbp), %rax
10000d92e:	48 81 c4 d0 00 00 00 	addq	$208, %rsp
10000d935:	5d 	popq	%rbp
10000d936:	c3 	retq
10000d937:	66 0f 1f 84 00 00 00 00 00 	nopw	(%rax,%rax)
-[AspectInfo arguments]:
10000d940:	55 	pushq	%rbp
10000d941:	48 89 e5 	movq	%rsp, %rbp
10000d944:	48 83 ec 20 	subq	$32, %rsp
10000d948:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d94c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d950:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000d954:	48 8b 3d 25 40 01 00 	movq	_OBJC_IVAR_$_AspectInfo._arguments(%rip), %rdi
10000d95b:	48 83 3c 3e 00 	cmpq	$0, (%rsi,%rdi)
10000d960:	0f 85 61 00 00 00 	jne	0x10000d9c7
10000d966:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000d96a:	48 8b 35 57 3b 01 00 	movq	80727(%rip), %rsi ## Objc selector ref: originalInvocation
10000d971:	48 89 c7 	movq	%rax, %rdi
10000d974:	ff 15 ee c6 00 00 	callq	*50926(%rip) ## Objc message: -[%rdi originalInvocation]
10000d97a:	48 89 c7 	movq	%rax, %rdi
10000d97d:	e8 52 64 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d982:	48 8b 35 ef 3b 01 00 	movq	80879(%rip), %rsi ## Objc selector ref: aspects_arguments
10000d989:	48 89 c7 	movq	%rax, %rdi
10000d98c:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000d990:	ff 15 d2 c6 00 00 	callq	*50898(%rip) ## Objc message: -[%rdi aspects_arguments]
10000d996:	48 89 c7 	movq	%rax, %rdi
10000d999:	e8 36 64 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000d99e:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000d9a2:	48 8b 3d d7 3f 01 00 	movq	_OBJC_IVAR_$_AspectInfo._arguments(%rip), %rdi
10000d9a9:	48 8b 0c 3e 	movq	(%rsi,%rdi), %rcx
10000d9ad:	48 89 04 3e 	movq	%rax, (%rsi,%rdi)
10000d9b1:	48 89 cf 	movq	%rcx, %rdi
10000d9b4:	ff 15 b6 c6 00 00 	callq	*50870(%rip) ## literal pool symbol address: _objc_release
10000d9ba:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000d9be:	48 89 c7 	movq	%rax, %rdi
10000d9c1:	ff 15 a9 c6 00 00 	callq	*50857(%rip) ## literal pool symbol address: _objc_release
10000d9c7:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000d9cb:	48 8b 0d ae 3f 01 00 	movq	_OBJC_IVAR_$_AspectInfo._arguments(%rip), %rcx
10000d9d2:	48 8b 3c 08 	movq	(%rax,%rcx), %rdi
10000d9d6:	48 83 c4 20 	addq	$32, %rsp
10000d9da:	5d 	popq	%rbp
10000d9db:	e9 ee 63 00 00 	jmp	0x100013dce ## symbol stub for: _objc_retainAutoreleaseReturnValue
-[AspectInfo instance]:
10000d9e0:	55 	pushq	%rbp
10000d9e1:	48 89 e5 	movq	%rsp, %rbp
10000d9e4:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000d9e8:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000d9ec:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000d9f0:	48 8b 3d 79 3f 01 00 	movq	_OBJC_IVAR_$_AspectInfo._instance(%rip), %rdi
10000d9f7:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
10000d9fb:	5d 	popq	%rbp
10000d9fc:	c3 	retq
10000d9fd:	0f 1f 00 	nopl	(%rax)
-[AspectInfo originalInvocation]:
10000da00:	55 	pushq	%rbp
10000da01:	48 89 e5 	movq	%rsp, %rbp
10000da04:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000da08:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000da0c:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000da10:	48 8b 3d 61 3f 01 00 	movq	_OBJC_IVAR_$_AspectInfo._originalInvocation(%rip), %rdi
10000da17:	48 8b 04 3e 	movq	(%rsi,%rdi), %rax
10000da1b:	5d 	popq	%rbp
10000da1c:	c3 	retq
10000da1d:	0f 1f 00 	nopl	(%rax)
-[AspectInfo .cxx_destruct]:
10000da20:	55 	pushq	%rbp
10000da21:	48 89 e5 	movq	%rsp, %rbp
10000da24:	48 83 ec 20 	subq	$32, %rsp
10000da28:	31 c0 	xorl	%eax, %eax
10000da2a:	89 c1 	movl	%eax, %ecx
10000da2c:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000da30:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000da34:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000da38:	48 8b 3d 39 3f 01 00 	movq	_OBJC_IVAR_$_AspectInfo._originalInvocation(%rip), %rdi
10000da3f:	48 89 f2 	movq	%rsi, %rdx
10000da42:	48 01 fa 	addq	%rdi, %rdx
10000da45:	48 89 d7 	movq	%rdx, %rdi
10000da48:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000da4c:	48 89 ce 	movq	%rcx, %rsi
10000da4f:	e8 9e 63 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000da54:	31 c0 	xorl	%eax, %eax
10000da56:	89 c6 	movl	%eax, %esi
10000da58:	48 8b 0d 21 3f 01 00 	movq	_OBJC_IVAR_$_AspectInfo._arguments(%rip), %rcx
10000da5f:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000da63:	48 01 ca 	addq	%rcx, %rdx
10000da66:	48 89 d7 	movq	%rdx, %rdi
10000da69:	e8 84 63 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000da6e:	48 83 c4 20 	addq	$32, %rsp
10000da72:	5d 	popq	%rbp
10000da73:	c3 	retq
10000da74:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
___Block_byref_object_copy_:
10000da80:	55 	pushq	%rbp
10000da81:	48 89 e5 	movq	%rsp, %rbp
10000da84:	48 83 ec 20 	subq	$32, %rsp
10000da88:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000da8c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000da90:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000da94:	48 89 f7 	movq	%rsi, %rdi
10000da97:	48 83 c7 28 	addq	$40, %rdi
10000da9b:	48 8b 45 f0 	movq	-16(%rbp), %rax
10000da9f:	48 89 c1 	movq	%rax, %rcx
10000daa2:	48 83 c1 28 	addq	$40, %rcx
10000daa6:	48 8b 40 28 	movq	40(%rax), %rax
10000daaa:	48 c7 46 28 00 00 00 00 	movq	$0, 40(%rsi)
10000dab2:	48 89 c6 	movq	%rax, %rsi
10000dab5:	48 89 4d e8 	movq	%rcx, -24(%rbp)
10000dab9:	e8 34 63 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000dabe:	31 d2 	xorl	%edx, %edx
10000dac0:	89 d6 	movl	%edx, %esi
10000dac2:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000dac6:	48 89 c7 	movq	%rax, %rdi
10000dac9:	e8 24 63 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000dace:	48 83 c4 20 	addq	$32, %rsp
10000dad2:	5d 	popq	%rbp
10000dad3:	c3 	retq
10000dad4:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
___Block_byref_object_dispose_:
10000dae0:	55 	pushq	%rbp
10000dae1:	48 89 e5 	movq	%rsp, %rbp
10000dae4:	48 83 ec 10 	subq	$16, %rsp
10000dae8:	31 c0 	xorl	%eax, %eax
10000daea:	89 c6 	movl	%eax, %esi
10000daec:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000daf0:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000daf4:	48 83 c7 28 	addq	$40, %rdi
10000daf8:	e8 f5 62 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000dafd:	48 83 c4 10 	addq	$16, %rsp
10000db01:	5d 	popq	%rbp
10000db02:	c3 	retq
10000db03:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_performLocked:
10000db10:	55 	pushq	%rbp
10000db11:	48 89 e5 	movq	%rsp, %rbp
10000db14:	48 83 ec 10 	subq	$16, %rsp
10000db18:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10000db1c:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
10000db24:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000db28:	48 89 c7 	movq	%rax, %rdi
10000db2b:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000db2f:	e8 be 62 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000db34:	48 8d 3d ed 4a 01 00 	leaq	_aspect_performLocked.aspect_lock(%rip), %rdi
10000db3b:	e8 ea 60 00 00 	callq	0x100013c2a ## symbol stub for: _OSSpinLockLock
10000db40:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000db44:	48 89 c6 	movq	%rax, %rsi
10000db47:	48 89 f7 	movq	%rsi, %rdi
10000db4a:	ff 50 10 	callq	*16(%rax)
10000db4d:	48 8d 3d d4 4a 01 00 	leaq	_aspect_performLocked.aspect_lock(%rip), %rdi
10000db54:	e8 d7 60 00 00 	callq	0x100013c30 ## symbol stub for: _OSSpinLockUnlock
10000db59:	31 c9 	xorl	%ecx, %ecx
10000db5b:	89 ce 	movl	%ecx, %esi
10000db5d:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10000db61:	48 89 c7 	movq	%rax, %rdi
10000db64:	e8 89 62 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000db69:	48 83 c4 10 	addq	$16, %rsp
10000db6d:	5d 	popq	%rbp
10000db6e:	c3 	retq
10000db6f:	90 	nop
___aspect_add_block_invoke:
10000db70:	55 	pushq	%rbp
10000db71:	48 89 e5 	movq	%rsp, %rbp
10000db74:	48 83 ec 40 	subq	$64, %rsp
10000db78:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000db7c:	48 89 f8 	movq	%rdi, %rax
10000db7f:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000db83:	48 8b 4f 20 	movq	32(%rdi), %rcx
10000db87:	48 8b 77 38 	movq	56(%rdi), %rsi
10000db8b:	48 8b 57 40 	movq	64(%rdi), %rdx
10000db8f:	48 8b 7f 48 	movq	72(%rdi), %rdi
10000db93:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10000db97:	48 89 cf 	movq	%rcx, %rdi
10000db9a:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000db9e:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000dba2:	e8 09 01 00 00 	callq	_aspect_isSelectorAllowedAndTrack
10000dba7:	a8 01 	testb	$1, %al
10000dba9:	0f 85 05 00 00 00 	jne	0x10000dbb4
10000dbaf:	e9 eb 00 00 00 	jmp	0x10000dc9f
10000dbb4:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000dbb8:	48 8b 48 20 	movq	32(%rax), %rcx
10000dbbc:	48 8b 70 38 	movq	56(%rax), %rsi
10000dbc0:	48 89 cf 	movq	%rcx, %rdi
10000dbc3:	e8 48 0d 00 00 	callq	_aspect_getContainerForObject
10000dbc8:	48 89 c7 	movq	%rax, %rdi
10000dbcb:	e8 04 62 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000dbd0:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000dbd4:	48 8b 05 cd 3b 01 00 	movq	80845(%rip), %rax ## Objc class ref: AspectIdentifier
10000dbdb:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000dbdf:	48 8b 51 38 	movq	56(%rcx), %rdx
10000dbe3:	48 8b 49 20 	movq	32(%rcx), %rcx
10000dbe7:	48 8b 75 d8 	movq	-40(%rbp), %rsi
10000dbeb:	4c 8b 46 40 	movq	64(%rsi), %r8
10000dbef:	4c 8b 4e 28 	movq	40(%rsi), %r9
10000dbf3:	48 8b 7e 48 	movq	72(%rsi), %rdi
10000dbf7:	48 8b 35 82 39 01 00 	movq	80258(%rip), %rsi ## Objc selector ref: identifierWithSelector:object:options:block:error:
10000dbfe:	48 89 7d d0 	movq	%rdi, -48(%rbp)
10000dc02:	48 89 c7 	movq	%rax, %rdi
10000dc05:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000dc09:	48 89 04 24 	movq	%rax, (%rsp)
10000dc0d:	ff 15 55 c4 00 00 	callq	*50261(%rip) ## Objc message: +[AspectIdentifier identifierWithSelector:object:options:block:error:]
10000dc13:	48 89 c7 	movq	%rax, %rdi
10000dc16:	e8 b9 61 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000dc1b:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000dc1f:	48 8b 51 30 	movq	48(%rcx), %rdx
10000dc23:	48 8b 52 08 	movq	8(%rdx), %rdx
10000dc27:	48 8b 72 28 	movq	40(%rdx), %rsi
10000dc2b:	48 89 42 28 	movq	%rax, 40(%rdx)
10000dc2f:	48 89 f7 	movq	%rsi, %rdi
10000dc32:	ff 15 38 c4 00 00 	callq	*50232(%rip) ## literal pool symbol address: _objc_release
10000dc38:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000dc3c:	48 8b 48 30 	movq	48(%rax), %rcx
10000dc40:	48 8b 49 08 	movq	8(%rcx), %rcx
10000dc44:	48 83 79 28 00 	cmpq	$0, 40(%rcx)
10000dc49:	0f 84 40 00 00 00 	je	0x10000dc8f
10000dc4f:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000dc53:	48 8b 4d d8 	movq	-40(%rbp), %rcx
10000dc57:	48 8b 51 30 	movq	48(%rcx), %rdx
10000dc5b:	48 8b 52 08 	movq	8(%rdx), %rdx
10000dc5f:	48 8b 52 28 	movq	40(%rdx), %rdx
10000dc63:	48 8b 49 40 	movq	64(%rcx), %rcx
10000dc67:	48 8b 35 1a 39 01 00 	movq	80154(%rip), %rsi ## Objc selector ref: addAspect:withOptions:
10000dc6e:	48 89 c7 	movq	%rax, %rdi
10000dc71:	ff 15 f1 c3 00 00 	callq	*50161(%rip) ## Objc message: -[%rdi addAspect:withOptions:]
10000dc77:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000dc7b:	48 8b 48 20 	movq	32(%rax), %rcx
10000dc7f:	48 8b 70 38 	movq	56(%rax), %rsi
10000dc83:	48 8b 50 48 	movq	72(%rax), %rdx
10000dc87:	48 89 cf 	movq	%rcx, %rdi
10000dc8a:	e8 21 0f 00 00 	callq	_aspect_prepareClassAndHookSelector
10000dc8f:	31 c0 	xorl	%eax, %eax
10000dc91:	89 c6 	movl	%eax, %esi
10000dc93:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000dc97:	48 89 cf 	movq	%rcx, %rdi
10000dc9a:	e8 53 61 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000dc9f:	48 83 c4 40 	addq	$64, %rsp
10000dca3:	5d 	popq	%rbp
10000dca4:	c3 	retq
10000dca5:	66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_isSelectorAllowedAndTrack:
10000dcb0:	55 	pushq	%rbp
10000dcb1:	48 89 e5 	movq	%rsp, %rbp
10000dcb4:	48 81 ec f0 01 00 00 	subq	$496, %rsp
10000dcbb:	48 8d 45 98 	leaq	-104(%rbp), %rax
10000dcbf:	4c 8b 05 72 c3 00 00 	movq	50034(%rip), %r8 ## literal pool symbol address: ___stack_chk_guard
10000dcc6:	4d 8b 00 	movq	(%r8), %r8
10000dcc9:	4c 89 45 f8 	movq	%r8, -8(%rbp)
10000dccd:	48 c7 45 98 00 00 00 00 	movq	$0, -104(%rbp)
10000dcd5:	48 89 bd 08 ff ff ff 	movq	%rdi, -248(%rbp)
10000dcdc:	48 89 c7 	movq	%rax, %rdi
10000dcdf:	48 8b 85 08 ff ff ff 	movq	-248(%rbp), %rax
10000dce6:	48 89 b5 00 ff ff ff 	movq	%rsi, -256(%rbp)
10000dced:	48 89 c6 	movq	%rax, %rsi
10000dcf0:	48 89 95 f8 fe ff ff 	movq	%rdx, -264(%rbp)
10000dcf7:	48 89 8d f0 fe ff ff 	movq	%rcx, -272(%rbp)
10000dcfe:	e8 ef 60 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000dd03:	48 8d 05 ae d3 00 00 	leaq	___block_literal_global(%rip), %rax
10000dd0a:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000dd0e:	48 8d 15 23 49 01 00 	leaq	_aspect_isSelectorAllowedAndTrack.pred(%rip), %rdx
10000dd15:	48 8b b5 00 ff ff ff 	movq	-256(%rbp), %rsi
10000dd1c:	48 89 75 90 	movq	%rsi, -112(%rbp)
10000dd20:	48 8b bd f8 fe ff ff 	movq	-264(%rbp), %rdi
10000dd27:	48 89 7d 88 	movq	%rdi, -120(%rbp)
10000dd2b:	4c 8b 85 f0 fe ff ff 	movq	-272(%rbp), %r8
10000dd32:	4c 89 45 80 	movq	%r8, -128(%rbp)
10000dd36:	48 89 55 b0 	movq	%rdx, -80(%rbp)
10000dd3a:	48 c7 45 a8 00 00 00 00 	movq	$0, -88(%rbp)
10000dd42:	48 89 cf 	movq	%rcx, %rdi
10000dd45:	48 89 c6 	movq	%rax, %rsi
10000dd48:	e8 a5 60 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000dd4d:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000dd51:	48 83 38 ff 	cmpq	$-1, (%rax)
10000dd55:	0f 84 12 00 00 00 	je	0x10000dd6d
10000dd5b:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000dd5f:	48 8b 75 a8 	movq	-88(%rbp), %rsi
10000dd63:	e8 64 5f 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
10000dd68:	e9 00 00 00 00 	jmp	0x10000dd6d
10000dd6d:	31 c0 	xorl	%eax, %eax
10000dd6f:	89 c6 	movl	%eax, %esi
10000dd71:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000dd75:	48 8b 55 b0 	movq	-80(%rbp), %rdx
10000dd79:	48 89 cf 	movq	%rcx, %rdi
10000dd7c:	48 89 95 e8 fe ff ff 	movq	%rdx, -280(%rbp)
10000dd83:	e8 6a 60 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000dd88:	48 8b 7d 90 	movq	-112(%rbp), %rdi
10000dd8c:	e8 93 5e 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000dd91:	48 89 c7 	movq	%rax, %rdi
10000dd94:	e8 3b 60 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000dd99:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000dda0:	48 8b 05 89 48 01 00 	movq	_aspect_isSelectorAllowedAndTrack.disallowedSelectorList(%rip), %rax
10000dda7:	48 8b 8d 78 ff ff ff 	movq	-136(%rbp), %rcx
10000ddae:	48 8b 35 e3 37 01 00 	movq	79843(%rip), %rsi ## Objc selector ref: containsObject:
10000ddb5:	48 89 c7 	movq	%rax, %rdi
10000ddb8:	48 89 ca 	movq	%rcx, %rdx
10000ddbb:	ff 15 a7 c2 00 00 	callq	*49831(%rip) ## Objc message: -[%rdi containsObject:]
10000ddc1:	a8 01 	testb	$1, %al
10000ddc3:	0f 85 05 00 00 00 	jne	0x10000ddce
10000ddc9:	e9 60 01 00 00 	jmp	0x10000df2e
10000ddce:	48 8d 05 b3 ea 00 00 	leaq	60083(%rip), %rax ## Objc cfstring ref: @"Selector %@ is blacklisted."
10000ddd5:	48 8b 0d e4 38 01 00 	movq	80100(%rip), %rcx ## Objc class ref: _OBJC_CLASS_$_NSString
10000dddc:	48 8b 95 78 ff ff ff 	movq	-136(%rbp), %rdx
10000dde3:	48 8b 35 d6 31 01 00 	movq	78294(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000ddea:	48 89 cf 	movq	%rcx, %rdi
10000dded:	48 89 95 e0 fe ff ff 	movq	%rdx, -288(%rbp)
10000ddf4:	48 89 c2 	movq	%rax, %rdx
10000ddf7:	48 8b 8d e0 fe ff ff 	movq	-288(%rbp), %rcx
10000ddfe:	b0 00 	movb	$0, %al
10000de00:	ff 15 62 c2 00 00 	callq	*49762(%rip) ## Objc message: +[NSString stringWithFormat:]
10000de06:	48 89 c7 	movq	%rax, %rdi
10000de09:	e8 c6 5f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000de0e:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000de15:	e9 00 00 00 00 	jmp	0x10000de1a
10000de1a:	48 8d 05 87 ea 00 00 	leaq	60039(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000de21:	48 8b b5 70 ff ff ff 	movq	-144(%rbp), %rsi
10000de28:	48 89 c7 	movq	%rax, %rdi
10000de2b:	b0 00 	movb	$0, %al
10000de2d:	e8 e0 5d 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000de32:	e9 00 00 00 00 	jmp	0x10000de37
10000de37:	48 83 7d 80 00 	cmpq	$0, -128(%rbp)
10000de3c:	0f 84 bc 00 00 00 	je	0x10000defe
10000de42:	b8 01 00 00 00 	movl	$1, %eax
10000de47:	41 89 c0 	movl	%eax, %r8d
10000de4a:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000de4e:	48 8d 55 f0 	leaq	-16(%rbp), %rdx
10000de52:	48 8b 35 b7 c1 00 00 	movq	49591(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000de59:	48 8b 3d 58 39 01 00 	movq	80216(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000de60:	48 8b 36 	movq	(%rsi), %rsi
10000de63:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000de67:	48 8b b5 70 ff ff ff 	movq	-144(%rbp), %rsi
10000de6e:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000de72:	48 8b 35 2f 38 01 00 	movq	79919(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000de79:	4c 8b 0d 20 37 01 00 	movq	79648(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000de80:	48 89 bd d8 fe ff ff 	movq	%rdi, -296(%rbp)
10000de87:	48 89 f7 	movq	%rsi, %rdi
10000de8a:	4c 89 ce 	movq	%r9, %rsi
10000de8d:	ff 15 d5 c1 00 00 	callq	*49621(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000de93:	48 89 c7 	movq	%rax, %rdi
10000de96:	e8 39 5f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000de9b:	48 8d 0d 26 e7 00 00 	leaq	59174(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000dea2:	45 31 d2 	xorl	%r10d, %r10d
10000dea5:	44 89 d2 	movl	%r10d, %edx
10000dea8:	48 8b 35 f9 36 01 00 	movq	79609(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000deaf:	48 8b bd d8 fe ff ff 	movq	-296(%rbp), %rdi
10000deb6:	48 89 95 d0 fe ff ff 	movq	%rdx, -304(%rbp)
10000debd:	48 89 ca 	movq	%rcx, %rdx
10000dec0:	48 8b 8d d0 fe ff ff 	movq	-304(%rbp), %rcx
10000dec7:	49 89 c0 	movq	%rax, %r8
10000deca:	48 89 85 c8 fe ff ff 	movq	%rax, -312(%rbp)
10000ded1:	ff 15 91 c1 00 00 	callq	*49553(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000ded7:	48 89 c7 	movq	%rax, %rdi
10000deda:	e8 f5 5e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000dedf:	48 89 c7 	movq	%rax, %rdi
10000dee2:	e8 7b 5e 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000dee7:	48 8b 4d 80 	movq	-128(%rbp), %rcx
10000deeb:	48 89 01 	movq	%rax, (%rcx)
10000deee:	48 8b 85 c8 fe ff ff 	movq	-312(%rbp), %rax
10000def5:	48 89 c7 	movq	%rax, %rdi
10000def8:	ff 15 72 c1 00 00 	callq	*49522(%rip) ## literal pool symbol address: _objc_release
10000defe:	e9 00 00 00 00 	jmp	0x10000df03
10000df03:	e9 00 00 00 00 	jmp	0x10000df08
10000df08:	31 c0 	xorl	%eax, %eax
10000df0a:	89 c6 	movl	%eax, %esi
10000df0c:	48 8d 8d 70 ff ff ff 	leaq	-144(%rbp), %rcx
10000df13:	c6 45 a7 00 	movb	$0, -89(%rbp)
10000df17:	c7 85 6c ff ff ff 01 00 00 00 	movl	$1, -148(%rbp)
10000df21:	48 89 cf 	movq	%rcx, %rdi
10000df24:	e8 c9 5e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000df29:	e9 79 09 00 00 	jmp	0x10000e8a7
10000df2e:	48 8d 05 93 e9 00 00 	leaq	59795(%rip), %rax ## Objc cfstring ref: @"dealloc"
10000df35:	48 8b 4d 88 	movq	-120(%rbp), %rcx
10000df39:	48 83 e1 07 	andq	$7, %rcx
10000df3d:	48 89 8d 60 ff ff ff 	movq	%rcx, -160(%rbp)
10000df44:	48 8b 8d 78 ff ff ff 	movq	-136(%rbp), %rcx
10000df4b:	48 8b 35 ce 31 01 00 	movq	78286(%rip), %rsi ## Objc selector ref: isEqualToString:
10000df52:	48 89 cf 	movq	%rcx, %rdi
10000df55:	48 89 c2 	movq	%rax, %rdx
10000df58:	ff 15 0a c1 00 00 	callq	*49418(%rip) ## Objc message: -[%rdi isEqualToString:]
10000df5e:	a8 01 	testb	$1, %al
10000df60:	0f 85 05 00 00 00 	jne	0x10000df6b
10000df66:	e9 41 01 00 00 	jmp	0x10000e0ac
10000df6b:	48 83 bd 60 ff ff ff 02 	cmpq	$2, -160(%rbp)
10000df73:	0f 84 33 01 00 00 	je	0x10000e0ac
10000df79:	48 8d 05 68 e9 00 00 	leaq	59752(%rip), %rax ## Objc cfstring ref: @"AspectPositionBefore is the only valid position when hooking dealloc."
10000df80:	48 89 c7 	movq	%rax, %rdi
10000df83:	ff 15 ef c0 00 00 	callq	*49391(%rip) ## literal pool symbol address: _objc_retain
10000df89:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
10000df90:	e9 00 00 00 00 	jmp	0x10000df95
10000df95:	48 8d 05 0c e9 00 00 	leaq	59660(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000df9c:	48 8b b5 58 ff ff ff 	movq	-168(%rbp), %rsi
10000dfa3:	48 89 c7 	movq	%rax, %rdi
10000dfa6:	b0 00 	movb	$0, %al
10000dfa8:	e8 65 5c 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000dfad:	e9 00 00 00 00 	jmp	0x10000dfb2
10000dfb2:	48 83 7d 80 00 	cmpq	$0, -128(%rbp)
10000dfb7:	0f 84 bf 00 00 00 	je	0x10000e07c
10000dfbd:	b8 01 00 00 00 	movl	$1, %eax
10000dfc2:	41 89 c0 	movl	%eax, %r8d
10000dfc5:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000dfc9:	48 8d 55 e0 	leaq	-32(%rbp), %rdx
10000dfcd:	48 8b 35 3c c0 00 00 	movq	49212(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000dfd4:	48 8b 3d dd 37 01 00 	movq	79837(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000dfdb:	48 8b 36 	movq	(%rsi), %rsi
10000dfde:	48 89 75 d8 	movq	%rsi, -40(%rbp)
10000dfe2:	48 8b b5 58 ff ff ff 	movq	-168(%rbp), %rsi
10000dfe9:	48 89 75 e0 	movq	%rsi, -32(%rbp)
10000dfed:	48 8b 35 b4 36 01 00 	movq	79540(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000dff4:	4c 8b 0d a5 35 01 00 	movq	79269(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000dffb:	48 89 bd c0 fe ff ff 	movq	%rdi, -320(%rbp)
10000e002:	48 89 f7 	movq	%rsi, %rdi
10000e005:	4c 89 ce 	movq	%r9, %rsi
10000e008:	ff 15 5a c0 00 00 	callq	*49242(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000e00e:	48 89 c7 	movq	%rax, %rdi
10000e011:	e8 be 5d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e016:	48 8d 0d ab e5 00 00 	leaq	58795(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000e01d:	41 ba 02 00 00 00 	movl	$2, %r10d
10000e023:	44 89 d2 	movl	%r10d, %edx
10000e026:	48 8b 35 7b 35 01 00 	movq	79227(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000e02d:	48 8b bd c0 fe ff ff 	movq	-320(%rbp), %rdi
10000e034:	48 89 95 b8 fe ff ff 	movq	%rdx, -328(%rbp)
10000e03b:	48 89 ca 	movq	%rcx, %rdx
10000e03e:	48 8b 8d b8 fe ff ff 	movq	-328(%rbp), %rcx
10000e045:	49 89 c0 	movq	%rax, %r8
10000e048:	48 89 85 b0 fe ff ff 	movq	%rax, -336(%rbp)
10000e04f:	ff 15 13 c0 00 00 	callq	*49171(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000e055:	48 89 c7 	movq	%rax, %rdi
10000e058:	e8 77 5d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e05d:	48 89 c7 	movq	%rax, %rdi
10000e060:	e8 fd 5c 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000e065:	48 8b 4d 80 	movq	-128(%rbp), %rcx
10000e069:	48 89 01 	movq	%rax, (%rcx)
10000e06c:	48 8b 85 b0 fe ff ff 	movq	-336(%rbp), %rax
10000e073:	48 89 c7 	movq	%rax, %rdi
10000e076:	ff 15 f4 bf 00 00 	callq	*49140(%rip) ## literal pool symbol address: _objc_release
10000e07c:	e9 00 00 00 00 	jmp	0x10000e081
10000e081:	e9 00 00 00 00 	jmp	0x10000e086
10000e086:	31 c0 	xorl	%eax, %eax
10000e088:	89 c6 	movl	%eax, %esi
10000e08a:	48 8d 8d 58 ff ff ff 	leaq	-168(%rbp), %rcx
10000e091:	c6 45 a7 00 	movb	$0, -89(%rbp)
10000e095:	c7 85 6c ff ff ff 01 00 00 00 	movl	$1, -148(%rbp)
10000e09f:	48 89 cf 	movq	%rcx, %rdi
10000e0a2:	e8 4b 5d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e0a7:	e9 fb 07 00 00 	jmp	0x10000e8a7
10000e0ac:	48 8b 45 98 	movq	-104(%rbp), %rax
10000e0b0:	48 8b 55 90 	movq	-112(%rbp), %rdx
10000e0b4:	48 8b 35 f5 34 01 00 	movq	79093(%rip), %rsi ## Objc selector ref: respondsToSelector:
10000e0bb:	48 89 c7 	movq	%rax, %rdi
10000e0be:	ff 15 a4 bf 00 00 	callq	*49060(%rip) ## Objc message: -[%rdi respondsToSelector:]
10000e0c4:	a8 01 	testb	$1, %al
10000e0c6:	0f 85 ce 01 00 00 	jne	0x10000e29a
10000e0cc:	48 8b 45 98 	movq	-104(%rbp), %rax
10000e0d0:	48 8b 35 c9 2d 01 00 	movq	77257(%rip), %rsi ## Objc selector ref: class
10000e0d7:	48 89 c7 	movq	%rax, %rdi
10000e0da:	ff 15 88 bf 00 00 	callq	*49032(%rip) ## Objc message: -[%rdi class]
10000e0e0:	48 8b 55 90 	movq	-112(%rbp), %rdx
10000e0e4:	48 8b 35 cd 34 01 00 	movq	79053(%rip), %rsi ## Objc selector ref: instancesRespondToSelector:
10000e0eb:	48 89 c7 	movq	%rax, %rdi
10000e0ee:	ff 15 74 bf 00 00 	callq	*49012(%rip) ## Objc message: -[%rdi instancesRespondToSelector:]
10000e0f4:	a8 01 	testb	$1, %al
10000e0f6:	0f 85 9e 01 00 00 	jne	0x10000e29a
10000e0fc:	48 8b 05 bd 35 01 00 	movq	79293(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000e103:	48 8b 4d 98 	movq	-104(%rbp), %rcx
10000e107:	48 8b 35 92 2d 01 00 	movq	77202(%rip), %rsi ## Objc selector ref: class
10000e10e:	48 89 cf 	movq	%rcx, %rdi
10000e111:	48 89 85 a8 fe ff ff 	movq	%rax, -344(%rbp)
10000e118:	ff 15 4a bf 00 00 	callq	*48970(%rip) ## Objc message: +[NSString class]
10000e11e:	48 89 c7 	movq	%rax, %rdi
10000e121:	e8 f8 5a 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
10000e126:	48 89 c7 	movq	%rax, %rdi
10000e129:	e8 a6 5c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e12e:	48 8d 0d d3 e7 00 00 	leaq	59347(%rip), %rcx ## Objc cfstring ref: @"Unable to find selector -[%@ %@]."
10000e135:	4c 8b 85 78 ff ff ff 	movq	-136(%rbp), %r8
10000e13c:	48 8b 35 7d 2e 01 00 	movq	77437(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000e143:	48 8b bd a8 fe ff ff 	movq	-344(%rbp), %rdi
10000e14a:	48 89 ca 	movq	%rcx, %rdx
10000e14d:	48 89 c1 	movq	%rax, %rcx
10000e150:	48 89 85 a0 fe ff ff 	movq	%rax, -352(%rbp)
10000e157:	b0 00 	movb	$0, %al
10000e159:	ff 15 09 bf 00 00 	callq	*48905(%rip) ## Objc message: -[%rdi stringWithFormat:]
10000e15f:	48 89 c7 	movq	%rax, %rdi
10000e162:	e8 6d 5c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e167:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
10000e16e:	48 8b 85 a0 fe ff ff 	movq	-352(%rbp), %rax
10000e175:	48 89 c7 	movq	%rax, %rdi
10000e178:	ff 15 f2 be 00 00 	callq	*48882(%rip) ## literal pool symbol address: _objc_release
10000e17e:	e9 00 00 00 00 	jmp	0x10000e183
10000e183:	48 8d 05 1e e7 00 00 	leaq	59166(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000e18a:	48 8b b5 50 ff ff ff 	movq	-176(%rbp), %rsi
10000e191:	48 89 c7 	movq	%rax, %rdi
10000e194:	b0 00 	movb	$0, %al
10000e196:	e8 77 5a 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000e19b:	e9 00 00 00 00 	jmp	0x10000e1a0
10000e1a0:	48 83 7d 80 00 	cmpq	$0, -128(%rbp)
10000e1a5:	0f 84 bf 00 00 00 	je	0x10000e26a
10000e1ab:	b8 01 00 00 00 	movl	$1, %eax
10000e1b0:	41 89 c0 	movl	%eax, %r8d
10000e1b3:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000e1b7:	48 8d 55 d0 	leaq	-48(%rbp), %rdx
10000e1bb:	48 8b 35 4e be 00 00 	movq	48718(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000e1c2:	48 8b 3d ef 35 01 00 	movq	79343(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000e1c9:	48 8b 36 	movq	(%rsi), %rsi
10000e1cc:	48 89 75 c8 	movq	%rsi, -56(%rbp)
10000e1d0:	48 8b b5 50 ff ff ff 	movq	-176(%rbp), %rsi
10000e1d7:	48 89 75 d0 	movq	%rsi, -48(%rbp)
10000e1db:	48 8b 35 c6 34 01 00 	movq	79046(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000e1e2:	4c 8b 0d b7 33 01 00 	movq	78775(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000e1e9:	48 89 bd 98 fe ff ff 	movq	%rdi, -360(%rbp)
10000e1f0:	48 89 f7 	movq	%rsi, %rdi
10000e1f3:	4c 89 ce 	movq	%r9, %rsi
10000e1f6:	ff 15 6c be 00 00 	callq	*48748(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000e1fc:	48 89 c7 	movq	%rax, %rdi
10000e1ff:	e8 d0 5b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e204:	48 8d 0d bd e3 00 00 	leaq	58301(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000e20b:	41 ba 01 00 00 00 	movl	$1, %r10d
10000e211:	44 89 d2 	movl	%r10d, %edx
10000e214:	48 8b 35 8d 33 01 00 	movq	78733(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000e21b:	48 8b bd 98 fe ff ff 	movq	-360(%rbp), %rdi
10000e222:	48 89 95 90 fe ff ff 	movq	%rdx, -368(%rbp)
10000e229:	48 89 ca 	movq	%rcx, %rdx
10000e22c:	48 8b 8d 90 fe ff ff 	movq	-368(%rbp), %rcx
10000e233:	49 89 c0 	movq	%rax, %r8
10000e236:	48 89 85 88 fe ff ff 	movq	%rax, -376(%rbp)
10000e23d:	ff 15 25 be 00 00 	callq	*48677(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000e243:	48 89 c7 	movq	%rax, %rdi
10000e246:	e8 89 5b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e24b:	48 89 c7 	movq	%rax, %rdi
10000e24e:	e8 0f 5b 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000e253:	48 8b 4d 80 	movq	-128(%rbp), %rcx
10000e257:	48 89 01 	movq	%rax, (%rcx)
10000e25a:	48 8b 85 88 fe ff ff 	movq	-376(%rbp), %rax
10000e261:	48 89 c7 	movq	%rax, %rdi
10000e264:	ff 15 06 be 00 00 	callq	*48646(%rip) ## literal pool symbol address: _objc_release
10000e26a:	e9 00 00 00 00 	jmp	0x10000e26f
10000e26f:	e9 00 00 00 00 	jmp	0x10000e274
10000e274:	31 c0 	xorl	%eax, %eax
10000e276:	89 c6 	movl	%eax, %esi
10000e278:	48 8d 8d 50 ff ff ff 	leaq	-176(%rbp), %rcx
10000e27f:	c6 45 a7 00 	movb	$0, -89(%rbp)
10000e283:	c7 85 6c ff ff ff 01 00 00 00 	movl	$1, -148(%rbp)
10000e28d:	48 89 cf 	movq	%rcx, %rdi
10000e290:	e8 5d 5b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e295:	e9 0d 06 00 00 	jmp	0x10000e8a7
10000e29a:	48 8b 45 98 	movq	-104(%rbp), %rax
10000e29e:	48 89 c7 	movq	%rax, %rdi
10000e2a1:	e8 6a 5b 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
10000e2a6:	48 89 c7 	movq	%rax, %rdi
10000e2a9:	e8 d0 59 00 00 	callq	0x100013c7e ## symbol stub for: _class_isMetaClass
10000e2ae:	a8 01 	testb	$1, %al
10000e2b0:	0f 85 05 00 00 00 	jne	0x10000e2bb
10000e2b6:	e9 de 05 00 00 	jmp	0x10000e899
10000e2bb:	48 8b 45 98 	movq	-104(%rbp), %rax
10000e2bf:	48 8b 35 da 2b 01 00 	movq	76762(%rip), %rsi ## Objc selector ref: class
10000e2c6:	48 89 c7 	movq	%rax, %rdi
10000e2c9:	ff 15 99 bd 00 00 	callq	*48537(%rip) ## Objc message: -[%rdi class]
10000e2cf:	48 89 85 48 ff ff ff 	movq	%rax, -184(%rbp)
10000e2d6:	e8 c5 0f 00 00 	callq	_aspect_getSwizzledClassesDict
10000e2db:	48 89 c7 	movq	%rax, %rdi
10000e2de:	e8 f1 5a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e2e3:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000e2ea:	48 8b 45 98 	movq	-104(%rbp), %rax
10000e2ee:	48 8b 35 ab 2b 01 00 	movq	76715(%rip), %rsi ## Objc selector ref: class
10000e2f5:	48 89 c7 	movq	%rax, %rdi
10000e2f8:	ff 15 6a bd 00 00 	callq	*48490(%rip) ## Objc message: -[%rdi class]
10000e2fe:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000e305:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10000e30c:	48 8b 95 38 ff ff ff 	movq	-200(%rbp), %rdx
10000e313:	48 8b 35 a6 32 01 00 	movq	78502(%rip), %rsi ## Objc selector ref: objectForKeyedSubscript:
10000e31a:	48 89 c7 	movq	%rax, %rdi
10000e31d:	ff 15 45 bd 00 00 	callq	*48453(%rip) ## Objc message: -[%rdi objectForKeyedSubscript:]
10000e323:	48 89 c7 	movq	%rax, %rdi
10000e326:	e8 a9 5a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e32b:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
10000e332:	48 8b 85 30 ff ff ff 	movq	-208(%rbp), %rax
10000e339:	48 8b 35 a8 30 01 00 	movq	77992(%rip), %rsi ## Objc selector ref: selectorNames
10000e340:	48 89 c7 	movq	%rax, %rdi
10000e343:	ff 15 1f bd 00 00 	callq	*48415(%rip) ## Objc message: -[%rdi selectorNames]
10000e349:	48 89 c7 	movq	%rax, %rdi
10000e34c:	e8 83 5a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e351:	48 8b 95 78 ff ff ff 	movq	-136(%rbp), %rdx
10000e358:	48 8b 35 39 32 01 00 	movq	78393(%rip), %rsi ## Objc selector ref: containsObject:
10000e35f:	48 89 c7 	movq	%rax, %rdi
10000e362:	48 89 85 80 fe ff ff 	movq	%rax, -384(%rbp)
10000e369:	ff 15 f9 bc 00 00 	callq	*48377(%rip) ## Objc message: -[%rdi containsObject:]
10000e36f:	48 8b 95 80 fe ff ff 	movq	-384(%rbp), %rdx
10000e376:	48 89 d7 	movq	%rdx, %rdi
10000e379:	88 85 7f fe ff ff 	movb	%al, -385(%rbp)
10000e37f:	ff 15 eb bc 00 00 	callq	*48363(%rip) ## literal pool symbol address: _objc_release
10000e385:	8a 85 7f fe ff ff 	movb	-385(%rbp), %al
10000e38b:	a8 01 	testb	$1, %al
10000e38d:	0f 85 05 00 00 00 	jne	0x10000e398
10000e393:	e9 dd 02 00 00 	jmp	0x10000e675
10000e398:	48 8b 85 30 ff ff ff 	movq	-208(%rbp), %rax
10000e39f:	48 8b 35 4a 30 01 00 	movq	77898(%rip), %rsi ## Objc selector ref: parentEntry
10000e3a6:	48 89 c7 	movq	%rax, %rdi
10000e3a9:	ff 15 b9 bc 00 00 	callq	*48313(%rip) ## Objc message: -[%rdi parentEntry]
10000e3af:	48 89 c7 	movq	%rax, %rdi
10000e3b2:	e8 1d 5a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e3b7:	48 89 c6 	movq	%rax, %rsi
10000e3ba:	48 89 f7 	movq	%rsi, %rdi
10000e3bd:	48 89 85 70 fe ff ff 	movq	%rax, -400(%rbp)
10000e3c4:	ff 15 a6 bc 00 00 	callq	*48294(%rip) ## literal pool symbol address: _objc_release
10000e3ca:	48 8b 85 70 fe ff ff 	movq	-400(%rbp), %rax
10000e3d1:	48 83 f8 00 	cmpq	$0, %rax
10000e3d5:	0f 84 69 02 00 00 	je	0x10000e644
10000e3db:	48 8b 85 30 ff ff ff 	movq	-208(%rbp), %rax
10000e3e2:	48 8b 35 07 30 01 00 	movq	77831(%rip), %rsi ## Objc selector ref: parentEntry
10000e3e9:	48 89 c7 	movq	%rax, %rdi
10000e3ec:	ff 15 76 bc 00 00 	callq	*48246(%rip) ## Objc message: -[%rdi parentEntry]
10000e3f2:	48 89 c7 	movq	%rax, %rdi
10000e3f5:	e8 da 59 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e3fa:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000e401:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
10000e408:	48 8b 35 e1 2f 01 00 	movq	77793(%rip), %rsi ## Objc selector ref: parentEntry
10000e40f:	48 89 c7 	movq	%rax, %rdi
10000e412:	ff 15 50 bc 00 00 	callq	*48208(%rip) ## Objc message: -[%rdi parentEntry]
10000e418:	48 89 c7 	movq	%rax, %rdi
10000e41b:	e8 b4 59 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e420:	48 89 c6 	movq	%rax, %rsi
10000e423:	48 89 f7 	movq	%rsi, %rdi
10000e426:	48 89 85 68 fe ff ff 	movq	%rax, -408(%rbp)
10000e42d:	ff 15 3d bc 00 00 	callq	*48189(%rip) ## literal pool symbol address: _objc_release
10000e433:	48 8b 85 68 fe ff ff 	movq	-408(%rbp), %rax
10000e43a:	48 83 f8 00 	cmpq	$0, %rax
10000e43e:	0f 84 3b 00 00 00 	je	0x10000e47f
10000e444:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
10000e44b:	48 8b 35 9e 2f 01 00 	movq	77726(%rip), %rsi ## Objc selector ref: parentEntry
10000e452:	48 89 c7 	movq	%rax, %rdi
10000e455:	ff 15 0d bc 00 00 	callq	*48141(%rip) ## Objc message: -[%rdi parentEntry]
10000e45b:	48 89 c7 	movq	%rax, %rdi
10000e45e:	e8 71 59 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e463:	48 8b b5 28 ff ff ff 	movq	-216(%rbp), %rsi
10000e46a:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000e471:	48 89 f7 	movq	%rsi, %rdi
10000e474:	ff 15 f6 bb 00 00 	callq	*48118(%rip) ## literal pool symbol address: _objc_release
10000e47a:	e9 82 ff ff ff 	jmp	0x10000e401
10000e47f:	48 8b 05 3a 32 01 00 	movq	78394(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000e486:	48 8b 8d 78 ff ff ff 	movq	-136(%rbp), %rcx
10000e48d:	48 8b 95 28 ff ff ff 	movq	-216(%rbp), %rdx
10000e494:	48 8b 35 45 2f 01 00 	movq	77637(%rip), %rsi ## Objc selector ref: trackedClass
10000e49b:	48 89 d7 	movq	%rdx, %rdi
10000e49e:	48 89 85 60 fe ff ff 	movq	%rax, -416(%rbp)
10000e4a5:	48 89 8d 58 fe ff ff 	movq	%rcx, -424(%rbp)
10000e4ac:	ff 15 b6 bb 00 00 	callq	*48054(%rip) ## Objc message: +[NSString trackedClass]
10000e4b2:	48 89 c7 	movq	%rax, %rdi
10000e4b5:	e8 64 57 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
10000e4ba:	48 89 c7 	movq	%rax, %rdi
10000e4bd:	e8 12 59 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e4c2:	48 8d 0d 5f e4 00 00 	leaq	58463(%rip), %rcx ## Objc cfstring ref: @"Error: %@ already hooked in %@. A method can only be hooked once per class hierarchy."
10000e4c9:	48 8b 35 f0 2a 01 00 	movq	76528(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000e4d0:	48 8b 95 60 fe ff ff 	movq	-416(%rbp), %rdx
10000e4d7:	48 89 d7 	movq	%rdx, %rdi
10000e4da:	48 89 ca 	movq	%rcx, %rdx
10000e4dd:	48 8b 8d 58 fe ff ff 	movq	-424(%rbp), %rcx
10000e4e4:	49 89 c0 	movq	%rax, %r8
10000e4e7:	48 89 85 50 fe ff ff 	movq	%rax, -432(%rbp)
10000e4ee:	b0 00 	movb	$0, %al
10000e4f0:	ff 15 72 bb 00 00 	callq	*47986(%rip) ## Objc message: -[%rdi stringWithFormat:]
10000e4f6:	48 89 c7 	movq	%rax, %rdi
10000e4f9:	e8 d6 58 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e4fe:	48 89 85 20 ff ff ff 	movq	%rax, -224(%rbp)
10000e505:	48 8b 85 50 fe ff ff 	movq	-432(%rbp), %rax
10000e50c:	48 89 c7 	movq	%rax, %rdi
10000e50f:	ff 15 5b bb 00 00 	callq	*47963(%rip) ## literal pool symbol address: _objc_release
10000e515:	e9 00 00 00 00 	jmp	0x10000e51a
10000e51a:	48 8d 05 87 e3 00 00 	leaq	58247(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000e521:	48 8b b5 20 ff ff ff 	movq	-224(%rbp), %rsi
10000e528:	48 89 c7 	movq	%rax, %rdi
10000e52b:	b0 00 	movb	$0, %al
10000e52d:	e8 e0 56 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000e532:	e9 00 00 00 00 	jmp	0x10000e537
10000e537:	48 83 7d 80 00 	cmpq	$0, -128(%rbp)
10000e53c:	0f 84 bf 00 00 00 	je	0x10000e601
10000e542:	b8 01 00 00 00 	movl	$1, %eax
10000e547:	41 89 c0 	movl	%eax, %r8d
10000e54a:	48 8d 4d b8 	leaq	-72(%rbp), %rcx
10000e54e:	48 8d 55 c0 	leaq	-64(%rbp), %rdx
10000e552:	48 8b 35 b7 ba 00 00 	movq	47799(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000e559:	48 8b 3d 58 32 01 00 	movq	78424(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000e560:	48 8b 36 	movq	(%rsi), %rsi
10000e563:	48 89 75 b8 	movq	%rsi, -72(%rbp)
10000e567:	48 8b b5 20 ff ff ff 	movq	-224(%rbp), %rsi
10000e56e:	48 89 75 c0 	movq	%rsi, -64(%rbp)
10000e572:	48 8b 35 2f 31 01 00 	movq	78127(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000e579:	4c 8b 0d 20 30 01 00 	movq	77856(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000e580:	48 89 bd 48 fe ff ff 	movq	%rdi, -440(%rbp)
10000e587:	48 89 f7 	movq	%rsi, %rdi
10000e58a:	4c 89 ce 	movq	%r9, %rsi
10000e58d:	ff 15 d5 ba 00 00 	callq	*47829(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000e593:	48 89 c7 	movq	%rax, %rdi
10000e596:	e8 39 58 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e59b:	48 8d 0d 26 e0 00 00 	leaq	57382(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000e5a2:	41 ba 03 00 00 00 	movl	$3, %r10d
10000e5a8:	44 89 d2 	movl	%r10d, %edx
10000e5ab:	48 8b 35 f6 2f 01 00 	movq	77814(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000e5b2:	48 8b bd 48 fe ff ff 	movq	-440(%rbp), %rdi
10000e5b9:	48 89 95 40 fe ff ff 	movq	%rdx, -448(%rbp)
10000e5c0:	48 89 ca 	movq	%rcx, %rdx
10000e5c3:	48 8b 8d 40 fe ff ff 	movq	-448(%rbp), %rcx
10000e5ca:	49 89 c0 	movq	%rax, %r8
10000e5cd:	48 89 85 38 fe ff ff 	movq	%rax, -456(%rbp)
10000e5d4:	ff 15 8e ba 00 00 	callq	*47758(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000e5da:	48 89 c7 	movq	%rax, %rdi
10000e5dd:	e8 f2 57 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e5e2:	48 89 c7 	movq	%rax, %rdi
10000e5e5:	e8 78 57 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000e5ea:	48 8b 4d 80 	movq	-128(%rbp), %rcx
10000e5ee:	48 89 01 	movq	%rax, (%rcx)
10000e5f1:	48 8b 85 38 fe ff ff 	movq	-456(%rbp), %rax
10000e5f8:	48 89 c7 	movq	%rax, %rdi
10000e5fb:	ff 15 6f ba 00 00 	callq	*47727(%rip) ## literal pool symbol address: _objc_release
10000e601:	e9 00 00 00 00 	jmp	0x10000e606
10000e606:	e9 00 00 00 00 	jmp	0x10000e60b
10000e60b:	31 c0 	xorl	%eax, %eax
10000e60d:	89 c6 	movl	%eax, %esi
10000e60f:	48 8d 8d 20 ff ff ff 	leaq	-224(%rbp), %rcx
10000e616:	c6 45 a7 00 	movb	$0, -89(%rbp)
10000e61a:	c7 85 6c ff ff ff 01 00 00 00 	movl	$1, -148(%rbp)
10000e624:	48 89 cf 	movq	%rcx, %rdi
10000e627:	e8 c6 57 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e62c:	31 c0 	xorl	%eax, %eax
10000e62e:	89 c6 	movl	%eax, %esi
10000e630:	48 8d 8d 28 ff ff ff 	leaq	-216(%rbp), %rcx
10000e637:	48 89 cf 	movq	%rcx, %rdi
10000e63a:	e8 b3 57 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e63f:	e9 3b 00 00 00 	jmp	0x10000e67f
10000e644:	48 8b 85 48 ff ff ff 	movq	-184(%rbp), %rax
10000e64b:	48 3b 85 38 ff ff ff 	cmpq	-200(%rbp), %rax
10000e652:	0f 85 13 00 00 00 	jne	0x10000e66b
10000e658:	c6 45 a7 01 	movb	$1, -89(%rbp)
10000e65c:	c7 85 6c ff ff ff 01 00 00 00 	movl	$1, -148(%rbp)
10000e666:	e9 14 00 00 00 	jmp	0x10000e67f
10000e66b:	e9 00 00 00 00 	jmp	0x10000e670
10000e670:	e9 00 00 00 00 	jmp	0x10000e675
10000e675:	c7 85 6c ff ff ff 00 00 00 00 	movl	$0, -148(%rbp)
10000e67f:	31 c0 	xorl	%eax, %eax
10000e681:	89 c6 	movl	%eax, %esi
10000e683:	48 8d bd 30 ff ff ff 	leaq	-208(%rbp), %rdi
10000e68a:	e8 63 57 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e68f:	8b 85 6c ff ff ff 	movl	-148(%rbp), %eax
10000e695:	85 c0 	testl	%eax, %eax
10000e697:	0f 85 d4 01 00 00 	jne	0x10000e871
10000e69d:	e9 00 00 00 00 	jmp	0x10000e6a2
10000e6a2:	e9 00 00 00 00 	jmp	0x10000e6a7
10000e6a7:	48 8b bd 38 ff ff ff 	movq	-200(%rbp), %rdi
10000e6ae:	e8 c5 55 00 00 	callq	0x100013c78 ## symbol stub for: _class_getSuperclass
10000e6b3:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000e6ba:	48 83 f8 00 	cmpq	$0, %rax
10000e6be:	0f 85 41 fc ff ff 	jne	0x10000e305
10000e6c4:	48 8b 85 48 ff ff ff 	movq	-184(%rbp), %rax
10000e6cb:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000e6d2:	48 c7 85 18 ff ff ff 00 00 00 00 	movq	$0, -232(%rbp)
10000e6dd:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10000e6e4:	48 8b 95 38 ff ff ff 	movq	-200(%rbp), %rdx
10000e6eb:	48 8b 35 ce 2e 01 00 	movq	77518(%rip), %rsi ## Objc selector ref: objectForKeyedSubscript:
10000e6f2:	48 89 c7 	movq	%rax, %rdi
10000e6f5:	ff 15 6d b9 00 00 	callq	*47469(%rip) ## Objc message: -[%rdi objectForKeyedSubscript:]
10000e6fb:	48 89 c7 	movq	%rax, %rdi
10000e6fe:	e8 d1 56 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e703:	48 89 85 10 ff ff ff 	movq	%rax, -240(%rbp)
10000e70a:	48 83 bd 10 ff ff ff 00 	cmpq	$0, -240(%rbp)
10000e712:	0f 85 82 00 00 00 	jne	0x10000e79a
10000e718:	48 8b 05 a1 30 01 00 	movq	77985(%rip), %rax ## Objc class ref: AspectTracker
10000e71f:	48 8b 35 92 27 01 00 	movq	75666(%rip), %rsi ## Objc selector ref: alloc
10000e726:	48 89 c7 	movq	%rax, %rdi
10000e729:	ff 15 39 b9 00 00 	callq	*47417(%rip) ## Objc message: +[AspectTracker alloc]
10000e72f:	48 8b 95 38 ff ff ff 	movq	-200(%rbp), %rdx
10000e736:	48 8b 8d 18 ff ff ff 	movq	-232(%rbp), %rcx
10000e73d:	48 8b 35 84 2e 01 00 	movq	77444(%rip), %rsi ## Objc selector ref: initWithTrackedClass:parent:
10000e744:	48 89 c7 	movq	%rax, %rdi
10000e747:	ff 15 1b b9 00 00 	callq	*47387(%rip) ## Objc message: -[%rdi initWithTrackedClass:parent:]
10000e74d:	48 8b 8d 10 ff ff ff 	movq	-240(%rbp), %rcx
10000e754:	48 89 85 10 ff ff ff 	movq	%rax, -240(%rbp)
10000e75b:	48 89 cf 	movq	%rcx, %rdi
10000e75e:	ff 15 0c b9 00 00 	callq	*47372(%rip) ## literal pool symbol address: _objc_release
10000e764:	48 8b 85 10 ff ff ff 	movq	-240(%rbp), %rax
10000e76b:	48 8b 8d 40 ff ff ff 	movq	-192(%rbp), %rcx
10000e772:	48 8b 95 38 ff ff ff 	movq	-200(%rbp), %rdx
10000e779:	48 8b 35 50 2e 01 00 	movq	77392(%rip), %rsi ## Objc selector ref: setObject:forKeyedSubscript:
10000e780:	48 89 cf 	movq	%rcx, %rdi
10000e783:	48 89 95 30 fe ff ff 	movq	%rdx, -464(%rbp)
10000e78a:	48 89 c2 	movq	%rax, %rdx
10000e78d:	48 8b 8d 30 fe ff ff 	movq	-464(%rbp), %rcx
10000e794:	ff 15 ce b8 00 00 	callq	*47310(%rip) ## Objc message: -[%rdi setObject:forKeyedSubscript:]
10000e79a:	48 8b 85 10 ff ff ff 	movq	-240(%rbp), %rax
10000e7a1:	48 8b 35 40 2c 01 00 	movq	76864(%rip), %rsi ## Objc selector ref: selectorNames
10000e7a8:	48 89 c7 	movq	%rax, %rdi
10000e7ab:	ff 15 b7 b8 00 00 	callq	*47287(%rip) ## Objc message: -[%rdi selectorNames]
10000e7b1:	48 89 c7 	movq	%rax, %rdi
10000e7b4:	e8 1b 56 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e7b9:	48 8b b5 78 ff ff ff 	movq	-136(%rbp), %rsi
10000e7c0:	48 8b 3d 91 27 01 00 	movq	75665(%rip), %rdi ## Objc selector ref: addObject:
10000e7c7:	48 89 c1 	movq	%rax, %rcx
10000e7ca:	48 89 bd 28 fe ff ff 	movq	%rdi, -472(%rbp)
10000e7d1:	48 89 cf 	movq	%rcx, %rdi
10000e7d4:	48 8b 8d 28 fe ff ff 	movq	-472(%rbp), %rcx
10000e7db:	48 89 b5 20 fe ff ff 	movq	%rsi, -480(%rbp)
10000e7e2:	48 89 ce 	movq	%rcx, %rsi
10000e7e5:	48 8b 95 20 fe ff ff 	movq	-480(%rbp), %rdx
10000e7ec:	48 89 85 18 fe ff ff 	movq	%rax, -488(%rbp)
10000e7f3:	ff 15 6f b8 00 00 	callq	*47215(%rip) ## Objc message: -[%rdi addObject:]
10000e7f9:	48 8b 85 18 fe ff ff 	movq	-488(%rbp), %rax
10000e800:	48 89 c7 	movq	%rax, %rdi
10000e803:	ff 15 67 b8 00 00 	callq	*47207(%rip) ## literal pool symbol address: _objc_release
10000e809:	48 8d 85 18 ff ff ff 	leaq	-232(%rbp), %rax
10000e810:	48 8b 8d 10 ff ff ff 	movq	-240(%rbp), %rcx
10000e817:	48 89 c7 	movq	%rax, %rdi
10000e81a:	48 89 ce 	movq	%rcx, %rsi
10000e81d:	e8 d0 55 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e822:	45 31 c0 	xorl	%r8d, %r8d
10000e825:	44 89 c6 	movl	%r8d, %esi
10000e828:	48 8d 85 10 ff ff ff 	leaq	-240(%rbp), %rax
10000e82f:	48 89 c7 	movq	%rax, %rdi
10000e832:	e8 bb 55 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e837:	48 8b bd 38 ff ff ff 	movq	-200(%rbp), %rdi
10000e83e:	e8 35 54 00 00 	callq	0x100013c78 ## symbol stub for: _class_getSuperclass
10000e843:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
10000e84a:	48 83 f8 00 	cmpq	$0, %rax
10000e84e:	0f 85 89 fe ff ff 	jne	0x10000e6dd
10000e854:	31 c0 	xorl	%eax, %eax
10000e856:	89 c6 	movl	%eax, %esi
10000e858:	48 8d 8d 18 ff ff ff 	leaq	-232(%rbp), %rcx
10000e85f:	48 89 cf 	movq	%rcx, %rdi
10000e862:	e8 8b 55 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e867:	c7 85 6c ff ff ff 00 00 00 00 	movl	$0, -148(%rbp)
10000e871:	31 c0 	xorl	%eax, %eax
10000e873:	89 c6 	movl	%eax, %esi
10000e875:	48 8d bd 40 ff ff ff 	leaq	-192(%rbp), %rdi
10000e87c:	e8 71 55 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e881:	8b 85 6c ff ff ff 	movl	-148(%rbp), %eax
10000e887:	85 c0 	testl	%eax, %eax
10000e889:	0f 85 18 00 00 00 	jne	0x10000e8a7
10000e88f:	e9 00 00 00 00 	jmp	0x10000e894
10000e894:	e9 00 00 00 00 	jmp	0x10000e899
10000e899:	c6 45 a7 01 	movb	$1, -89(%rbp)
10000e89d:	c7 85 6c ff ff ff 01 00 00 00 	movl	$1, -148(%rbp)
10000e8a7:	31 c0 	xorl	%eax, %eax
10000e8a9:	89 c6 	movl	%eax, %esi
10000e8ab:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
10000e8b2:	48 89 cf 	movq	%rcx, %rdi
10000e8b5:	e8 38 55 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e8ba:	31 c0 	xorl	%eax, %eax
10000e8bc:	89 c6 	movl	%eax, %esi
10000e8be:	48 8d 4d 98 	leaq	-104(%rbp), %rcx
10000e8c2:	48 89 cf 	movq	%rcx, %rdi
10000e8c5:	e8 28 55 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e8ca:	8a 55 a7 	movb	-89(%rbp), %dl
10000e8cd:	48 8b 0d 64 b7 00 00 	movq	46948(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000e8d4:	48 8b 09 	movq	(%rcx), %rcx
10000e8d7:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000e8db:	48 39 f1 	cmpq	%rsi, %rcx
10000e8de:	88 95 17 fe ff ff 	movb	%dl, -489(%rbp)
10000e8e4:	0f 85 14 00 00 00 	jne	0x10000e8fe
10000e8ea:	8a 85 17 fe ff ff 	movb	-489(%rbp), %al
10000e8f0:	24 01 	andb	$1, %al
10000e8f2:	0f b6 c0 	movzbl	%al, %eax
10000e8f5:	48 81 c4 f0 01 00 00 	addq	$496, %rsp
10000e8fc:	5d 	popq	%rbp
10000e8fd:	c3 	retq
10000e8fe:	e8 45 53 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
10000e903:	0f 0b 	ud2
10000e905:	66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_getContainerForObject:
10000e910:	55 	pushq	%rbp
10000e911:	48 89 e5 	movq	%rsp, %rbp
10000e914:	48 81 ec 90 00 00 00 	subq	$144, %rsp
10000e91b:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10000e91f:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
10000e927:	48 89 7d c8 	movq	%rdi, -56(%rbp)
10000e92b:	48 89 c7 	movq	%rax, %rdi
10000e92e:	48 8b 45 c8 	movq	-56(%rbp), %rax
10000e932:	48 89 75 c0 	movq	%rsi, -64(%rbp)
10000e936:	48 89 c6 	movq	%rax, %rsi
10000e939:	e8 b4 54 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e93e:	48 8b 45 c0 	movq	-64(%rbp), %rax
10000e942:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000e946:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
10000e94b:	0f 95 c0 	setne	%al
10000e94e:	34 ff 	xorb	$-1, %al
10000e950:	24 01 	andb	$1, %al
10000e952:	0f b6 c8 	movzbl	%al, %ecx
10000e955:	48 63 d1 	movslq	%ecx, %rdx
10000e958:	48 83 fa 00 	cmpq	$0, %rdx
10000e95c:	0f 84 73 01 00 00 	je	0x10000ead5
10000e962:	48 8d 15 ae 79 00 00 	leaq	31150(%rip), %rdx ## literal pool for: "AspectsContainer *aspect_getContainerForObject(NSObject *__strong, SEL)"
10000e969:	48 8b 05 50 2d 01 00 	movq	77136(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000e970:	48 8b 35 e1 2a 01 00 	movq	76513(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000e977:	48 89 c7 	movq	%rax, %rdi
10000e97a:	ff 15 e8 b6 00 00 	callq	*46824(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000e980:	48 89 c7 	movq	%rax, %rdi
10000e983:	e8 4c 54 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e988:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000e98c:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10000e991:	0f 84 0d 00 00 00 	je	0x10000e9a4
10000e997:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000e99b:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000e99f:	e9 10 00 00 00 	jmp	0x10000e9b4
10000e9a4:	48 8d 05 bd dc 00 00 	leaq	56509(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000e9ab:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000e9af:	e9 00 00 00 00 	jmp	0x10000e9b4
10000e9b4:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000e9b8:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000e9bc:	48 89 cf 	movq	%rcx, %rdi
10000e9bf:	48 89 c6 	movq	%rax, %rsi
10000e9c2:	e8 2b 54 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000e9c7:	48 8d 15 bf 74 00 00 	leaq	29887(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000e9ce:	48 8b 05 eb 2c 01 00 	movq	77035(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000e9d5:	48 8b 35 7c 2a 01 00 	movq	76412(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000e9dc:	48 89 c7 	movq	%rax, %rdi
10000e9df:	ff 15 83 b6 00 00 	callq	*46723(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000e9e5:	48 89 c7 	movq	%rax, %rdi
10000e9e8:	e8 e7 53 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000e9ed:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000e9f1:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
10000e9f6:	0f 84 0d 00 00 00 	je	0x10000ea09
10000e9fc:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000ea00:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000ea04:	e9 10 00 00 00 	jmp	0x10000ea19
10000ea09:	48 8d 05 78 dc 00 00 	leaq	56440(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000ea10:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000ea14:	e9 00 00 00 00 	jmp	0x10000ea19
10000ea19:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000ea1d:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10000ea21:	48 89 cf 	movq	%rcx, %rdi
10000ea24:	48 89 c6 	movq	%rax, %rsi
10000ea27:	e8 c6 53 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ea2c:	48 8b 05 6d 2d 01 00 	movq	77165(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000ea33:	48 8b 35 46 2a 01 00 	movq	76358(%rip), %rsi ## Objc selector ref: currentHandler
10000ea3a:	48 89 c7 	movq	%rax, %rdi
10000ea3d:	ff 15 25 b6 00 00 	callq	*46629(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000ea43:	48 89 c7 	movq	%rax, %rdi
10000ea46:	e8 89 53 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ea4b:	ba 0e 02 00 00 	movl	$526, %edx
10000ea50:	41 89 d0 	movl	%edx, %r8d
10000ea53:	48 8d 0d 4e dc 00 00 	leaq	56398(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000ea5a:	48 8d 35 87 dd 00 00 	leaq	56711(%rip), %rsi ## Objc cfstring ref: @"self"
10000ea61:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10000ea65:	48 8b 7d e0 	movq	-32(%rbp), %rdi
10000ea69:	4c 8b 0d 18 2a 01 00 	movq	76312(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000ea70:	49 89 c2 	movq	%rax, %r10
10000ea73:	48 89 7d a8 	movq	%rdi, -88(%rbp)
10000ea77:	4c 89 d7 	movq	%r10, %rdi
10000ea7a:	48 89 75 a0 	movq	%rsi, -96(%rbp)
10000ea7e:	4c 89 ce 	movq	%r9, %rsi
10000ea81:	4c 8b 4d a8 	movq	-88(%rbp), %r9
10000ea85:	48 89 4d 98 	movq	%rcx, -104(%rbp)
10000ea89:	4c 89 c9 	movq	%r9, %rcx
10000ea8c:	4c 8b 4d 98 	movq	-104(%rbp), %r9
10000ea90:	4c 8b 55 a0 	movq	-96(%rbp), %r10
10000ea94:	4c 89 14 24 	movq	%r10, (%rsp)
10000ea98:	48 89 45 90 	movq	%rax, -112(%rbp)
10000ea9c:	b0 00 	movb	$0, %al
10000ea9e:	ff 15 c4 b5 00 00 	callq	*46532(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000eaa4:	48 8b 4d 90 	movq	-112(%rbp), %rcx
10000eaa8:	48 89 cf 	movq	%rcx, %rdi
10000eaab:	ff 15 bf b5 00 00 	callq	*46527(%rip) ## literal pool symbol address: _objc_release
10000eab1:	45 31 db 	xorl	%r11d, %r11d
10000eab4:	44 89 de 	movl	%r11d, %esi
10000eab7:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10000eabb:	48 89 cf 	movq	%rcx, %rdi
10000eabe:	e8 2f 53 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000eac3:	45 31 db 	xorl	%r11d, %r11d
10000eac6:	44 89 de 	movl	%r11d, %esi
10000eac9:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000eacd:	48 89 cf 	movq	%rcx, %rdi
10000ead0:	e8 1d 53 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ead5:	e9 00 00 00 00 	jmp	0x10000eada
10000eada:	e9 00 00 00 00 	jmp	0x10000eadf
10000eadf:	48 8b 7d f0 	movq	-16(%rbp), %rdi
10000eae3:	e8 78 08 00 00 	callq	_aspect_aliasForSelector
10000eae8:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000eaec:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000eaf0:	48 8b 75 d8 	movq	-40(%rbp), %rsi
10000eaf4:	48 89 c7 	movq	%rax, %rdi
10000eaf7:	e8 9c 52 00 00 	callq	0x100013d98 ## symbol stub for: _objc_getAssociatedObject
10000eafc:	48 89 c7 	movq	%rax, %rdi
10000eaff:	e8 d0 52 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000eb04:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000eb08:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
10000eb0d:	0f 85 49 00 00 00 	jne	0x10000eb5c
10000eb13:	48 8b 05 ae 2c 01 00 	movq	76974(%rip), %rax ## Objc class ref: AspectsContainer
10000eb1a:	48 8b 35 4f 23 01 00 	movq	74575(%rip), %rsi ## Objc selector ref: new
10000eb21:	48 89 c7 	movq	%rax, %rdi
10000eb24:	ff 15 3e b5 00 00 	callq	*46398(%rip) ## Objc message: +[AspectsContainer new]
10000eb2a:	48 8b 75 d0 	movq	-48(%rbp), %rsi
10000eb2e:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000eb32:	48 89 f7 	movq	%rsi, %rdi
10000eb35:	ff 15 35 b5 00 00 	callq	*46389(%rip) ## literal pool symbol address: _objc_release
10000eb3b:	b9 01 03 00 00 	movl	$769, %ecx
10000eb40:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000eb44:	48 8b 75 d8 	movq	-40(%rbp), %rsi
10000eb48:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000eb4c:	48 89 7d 88 	movq	%rdi, -120(%rbp)
10000eb50:	48 89 c7 	movq	%rax, %rdi
10000eb53:	48 8b 55 88 	movq	-120(%rbp), %rdx
10000eb57:	e8 84 52 00 00 	callq	0x100013de0 ## symbol stub for: _objc_setAssociatedObject
10000eb5c:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10000eb60:	48 8b 05 11 b5 00 00 	movq	46353(%rip), %rax ## literal pool symbol address: _objc_retain
10000eb67:	ff d0 	callq	*%rax
10000eb69:	31 c9 	xorl	%ecx, %ecx
10000eb6b:	89 cf 	movl	%ecx, %edi
10000eb6d:	48 8d 55 d0 	leaq	-48(%rbp), %rdx
10000eb71:	48 89 7d 80 	movq	%rdi, -128(%rbp)
10000eb75:	48 89 d7 	movq	%rdx, %rdi
10000eb78:	48 8b 75 80 	movq	-128(%rbp), %rsi
10000eb7c:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
10000eb83:	e8 6a 52 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000eb88:	48 8d 7d f8 	leaq	-8(%rbp), %rdi
10000eb8c:	48 8b 75 80 	movq	-128(%rbp), %rsi
10000eb90:	e8 5d 52 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000eb95:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000eb9c:	48 89 c7 	movq	%rax, %rdi
10000eb9f:	48 81 c4 90 00 00 00 	addq	$144, %rsp
10000eba6:	5d 	popq	%rbp
10000eba7:	e9 c8 51 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000ebac:	0f 1f 40 00 	nopl	(%rax)
_aspect_prepareClassAndHookSelector:
10000ebb0:	55 	pushq	%rbp
10000ebb1:	48 89 e5 	movq	%rsp, %rbp
10000ebb4:	41 56 	pushq	%r14
10000ebb6:	53 	pushq	%rbx
10000ebb7:	48 81 ec 40 01 00 00 	subq	$320, %rsp
10000ebbe:	48 8d 45 e8 	leaq	-24(%rbp), %rax
10000ebc2:	48 c7 45 e8 00 00 00 00 	movq	$0, -24(%rbp)
10000ebca:	48 89 7d 80 	movq	%rdi, -128(%rbp)
10000ebce:	48 89 c7 	movq	%rax, %rdi
10000ebd1:	48 8b 45 80 	movq	-128(%rbp), %rax
10000ebd5:	48 89 b5 78 ff ff ff 	movq	%rsi, -136(%rbp)
10000ebdc:	48 89 c6 	movq	%rax, %rsi
10000ebdf:	48 89 95 70 ff ff ff 	movq	%rdx, -144(%rbp)
10000ebe6:	e8 07 52 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ebeb:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000ebf2:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000ebf6:	48 8b 95 70 ff ff ff 	movq	-144(%rbp), %rdx
10000ebfd:	48 89 55 d8 	movq	%rdx, -40(%rbp)
10000ec01:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
10000ec06:	0f 95 c0 	setne	%al
10000ec09:	34 ff 	xorb	$-1, %al
10000ec0b:	24 01 	andb	$1, %al
10000ec0d:	0f b6 c8 	movzbl	%al, %ecx
10000ec10:	48 63 d1 	movslq	%ecx, %rdx
10000ec13:	48 83 fa 00 	cmpq	$0, %rdx
10000ec17:	0f 84 9d 01 00 00 	je	0x10000edba
10000ec1d:	48 8d 15 60 77 00 00 	leaq	30560(%rip), %rdx ## literal pool for: "void aspect_prepareClassAndHookSelector(NSObject *__strong, SEL, NSError *__autoreleasing *)"
10000ec24:	48 8b 05 95 2a 01 00 	movq	76437(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000ec2b:	48 8b 35 26 28 01 00 	movq	75814(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000ec32:	48 89 c7 	movq	%rax, %rdi
10000ec35:	ff 15 2d b4 00 00 	callq	*46125(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000ec3b:	48 89 c7 	movq	%rax, %rdi
10000ec3e:	e8 91 51 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ec43:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000ec47:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
10000ec4c:	0f 84 10 00 00 00 	je	0x10000ec62
10000ec52:	48 8b 45 d0 	movq	-48(%rbp), %rax
10000ec56:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000ec5d:	e9 13 00 00 00 	jmp	0x10000ec75
10000ec62:	48 8d 05 ff d9 00 00 	leaq	55807(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000ec69:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000ec70:	e9 00 00 00 00 	jmp	0x10000ec75
10000ec75:	48 8b 85 68 ff ff ff 	movq	-152(%rbp), %rax
10000ec7c:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
10000ec80:	48 89 cf 	movq	%rcx, %rdi
10000ec83:	48 89 c6 	movq	%rax, %rsi
10000ec86:	e8 67 51 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ec8b:	48 8d 15 fb 71 00 00 	leaq	29179(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000ec92:	48 8b 05 27 2a 01 00 	movq	76327(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000ec99:	48 8b 35 b8 27 01 00 	movq	75704(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000eca0:	48 89 c7 	movq	%rax, %rdi
10000eca3:	ff 15 bf b3 00 00 	callq	*46015(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000eca9:	48 89 c7 	movq	%rax, %rdi
10000ecac:	e8 23 51 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ecb1:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000ecb5:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
10000ecba:	0f 84 10 00 00 00 	je	0x10000ecd0
10000ecc0:	48 8b 45 c8 	movq	-56(%rbp), %rax
10000ecc4:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
10000eccb:	e9 13 00 00 00 	jmp	0x10000ece3
10000ecd0:	48 8d 05 b1 d9 00 00 	leaq	55729(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000ecd7:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
10000ecde:	e9 00 00 00 00 	jmp	0x10000ece3
10000ece3:	48 8b 85 60 ff ff ff 	movq	-160(%rbp), %rax
10000ecea:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000ecee:	48 89 cf 	movq	%rcx, %rdi
10000ecf1:	48 89 c6 	movq	%rax, %rsi
10000ecf4:	e8 f9 50 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ecf9:	48 8b 05 a0 2a 01 00 	movq	76448(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000ed00:	48 8b 35 79 27 01 00 	movq	75641(%rip), %rsi ## Objc selector ref: currentHandler
10000ed07:	48 89 c7 	movq	%rax, %rdi
10000ed0a:	ff 15 58 b3 00 00 	callq	*45912(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000ed10:	48 89 c7 	movq	%rax, %rdi
10000ed13:	e8 bc 50 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ed18:	ba 0e 01 00 00 	movl	$270, %edx
10000ed1d:	41 89 d0 	movl	%edx, %r8d
10000ed20:	48 8d 0d 81 d9 00 00 	leaq	55681(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000ed27:	48 8d 35 ba d9 00 00 	leaq	55738(%rip), %rsi ## Objc cfstring ref: @"selector"
10000ed2e:	48 8b 55 d0 	movq	-48(%rbp), %rdx
10000ed32:	48 8b 7d c8 	movq	-56(%rbp), %rdi
10000ed36:	4c 8b 0d 4b 27 01 00 	movq	75595(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000ed3d:	49 89 c2 	movq	%rax, %r10
10000ed40:	48 89 bd 58 ff ff ff 	movq	%rdi, -168(%rbp)
10000ed47:	4c 89 d7 	movq	%r10, %rdi
10000ed4a:	48 89 b5 50 ff ff ff 	movq	%rsi, -176(%rbp)
10000ed51:	4c 89 ce 	movq	%r9, %rsi
10000ed54:	4c 8b 8d 58 ff ff ff 	movq	-168(%rbp), %r9
10000ed5b:	48 89 8d 48 ff ff ff 	movq	%rcx, -184(%rbp)
10000ed62:	4c 89 c9 	movq	%r9, %rcx
10000ed65:	4c 8b 8d 48 ff ff ff 	movq	-184(%rbp), %r9
10000ed6c:	4c 8b 95 50 ff ff ff 	movq	-176(%rbp), %r10
10000ed73:	4c 89 14 24 	movq	%r10, (%rsp)
10000ed77:	48 89 85 40 ff ff ff 	movq	%rax, -192(%rbp)
10000ed7e:	b0 00 	movb	$0, %al
10000ed80:	ff 15 e2 b2 00 00 	callq	*45794(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000ed86:	48 8b 8d 40 ff ff ff 	movq	-192(%rbp), %rcx
10000ed8d:	48 89 cf 	movq	%rcx, %rdi
10000ed90:	ff 15 da b2 00 00 	callq	*45786(%rip) ## literal pool symbol address: _objc_release
10000ed96:	45 31 db 	xorl	%r11d, %r11d
10000ed99:	44 89 de 	movl	%r11d, %esi
10000ed9c:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000eda0:	48 89 cf 	movq	%rcx, %rdi
10000eda3:	e8 4a 50 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000eda8:	45 31 db 	xorl	%r11d, %r11d
10000edab:	44 89 de 	movl	%r11d, %esi
10000edae:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
10000edb2:	48 89 cf 	movq	%rcx, %rdi
10000edb5:	e8 38 50 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000edba:	e9 00 00 00 00 	jmp	0x10000edbf
10000edbf:	e9 00 00 00 00 	jmp	0x10000edc4
10000edc4:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000edc8:	48 8b 75 d8 	movq	-40(%rbp), %rsi
10000edcc:	e8 af 07 00 00 	callq	_aspect_hookClass
10000edd1:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000edd5:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000edd9:	48 8b 75 e0 	movq	-32(%rbp), %rsi
10000eddd:	e8 8a 4e 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
10000ede2:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000ede6:	48 8b 7d b8 	movq	-72(%rbp), %rdi
10000edea:	e8 5b 4f 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
10000edef:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000edf3:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000edf7:	e8 64 0d 00 00 	callq	_aspect_isMsgForwardIMP
10000edfc:	a8 01 	testb	$1, %al
10000edfe:	0f 85 f0 02 00 00 	jne	0x10000f0f4
10000ee04:	48 8b 7d b8 	movq	-72(%rbp), %rdi
10000ee08:	e8 49 4f 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
10000ee0d:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000ee11:	48 8b 7d e0 	movq	-32(%rbp), %rdi
10000ee15:	e8 46 05 00 00 	callq	_aspect_aliasForSelector
10000ee1a:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000ee1e:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000ee22:	48 8b 55 a0 	movq	-96(%rbp), %rdx
10000ee26:	48 8b 35 8b 27 01 00 	movq	75659(%rip), %rsi ## Objc selector ref: instancesRespondToSelector:
10000ee2d:	ff 15 35 b2 00 00 	callq	*45621(%rip) ## Objc message: -[%rdi instancesRespondToSelector:]
10000ee33:	a8 01 	testb	$1, %al
10000ee35:	0f 85 6f 02 00 00 	jne	0x10000f0aa
10000ee3b:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000ee3f:	48 8b 75 a0 	movq	-96(%rbp), %rsi
10000ee43:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000ee47:	48 89 bd 38 ff ff ff 	movq	%rdi, -200(%rbp)
10000ee4e:	48 89 c7 	movq	%rax, %rdi
10000ee51:	48 89 b5 30 ff ff ff 	movq	%rsi, -208(%rbp)
10000ee58:	e8 ed 4e 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
10000ee5d:	48 8b 4d a8 	movq	-88(%rbp), %rcx
10000ee61:	48 8b bd 38 ff ff ff 	movq	-200(%rbp), %rdi
10000ee68:	48 8b b5 30 ff ff ff 	movq	-208(%rbp), %rsi
10000ee6f:	48 89 c2 	movq	%rax, %rdx
10000ee72:	e8 e3 4d 00 00 	callq	0x100013c5a ## symbol stub for: _class_addMethod
10000ee77:	24 01 	andb	$1, %al
10000ee79:	88 45 9f 	movb	%al, -97(%rbp)
10000ee7c:	8a 45 9f 	movb	-97(%rbp), %al
10000ee7f:	34 ff 	xorb	$-1, %al
10000ee81:	24 01 	andb	$1, %al
10000ee83:	0f b6 c8 	movzbl	%al, %ecx
10000ee86:	48 63 d1 	movslq	%ecx, %rdx
10000ee89:	48 83 fa 00 	cmpq	$0, %rdx
10000ee8d:	0f 84 08 02 00 00 	je	0x10000f09b
10000ee93:	48 8d 15 ea 74 00 00 	leaq	29930(%rip), %rdx ## literal pool for: "void aspect_prepareClassAndHookSelector(NSObject *__strong, SEL, NSError *__autoreleasing *)"
10000ee9a:	48 8b 05 1f 28 01 00 	movq	75807(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000eea1:	48 8b 35 b0 25 01 00 	movq	75184(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000eea8:	48 89 c7 	movq	%rax, %rdi
10000eeab:	ff 15 b7 b1 00 00 	callq	*45495(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000eeb1:	48 89 c7 	movq	%rax, %rdi
10000eeb4:	e8 1b 4f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000eeb9:	48 89 45 90 	movq	%rax, -112(%rbp)
10000eebd:	48 83 7d 90 00 	cmpq	$0, -112(%rbp)
10000eec2:	0f 84 10 00 00 00 	je	0x10000eed8
10000eec8:	48 8b 45 90 	movq	-112(%rbp), %rax
10000eecc:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000eed3:	e9 13 00 00 00 	jmp	0x10000eeeb
10000eed8:	48 8d 05 89 d7 00 00 	leaq	55177(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000eedf:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000eee6:	e9 00 00 00 00 	jmp	0x10000eeeb
10000eeeb:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
10000eef2:	48 8d 4d 90 	leaq	-112(%rbp), %rcx
10000eef6:	48 89 cf 	movq	%rcx, %rdi
10000eef9:	48 89 c6 	movq	%rax, %rsi
10000eefc:	e8 f1 4e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ef01:	48 8d 15 85 6f 00 00 	leaq	28549(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000ef08:	48 8b 05 b1 27 01 00 	movq	75697(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000ef0f:	48 8b 35 42 25 01 00 	movq	75074(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000ef16:	48 89 c7 	movq	%rax, %rdi
10000ef19:	ff 15 49 b1 00 00 	callq	*45385(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000ef1f:	48 89 c7 	movq	%rax, %rdi
10000ef22:	e8 ad 4e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ef27:	48 89 45 88 	movq	%rax, -120(%rbp)
10000ef2b:	48 83 7d 88 00 	cmpq	$0, -120(%rbp)
10000ef30:	0f 84 10 00 00 00 	je	0x10000ef46
10000ef36:	48 8b 45 88 	movq	-120(%rbp), %rax
10000ef3a:	48 89 85 20 ff ff ff 	movq	%rax, -224(%rbp)
10000ef41:	e9 13 00 00 00 	jmp	0x10000ef59
10000ef46:	48 8d 05 3b d7 00 00 	leaq	55099(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000ef4d:	48 89 85 20 ff ff ff 	movq	%rax, -224(%rbp)
10000ef54:	e9 00 00 00 00 	jmp	0x10000ef59
10000ef59:	48 8b 85 20 ff ff ff 	movq	-224(%rbp), %rax
10000ef60:	48 8d 4d 88 	leaq	-120(%rbp), %rcx
10000ef64:	48 89 cf 	movq	%rcx, %rdi
10000ef67:	48 89 c6 	movq	%rax, %rsi
10000ef6a:	e8 83 4e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ef6f:	48 8b 05 2a 28 01 00 	movq	75818(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000ef76:	48 8b 35 03 25 01 00 	movq	75011(%rip), %rsi ## Objc selector ref: currentHandler
10000ef7d:	48 89 c7 	movq	%rax, %rdi
10000ef80:	ff 15 e2 b0 00 00 	callq	*45282(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000ef86:	48 89 c7 	movq	%rax, %rdi
10000ef89:	e8 46 4e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ef8e:	48 8b 55 90 	movq	-112(%rbp), %rdx
10000ef92:	48 8b 4d 88 	movq	-120(%rbp), %rcx
10000ef96:	48 8b 7d e0 	movq	-32(%rbp), %rdi
10000ef9a:	48 89 85 18 ff ff ff 	movq	%rax, -232(%rbp)
10000efa1:	48 89 95 10 ff ff ff 	movq	%rdx, -240(%rbp)
10000efa8:	48 89 8d 08 ff ff ff 	movq	%rcx, -248(%rbp)
10000efaf:	e8 70 4c 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000efb4:	48 89 c7 	movq	%rax, %rdi
10000efb7:	e8 18 4e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000efbc:	48 8b 7d a0 	movq	-96(%rbp), %rdi
10000efc0:	48 89 85 00 ff ff ff 	movq	%rax, -256(%rbp)
10000efc7:	e8 58 4c 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000efcc:	48 89 c7 	movq	%rax, %rdi
10000efcf:	e8 00 4e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000efd4:	41 b8 18 01 00 00 	movl	$280, %r8d
10000efda:	48 8d 0d 87 d9 00 00 	leaq	55687(%rip), %rcx ## Objc cfstring ref: @"Original implementation for %@ is already copied to %@ on %@"
10000efe1:	48 8b 55 c0 	movq	-64(%rbp), %rdx
10000efe5:	48 8b 35 9c 24 01 00 	movq	74908(%rip), %rsi ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000efec:	48 8b bd 18 ff ff ff 	movq	-232(%rbp), %rdi
10000eff3:	4c 8b 8d 10 ff ff ff 	movq	-240(%rbp), %r9
10000effa:	48 89 95 f8 fe ff ff 	movq	%rdx, -264(%rbp)
10000f001:	4c 89 ca 	movq	%r9, %rdx
10000f004:	4c 8b 95 08 ff ff ff 	movq	-248(%rbp), %r10
10000f00b:	48 89 8d f0 fe ff ff 	movq	%rcx, -272(%rbp)
10000f012:	4c 89 d1 	movq	%r10, %rcx
10000f015:	4c 8b 8d f0 fe ff ff 	movq	-272(%rbp), %r9
10000f01c:	4c 8b 9d 00 ff ff ff 	movq	-256(%rbp), %r11
10000f023:	4c 89 1c 24 	movq	%r11, (%rsp)
10000f027:	48 89 44 24 08 	movq	%rax, 8(%rsp)
10000f02c:	48 8b 9d f8 fe ff ff 	movq	-264(%rbp), %rbx
10000f033:	48 89 5c 24 10 	movq	%rbx, 16(%rsp)
10000f038:	48 89 85 e8 fe ff ff 	movq	%rax, -280(%rbp)
10000f03f:	b0 00 	movb	$0, %al
10000f041:	ff 15 21 b0 00 00 	callq	*45089(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000f047:	48 8b 8d e8 fe ff ff 	movq	-280(%rbp), %rcx
10000f04e:	48 89 cf 	movq	%rcx, %rdi
10000f051:	ff 15 19 b0 00 00 	callq	*45081(%rip) ## literal pool symbol address: _objc_release
10000f057:	48 8b 8d 00 ff ff ff 	movq	-256(%rbp), %rcx
10000f05e:	48 89 cf 	movq	%rcx, %rdi
10000f061:	ff 15 09 b0 00 00 	callq	*45065(%rip) ## literal pool symbol address: _objc_release
10000f067:	48 8b 8d 18 ff ff ff 	movq	-232(%rbp), %rcx
10000f06e:	48 89 cf 	movq	%rcx, %rdi
10000f071:	ff 15 f9 af 00 00 	callq	*45049(%rip) ## literal pool symbol address: _objc_release
10000f077:	45 31 f6 	xorl	%r14d, %r14d
10000f07a:	44 89 f6 	movl	%r14d, %esi
10000f07d:	48 8d 4d 88 	leaq	-120(%rbp), %rcx
10000f081:	48 89 cf 	movq	%rcx, %rdi
10000f084:	e8 69 4d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f089:	45 31 f6 	xorl	%r14d, %r14d
10000f08c:	44 89 f6 	movl	%r14d, %esi
10000f08f:	48 8d 4d 90 	leaq	-112(%rbp), %rcx
10000f093:	48 89 cf 	movq	%rcx, %rdi
10000f096:	e8 57 4d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f09b:	e9 00 00 00 00 	jmp	0x10000f0a0
10000f0a0:	e9 00 00 00 00 	jmp	0x10000f0a5
10000f0a5:	e9 00 00 00 00 	jmp	0x10000f0aa
10000f0aa:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000f0ae:	48 8b 75 e0 	movq	-32(%rbp), %rsi
10000f0b2:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000f0b6:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000f0ba:	48 89 bd e0 fe ff ff 	movq	%rdi, -288(%rbp)
10000f0c1:	48 89 c7 	movq	%rax, %rdi
10000f0c4:	48 89 b5 d8 fe ff ff 	movq	%rsi, -296(%rbp)
10000f0cb:	48 89 ce 	movq	%rcx, %rsi
10000f0ce:	e8 cd 0a 00 00 	callq	_aspect_getMsgForwardIMP
10000f0d3:	48 8b 4d a8 	movq	-88(%rbp), %rcx
10000f0d7:	48 8b bd e0 fe ff ff 	movq	-288(%rbp), %rdi
10000f0de:	48 8b b5 d8 fe ff ff 	movq	-296(%rbp), %rsi
10000f0e5:	48 89 c2 	movq	%rax, %rdx
10000f0e8:	e8 97 4b 00 00 	callq	0x100013c84 ## symbol stub for: _class_replaceMethod
10000f0ed:	48 89 85 d0 fe ff ff 	movq	%rax, -304(%rbp)
10000f0f4:	31 c0 	xorl	%eax, %eax
10000f0f6:	89 c6 	movl	%eax, %esi
10000f0f8:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000f0fc:	48 89 cf 	movq	%rcx, %rdi
10000f0ff:	e8 ee 4c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f104:	48 81 c4 40 01 00 00 	addq	$320, %rsp
10000f10b:	5b 	popq	%rbx
10000f10c:	41 5e 	popq	%r14
10000f10e:	5d 	popq	%rbp
10000f10f:	c3 	retq
___copy_helper_block_:
10000f110:	55 	pushq	%rbp
10000f111:	48 89 e5 	movq	%rsp, %rbp
10000f114:	48 83 ec 30 	subq	$48, %rsp
10000f118:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000f11c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000f120:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000f124:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000f128:	48 89 f8 	movq	%rdi, %rax
10000f12b:	48 89 c1 	movq	%rax, %rcx
10000f12e:	48 83 c1 20 	addq	$32, %rcx
10000f132:	48 8b 56 20 	movq	32(%rsi), %rdx
10000f136:	48 c7 47 20 00 00 00 00 	movq	$0, 32(%rdi)
10000f13e:	48 89 7d e8 	movq	%rdi, -24(%rbp)
10000f142:	48 89 cf 	movq	%rcx, %rdi
10000f145:	48 89 75 e0 	movq	%rsi, -32(%rbp)
10000f149:	48 89 d6 	movq	%rdx, %rsi
10000f14c:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000f150:	e8 9d 4c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f155:	ba 08 00 00 00 	movl	$8, %edx
10000f15a:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000f15e:	48 83 c0 30 	addq	$48, %rax
10000f162:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000f166:	48 8b 71 30 	movq	48(%rcx), %rsi
10000f16a:	48 89 c7 	movq	%rax, %rdi
10000f16d:	e8 c4 4a 00 00 	callq	0x100013c36 ## symbol stub for: __Block_object_assign
10000f172:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000f176:	48 83 c0 28 	addq	$40, %rax
10000f17a:	48 8b 4d e0 	movq	-32(%rbp), %rcx
10000f17e:	48 8b 71 28 	movq	40(%rcx), %rsi
10000f182:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000f186:	48 c7 47 28 00 00 00 00 	movq	$0, 40(%rdi)
10000f18e:	48 89 c7 	movq	%rax, %rdi
10000f191:	e8 5c 4c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f196:	48 83 c4 30 	addq	$48, %rsp
10000f19a:	5d 	popq	%rbp
10000f19b:	c3 	retq
10000f19c:	0f 1f 40 00 	nopl	(%rax)
___destroy_helper_block_:
10000f1a0:	55 	pushq	%rbp
10000f1a1:	48 89 e5 	movq	%rsp, %rbp
10000f1a4:	48 83 ec 20 	subq	$32, %rsp
10000f1a8:	31 c0 	xorl	%eax, %eax
10000f1aa:	89 c6 	movl	%eax, %esi
10000f1ac:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000f1b0:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000f1b4:	48 89 f9 	movq	%rdi, %rcx
10000f1b7:	48 89 ca 	movq	%rcx, %rdx
10000f1ba:	48 83 c2 20 	addq	$32, %rdx
10000f1be:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000f1c2:	48 89 d7 	movq	%rdx, %rdi
10000f1c5:	48 89 4d e8 	movq	%rcx, -24(%rbp)
10000f1c9:	e8 24 4c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f1ce:	be 08 00 00 00 	movl	$8, %esi
10000f1d3:	48 8b 4d f0 	movq	-16(%rbp), %rcx
10000f1d7:	48 8b 79 30 	movq	48(%rcx), %rdi
10000f1db:	e8 5c 4a 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
10000f1e0:	31 c0 	xorl	%eax, %eax
10000f1e2:	89 c6 	movl	%eax, %esi
10000f1e4:	48 8b 4d e8 	movq	-24(%rbp), %rcx
10000f1e8:	48 83 c1 28 	addq	$40, %rcx
10000f1ec:	48 89 cf 	movq	%rcx, %rdi
10000f1ef:	e8 fe 4b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f1f4:	48 83 c4 20 	addq	$32, %rsp
10000f1f8:	5d 	popq	%rbp
10000f1f9:	c3 	retq
10000f1fa:	66 0f 1f 44 00 00 	nopw	(%rax,%rax)
___aspect_isSelectorAllowedAndTrack_block_invoke:
10000f200:	55 	pushq	%rbp
10000f201:	48 89 e5 	movq	%rsp, %rbp
10000f204:	48 83 ec 30 	subq	$48, %rsp
10000f208:	48 8d 05 f9 d5 00 00 	leaq	54777(%rip), %rax ## Objc cfstring ref: @"retain"
10000f20f:	48 8d 0d 12 d6 00 00 	leaq	54802(%rip), %rcx ## Objc cfstring ref: @"release"
10000f216:	48 8d 15 2b d6 00 00 	leaq	54827(%rip), %rdx ## Objc cfstring ref: @"autorelease"
10000f21d:	48 8d 35 44 d6 00 00 	leaq	54852(%rip), %rsi ## Objc cfstring ref: @"forwardInvocation:"
10000f224:	45 31 c0 	xorl	%r8d, %r8d
10000f227:	45 89 c1 	movl	%r8d, %r9d
10000f22a:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000f22e:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000f232:	48 8b 3d a7 24 01 00 	movq	74919(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSSet
10000f239:	4c 8b 15 50 23 01 00 	movq	74576(%rip), %r10 ## Objc selector ref: setWithObjects:
10000f240:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000f244:	4c 89 d6 	movq	%r10, %rsi
10000f247:	48 89 55 e0 	movq	%rdx, -32(%rbp)
10000f24b:	48 89 c2 	movq	%rax, %rdx
10000f24e:	4c 8b 45 e0 	movq	-32(%rbp), %r8
10000f252:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000f256:	4c 89 4d d8 	movq	%r9, -40(%rbp)
10000f25a:	49 89 c1 	movq	%rax, %r9
10000f25d:	48 c7 04 24 00 00 00 00 	movq	$0, (%rsp)
10000f265:	b0 00 	movb	$0, %al
10000f267:	ff 15 fb ad 00 00 	callq	*44539(%rip) ## Objc message: +[NSSet setWithObjects:]
10000f26d:	48 89 c7 	movq	%rax, %rdi
10000f270:	e8 5f 4b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f275:	48 8b 0d b4 33 01 00 	movq	_aspect_isSelectorAllowedAndTrack.disallowedSelectorList(%rip), %rcx
10000f27c:	48 89 05 ad 33 01 00 	movq	%rax, _aspect_isSelectorAllowedAndTrack.disallowedSelectorList(%rip)
10000f283:	48 89 cf 	movq	%rcx, %rdi
10000f286:	ff 15 e4 ad 00 00 	callq	*44516(%rip) ## literal pool symbol address: _objc_release
10000f28c:	48 83 c4 30 	addq	$48, %rsp
10000f290:	5d 	popq	%rbp
10000f291:	c3 	retq
10000f292:	66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_getSwizzledClassesDict:
10000f2a0:	55 	pushq	%rbp
10000f2a1:	48 89 e5 	movq	%rsp, %rbp
10000f2a4:	48 83 ec 10 	subq	$16, %rsp
10000f2a8:	48 8d 05 49 be 00 00 	leaq	___block_literal_global.366(%rip), %rax
10000f2af:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
10000f2b3:	48 8d 15 8e 33 01 00 	leaq	_aspect_getSwizzledClassesDict.pred(%rip), %rdx
10000f2ba:	48 89 55 f8 	movq	%rdx, -8(%rbp)
10000f2be:	48 c7 45 f0 00 00 00 00 	movq	$0, -16(%rbp)
10000f2c6:	48 89 cf 	movq	%rcx, %rdi
10000f2c9:	48 89 c6 	movq	%rax, %rsi
10000f2cc:	e8 21 4b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f2d1:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000f2d5:	48 83 38 ff 	cmpq	$-1, (%rax)
10000f2d9:	0f 84 12 00 00 00 	je	0x10000f2f1
10000f2df:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000f2e3:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000f2e7:	e8 e0 49 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
10000f2ec:	e9 00 00 00 00 	jmp	0x10000f2f1
10000f2f1:	31 c0 	xorl	%eax, %eax
10000f2f3:	89 c6 	movl	%eax, %esi
10000f2f5:	48 8d 7d f0 	leaq	-16(%rbp), %rdi
10000f2f9:	e8 f4 4a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f2fe:	48 8b 3d 3b 33 01 00 	movq	_aspect_getSwizzledClassesDict.swizzledClassesDict(%rip), %rdi
10000f305:	48 83 c4 10 	addq	$16, %rsp
10000f309:	5d 	popq	%rbp
10000f30a:	e9 bf 4a 00 00 	jmp	0x100013dce ## symbol stub for: _objc_retainAutoreleaseReturnValue
10000f30f:	90 	nop
___aspect_getSwizzledClassesDict_block_invoke:
10000f310:	55 	pushq	%rbp
10000f311:	48 89 e5 	movq	%rsp, %rbp
10000f314:	48 83 ec 10 	subq	$16, %rsp
10000f318:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000f31c:	48 89 7d f0 	movq	%rdi, -16(%rbp)
10000f320:	48 8b 3d 89 23 01 00 	movq	74633(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableDictionary
10000f327:	48 8b 35 42 1b 01 00 	movq	72514(%rip), %rsi ## Objc selector ref: new
10000f32e:	ff 15 34 ad 00 00 	callq	*44340(%rip) ## Objc message: +[NSMutableDictionary new]
10000f334:	48 8b 35 05 33 01 00 	movq	_aspect_getSwizzledClassesDict.swizzledClassesDict(%rip), %rsi
10000f33b:	48 89 05 fe 32 01 00 	movq	%rax, _aspect_getSwizzledClassesDict.swizzledClassesDict(%rip)
10000f342:	48 89 f7 	movq	%rsi, %rdi
10000f345:	ff 15 25 ad 00 00 	callq	*44325(%rip) ## literal pool symbol address: _objc_release
10000f34b:	48 83 c4 10 	addq	$16, %rsp
10000f34f:	5d 	popq	%rbp
10000f350:	c3 	retq
10000f351:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_aliasForSelector:
10000f360:	55 	pushq	%rbp
10000f361:	48 89 e5 	movq	%rsp, %rbp
10000f364:	48 83 ec 70 	subq	$112, %rsp
10000f368:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000f36c:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
10000f371:	0f 95 c0 	setne	%al
10000f374:	34 ff 	xorb	$-1, %al
10000f376:	24 01 	andb	$1, %al
10000f378:	0f b6 c8 	movzbl	%al, %ecx
10000f37b:	48 63 d1 	movslq	%ecx, %rdx
10000f37e:	48 83 fa 00 	cmpq	$0, %rdx
10000f382:	0f 84 73 01 00 00 	je	0x10000f4fb
10000f388:	48 8d 15 d0 6f 00 00 	leaq	28624(%rip), %rdx ## literal pool for: "SEL aspect_aliasForSelector(SEL)"
10000f38f:	48 8b 05 2a 23 01 00 	movq	74538(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000f396:	48 8b 35 bb 20 01 00 	movq	73915(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000f39d:	48 89 c7 	movq	%rax, %rdi
10000f3a0:	ff 15 c2 ac 00 00 	callq	*44226(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000f3a6:	48 89 c7 	movq	%rax, %rdi
10000f3a9:	e8 26 4a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f3ae:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000f3b2:	48 83 7d f0 00 	cmpq	$0, -16(%rbp)
10000f3b7:	0f 84 0d 00 00 00 	je	0x10000f3ca
10000f3bd:	48 8b 45 f0 	movq	-16(%rbp), %rax
10000f3c1:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000f3c5:	e9 10 00 00 00 	jmp	0x10000f3da
10000f3ca:	48 8d 05 97 d2 00 00 	leaq	53911(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000f3d1:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000f3d5:	e9 00 00 00 00 	jmp	0x10000f3da
10000f3da:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000f3de:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
10000f3e2:	48 89 cf 	movq	%rcx, %rdi
10000f3e5:	48 89 c6 	movq	%rax, %rsi
10000f3e8:	e8 05 4a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f3ed:	48 8d 15 99 6a 00 00 	leaq	27289(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000f3f4:	48 8b 05 c5 22 01 00 	movq	74437(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000f3fb:	48 8b 35 56 20 01 00 	movq	73814(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000f402:	48 89 c7 	movq	%rax, %rdi
10000f405:	ff 15 5d ac 00 00 	callq	*44125(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000f40b:	48 89 c7 	movq	%rax, %rdi
10000f40e:	e8 c1 49 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f413:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000f417:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10000f41c:	0f 84 0d 00 00 00 	je	0x10000f42f
10000f422:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000f426:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000f42a:	e9 10 00 00 00 	jmp	0x10000f43f
10000f42f:	48 8d 05 52 d2 00 00 	leaq	53842(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000f436:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000f43a:	e9 00 00 00 00 	jmp	0x10000f43f
10000f43f:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000f443:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000f447:	48 89 cf 	movq	%rcx, %rdi
10000f44a:	48 89 c6 	movq	%rax, %rsi
10000f44d:	e8 a0 49 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f452:	48 8b 05 47 23 01 00 	movq	74567(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000f459:	48 8b 35 20 20 01 00 	movq	73760(%rip), %rsi ## Objc selector ref: currentHandler
10000f460:	48 89 c7 	movq	%rax, %rdi
10000f463:	ff 15 ff ab 00 00 	callq	*44031(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000f469:	48 89 c7 	movq	%rax, %rdi
10000f46c:	e8 63 49 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f471:	ba a5 00 00 00 	movl	$165, %edx
10000f476:	41 89 d0 	movl	%edx, %r8d
10000f479:	48 8d 0d 28 d2 00 00 	leaq	53800(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000f480:	48 8d 35 61 d2 00 00 	leaq	53857(%rip), %rsi ## Objc cfstring ref: @"selector"
10000f487:	48 8b 55 f0 	movq	-16(%rbp), %rdx
10000f48b:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000f48f:	4c 8b 0d f2 1f 01 00 	movq	73714(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000f496:	49 89 c2 	movq	%rax, %r10
10000f499:	48 89 7d d0 	movq	%rdi, -48(%rbp)
10000f49d:	4c 89 d7 	movq	%r10, %rdi
10000f4a0:	48 89 75 c8 	movq	%rsi, -56(%rbp)
10000f4a4:	4c 89 ce 	movq	%r9, %rsi
10000f4a7:	4c 8b 4d d0 	movq	-48(%rbp), %r9
10000f4ab:	48 89 4d c0 	movq	%rcx, -64(%rbp)
10000f4af:	4c 89 c9 	movq	%r9, %rcx
10000f4b2:	4c 8b 4d c0 	movq	-64(%rbp), %r9
10000f4b6:	4c 8b 55 c8 	movq	-56(%rbp), %r10
10000f4ba:	4c 89 14 24 	movq	%r10, (%rsp)
10000f4be:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000f4c2:	b0 00 	movb	$0, %al
10000f4c4:	ff 15 9e ab 00 00 	callq	*43934(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000f4ca:	48 8b 4d b8 	movq	-72(%rbp), %rcx
10000f4ce:	48 89 cf 	movq	%rcx, %rdi
10000f4d1:	ff 15 99 ab 00 00 	callq	*43929(%rip) ## literal pool symbol address: _objc_release
10000f4d7:	45 31 db 	xorl	%r11d, %r11d
10000f4da:	44 89 de 	movl	%r11d, %esi
10000f4dd:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000f4e1:	48 89 cf 	movq	%rcx, %rdi
10000f4e4:	e8 09 49 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f4e9:	45 31 db 	xorl	%r11d, %r11d
10000f4ec:	44 89 de 	movl	%r11d, %esi
10000f4ef:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
10000f4f3:	48 89 cf 	movq	%rcx, %rdi
10000f4f6:	e8 f7 48 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f4fb:	e9 00 00 00 00 	jmp	0x10000f500
10000f500:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000f504:	e8 1b 47 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
10000f509:	48 89 c7 	movq	%rax, %rdi
10000f50c:	e8 c3 48 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f511:	48 8d 3d f0 d0 00 00 	leaq	53488(%rip), %rdi ## Objc cfstring ref: @"aspects_"
10000f518:	48 8d 0d 29 d4 00 00 	leaq	54313(%rip), %rcx ## Objc cfstring ref: @"_%@"
10000f51f:	48 8b 35 b2 20 01 00 	movq	73906(%rip), %rsi ## Objc selector ref: stringByAppendingFormat:
10000f526:	48 89 ca 	movq	%rcx, %rdx
10000f529:	48 89 c1 	movq	%rax, %rcx
10000f52c:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000f530:	b0 00 	movb	$0, %al
10000f532:	ff 15 30 ab 00 00 	callq	*43824(%rip) ## Objc message: -[%rdi stringByAppendingFormat:]
10000f538:	48 89 c7 	movq	%rax, %rdi
10000f53b:	e8 94 48 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f540:	48 89 c7 	movq	%rax, %rdi
10000f543:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000f547:	e8 cc 46 00 00 	callq	0x100013c18 ## symbol stub for: _NSSelectorFromString
10000f54c:	48 8b 4d a8 	movq	-88(%rbp), %rcx
10000f550:	48 89 cf 	movq	%rcx, %rdi
10000f553:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000f557:	ff 15 13 ab 00 00 	callq	*43795(%rip) ## literal pool symbol address: _objc_release
10000f55d:	48 8b 45 b0 	movq	-80(%rbp), %rax
10000f561:	48 89 c7 	movq	%rax, %rdi
10000f564:	ff 15 06 ab 00 00 	callq	*43782(%rip) ## literal pool symbol address: _objc_release
10000f56a:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000f56e:	48 83 c4 70 	addq	$112, %rsp
10000f572:	5d 	popq	%rbp
10000f573:	c3 	retq
10000f574:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_hookClass:
10000f580:	55 	pushq	%rbp
10000f581:	48 89 e5 	movq	%rsp, %rbp
10000f584:	48 81 ec 10 01 00 00 	subq	$272, %rsp
10000f58b:	48 8d 45 d8 	leaq	-40(%rbp), %rax
10000f58f:	48 8b 0d a2 aa 00 00 	movq	43682(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000f596:	48 8b 09 	movq	(%rcx), %rcx
10000f599:	48 89 4d f8 	movq	%rcx, -8(%rbp)
10000f59d:	48 c7 45 d8 00 00 00 00 	movq	$0, -40(%rbp)
10000f5a5:	48 89 7d 80 	movq	%rdi, -128(%rbp)
10000f5a9:	48 89 c7 	movq	%rax, %rdi
10000f5ac:	48 8b 45 80 	movq	-128(%rbp), %rax
10000f5b0:	48 89 b5 78 ff ff ff 	movq	%rsi, -136(%rbp)
10000f5b7:	48 89 c6 	movq	%rax, %rsi
10000f5ba:	e8 33 48 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f5bf:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
10000f5c6:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000f5ca:	48 83 7d d8 00 	cmpq	$0, -40(%rbp)
10000f5cf:	0f 95 c0 	setne	%al
10000f5d2:	34 ff 	xorb	$-1, %al
10000f5d4:	24 01 	andb	$1, %al
10000f5d6:	0f b6 c8 	movzbl	%al, %ecx
10000f5d9:	48 63 d1 	movslq	%ecx, %rdx
10000f5dc:	48 83 fa 00 	cmpq	$0, %rdx
10000f5e0:	0f 84 9d 01 00 00 	je	0x10000f783
10000f5e6:	48 8d 15 31 6e 00 00 	leaq	28209(%rip), %rdx ## literal pool for: "Class aspect_hookClass(NSObject *__strong, NSError *__autoreleasing *)"
10000f5ed:	48 8b 05 cc 20 01 00 	movq	73932(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000f5f4:	48 8b 35 5d 1e 01 00 	movq	73309(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000f5fb:	48 89 c7 	movq	%rax, %rdi
10000f5fe:	ff 15 64 aa 00 00 	callq	*43620(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000f604:	48 89 c7 	movq	%rax, %rdi
10000f607:	e8 c8 47 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f60c:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000f610:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
10000f615:	0f 84 10 00 00 00 	je	0x10000f62b
10000f61b:	48 8b 45 c8 	movq	-56(%rbp), %rax
10000f61f:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000f626:	e9 13 00 00 00 	jmp	0x10000f63e
10000f62b:	48 8d 05 36 d0 00 00 	leaq	53302(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000f632:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
10000f639:	e9 00 00 00 00 	jmp	0x10000f63e
10000f63e:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
10000f645:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000f649:	48 89 cf 	movq	%rcx, %rdi
10000f64c:	48 89 c6 	movq	%rax, %rsi
10000f64f:	e8 9e 47 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f654:	48 8d 15 32 68 00 00 	leaq	26674(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000f65b:	48 8b 05 5e 20 01 00 	movq	73822(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000f662:	48 8b 35 ef 1d 01 00 	movq	73199(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000f669:	48 89 c7 	movq	%rax, %rdi
10000f66c:	ff 15 f6 a9 00 00 	callq	*43510(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000f672:	48 89 c7 	movq	%rax, %rdi
10000f675:	e8 5a 47 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f67a:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000f67e:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
10000f683:	0f 84 10 00 00 00 	je	0x10000f699
10000f689:	48 8b 45 c0 	movq	-64(%rbp), %rax
10000f68d:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000f694:	e9 13 00 00 00 	jmp	0x10000f6ac
10000f699:	48 8d 05 e8 cf 00 00 	leaq	53224(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000f6a0:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000f6a7:	e9 00 00 00 00 	jmp	0x10000f6ac
10000f6ac:	48 8b 85 68 ff ff ff 	movq	-152(%rbp), %rax
10000f6b3:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000f6b7:	48 89 cf 	movq	%rcx, %rdi
10000f6ba:	48 89 c6 	movq	%rax, %rsi
10000f6bd:	e8 30 47 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f6c2:	48 8b 05 d7 20 01 00 	movq	73943(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000f6c9:	48 8b 35 b0 1d 01 00 	movq	73136(%rip), %rsi ## Objc selector ref: currentHandler
10000f6d0:	48 89 c7 	movq	%rax, %rdi
10000f6d3:	ff 15 8f a9 00 00 	callq	*43407(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000f6d9:	48 89 c7 	movq	%rax, %rdi
10000f6dc:	e8 f3 46 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f6e1:	ba 5c 01 00 00 	movl	$348, %edx
10000f6e6:	41 89 d0 	movl	%edx, %r8d
10000f6e9:	48 8d 0d b8 cf 00 00 	leaq	53176(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000f6f0:	48 8d 35 f1 d0 00 00 	leaq	53489(%rip), %rsi ## Objc cfstring ref: @"self"
10000f6f7:	48 8b 55 c8 	movq	-56(%rbp), %rdx
10000f6fb:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000f6ff:	4c 8b 0d 82 1d 01 00 	movq	73090(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000f706:	49 89 c2 	movq	%rax, %r10
10000f709:	48 89 bd 60 ff ff ff 	movq	%rdi, -160(%rbp)
10000f710:	4c 89 d7 	movq	%r10, %rdi
10000f713:	48 89 b5 58 ff ff ff 	movq	%rsi, -168(%rbp)
10000f71a:	4c 89 ce 	movq	%r9, %rsi
10000f71d:	4c 8b 8d 60 ff ff ff 	movq	-160(%rbp), %r9
10000f724:	48 89 8d 50 ff ff ff 	movq	%rcx, -176(%rbp)
10000f72b:	4c 89 c9 	movq	%r9, %rcx
10000f72e:	4c 8b 8d 50 ff ff ff 	movq	-176(%rbp), %r9
10000f735:	4c 8b 95 58 ff ff ff 	movq	-168(%rbp), %r10
10000f73c:	4c 89 14 24 	movq	%r10, (%rsp)
10000f740:	48 89 85 48 ff ff ff 	movq	%rax, -184(%rbp)
10000f747:	b0 00 	movb	$0, %al
10000f749:	ff 15 19 a9 00 00 	callq	*43289(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000f74f:	48 8b 8d 48 ff ff ff 	movq	-184(%rbp), %rcx
10000f756:	48 89 cf 	movq	%rcx, %rdi
10000f759:	ff 15 11 a9 00 00 	callq	*43281(%rip) ## literal pool symbol address: _objc_release
10000f75f:	45 31 db 	xorl	%r11d, %r11d
10000f762:	44 89 de 	movl	%r11d, %esi
10000f765:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
10000f769:	48 89 cf 	movq	%rcx, %rdi
10000f76c:	e8 81 46 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f771:	45 31 db 	xorl	%r11d, %r11d
10000f774:	44 89 de 	movl	%r11d, %esi
10000f777:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10000f77b:	48 89 cf 	movq	%rcx, %rdi
10000f77e:	e8 6f 46 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000f783:	e9 00 00 00 00 	jmp	0x10000f788
10000f788:	e9 00 00 00 00 	jmp	0x10000f78d
10000f78d:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000f791:	48 8b 35 08 17 01 00 	movq	71432(%rip), %rsi ## Objc selector ref: class
10000f798:	48 89 c7 	movq	%rax, %rdi
10000f79b:	ff 15 c7 a8 00 00 	callq	*43207(%rip) ## Objc message: -[%rdi class]
10000f7a1:	48 89 45 b8 	movq	%rax, -72(%rbp)
10000f7a5:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000f7a9:	48 89 c7 	movq	%rax, %rdi
10000f7ac:	e8 5f 46 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
10000f7b1:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000f7b5:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000f7b9:	e8 60 44 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
10000f7be:	48 89 c7 	movq	%rax, %rdi
10000f7c1:	e8 0e 46 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f7c6:	48 8d 35 1b ce 00 00 	leaq	52763(%rip), %rsi ## Objc cfstring ref: @"_Aspects_"
10000f7cd:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000f7d1:	48 8b 45 a8 	movq	-88(%rbp), %rax
10000f7d5:	48 8b 3d 04 1e 01 00 	movq	73220(%rip), %rdi ## Objc selector ref: hasSuffix:
10000f7dc:	48 89 bd 40 ff ff ff 	movq	%rdi, -192(%rbp)
10000f7e3:	48 89 c7 	movq	%rax, %rdi
10000f7e6:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10000f7ed:	48 89 b5 38 ff ff ff 	movq	%rsi, -200(%rbp)
10000f7f4:	48 89 c6 	movq	%rax, %rsi
10000f7f7:	48 8b 95 38 ff ff ff 	movq	-200(%rbp), %rdx
10000f7fe:	ff 15 64 a8 00 00 	callq	*43108(%rip) ## Objc message: -[%rdi hasSuffix:]
10000f804:	a8 01 	testb	$1, %al
10000f806:	0f 85 05 00 00 00 	jne	0x10000f811
10000f80c:	e9 1a 00 00 00 	jmp	0x10000f82b
10000f811:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000f815:	ff 15 5d a8 00 00 	callq	*43101(%rip) ## literal pool symbol address: _objc_retain
10000f81b:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000f81f:	c7 45 a4 01 00 00 00 	movl	$1, -92(%rbp)
10000f826:	e9 ca 02 00 00 	jmp	0x10000faf5
10000f82b:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000f82f:	e8 4a 44 00 00 	callq	0x100013c7e ## symbol stub for: _class_isMetaClass
10000f834:	a8 01 	testb	$1, %al
10000f836:	0f 85 05 00 00 00 	jne	0x10000f841
10000f83c:	e9 24 00 00 00 	jmp	0x10000f865
10000f841:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000f845:	48 89 c7 	movq	%rax, %rdi
10000f848:	e8 b3 04 00 00 	callq	_aspect_swizzleClassInPlace
10000f84d:	48 89 c7 	movq	%rax, %rdi
10000f850:	e8 7f 45 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f855:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000f859:	c7 45 a4 01 00 00 00 	movl	$1, -92(%rbp)
10000f860:	e9 90 02 00 00 	jmp	0x10000faf5
10000f865:	48 8b 45 b8 	movq	-72(%rbp), %rax
10000f869:	48 3b 45 b0 	cmpq	-80(%rbp), %rax
10000f86d:	0f 84 21 00 00 00 	je	0x10000f894
10000f873:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000f877:	e8 84 04 00 00 	callq	_aspect_swizzleClassInPlace
10000f87c:	48 89 c7 	movq	%rax, %rdi
10000f87f:	e8 50 45 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f884:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000f888:	c7 45 a4 01 00 00 00 	movl	$1, -92(%rbp)
10000f88f:	e9 61 02 00 00 	jmp	0x10000faf5
10000f894:	e9 00 00 00 00 	jmp	0x10000f899
10000f899:	e9 00 00 00 00 	jmp	0x10000f89e
10000f89e:	48 8d 05 43 cd 00 00 	leaq	52547(%rip), %rax ## Objc cfstring ref: @"_Aspects_"
10000f8a5:	48 8b 4d a8 	movq	-88(%rbp), %rcx
10000f8a9:	48 8b 35 38 1d 01 00 	movq	73016(%rip), %rsi ## Objc selector ref: stringByAppendingString:
10000f8b0:	48 89 cf 	movq	%rcx, %rdi
10000f8b3:	48 89 c2 	movq	%rax, %rdx
10000f8b6:	ff 15 ac a7 00 00 	callq	*42924(%rip) ## Objc message: -[%rdi stringByAppendingString:]
10000f8bc:	48 89 c7 	movq	%rax, %rdi
10000f8bf:	e8 10 45 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f8c4:	48 89 c1 	movq	%rax, %rcx
10000f8c7:	48 89 cf 	movq	%rcx, %rdi
10000f8ca:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
10000f8d1:	e8 f2 44 00 00 	callq	0x100013dc8 ## symbol stub for: _objc_retainAutorelease
10000f8d6:	48 8b 35 13 1d 01 00 	movq	72979(%rip), %rsi ## Objc selector ref: UTF8String
10000f8dd:	48 89 c7 	movq	%rax, %rdi
10000f8e0:	ff 15 82 a7 00 00 	callq	*42882(%rip) ## Objc message: -[%rdi UTF8String]
10000f8e6:	48 8b 8d 30 ff ff ff 	movq	-208(%rbp), %rcx
10000f8ed:	48 89 cf 	movq	%rcx, %rdi
10000f8f0:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
10000f8f7:	ff 15 73 a7 00 00 	callq	*42867(%rip) ## literal pool symbol address: _objc_release
10000f8fd:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
10000f904:	48 89 45 98 	movq	%rax, -104(%rbp)
10000f908:	48 8b 7d 98 	movq	-104(%rbp), %rdi
10000f90c:	e8 8d 44 00 00 	callq	0x100013d9e ## symbol stub for: _objc_getClass
10000f911:	48 89 45 90 	movq	%rax, -112(%rbp)
10000f915:	48 83 7d 90 00 	cmpq	$0, -112(%rbp)
10000f91a:	0f 85 a9 01 00 00 	jne	0x10000fac9
10000f920:	31 c0 	xorl	%eax, %eax
10000f922:	89 c2 	movl	%eax, %edx
10000f924:	48 8b 7d b0 	movq	-80(%rbp), %rdi
10000f928:	48 8b 75 98 	movq	-104(%rbp), %rsi
10000f92c:	e8 2b 44 00 00 	callq	0x100013d5c ## symbol stub for: _objc_allocateClassPair
10000f931:	48 89 45 90 	movq	%rax, -112(%rbp)
10000f935:	48 83 7d 90 00 	cmpq	$0, -112(%rbp)
10000f93a:	0f 85 55 01 00 00 	jne	0x10000fa95
10000f940:	48 8d 05 41 d0 00 00 	leaq	53313(%rip), %rax ## Objc cfstring ref: @"objc_allocateClassPair failed to allocate class %s."
10000f947:	48 8b 0d 72 1d 01 00 	movq	73074(%rip), %rcx ## Objc class ref: _OBJC_CLASS_$_NSString
10000f94e:	48 8b 55 98 	movq	-104(%rbp), %rdx
10000f952:	48 8b 35 67 16 01 00 	movq	71271(%rip), %rsi ## Objc selector ref: stringWithFormat:
10000f959:	48 89 cf 	movq	%rcx, %rdi
10000f95c:	48 89 95 20 ff ff ff 	movq	%rdx, -224(%rbp)
10000f963:	48 89 c2 	movq	%rax, %rdx
10000f966:	48 8b 8d 20 ff ff ff 	movq	-224(%rbp), %rcx
10000f96d:	b0 00 	movb	$0, %al
10000f96f:	ff 15 f3 a6 00 00 	callq	*42739(%rip) ## Objc message: +[NSString stringWithFormat:]
10000f975:	48 89 c7 	movq	%rax, %rdi
10000f978:	e8 57 44 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000f97d:	48 89 45 88 	movq	%rax, -120(%rbp)
10000f981:	e9 00 00 00 00 	jmp	0x10000f986
10000f986:	48 8d 05 1b cf 00 00 	leaq	53019(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
10000f98d:	48 8b 75 88 	movq	-120(%rbp), %rsi
10000f991:	48 89 c7 	movq	%rax, %rdi
10000f994:	b0 00 	movb	$0, %al
10000f996:	e8 77 42 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
10000f99b:	e9 00 00 00 00 	jmp	0x10000f9a0
10000f9a0:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
10000f9a5:	0f 84 bc 00 00 00 	je	0x10000fa67
10000f9ab:	b8 01 00 00 00 	movl	$1, %eax
10000f9b0:	41 89 c0 	movl	%eax, %r8d
10000f9b3:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000f9b7:	48 8d 55 f0 	leaq	-16(%rbp), %rdx
10000f9bb:	48 8b 35 4e a6 00 00 	movq	42574(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
10000f9c2:	48 8b 3d ef 1d 01 00 	movq	73199(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10000f9c9:	48 8b 36 	movq	(%rsi), %rsi
10000f9cc:	48 89 75 e8 	movq	%rsi, -24(%rbp)
10000f9d0:	48 8b 75 88 	movq	-120(%rbp), %rsi
10000f9d4:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000f9d8:	48 8b 35 c9 1c 01 00 	movq	72905(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
10000f9df:	4c 8b 0d ba 1b 01 00 	movq	72634(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
10000f9e6:	48 89 bd 18 ff ff ff 	movq	%rdi, -232(%rbp)
10000f9ed:	48 89 f7 	movq	%rsi, %rdi
10000f9f0:	4c 89 ce 	movq	%r9, %rsi
10000f9f3:	ff 15 6f a6 00 00 	callq	*42607(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
10000f9f9:	48 89 c7 	movq	%rax, %rdi
10000f9fc:	e8 d3 43 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000fa01:	48 8d 0d c0 cb 00 00 	leaq	52160(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
10000fa08:	41 ba 04 00 00 00 	movl	$4, %r10d
10000fa0e:	44 89 d2 	movl	%r10d, %edx
10000fa11:	48 8b 35 90 1b 01 00 	movq	72592(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
10000fa18:	48 8b bd 18 ff ff ff 	movq	-232(%rbp), %rdi
10000fa1f:	48 89 95 10 ff ff ff 	movq	%rdx, -240(%rbp)
10000fa26:	48 89 ca 	movq	%rcx, %rdx
10000fa29:	48 8b 8d 10 ff ff ff 	movq	-240(%rbp), %rcx
10000fa30:	49 89 c0 	movq	%rax, %r8
10000fa33:	48 89 85 08 ff ff ff 	movq	%rax, -248(%rbp)
10000fa3a:	ff 15 28 a6 00 00 	callq	*42536(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
10000fa40:	48 89 c7 	movq	%rax, %rdi
10000fa43:	e8 8c 43 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000fa48:	48 89 c7 	movq	%rax, %rdi
10000fa4b:	e8 12 43 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
10000fa50:	48 8b 4d d0 	movq	-48(%rbp), %rcx
10000fa54:	48 89 01 	movq	%rax, (%rcx)
10000fa57:	48 8b 85 08 ff ff ff 	movq	-248(%rbp), %rax
10000fa5e:	48 89 c7 	movq	%rax, %rdi
10000fa61:	ff 15 09 a6 00 00 	callq	*42505(%rip) ## literal pool symbol address: _objc_release
10000fa67:	e9 00 00 00 00 	jmp	0x10000fa6c
10000fa6c:	e9 00 00 00 00 	jmp	0x10000fa71
10000fa71:	31 c0 	xorl	%eax, %eax
10000fa73:	89 c6 	movl	%eax, %esi
10000fa75:	48 8d 4d 88 	leaq	-120(%rbp), %rcx
10000fa79:	48 c7 45 e0 00 00 00 00 	movq	$0, -32(%rbp)
10000fa81:	c7 45 a4 01 00 00 00 	movl	$1, -92(%rbp)
10000fa88:	48 89 cf 	movq	%rcx, %rdi
10000fa8b:	e8 62 43 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fa90:	e9 60 00 00 00 	jmp	0x10000faf5
10000fa95:	48 8b 7d 90 	movq	-112(%rbp), %rdi
10000fa99:	e8 d2 04 00 00 	callq	_aspect_swizzleForwardInvocation
10000fa9e:	48 8b 7d 90 	movq	-112(%rbp), %rdi
10000faa2:	48 8b 75 b8 	movq	-72(%rbp), %rsi
10000faa6:	e8 d5 06 00 00 	callq	_aspect_hookedGetClass
10000faab:	48 8b 7d 90 	movq	-112(%rbp), %rdi
10000faaf:	e8 5c 43 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
10000fab4:	48 8b 75 b8 	movq	-72(%rbp), %rsi
10000fab8:	48 89 c7 	movq	%rax, %rdi
10000fabb:	e8 c0 06 00 00 	callq	_aspect_hookedGetClass
10000fac0:	48 8b 7d 90 	movq	-112(%rbp), %rdi
10000fac4:	e8 f9 42 00 00 	callq	0x100013dc2 ## symbol stub for: _objc_registerClassPair
10000fac9:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000facd:	48 8b 75 90 	movq	-112(%rbp), %rsi
10000fad1:	48 89 c7 	movq	%rax, %rdi
10000fad4:	e8 3d 43 00 00 	callq	0x100013e16 ## symbol stub for: _object_setClass
10000fad9:	48 8b 7d 90 	movq	-112(%rbp), %rdi
10000fadd:	48 89 85 00 ff ff ff 	movq	%rax, -256(%rbp)
10000fae4:	ff 15 8e a5 00 00 	callq	*42382(%rip) ## literal pool symbol address: _objc_retain
10000faea:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000faee:	c7 45 a4 01 00 00 00 	movl	$1, -92(%rbp)
10000faf5:	31 c0 	xorl	%eax, %eax
10000faf7:	89 c6 	movl	%eax, %esi
10000faf9:	48 8d 4d a8 	leaq	-88(%rbp), %rcx
10000fafd:	48 89 cf 	movq	%rcx, %rdi
10000fb00:	e8 ed 42 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fb05:	31 c0 	xorl	%eax, %eax
10000fb07:	89 c6 	movl	%eax, %esi
10000fb09:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
10000fb0d:	48 89 cf 	movq	%rcx, %rdi
10000fb10:	e8 dd 42 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fb15:	48 8b 7d e0 	movq	-32(%rbp), %rdi
10000fb19:	e8 56 42 00 00 	callq	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10000fb1e:	48 8b 0d 13 a5 00 00 	movq	42259(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
10000fb25:	48 8b 09 	movq	(%rcx), %rcx
10000fb28:	48 8b 75 f8 	movq	-8(%rbp), %rsi
10000fb2c:	48 39 f1 	cmpq	%rsi, %rcx
10000fb2f:	48 89 85 f8 fe ff ff 	movq	%rax, -264(%rbp)
10000fb36:	0f 85 10 00 00 00 	jne	0x10000fb4c
10000fb3c:	48 8b 85 f8 fe ff ff 	movq	-264(%rbp), %rax
10000fb43:	48 81 c4 10 01 00 00 	addq	$272, %rsp
10000fb4a:	5d 	popq	%rbp
10000fb4b:	c3 	retq
10000fb4c:	e8 f7 40 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
10000fb51:	0f 0b 	ud2
10000fb53:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_isMsgForwardIMP:
10000fb60:	55 	pushq	%rbp
10000fb61:	48 89 e5 	movq	%rsp, %rbp
10000fb64:	b0 01 	movb	$1, %al
10000fb66:	48 8b 0d eb a4 00 00 	movq	42219(%rip), %rcx ## literal pool symbol address: __objc_msgForward
10000fb6d:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000fb71:	48 39 4d f8 	cmpq	%rcx, -8(%rbp)
10000fb75:	88 45 f7 	movb	%al, -9(%rbp)
10000fb78:	0f 84 11 00 00 00 	je	0x10000fb8f
10000fb7e:	48 8b 05 db a4 00 00 	movq	42203(%rip), %rax ## literal pool symbol address: __objc_msgForward_stret
10000fb85:	48 39 45 f8 	cmpq	%rax, -8(%rbp)
10000fb89:	0f 94 c1 	sete	%cl
10000fb8c:	88 4d f7 	movb	%cl, -9(%rbp)
10000fb8f:	8a 45 f7 	movb	-9(%rbp), %al
10000fb92:	24 01 	andb	$1, %al
10000fb94:	0f b6 c0 	movzbl	%al, %eax
10000fb97:	5d 	popq	%rbp
10000fb98:	c3 	retq
10000fb99:	0f 1f 80 00 00 00 00 	nopl	(%rax)
_aspect_getMsgForwardIMP:
10000fba0:	55 	pushq	%rbp
10000fba1:	48 89 e5 	movq	%rsp, %rbp
10000fba4:	48 83 ec 70 	subq	$112, %rsp
10000fba8:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10000fbac:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
10000fbb4:	48 89 7d a8 	movq	%rdi, -88(%rbp)
10000fbb8:	48 89 c7 	movq	%rax, %rdi
10000fbbb:	48 8b 45 a8 	movq	-88(%rbp), %rax
10000fbbf:	48 89 75 a0 	movq	%rsi, -96(%rbp)
10000fbc3:	48 89 c6 	movq	%rax, %rsi
10000fbc6:	e8 27 42 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fbcb:	48 8b 05 86 a4 00 00 	movq	42118(%rip), %rax ## literal pool symbol address: __objc_msgForward
10000fbd2:	48 8b 75 a0 	movq	-96(%rbp), %rsi
10000fbd6:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10000fbda:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000fbde:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000fbe2:	48 8b 35 b7 12 01 00 	movq	70327(%rip), %rsi ## Objc selector ref: class
10000fbe9:	48 89 c7 	movq	%rax, %rdi
10000fbec:	ff 15 76 a4 00 00 	callq	*42102(%rip) ## Objc message: -[%rdi class]
10000fbf2:	48 8b 75 f0 	movq	-16(%rbp), %rsi
10000fbf6:	48 89 c7 	movq	%rax, %rdi
10000fbf9:	e8 6e 40 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
10000fbfe:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000fc02:	48 8b 7d e0 	movq	-32(%rbp), %rdi
10000fc06:	e8 4b 41 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
10000fc0b:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000fc0f:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000fc13:	0f be 08 	movsbl	(%rax), %ecx
10000fc16:	83 f9 7b 	cmpl	$123, %ecx
10000fc19:	0f 94 c2 	sete	%dl
10000fc1c:	80 e2 01 	andb	$1, %dl
10000fc1f:	88 55 d7 	movb	%dl, -41(%rbp)
10000fc22:	f6 45 d7 01 	testb	$1, -41(%rbp)
10000fc26:	0f 84 9c 00 00 00 	je	0x10000fcc8
10000fc2c:	48 c7 45 c8 00 00 00 00 	movq	$0, -56(%rbp)
10000fc34:	48 8b 7d d8 	movq	-40(%rbp), %rdi
10000fc38:	31 c0 	xorl	%eax, %eax
10000fc3a:	89 c2 	movl	%eax, %edx
10000fc3c:	48 8d 75 c8 	leaq	-56(%rbp), %rsi
10000fc40:	e8 c1 3f 00 00 	callq	0x100013c06 ## symbol stub for: _NSGetSizeAndAlignment
10000fc45:	48 89 45 98 	movq	%rax, -104(%rbp)
10000fc49:	e9 00 00 00 00 	jmp	0x10000fc4e
10000fc4e:	48 83 7d c8 01 	cmpq	$1, -56(%rbp)
10000fc53:	0f 84 21 00 00 00 	je	0x10000fc7a
10000fc59:	48 83 7d c8 02 	cmpq	$2, -56(%rbp)
10000fc5e:	0f 84 16 00 00 00 	je	0x10000fc7a
10000fc64:	48 83 7d c8 04 	cmpq	$4, -56(%rbp)
10000fc69:	0f 84 0b 00 00 00 	je	0x10000fc7a
10000fc6f:	48 83 7d c8 08 	cmpq	$8, -56(%rbp)
10000fc74:	0f 85 17 00 00 00 	jne	0x10000fc91
10000fc7a:	c6 45 d7 00 	movb	$0, -41(%rbp)
10000fc7e:	e9 0e 00 00 00 	jmp	0x10000fc91
10000fc83:	89 d1 	movl	%edx, %ecx
10000fc85:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000fc89:	89 4d bc 	movl	%ecx, -68(%rbp)
10000fc8c:	e9 0a 00 00 00 	jmp	0x10000fc9b
10000fc91:	e9 00 00 00 00 	jmp	0x10000fc96
10000fc96:	e9 2d 00 00 00 	jmp	0x10000fcc8
10000fc9b:	48 8b 7d c0 	movq	-64(%rbp), %rdi
10000fc9f:	e8 d6 40 00 00 	callq	0x100013d7a ## symbol stub for: _objc_begin_catch
10000fca4:	48 89 c7 	movq	%rax, %rdi
10000fca7:	ff 15 cb a3 00 00 	callq	*41931(%rip) ## literal pool symbol address: _objc_retain
10000fcad:	31 c9 	xorl	%ecx, %ecx
10000fcaf:	89 ce 	movl	%ecx, %esi
10000fcb1:	48 8d 7d b0 	leaq	-80(%rbp), %rdi
10000fcb5:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000fcb9:	e8 34 41 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fcbe:	e8 c9 40 00 00 	callq	0x100013d8c ## symbol stub for: _objc_end_catch
10000fcc3:	e9 ce ff ff ff 	jmp	0x10000fc96
10000fcc8:	f6 45 d7 01 	testb	$1, -41(%rbp)
10000fccc:	0f 84 0b 00 00 00 	je	0x10000fcdd
10000fcd2:	48 8b 05 87 a3 00 00 	movq	41863(%rip), %rax ## literal pool symbol address: __objc_msgForward_stret
10000fcd9:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000fcdd:	31 c0 	xorl	%eax, %eax
10000fcdf:	89 c6 	movl	%eax, %esi
10000fce1:	48 8d 4d f8 	leaq	-8(%rbp), %rcx
10000fce5:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000fce9:	48 89 cf 	movq	%rcx, %rdi
10000fcec:	48 89 45 90 	movq	%rax, -112(%rbp)
10000fcf0:	e8 fd 40 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fcf5:	48 8b 45 90 	movq	-112(%rbp), %rax
10000fcf9:	48 83 c4 70 	addq	$112, %rsp
10000fcfd:	5d 	popq	%rbp
10000fcfe:	c3 	retq
10000fcff:	90 	nop
_aspect_swizzleClassInPlace:
10000fd00:	55 	pushq	%rbp
10000fd01:	48 89 e5 	movq	%rsp, %rbp
10000fd04:	48 81 ec b0 00 00 00 	subq	$176, %rsp
10000fd0b:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000fd0f:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
10000fd14:	0f 95 c0 	setne	%al
10000fd17:	34 ff 	xorb	$-1, %al
10000fd19:	24 01 	andb	$1, %al
10000fd1b:	0f b6 c8 	movzbl	%al, %ecx
10000fd1e:	48 63 d1 	movslq	%ecx, %rdx
10000fd21:	48 83 fa 00 	cmpq	$0, %rdx
10000fd25:	0f 84 73 01 00 00 	je	0x10000fe9e
10000fd2b:	48 8d 15 67 67 00 00 	leaq	26471(%rip), %rdx ## literal pool for: "Class aspect_swizzleClassInPlace(__unsafe_unretained Class)"
10000fd32:	48 8b 05 87 19 01 00 	movq	72071(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000fd39:	48 8b 35 18 17 01 00 	movq	71448(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000fd40:	48 89 c7 	movq	%rax, %rdi
10000fd43:	ff 15 1f a3 00 00 	callq	*41759(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000fd49:	48 89 c7 	movq	%rax, %rdi
10000fd4c:	e8 83 40 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000fd51:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000fd55:	48 83 7d f0 00 	cmpq	$0, -16(%rbp)
10000fd5a:	0f 84 0d 00 00 00 	je	0x10000fd6d
10000fd60:	48 8b 45 f0 	movq	-16(%rbp), %rax
10000fd64:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000fd68:	e9 10 00 00 00 	jmp	0x10000fd7d
10000fd6d:	48 8d 05 f4 c8 00 00 	leaq	51444(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000fd74:	48 89 45 a8 	movq	%rax, -88(%rbp)
10000fd78:	e9 00 00 00 00 	jmp	0x10000fd7d
10000fd7d:	48 8b 45 a8 	movq	-88(%rbp), %rax
10000fd81:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
10000fd85:	48 89 cf 	movq	%rcx, %rdi
10000fd88:	48 89 c6 	movq	%rax, %rsi
10000fd8b:	e8 62 40 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fd90:	48 8d 15 f6 60 00 00 	leaq	24822(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10000fd97:	48 8b 05 22 19 01 00 	movq	71970(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000fd9e:	48 8b 35 b3 16 01 00 	movq	71347(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000fda5:	48 89 c7 	movq	%rax, %rdi
10000fda8:	ff 15 ba a2 00 00 	callq	*41658(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000fdae:	48 89 c7 	movq	%rax, %rdi
10000fdb1:	e8 1e 40 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000fdb6:	48 89 45 e8 	movq	%rax, -24(%rbp)
10000fdba:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10000fdbf:	0f 84 0d 00 00 00 	je	0x10000fdd2
10000fdc5:	48 8b 45 e8 	movq	-24(%rbp), %rax
10000fdc9:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000fdcd:	e9 10 00 00 00 	jmp	0x10000fde2
10000fdd2:	48 8d 05 af c8 00 00 	leaq	51375(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10000fdd9:	48 89 45 a0 	movq	%rax, -96(%rbp)
10000fddd:	e9 00 00 00 00 	jmp	0x10000fde2
10000fde2:	48 8b 45 a0 	movq	-96(%rbp), %rax
10000fde6:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000fdea:	48 89 cf 	movq	%rcx, %rdi
10000fded:	48 89 c6 	movq	%rax, %rsi
10000fdf0:	e8 fd 3f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fdf5:	48 8b 05 a4 19 01 00 	movq	72100(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10000fdfc:	48 8b 35 7d 16 01 00 	movq	71293(%rip), %rsi ## Objc selector ref: currentHandler
10000fe03:	48 89 c7 	movq	%rax, %rdi
10000fe06:	ff 15 5c a2 00 00 	callq	*41564(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10000fe0c:	48 89 c7 	movq	%rax, %rdi
10000fe0f:	e8 c0 3f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000fe14:	ba b2 01 00 00 	movl	$434, %edx
10000fe19:	41 89 d0 	movl	%edx, %r8d
10000fe1c:	48 8d 0d 85 c8 00 00 	leaq	51333(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10000fe23:	48 8d 35 7e cb 00 00 	leaq	52094(%rip), %rsi ## Objc cfstring ref: @"klass"
10000fe2a:	48 8b 55 f0 	movq	-16(%rbp), %rdx
10000fe2e:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10000fe32:	4c 8b 0d 4f 16 01 00 	movq	71247(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10000fe39:	49 89 c2 	movq	%rax, %r10
10000fe3c:	48 89 7d 98 	movq	%rdi, -104(%rbp)
10000fe40:	4c 89 d7 	movq	%r10, %rdi
10000fe43:	48 89 75 90 	movq	%rsi, -112(%rbp)
10000fe47:	4c 89 ce 	movq	%r9, %rsi
10000fe4a:	4c 8b 4d 98 	movq	-104(%rbp), %r9
10000fe4e:	48 89 4d 88 	movq	%rcx, -120(%rbp)
10000fe52:	4c 89 c9 	movq	%r9, %rcx
10000fe55:	4c 8b 4d 88 	movq	-120(%rbp), %r9
10000fe59:	4c 8b 55 90 	movq	-112(%rbp), %r10
10000fe5d:	4c 89 14 24 	movq	%r10, (%rsp)
10000fe61:	48 89 45 80 	movq	%rax, -128(%rbp)
10000fe65:	b0 00 	movb	$0, %al
10000fe67:	ff 15 fb a1 00 00 	callq	*41467(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10000fe6d:	48 8b 4d 80 	movq	-128(%rbp), %rcx
10000fe71:	48 89 cf 	movq	%rcx, %rdi
10000fe74:	ff 15 f6 a1 00 00 	callq	*41462(%rip) ## literal pool symbol address: _objc_release
10000fe7a:	45 31 db 	xorl	%r11d, %r11d
10000fe7d:	44 89 de 	movl	%r11d, %esi
10000fe80:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10000fe84:	48 89 cf 	movq	%rcx, %rdi
10000fe87:	e8 66 3f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fe8c:	45 31 db 	xorl	%r11d, %r11d
10000fe8f:	44 89 de 	movl	%r11d, %esi
10000fe92:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
10000fe96:	48 89 cf 	movq	%rcx, %rdi
10000fe99:	e8 54 3f 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fe9e:	e9 00 00 00 00 	jmp	0x10000fea3
10000fea3:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000fea7:	e8 72 3d 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
10000feac:	48 89 c7 	movq	%rax, %rdi
10000feaf:	e8 20 3f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000feb4:	48 89 45 e0 	movq	%rax, -32(%rbp)
10000feb8:	48 8d 7d d0 	leaq	-48(%rbp), %rdi
10000febc:	48 8b 05 5d a1 00 00 	movq	41309(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000fec3:	48 89 45 b0 	movq	%rax, -80(%rbp)
10000fec7:	c7 45 b8 00 00 00 c2 	movl	$3254779904, -72(%rbp)
10000fece:	c7 45 bc 00 00 00 00 	movl	$0, -68(%rbp)
10000fed5:	48 8d 05 24 08 00 00 	leaq	___aspect_swizzleClassInPlace_block_invoke(%rip), %rax
10000fedc:	48 89 45 c0 	movq	%rax, -64(%rbp)
10000fee0:	48 8d 05 31 b2 00 00 	leaq	___block_descriptor_tmp.389(%rip), %rax
10000fee7:	48 89 45 c8 	movq	%rax, -56(%rbp)
10000feeb:	48 8b 45 e0 	movq	-32(%rbp), %rax
10000feef:	48 8b 0d 82 a1 00 00 	movq	41346(%rip), %rcx ## literal pool symbol address: _objc_retain
10000fef6:	48 89 bd 78 ff ff ff 	movq	%rdi, -136(%rbp)
10000fefd:	48 89 c7 	movq	%rax, %rdi
10000ff00:	48 89 8d 70 ff ff ff 	movq	%rcx, -144(%rbp)
10000ff07:	ff d1 	callq	*%rcx
10000ff09:	48 89 45 d0 	movq	%rax, -48(%rbp)
10000ff0d:	48 8b 45 f8 	movq	-8(%rbp), %rax
10000ff11:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000ff15:	48 8d 7d b0 	leaq	-80(%rbp), %rdi
10000ff19:	e8 d2 06 00 00 	callq	__aspect_modifySwizzledClasses
10000ff1e:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10000ff22:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
10000ff29:	ff d0 	callq	*%rax
10000ff2b:	31 d2 	xorl	%edx, %edx
10000ff2d:	89 d1 	movl	%edx, %ecx
10000ff2f:	48 8b bd 78 ff ff ff 	movq	-136(%rbp), %rdi
10000ff36:	48 89 ce 	movq	%rcx, %rsi
10000ff39:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
10000ff40:	48 89 8d 60 ff ff ff 	movq	%rcx, -160(%rbp)
10000ff47:	e8 a6 3e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ff4c:	48 8d 7d e0 	leaq	-32(%rbp), %rdi
10000ff50:	48 8b b5 60 ff ff ff 	movq	-160(%rbp), %rsi
10000ff57:	e8 96 3e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000ff5c:	48 8b bd 68 ff ff ff 	movq	-152(%rbp), %rdi
10000ff63:	48 81 c4 b0 00 00 00 	addq	$176, %rsp
10000ff6a:	5d 	popq	%rbp
10000ff6b:	e9 04 3e 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
_aspect_swizzleForwardInvocation:
10000ff70:	55 	pushq	%rbp
10000ff71:	48 89 e5 	movq	%rsp, %rbp
10000ff74:	48 83 ec 70 	subq	$112, %rsp
10000ff78:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10000ff7c:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
10000ff81:	0f 95 c0 	setne	%al
10000ff84:	34 ff 	xorb	$-1, %al
10000ff86:	24 01 	andb	$1, %al
10000ff88:	0f b6 c8 	movzbl	%al, %ecx
10000ff8b:	48 63 d1 	movslq	%ecx, %rdx
10000ff8e:	48 83 fa 00 	cmpq	$0, %rdx
10000ff92:	0f 84 73 01 00 00 	je	0x10001010b
10000ff98:	48 8d 15 53 65 00 00 	leaq	25939(%rip), %rdx ## literal pool for: "void aspect_swizzleForwardInvocation(__unsafe_unretained Class)"
10000ff9f:	48 8b 05 1a 17 01 00 	movq	71450(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10000ffa6:	48 8b 35 ab 14 01 00 	movq	70827(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10000ffad:	48 89 c7 	movq	%rax, %rdi
10000ffb0:	ff 15 b2 a0 00 00 	callq	*41138(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10000ffb6:	48 89 c7 	movq	%rax, %rdi
10000ffb9:	e8 16 3e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10000ffbe:	48 89 45 f0 	movq	%rax, -16(%rbp)
10000ffc2:	48 83 7d f0 00 	cmpq	$0, -16(%rbp)
10000ffc7:	0f 84 0d 00 00 00 	je	0x10000ffda
10000ffcd:	48 8b 45 f0 	movq	-16(%rbp), %rax
10000ffd1:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000ffd5:	e9 10 00 00 00 	jmp	0x10000ffea
10000ffda:	48 8d 05 87 c6 00 00 	leaq	50823(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10000ffe1:	48 89 45 d8 	movq	%rax, -40(%rbp)
10000ffe5:	e9 00 00 00 00 	jmp	0x10000ffea
10000ffea:	48 8b 45 d8 	movq	-40(%rbp), %rax
10000ffee:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
10000fff2:	48 89 cf 	movq	%rcx, %rdi
10000fff5:	48 89 c6 	movq	%rax, %rsi
10000fff8:	e8 f5 3d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10000fffd:	48 8d 15 89 5e 00 00 	leaq	24201(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100010004:	48 8b 05 b5 16 01 00 	movq	71349(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10001000b:	48 8b 35 46 14 01 00 	movq	70726(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100010012:	48 89 c7 	movq	%rax, %rdi
100010015:	ff 15 4d a0 00 00 	callq	*41037(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10001001b:	48 89 c7 	movq	%rax, %rdi
10001001e:	e8 b1 3d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010023:	48 89 45 e8 	movq	%rax, -24(%rbp)
100010027:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10001002c:	0f 84 0d 00 00 00 	je	0x10001003f
100010032:	48 8b 45 e8 	movq	-24(%rbp), %rax
100010036:	48 89 45 d0 	movq	%rax, -48(%rbp)
10001003a:	e9 10 00 00 00 	jmp	0x10001004f
10001003f:	48 8d 05 42 c6 00 00 	leaq	50754(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
100010046:	48 89 45 d0 	movq	%rax, -48(%rbp)
10001004a:	e9 00 00 00 00 	jmp	0x10001004f
10001004f:	48 8b 45 d0 	movq	-48(%rbp), %rax
100010053:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
100010057:	48 89 cf 	movq	%rcx, %rdi
10001005a:	48 89 c6 	movq	%rax, %rsi
10001005d:	e8 90 3d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010062:	48 8b 05 37 17 01 00 	movq	71479(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100010069:	48 8b 35 10 14 01 00 	movq	70672(%rip), %rsi ## Objc selector ref: currentHandler
100010070:	48 89 c7 	movq	%rax, %rdi
100010073:	ff 15 ef 9f 00 00 	callq	*40943(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100010079:	48 89 c7 	movq	%rax, %rdi
10001007c:	e8 53 3d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010081:	ba 85 01 00 00 	movl	$389, %edx
100010086:	41 89 d0 	movl	%edx, %r8d
100010089:	48 8d 0d 18 c6 00 00 	leaq	50712(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100010090:	48 8d 35 11 c9 00 00 	leaq	51473(%rip), %rsi ## Objc cfstring ref: @"klass"
100010097:	48 8b 55 f0 	movq	-16(%rbp), %rdx
10001009b:	48 8b 7d e8 	movq	-24(%rbp), %rdi
10001009f:	4c 8b 0d e2 13 01 00 	movq	70626(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
1000100a6:	49 89 c2 	movq	%rax, %r10
1000100a9:	48 89 7d c8 	movq	%rdi, -56(%rbp)
1000100ad:	4c 89 d7 	movq	%r10, %rdi
1000100b0:	48 89 75 c0 	movq	%rsi, -64(%rbp)
1000100b4:	4c 89 ce 	movq	%r9, %rsi
1000100b7:	4c 8b 4d c8 	movq	-56(%rbp), %r9
1000100bb:	48 89 4d b8 	movq	%rcx, -72(%rbp)
1000100bf:	4c 89 c9 	movq	%r9, %rcx
1000100c2:	4c 8b 4d b8 	movq	-72(%rbp), %r9
1000100c6:	4c 8b 55 c0 	movq	-64(%rbp), %r10
1000100ca:	4c 89 14 24 	movq	%r10, (%rsp)
1000100ce:	48 89 45 b0 	movq	%rax, -80(%rbp)
1000100d2:	b0 00 	movb	$0, %al
1000100d4:	ff 15 8e 9f 00 00 	callq	*40846(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
1000100da:	48 8b 4d b0 	movq	-80(%rbp), %rcx
1000100de:	48 89 cf 	movq	%rcx, %rdi
1000100e1:	ff 15 89 9f 00 00 	callq	*40841(%rip) ## literal pool symbol address: _objc_release
1000100e7:	45 31 db 	xorl	%r11d, %r11d
1000100ea:	44 89 de 	movl	%r11d, %esi
1000100ed:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
1000100f1:	48 89 cf 	movq	%rcx, %rdi
1000100f4:	e8 f9 3c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000100f9:	45 31 db 	xorl	%r11d, %r11d
1000100fc:	44 89 de 	movl	%r11d, %esi
1000100ff:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
100010103:	48 89 cf 	movq	%rcx, %rdi
100010106:	e8 e7 3c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001010b:	e9 00 00 00 00 	jmp	0x100010110
100010110:	48 8d 05 59 07 00 00 	leaq	___ASPECTS_ARE_BEING_CALLED__(%rip), %rax
100010117:	48 8d 0d 14 64 00 00 	leaq	25620(%rip), %rcx ## literal pool for: "v@:@"
10001011e:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100010122:	48 8b 35 cf 14 01 00 	movq	70863(%rip), %rsi ## Objc selector ref: forwardInvocation:
100010129:	48 89 c2 	movq	%rax, %rdx
10001012c:	e8 53 3b 00 00 	callq	0x100013c84 ## symbol stub for: _class_replaceMethod
100010131:	48 89 45 e0 	movq	%rax, -32(%rbp)
100010135:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
10001013a:	0f 84 31 00 00 00 	je	0x100010171
100010140:	48 8d 05 e1 c4 00 00 	leaq	50401(%rip), %rax ## Objc cfstring ref: @"__aspects_forwardInvocation:"
100010147:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10001014b:	48 89 7d a8 	movq	%rdi, -88(%rbp)
10001014f:	48 89 c7 	movq	%rax, %rdi
100010152:	e8 c1 3a 00 00 	callq	0x100013c18 ## symbol stub for: _NSSelectorFromString
100010157:	48 8d 0d d4 63 00 00 	leaq	25556(%rip), %rcx ## literal pool for: "v@:@"
10001015e:	48 8b 55 e0 	movq	-32(%rbp), %rdx
100010162:	48 8b 7d a8 	movq	-88(%rbp), %rdi
100010166:	48 89 c6 	movq	%rax, %rsi
100010169:	e8 ec 3a 00 00 	callq	0x100013c5a ## symbol stub for: _class_addMethod
10001016e:	88 45 a7 	movb	%al, -89(%rbp)
100010171:	48 83 c4 70 	addq	$112, %rsp
100010175:	5d 	popq	%rbp
100010176:	c3 	retq
100010177:	66 0f 1f 84 00 00 00 00 00 	nopw	(%rax,%rax)
_aspect_hookedGetClass:
100010180:	55 	pushq	%rbp
100010181:	48 89 e5 	movq	%rsp, %rbp
100010184:	48 81 ec 00 01 00 00 	subq	$256, %rsp
10001018b:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10001018f:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100010193:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
100010198:	0f 95 c0 	setne	%al
10001019b:	34 ff 	xorb	$-1, %al
10001019d:	24 01 	andb	$1, %al
10001019f:	0f b6 c8 	movzbl	%al, %ecx
1000101a2:	48 63 d1 	movslq	%ecx, %rdx
1000101a5:	48 83 fa 00 	cmpq	$0, %rdx
1000101a9:	0f 84 85 01 00 00 	je	0x100010334
1000101af:	48 8d 15 2d 64 00 00 	leaq	25645(%rip), %rdx ## literal pool for: "void aspect_hookedGetClass(__unsafe_unretained Class, __unsafe_unretained Class)"
1000101b6:	48 8b 05 03 15 01 00 	movq	70915(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000101bd:	48 8b 35 94 12 01 00 	movq	70292(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000101c4:	48 89 c7 	movq	%rax, %rdi
1000101c7:	ff 15 9b 9e 00 00 	callq	*40603(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000101cd:	48 89 c7 	movq	%rax, %rdi
1000101d0:	e8 ff 3b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000101d5:	48 89 45 e8 	movq	%rax, -24(%rbp)
1000101d9:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
1000101de:	0f 84 0d 00 00 00 	je	0x1000101f1
1000101e4:	48 8b 45 e8 	movq	-24(%rbp), %rax
1000101e8:	48 89 45 90 	movq	%rax, -112(%rbp)
1000101ec:	e9 10 00 00 00 	jmp	0x100010201
1000101f1:	48 8d 05 70 c4 00 00 	leaq	50288(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
1000101f8:	48 89 45 90 	movq	%rax, -112(%rbp)
1000101fc:	e9 00 00 00 00 	jmp	0x100010201
100010201:	48 8b 45 90 	movq	-112(%rbp), %rax
100010205:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
100010209:	48 89 cf 	movq	%rcx, %rdi
10001020c:	48 89 c6 	movq	%rax, %rsi
10001020f:	e8 de 3b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010214:	48 8d 15 72 5c 00 00 	leaq	23666(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10001021b:	48 8b 05 9e 14 01 00 	movq	70814(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100010222:	48 8b 35 2f 12 01 00 	movq	70191(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100010229:	48 89 c7 	movq	%rax, %rdi
10001022c:	ff 15 36 9e 00 00 	callq	*40502(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100010232:	48 89 c7 	movq	%rax, %rdi
100010235:	e8 9a 3b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001023a:	48 89 45 e0 	movq	%rax, -32(%rbp)
10001023e:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
100010243:	0f 84 0d 00 00 00 	je	0x100010256
100010249:	48 8b 45 e0 	movq	-32(%rbp), %rax
10001024d:	48 89 45 88 	movq	%rax, -120(%rbp)
100010251:	e9 10 00 00 00 	jmp	0x100010266
100010256:	48 8d 05 2b c4 00 00 	leaq	50219(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10001025d:	48 89 45 88 	movq	%rax, -120(%rbp)
100010261:	e9 00 00 00 00 	jmp	0x100010266
100010266:	48 8b 45 88 	movq	-120(%rbp), %rax
10001026a:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10001026e:	48 89 cf 	movq	%rcx, %rdi
100010271:	48 89 c6 	movq	%rax, %rsi
100010274:	e8 79 3b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010279:	48 8b 05 20 15 01 00 	movq	70944(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100010280:	48 8b 35 f9 11 01 00 	movq	70137(%rip), %rsi ## Objc selector ref: currentHandler
100010287:	48 89 c7 	movq	%rax, %rdi
10001028a:	ff 15 d8 9d 00 00 	callq	*40408(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100010290:	48 89 c7 	movq	%rax, %rdi
100010293:	e8 3c 3b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010298:	ba 9a 01 00 00 	movl	$410, %edx
10001029d:	41 89 d0 	movl	%edx, %r8d
1000102a0:	48 8d 0d 01 c4 00 00 	leaq	50177(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
1000102a7:	48 8d 35 1a c7 00 00 	leaq	50970(%rip), %rsi ## Objc cfstring ref: @"class"
1000102ae:	48 8b 55 e8 	movq	-24(%rbp), %rdx
1000102b2:	48 8b 7d e0 	movq	-32(%rbp), %rdi
1000102b6:	4c 8b 0d cb 11 01 00 	movq	70091(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
1000102bd:	49 89 c2 	movq	%rax, %r10
1000102c0:	48 89 7d 80 	movq	%rdi, -128(%rbp)
1000102c4:	4c 89 d7 	movq	%r10, %rdi
1000102c7:	48 89 b5 78 ff ff ff 	movq	%rsi, -136(%rbp)
1000102ce:	4c 89 ce 	movq	%r9, %rsi
1000102d1:	4c 8b 4d 80 	movq	-128(%rbp), %r9
1000102d5:	48 89 8d 70 ff ff ff 	movq	%rcx, -144(%rbp)
1000102dc:	4c 89 c9 	movq	%r9, %rcx
1000102df:	4c 8b 8d 70 ff ff ff 	movq	-144(%rbp), %r9
1000102e6:	4c 8b 95 78 ff ff ff 	movq	-136(%rbp), %r10
1000102ed:	4c 89 14 24 	movq	%r10, (%rsp)
1000102f1:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
1000102f8:	b0 00 	movb	$0, %al
1000102fa:	ff 15 68 9d 00 00 	callq	*40296(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100010300:	48 8b 8d 68 ff ff ff 	movq	-152(%rbp), %rcx
100010307:	48 89 cf 	movq	%rcx, %rdi
10001030a:	ff 15 60 9d 00 00 	callq	*40288(%rip) ## literal pool symbol address: _objc_release
100010310:	45 31 db 	xorl	%r11d, %r11d
100010313:	44 89 de 	movl	%r11d, %esi
100010316:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10001031a:	48 89 cf 	movq	%rcx, %rdi
10001031d:	e8 d0 3a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010322:	45 31 db 	xorl	%r11d, %r11d
100010325:	44 89 de 	movl	%r11d, %esi
100010328:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
10001032c:	48 89 cf 	movq	%rcx, %rdi
10001032f:	e8 be 3a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010334:	e9 00 00 00 00 	jmp	0x100010339
100010339:	e9 00 00 00 00 	jmp	0x10001033e
10001033e:	48 83 7d f0 00 	cmpq	$0, -16(%rbp)
100010343:	0f 95 c0 	setne	%al
100010346:	34 ff 	xorb	$-1, %al
100010348:	24 01 	andb	$1, %al
10001034a:	0f b6 c8 	movzbl	%al, %ecx
10001034d:	48 63 d1 	movslq	%ecx, %rdx
100010350:	48 83 fa 00 	cmpq	$0, %rdx
100010354:	0f 84 9d 01 00 00 	je	0x1000104f7
10001035a:	48 8d 15 82 62 00 00 	leaq	25218(%rip), %rdx ## literal pool for: "void aspect_hookedGetClass(__unsafe_unretained Class, __unsafe_unretained Class)"
100010361:	48 8b 05 58 13 01 00 	movq	70488(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100010368:	48 8b 35 e9 10 01 00 	movq	69865(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10001036f:	48 89 c7 	movq	%rax, %rdi
100010372:	ff 15 f0 9c 00 00 	callq	*40176(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100010378:	48 89 c7 	movq	%rax, %rdi
10001037b:	e8 54 3a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010380:	48 89 45 d8 	movq	%rax, -40(%rbp)
100010384:	48 83 7d d8 00 	cmpq	$0, -40(%rbp)
100010389:	0f 84 10 00 00 00 	je	0x10001039f
10001038f:	48 8b 45 d8 	movq	-40(%rbp), %rax
100010393:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
10001039a:	e9 13 00 00 00 	jmp	0x1000103b2
10001039f:	48 8d 05 c2 c2 00 00 	leaq	49858(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
1000103a6:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
1000103ad:	e9 00 00 00 00 	jmp	0x1000103b2
1000103b2:	48 8b 85 60 ff ff ff 	movq	-160(%rbp), %rax
1000103b9:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
1000103bd:	48 89 cf 	movq	%rcx, %rdi
1000103c0:	48 89 c6 	movq	%rax, %rsi
1000103c3:	e8 2a 3a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000103c8:	48 8d 15 be 5a 00 00 	leaq	23230(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
1000103cf:	48 8b 05 ea 12 01 00 	movq	70378(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000103d6:	48 8b 35 7b 10 01 00 	movq	69755(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000103dd:	48 89 c7 	movq	%rax, %rdi
1000103e0:	ff 15 82 9c 00 00 	callq	*40066(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000103e6:	48 89 c7 	movq	%rax, %rdi
1000103e9:	e8 e6 39 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000103ee:	48 89 45 d0 	movq	%rax, -48(%rbp)
1000103f2:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
1000103f7:	0f 84 10 00 00 00 	je	0x10001040d
1000103fd:	48 8b 45 d0 	movq	-48(%rbp), %rax
100010401:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
100010408:	e9 13 00 00 00 	jmp	0x100010420
10001040d:	48 8d 05 74 c2 00 00 	leaq	49780(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
100010414:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
10001041b:	e9 00 00 00 00 	jmp	0x100010420
100010420:	48 8b 85 58 ff ff ff 	movq	-168(%rbp), %rax
100010427:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
10001042b:	48 89 cf 	movq	%rcx, %rdi
10001042e:	48 89 c6 	movq	%rax, %rsi
100010431:	e8 bc 39 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010436:	48 8b 05 63 13 01 00 	movq	70499(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10001043d:	48 8b 35 3c 10 01 00 	movq	69692(%rip), %rsi ## Objc selector ref: currentHandler
100010444:	48 89 c7 	movq	%rax, %rdi
100010447:	ff 15 1b 9c 00 00 	callq	*39963(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10001044d:	48 89 c7 	movq	%rax, %rdi
100010450:	e8 7f 39 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010455:	ba 9b 01 00 00 	movl	$411, %edx
10001045a:	41 89 d0 	movl	%edx, %r8d
10001045d:	48 8d 0d 44 c2 00 00 	leaq	49732(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100010464:	48 8d 35 7d c5 00 00 	leaq	50557(%rip), %rsi ## Objc cfstring ref: @"statedClass"
10001046b:	48 8b 55 d8 	movq	-40(%rbp), %rdx
10001046f:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100010473:	4c 8b 0d 0e 10 01 00 	movq	69646(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10001047a:	49 89 c2 	movq	%rax, %r10
10001047d:	48 89 bd 50 ff ff ff 	movq	%rdi, -176(%rbp)
100010484:	4c 89 d7 	movq	%r10, %rdi
100010487:	48 89 b5 48 ff ff ff 	movq	%rsi, -184(%rbp)
10001048e:	4c 89 ce 	movq	%r9, %rsi
100010491:	4c 8b 8d 50 ff ff ff 	movq	-176(%rbp), %r9
100010498:	48 89 8d 40 ff ff ff 	movq	%rcx, -192(%rbp)
10001049f:	4c 89 c9 	movq	%r9, %rcx
1000104a2:	4c 8b 8d 40 ff ff ff 	movq	-192(%rbp), %r9
1000104a9:	4c 8b 95 48 ff ff ff 	movq	-184(%rbp), %r10
1000104b0:	4c 89 14 24 	movq	%r10, (%rsp)
1000104b4:	48 89 85 38 ff ff ff 	movq	%rax, -200(%rbp)
1000104bb:	b0 00 	movb	$0, %al
1000104bd:	ff 15 a5 9b 00 00 	callq	*39845(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
1000104c3:	48 8b 8d 38 ff ff ff 	movq	-200(%rbp), %rcx
1000104ca:	48 89 cf 	movq	%rcx, %rdi
1000104cd:	ff 15 9d 9b 00 00 	callq	*39837(%rip) ## literal pool symbol address: _objc_release
1000104d3:	45 31 db 	xorl	%r11d, %r11d
1000104d6:	44 89 de 	movl	%r11d, %esi
1000104d9:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
1000104dd:	48 89 cf 	movq	%rcx, %rdi
1000104e0:	e8 0d 39 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000104e5:	45 31 db 	xorl	%r11d, %r11d
1000104e8:	44 89 de 	movl	%r11d, %esi
1000104eb:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
1000104ef:	48 89 cf 	movq	%rcx, %rdi
1000104f2:	e8 fb 38 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000104f7:	e9 00 00 00 00 	jmp	0x1000104fc
1000104fc:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100010500:	48 8b 35 99 09 01 00 	movq	67993(%rip), %rsi ## Objc selector ref: class
100010507:	e8 60 37 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
10001050c:	48 8d 75 98 	leaq	-104(%rbp), %rsi
100010510:	48 8d 3d 71 ac 00 00 	leaq	___block_descriptor_tmp.414(%rip), %rdi
100010517:	48 8d 0d a2 1e 00 00 	leaq	___aspect_hookedGetClass_block_invoke(%rip), %rcx
10001051e:	48 8b 15 fb 9a 00 00 	movq	39675(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
100010525:	48 89 45 c8 	movq	%rax, -56(%rbp)
100010529:	48 89 55 98 	movq	%rdx, -104(%rbp)
10001052d:	c7 45 a0 00 00 00 c0 	movl	$3221225472, -96(%rbp)
100010534:	c7 45 a4 00 00 00 00 	movl	$0, -92(%rbp)
10001053b:	48 89 4d a8 	movq	%rcx, -88(%rbp)
10001053f:	48 89 7d b0 	movq	%rdi, -80(%rbp)
100010543:	48 8b 45 f0 	movq	-16(%rbp), %rax
100010547:	48 89 45 b8 	movq	%rax, -72(%rbp)
10001054b:	48 89 f7 	movq	%rsi, %rdi
10001054e:	e8 87 38 00 00 	callq	0x100013dda ## symbol stub for: _objc_retainBlock
100010553:	48 89 c1 	movq	%rax, %rcx
100010556:	48 89 cf 	movq	%rcx, %rdi
100010559:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
100010560:	e8 c7 37 00 00 	callq	0x100013d2c ## symbol stub for: _imp_implementationWithBlock
100010565:	48 8b 8d 30 ff ff ff 	movq	-208(%rbp), %rcx
10001056c:	48 89 cf 	movq	%rcx, %rdi
10001056f:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
100010576:	ff 15 f4 9a 00 00 	callq	*39668(%rip) ## literal pool symbol address: _objc_release
10001057c:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
100010583:	48 89 45 c0 	movq	%rax, -64(%rbp)
100010587:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10001058b:	48 8b 35 0e 09 01 00 	movq	67854(%rip), %rsi ## Objc selector ref: class
100010592:	48 8b 55 c0 	movq	-64(%rbp), %rdx
100010596:	48 8b 45 c8 	movq	-56(%rbp), %rax
10001059a:	48 89 bd 20 ff ff ff 	movq	%rdi, -224(%rbp)
1000105a1:	48 89 c7 	movq	%rax, %rdi
1000105a4:	48 89 95 18 ff ff ff 	movq	%rdx, -232(%rbp)
1000105ab:	48 89 b5 10 ff ff ff 	movq	%rsi, -240(%rbp)
1000105b2:	e8 9f 37 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
1000105b7:	48 8b bd 20 ff ff ff 	movq	-224(%rbp), %rdi
1000105be:	48 8b b5 10 ff ff ff 	movq	-240(%rbp), %rsi
1000105c5:	48 8b 95 18 ff ff ff 	movq	-232(%rbp), %rdx
1000105cc:	48 89 c1 	movq	%rax, %rcx
1000105cf:	e8 b0 36 00 00 	callq	0x100013c84 ## symbol stub for: _class_replaceMethod
1000105d4:	48 89 85 08 ff ff ff 	movq	%rax, -248(%rbp)
1000105db:	48 81 c4 00 01 00 00 	addq	$256, %rsp
1000105e2:	5d 	popq	%rbp
1000105e3:	c3 	retq
1000105e4:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
__aspect_modifySwizzledClasses:
1000105f0:	55 	pushq	%rbp
1000105f1:	48 89 e5 	movq	%rsp, %rbp
1000105f4:	48 83 ec 60 	subq	$96, %rsp
1000105f8:	48 8d 45 e8 	leaq	-24(%rbp), %rax
1000105fc:	48 c7 45 e8 00 00 00 00 	movq	$0, -24(%rbp)
100010604:	48 89 7d d0 	movq	%rdi, -48(%rbp)
100010608:	48 89 c7 	movq	%rax, %rdi
10001060b:	48 8b 75 d0 	movq	-48(%rbp), %rsi
10001060f:	e8 de 37 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010614:	48 8d 05 4d ab 00 00 	leaq	___block_literal_global.391(%rip), %rax
10001061b:	48 8d 75 f0 	leaq	-16(%rbp), %rsi
10001061f:	48 8d 3d 32 20 01 00 	leaq	__aspect_modifySwizzledClasses.pred(%rip), %rdi
100010626:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10001062a:	48 c7 45 f0 00 00 00 00 	movq	$0, -16(%rbp)
100010632:	48 89 f7 	movq	%rsi, %rdi
100010635:	48 89 c6 	movq	%rax, %rsi
100010638:	e8 b5 37 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001063d:	48 8b 45 f8 	movq	-8(%rbp), %rax
100010641:	48 83 38 ff 	cmpq	$-1, (%rax)
100010645:	0f 84 12 00 00 00 	je	0x10001065d
10001064b:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10001064f:	48 8b 75 f0 	movq	-16(%rbp), %rsi
100010653:	e8 74 36 00 00 	callq	0x100013ccc ## symbol stub for: _dispatch_once
100010658:	e9 00 00 00 00 	jmp	0x10001065d
10001065d:	31 c0 	xorl	%eax, %eax
10001065f:	89 c6 	movl	%eax, %esi
100010661:	48 8d 7d f0 	leaq	-16(%rbp), %rdi
100010665:	e8 88 37 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001066a:	48 8b 3d df 1f 01 00 	movq	__aspect_modifySwizzledClasses.swizzledClasses(%rip), %rdi
100010671:	48 8b 35 00 9a 00 00 	movq	39424(%rip), %rsi ## literal pool symbol address: _objc_retain
100010678:	ff d6 	callq	*%rsi
10001067a:	48 89 c6 	movq	%rax, %rsi
10001067d:	48 89 c7 	movq	%rax, %rdi
100010680:	48 89 7d c8 	movq	%rdi, -56(%rbp)
100010684:	48 89 c7 	movq	%rax, %rdi
100010687:	48 89 75 c0 	movq	%rsi, -64(%rbp)
10001068b:	e8 6e 37 00 00 	callq	0x100013dfe ## symbol stub for: _objc_sync_enter
100010690:	48 8b 75 e8 	movq	-24(%rbp), %rsi
100010694:	48 8b 3d b5 1f 01 00 	movq	__aspect_modifySwizzledClasses.swizzledClasses(%rip), %rdi
10001069b:	48 8b 4e 10 	movq	16(%rsi), %rcx
10001069f:	48 89 7d b8 	movq	%rdi, -72(%rbp)
1000106a3:	48 89 f7 	movq	%rsi, %rdi
1000106a6:	48 8b 75 b8 	movq	-72(%rbp), %rsi
1000106aa:	89 45 b4 	movl	%eax, -76(%rbp)
1000106ad:	ff d1 	callq	*%rcx
1000106af:	e9 00 00 00 00 	jmp	0x1000106b4
1000106b4:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000106b8:	e8 47 37 00 00 	callq	0x100013e04 ## symbol stub for: _objc_sync_exit
1000106bd:	48 8b 7d c0 	movq	-64(%rbp), %rdi
1000106c1:	89 45 b0 	movl	%eax, -80(%rbp)
1000106c4:	ff 15 a6 99 00 00 	callq	*39334(%rip) ## literal pool symbol address: _objc_release
1000106ca:	31 c0 	xorl	%eax, %eax
1000106cc:	89 c6 	movl	%eax, %esi
1000106ce:	48 8d 7d e8 	leaq	-24(%rbp), %rdi
1000106d2:	e8 1b 37 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000106d7:	48 83 c4 60 	addq	$96, %rsp
1000106db:	5d 	popq	%rbp
1000106dc:	c3 	retq
1000106dd:	89 d1 	movl	%edx, %ecx
1000106df:	48 89 45 e0 	movq	%rax, -32(%rbp)
1000106e3:	89 4d dc 	movl	%ecx, -36(%rbp)
1000106e6:	48 8b 7d c8 	movq	-56(%rbp), %rdi
1000106ea:	e8 15 37 00 00 	callq	0x100013e04 ## symbol stub for: _objc_sync_exit
1000106ef:	89 45 ac 	movl	%eax, -84(%rbp)
1000106f2:	48 8b 7d e0 	movq	-32(%rbp), %rdi
1000106f6:	e8 47 35 00 00 	callq	0x100013c42 ## symbol stub for: __Unwind_Resume
1000106fb:	0f 0b 	ud2
1000106fd:	0f 1f 00 	nopl	(%rax)
___aspect_swizzleClassInPlace_block_invoke:
100010700:	55 	pushq	%rbp
100010701:	48 89 e5 	movq	%rsp, %rbp
100010704:	48 83 ec 30 	subq	$48, %rsp
100010708:	48 8d 45 f0 	leaq	-16(%rbp), %rax
10001070c:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100010710:	48 89 f9 	movq	%rdi, %rcx
100010713:	48 c7 45 f0 00 00 00 00 	movq	$0, -16(%rbp)
10001071b:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10001071f:	48 89 c7 	movq	%rax, %rdi
100010722:	48 89 4d d8 	movq	%rcx, -40(%rbp)
100010726:	e8 c7 36 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001072b:	48 8b 45 d8 	movq	-40(%rbp), %rax
10001072f:	48 89 45 e8 	movq	%rax, -24(%rbp)
100010733:	48 8b 4d f0 	movq	-16(%rbp), %rcx
100010737:	48 8b 75 e0 	movq	-32(%rbp), %rsi
10001073b:	48 8b 7e 20 	movq	32(%rsi), %rdi
10001073f:	48 8b 35 52 0e 01 00 	movq	69202(%rip), %rsi ## Objc selector ref: containsObject:
100010746:	48 89 7d d0 	movq	%rdi, -48(%rbp)
10001074a:	48 89 cf 	movq	%rcx, %rdi
10001074d:	48 8b 55 d0 	movq	-48(%rbp), %rdx
100010751:	ff 15 11 99 00 00 	callq	*39185(%rip) ## Objc message: -[%rdi containsObject:]
100010757:	a8 01 	testb	$1, %al
100010759:	0f 85 2c 00 00 00 	jne	0x10001078b
10001075f:	48 8b 45 d8 	movq	-40(%rbp), %rax
100010763:	48 8b 78 28 	movq	40(%rax), %rdi
100010767:	e8 04 f8 ff ff 	callq	_aspect_swizzleForwardInvocation
10001076c:	48 8b 45 f0 	movq	-16(%rbp), %rax
100010770:	48 8b 7d d8 	movq	-40(%rbp), %rdi
100010774:	48 8b 4f 20 	movq	32(%rdi), %rcx
100010778:	48 8b 35 d9 07 01 00 	movq	67545(%rip), %rsi ## Objc selector ref: addObject:
10001077f:	48 89 c7 	movq	%rax, %rdi
100010782:	48 89 ca 	movq	%rcx, %rdx
100010785:	ff 15 dd 98 00 00 	callq	*39133(%rip) ## Objc message: -[%rdi addObject:]
10001078b:	31 c0 	xorl	%eax, %eax
10001078d:	89 c6 	movl	%eax, %esi
10001078f:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
100010793:	48 89 cf 	movq	%rcx, %rdi
100010796:	e8 57 36 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001079b:	48 83 c4 30 	addq	$48, %rsp
10001079f:	5d 	popq	%rbp
1000107a0:	c3 	retq
1000107a1:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
___copy_helper_block_.385:
1000107b0:	55 	pushq	%rbp
1000107b1:	48 89 e5 	movq	%rsp, %rbp
1000107b4:	48 83 ec 10 	subq	$16, %rsp
1000107b8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
1000107bc:	48 89 75 f0 	movq	%rsi, -16(%rbp)
1000107c0:	48 8b 75 f0 	movq	-16(%rbp), %rsi
1000107c4:	48 8b 7d f8 	movq	-8(%rbp), %rdi
1000107c8:	48 89 f8 	movq	%rdi, %rax
1000107cb:	48 83 c0 20 	addq	$32, %rax
1000107cf:	48 8b 76 20 	movq	32(%rsi), %rsi
1000107d3:	48 c7 47 20 00 00 00 00 	movq	$0, 32(%rdi)
1000107db:	48 89 c7 	movq	%rax, %rdi
1000107de:	e8 0f 36 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000107e3:	48 83 c4 10 	addq	$16, %rsp
1000107e7:	5d 	popq	%rbp
1000107e8:	c3 	retq
1000107e9:	0f 1f 80 00 00 00 00 	nopl	(%rax)
___destroy_helper_block_.386:
1000107f0:	55 	pushq	%rbp
1000107f1:	48 89 e5 	movq	%rsp, %rbp
1000107f4:	48 83 ec 10 	subq	$16, %rsp
1000107f8:	31 c0 	xorl	%eax, %eax
1000107fa:	89 c6 	movl	%eax, %esi
1000107fc:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100010800:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100010804:	48 83 c7 20 	addq	$32, %rdi
100010808:	e8 e5 35 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001080d:	48 83 c4 10 	addq	$16, %rsp
100010811:	5d 	popq	%rbp
100010812:	c3 	retq
100010813:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
____aspect_modifySwizzledClasses_block_invoke:
100010820:	55 	pushq	%rbp
100010821:	48 89 e5 	movq	%rsp, %rbp
100010824:	48 83 ec 10 	subq	$16, %rsp
100010828:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10001082c:	48 89 7d f0 	movq	%rdi, -16(%rbp)
100010830:	48 8b 3d 51 0f 01 00 	movq	69457(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSMutableSet
100010837:	48 8b 35 32 06 01 00 	movq	67122(%rip), %rsi ## Objc selector ref: new
10001083e:	ff 15 24 98 00 00 	callq	*38948(%rip) ## Objc message: +[NSMutableSet new]
100010844:	48 8b 35 05 1e 01 00 	movq	__aspect_modifySwizzledClasses.swizzledClasses(%rip), %rsi
10001084b:	48 89 05 fe 1d 01 00 	movq	%rax, __aspect_modifySwizzledClasses.swizzledClasses(%rip)
100010852:	48 89 f7 	movq	%rsi, %rdi
100010855:	ff 15 15 98 00 00 	callq	*38933(%rip) ## literal pool symbol address: _objc_release
10001085b:	48 83 c4 10 	addq	$16, %rsp
10001085f:	5d 	popq	%rbp
100010860:	c3 	retq
100010861:	66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
___ASPECTS_ARE_BEING_CALLED__:
100010870:	55 	pushq	%rbp
100010871:	48 89 e5 	movq	%rsp, %rbp
100010874:	48 81 ec a0 08 00 00 	subq	$2208, %rsp
10001087b:	48 8d 85 e0 fc ff ff 	leaq	-800(%rbp), %rax
100010882:	48 8b 0d af 97 00 00 	movq	38831(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100010889:	48 8b 09 	movq	(%rcx), %rcx
10001088c:	48 89 4d f8 	movq	%rcx, -8(%rbp)
100010890:	48 89 bd f0 fc ff ff 	movq	%rdi, -784(%rbp)
100010897:	48 89 b5 e8 fc ff ff 	movq	%rsi, -792(%rbp)
10001089e:	48 c7 85 e0 fc ff ff 00 00 00 00 	movq	$0, -800(%rbp)
1000108a9:	48 89 c7 	movq	%rax, %rdi
1000108ac:	48 89 d6 	movq	%rdx, %rsi
1000108af:	e8 3e 35 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000108b4:	48 83 bd f0 fc ff ff 00 	cmpq	$0, -784(%rbp)
1000108bc:	0f 95 c0 	setne	%al
1000108bf:	34 ff 	xorb	$-1, %al
1000108c1:	24 01 	andb	$1, %al
1000108c3:	0f b6 c8 	movzbl	%al, %ecx
1000108c6:	48 63 d1 	movslq	%ecx, %rdx
1000108c9:	48 83 fa 00 	cmpq	$0, %rdx
1000108cd:	0f 84 c1 01 00 00 	je	0x100010a94
1000108d3:	48 8d 15 5d 5c 00 00 	leaq	23645(%rip), %rdx ## literal pool for: "void __ASPECTS_ARE_BEING_CALLED__(NSObject *__unsafe_unretained, SEL, NSInvocation *__strong)"
1000108da:	48 8b 05 df 0d 01 00 	movq	69087(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000108e1:	48 8b 35 70 0b 01 00 	movq	68464(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000108e8:	48 89 c7 	movq	%rax, %rdi
1000108eb:	ff 15 77 97 00 00 	callq	*38775(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000108f1:	48 89 c7 	movq	%rax, %rdi
1000108f4:	e8 db 34 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000108f9:	48 89 85 d8 fc ff ff 	movq	%rax, -808(%rbp)
100010900:	48 83 bd d8 fc ff ff 00 	cmpq	$0, -808(%rbp)
100010908:	0f 84 13 00 00 00 	je	0x100010921
10001090e:	48 8b 85 d8 fc ff ff 	movq	-808(%rbp), %rax
100010915:	48 89 85 28 fa ff ff 	movq	%rax, -1496(%rbp)
10001091c:	e9 13 00 00 00 	jmp	0x100010934
100010921:	48 8d 05 40 bd 00 00 	leaq	48448(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100010928:	48 89 85 28 fa ff ff 	movq	%rax, -1496(%rbp)
10001092f:	e9 00 00 00 00 	jmp	0x100010934
100010934:	48 8b 85 28 fa ff ff 	movq	-1496(%rbp), %rax
10001093b:	48 8d 8d d8 fc ff ff 	leaq	-808(%rbp), %rcx
100010942:	48 89 cf 	movq	%rcx, %rdi
100010945:	48 89 c6 	movq	%rax, %rsi
100010948:	e8 a5 34 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001094d:	48 8d 15 39 55 00 00 	leaq	21817(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100010954:	48 8b 05 65 0d 01 00 	movq	68965(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10001095b:	48 8b 35 f6 0a 01 00 	movq	68342(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100010962:	48 89 c7 	movq	%rax, %rdi
100010965:	ff 15 fd 96 00 00 	callq	*38653(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10001096b:	48 89 c7 	movq	%rax, %rdi
10001096e:	e8 61 34 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010973:	48 89 85 d0 fc ff ff 	movq	%rax, -816(%rbp)
10001097a:	48 83 bd d0 fc ff ff 00 	cmpq	$0, -816(%rbp)
100010982:	0f 84 13 00 00 00 	je	0x10001099b
100010988:	48 8b 85 d0 fc ff ff 	movq	-816(%rbp), %rax
10001098f:	48 89 85 20 fa ff ff 	movq	%rax, -1504(%rbp)
100010996:	e9 13 00 00 00 	jmp	0x1000109ae
10001099b:	48 8d 05 e6 bc 00 00 	leaq	48358(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
1000109a2:	48 89 85 20 fa ff ff 	movq	%rax, -1504(%rbp)
1000109a9:	e9 00 00 00 00 	jmp	0x1000109ae
1000109ae:	48 8b 85 20 fa ff ff 	movq	-1504(%rbp), %rax
1000109b5:	48 8d 8d d0 fc ff ff 	leaq	-816(%rbp), %rcx
1000109bc:	48 89 cf 	movq	%rcx, %rdi
1000109bf:	48 89 c6 	movq	%rax, %rsi
1000109c2:	e8 2b 34 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000109c7:	48 8b 05 d2 0d 01 00 	movq	69074(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
1000109ce:	48 8b 35 ab 0a 01 00 	movq	68267(%rip), %rsi ## Objc selector ref: currentHandler
1000109d5:	48 89 c7 	movq	%rax, %rdi
1000109d8:	ff 15 8a 96 00 00 	callq	*38538(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
1000109de:	48 89 c7 	movq	%rax, %rdi
1000109e1:	e8 ee 33 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000109e6:	ba d8 01 00 00 	movl	$472, %edx
1000109eb:	41 89 d0 	movl	%edx, %r8d
1000109ee:	48 8d 0d b3 bc 00 00 	leaq	48307(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
1000109f5:	48 8d 35 ec bd 00 00 	leaq	48620(%rip), %rsi ## Objc cfstring ref: @"self"
1000109fc:	48 8b 95 d8 fc ff ff 	movq	-808(%rbp), %rdx
100010a03:	48 8b bd d0 fc ff ff 	movq	-816(%rbp), %rdi
100010a0a:	4c 8b 0d 77 0a 01 00 	movq	68215(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100010a11:	49 89 c2 	movq	%rax, %r10
100010a14:	48 89 bd 18 fa ff ff 	movq	%rdi, -1512(%rbp)
100010a1b:	4c 89 d7 	movq	%r10, %rdi
100010a1e:	48 89 b5 10 fa ff ff 	movq	%rsi, -1520(%rbp)
100010a25:	4c 89 ce 	movq	%r9, %rsi
100010a28:	4c 8b 8d 18 fa ff ff 	movq	-1512(%rbp), %r9
100010a2f:	48 89 8d 08 fa ff ff 	movq	%rcx, -1528(%rbp)
100010a36:	4c 89 c9 	movq	%r9, %rcx
100010a39:	4c 8b 8d 08 fa ff ff 	movq	-1528(%rbp), %r9
100010a40:	4c 8b 95 10 fa ff ff 	movq	-1520(%rbp), %r10
100010a47:	4c 89 14 24 	movq	%r10, (%rsp)
100010a4b:	48 89 85 00 fa ff ff 	movq	%rax, -1536(%rbp)
100010a52:	b0 00 	movb	$0, %al
100010a54:	ff 15 0e 96 00 00 	callq	*38414(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100010a5a:	48 8b 8d 00 fa ff ff 	movq	-1536(%rbp), %rcx
100010a61:	48 89 cf 	movq	%rcx, %rdi
100010a64:	ff 15 06 96 00 00 	callq	*38406(%rip) ## literal pool symbol address: _objc_release
100010a6a:	45 31 db 	xorl	%r11d, %r11d
100010a6d:	44 89 de 	movl	%r11d, %esi
100010a70:	48 8d 8d d0 fc ff ff 	leaq	-816(%rbp), %rcx
100010a77:	48 89 cf 	movq	%rcx, %rdi
100010a7a:	e8 73 33 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010a7f:	45 31 db 	xorl	%r11d, %r11d
100010a82:	44 89 de 	movl	%r11d, %esi
100010a85:	48 8d 8d d8 fc ff ff 	leaq	-808(%rbp), %rcx
100010a8c:	48 89 cf 	movq	%rcx, %rdi
100010a8f:	e8 5e 33 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010a94:	e9 00 00 00 00 	jmp	0x100010a99
100010a99:	e9 00 00 00 00 	jmp	0x100010a9e
100010a9e:	e9 00 00 00 00 	jmp	0x100010aa3
100010aa3:	48 83 bd e0 fc ff ff 00 	cmpq	$0, -800(%rbp)
100010aab:	0f 95 c0 	setne	%al
100010aae:	34 ff 	xorb	$-1, %al
100010ab0:	24 01 	andb	$1, %al
100010ab2:	0f b6 c8 	movzbl	%al, %ecx
100010ab5:	48 63 d1 	movslq	%ecx, %rdx
100010ab8:	48 83 fa 00 	cmpq	$0, %rdx
100010abc:	0f 84 c1 01 00 00 	je	0x100010c83
100010ac2:	48 8d 15 6e 5a 00 00 	leaq	23150(%rip), %rdx ## literal pool for: "void __ASPECTS_ARE_BEING_CALLED__(NSObject *__unsafe_unretained, SEL, NSInvocation *__strong)"
100010ac9:	48 8b 05 f0 0b 01 00 	movq	68592(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100010ad0:	48 8b 35 81 09 01 00 	movq	67969(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100010ad7:	48 89 c7 	movq	%rax, %rdi
100010ada:	ff 15 88 95 00 00 	callq	*38280(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100010ae0:	48 89 c7 	movq	%rax, %rdi
100010ae3:	e8 ec 32 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010ae8:	48 89 85 c8 fc ff ff 	movq	%rax, -824(%rbp)
100010aef:	48 83 bd c8 fc ff ff 00 	cmpq	$0, -824(%rbp)
100010af7:	0f 84 13 00 00 00 	je	0x100010b10
100010afd:	48 8b 85 c8 fc ff ff 	movq	-824(%rbp), %rax
100010b04:	48 89 85 f8 f9 ff ff 	movq	%rax, -1544(%rbp)
100010b0b:	e9 13 00 00 00 	jmp	0x100010b23
100010b10:	48 8d 05 51 bb 00 00 	leaq	47953(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100010b17:	48 89 85 f8 f9 ff ff 	movq	%rax, -1544(%rbp)
100010b1e:	e9 00 00 00 00 	jmp	0x100010b23
100010b23:	48 8b 85 f8 f9 ff ff 	movq	-1544(%rbp), %rax
100010b2a:	48 8d 8d c8 fc ff ff 	leaq	-824(%rbp), %rcx
100010b31:	48 89 cf 	movq	%rcx, %rdi
100010b34:	48 89 c6 	movq	%rax, %rsi
100010b37:	e8 b6 32 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010b3c:	48 8d 15 4a 53 00 00 	leaq	21322(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100010b43:	48 8b 05 76 0b 01 00 	movq	68470(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100010b4a:	48 8b 35 07 09 01 00 	movq	67847(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100010b51:	48 89 c7 	movq	%rax, %rdi
100010b54:	ff 15 0e 95 00 00 	callq	*38158(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100010b5a:	48 89 c7 	movq	%rax, %rdi
100010b5d:	e8 72 32 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010b62:	48 89 85 c0 fc ff ff 	movq	%rax, -832(%rbp)
100010b69:	48 83 bd c0 fc ff ff 00 	cmpq	$0, -832(%rbp)
100010b71:	0f 84 13 00 00 00 	je	0x100010b8a
100010b77:	48 8b 85 c0 fc ff ff 	movq	-832(%rbp), %rax
100010b7e:	48 89 85 f0 f9 ff ff 	movq	%rax, -1552(%rbp)
100010b85:	e9 13 00 00 00 	jmp	0x100010b9d
100010b8a:	48 8d 05 f7 ba 00 00 	leaq	47863(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
100010b91:	48 89 85 f0 f9 ff ff 	movq	%rax, -1552(%rbp)
100010b98:	e9 00 00 00 00 	jmp	0x100010b9d
100010b9d:	48 8b 85 f0 f9 ff ff 	movq	-1552(%rbp), %rax
100010ba4:	48 8d 8d c0 fc ff ff 	leaq	-832(%rbp), %rcx
100010bab:	48 89 cf 	movq	%rcx, %rdi
100010bae:	48 89 c6 	movq	%rax, %rsi
100010bb1:	e8 3c 32 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010bb6:	48 8b 05 e3 0b 01 00 	movq	68579(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100010bbd:	48 8b 35 bc 08 01 00 	movq	67772(%rip), %rsi ## Objc selector ref: currentHandler
100010bc4:	48 89 c7 	movq	%rax, %rdi
100010bc7:	ff 15 9b 94 00 00 	callq	*38043(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100010bcd:	48 89 c7 	movq	%rax, %rdi
100010bd0:	e8 ff 31 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010bd5:	ba d9 01 00 00 	movl	$473, %edx
100010bda:	41 89 d0 	movl	%edx, %r8d
100010bdd:	48 8d 0d c4 ba 00 00 	leaq	47812(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100010be4:	48 8d 35 dd bb 00 00 	leaq	48093(%rip), %rsi ## Objc cfstring ref: @"invocation"
100010beb:	48 8b 95 c8 fc ff ff 	movq	-824(%rbp), %rdx
100010bf2:	48 8b bd c0 fc ff ff 	movq	-832(%rbp), %rdi
100010bf9:	4c 8b 0d 88 08 01 00 	movq	67720(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100010c00:	49 89 c2 	movq	%rax, %r10
100010c03:	48 89 bd e8 f9 ff ff 	movq	%rdi, -1560(%rbp)
100010c0a:	4c 89 d7 	movq	%r10, %rdi
100010c0d:	48 89 b5 e0 f9 ff ff 	movq	%rsi, -1568(%rbp)
100010c14:	4c 89 ce 	movq	%r9, %rsi
100010c17:	4c 8b 8d e8 f9 ff ff 	movq	-1560(%rbp), %r9
100010c1e:	48 89 8d d8 f9 ff ff 	movq	%rcx, -1576(%rbp)
100010c25:	4c 89 c9 	movq	%r9, %rcx
100010c28:	4c 8b 8d d8 f9 ff ff 	movq	-1576(%rbp), %r9
100010c2f:	4c 8b 95 e0 f9 ff ff 	movq	-1568(%rbp), %r10
100010c36:	4c 89 14 24 	movq	%r10, (%rsp)
100010c3a:	48 89 85 d0 f9 ff ff 	movq	%rax, -1584(%rbp)
100010c41:	b0 00 	movb	$0, %al
100010c43:	ff 15 1f 94 00 00 	callq	*37919(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100010c49:	48 8b 8d d0 f9 ff ff 	movq	-1584(%rbp), %rcx
100010c50:	48 89 cf 	movq	%rcx, %rdi
100010c53:	ff 15 17 94 00 00 	callq	*37911(%rip) ## literal pool symbol address: _objc_release
100010c59:	45 31 db 	xorl	%r11d, %r11d
100010c5c:	44 89 de 	movl	%r11d, %esi
100010c5f:	48 8d 8d c0 fc ff ff 	leaq	-832(%rbp), %rcx
100010c66:	48 89 cf 	movq	%rcx, %rdi
100010c69:	e8 84 31 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010c6e:	45 31 db 	xorl	%r11d, %r11d
100010c71:	44 89 de 	movl	%r11d, %esi
100010c74:	48 8d 8d c8 fc ff ff 	leaq	-824(%rbp), %rcx
100010c7b:	48 89 cf 	movq	%rcx, %rdi
100010c7e:	e8 6f 31 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100010c83:	e9 00 00 00 00 	jmp	0x100010c88
100010c88:	e9 00 00 00 00 	jmp	0x100010c8d
100010c8d:	48 8b 85 e0 fc ff ff 	movq	-800(%rbp), %rax
100010c94:	48 8b 35 4d 08 01 00 	movq	67661(%rip), %rsi ## Objc selector ref: selector
100010c9b:	48 89 c7 	movq	%rax, %rdi
100010c9e:	ff 15 c4 93 00 00 	callq	*37828(%rip) ## Objc message: -[%rdi selector]
100010ca4:	48 89 85 b8 fc ff ff 	movq	%rax, -840(%rbp)
100010cab:	48 8b 85 e0 fc ff ff 	movq	-800(%rbp), %rax
100010cb2:	48 8b 35 2f 08 01 00 	movq	67631(%rip), %rsi ## Objc selector ref: selector
100010cb9:	48 89 c7 	movq	%rax, %rdi
100010cbc:	ff 15 a6 93 00 00 	callq	*37798(%rip) ## Objc message: -[%rdi selector]
100010cc2:	48 89 c7 	movq	%rax, %rdi
100010cc5:	e8 96 e6 ff ff 	callq	_aspect_aliasForSelector
100010cca:	48 89 85 b0 fc ff ff 	movq	%rax, -848(%rbp)
100010cd1:	48 8b 95 b0 fc ff ff 	movq	-848(%rbp), %rdx
100010cd8:	48 8b 85 e0 fc ff ff 	movq	-800(%rbp), %rax
100010cdf:	48 8b 35 aa 07 01 00 	movq	67498(%rip), %rsi ## Objc selector ref: setSelector:
100010ce6:	48 89 c7 	movq	%rax, %rdi
100010ce9:	ff 15 79 93 00 00 	callq	*37753(%rip) ## Objc message: -[%rdi setSelector:]
100010cef:	48 8b 85 f0 fc ff ff 	movq	-784(%rbp), %rax
100010cf6:	48 8b b5 b0 fc ff ff 	movq	-848(%rbp), %rsi
100010cfd:	48 89 c7 	movq	%rax, %rdi
100010d00:	e8 93 30 00 00 	callq	0x100013d98 ## symbol stub for: _objc_getAssociatedObject
100010d05:	48 89 c7 	movq	%rax, %rdi
100010d08:	e8 c7 30 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010d0d:	48 89 85 a8 fc ff ff 	movq	%rax, -856(%rbp)
100010d14:	48 8b 85 f0 fc ff ff 	movq	-784(%rbp), %rax
100010d1b:	48 89 c7 	movq	%rax, %rdi
100010d1e:	e8 ed 30 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
100010d23:	48 8b b5 b0 fc ff ff 	movq	-848(%rbp), %rsi
100010d2a:	48 89 c7 	movq	%rax, %rdi
100010d2d:	e8 3e 14 00 00 	callq	_aspect_getContainerForClass
100010d32:	48 89 c7 	movq	%rax, %rdi
100010d35:	e8 9a 30 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010d3a:	48 89 85 a0 fc ff ff 	movq	%rax, -864(%rbp)
100010d41:	48 8b 05 88 0a 01 00 	movq	68232(%rip), %rax ## Objc class ref: AspectInfo
100010d48:	48 8b 35 69 01 01 00 	movq	65897(%rip), %rsi ## Objc selector ref: alloc
100010d4f:	48 89 c7 	movq	%rax, %rdi
100010d52:	ff 15 10 93 00 00 	callq	*37648(%rip) ## Objc message: +[AspectInfo alloc]
100010d58:	48 8b 95 f0 fc ff ff 	movq	-784(%rbp), %rdx
100010d5f:	48 8b 8d e0 fc ff ff 	movq	-800(%rbp), %rcx
100010d66:	48 8b 35 93 08 01 00 	movq	67731(%rip), %rsi ## Objc selector ref: initWithInstance:invocation:
100010d6d:	48 89 c7 	movq	%rax, %rdi
100010d70:	ff 15 f2 92 00 00 	callq	*37618(%rip) ## Objc message: -[%rdi initWithInstance:invocation:]
100010d76:	31 f6 	xorl	%esi, %esi
100010d78:	41 b8 40 00 00 00 	movl	$64, %r8d
100010d7e:	44 89 c2 	movl	%r8d, %edx
100010d81:	48 8d 8d 48 fc ff ff 	leaq	-952(%rbp), %rcx
100010d88:	48 89 85 98 fc ff ff 	movq	%rax, -872(%rbp)
100010d8f:	48 c7 85 90 fc ff ff 00 00 00 00 	movq	$0, -880(%rbp)
100010d9a:	48 89 cf 	movq	%rcx, %rdi
100010d9d:	e8 96 2f 00 00 	callq	0x100013d38 ## symbol stub for: _memset
100010da2:	48 8b 85 a0 fc ff ff 	movq	-864(%rbp), %rax
100010da9:	48 8b 35 50 07 01 00 	movq	67408(%rip), %rsi ## Objc selector ref: beforeAspects
100010db0:	48 89 c7 	movq	%rax, %rdi
100010db3:	ff 15 af 92 00 00 	callq	*37551(%rip) ## Objc message: -[%rdi beforeAspects]
100010db9:	48 89 c7 	movq	%rax, %rdi
100010dbc:	e8 13 30 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010dc1:	48 8d 95 48 fc ff ff 	leaq	-952(%rbp), %rdx
100010dc8:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
100010dcf:	41 b8 10 00 00 00 	movl	$16, %r8d
100010dd5:	48 8b 35 6c 07 01 00 	movq	67436(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100010ddc:	48 89 c7 	movq	%rax, %rdi
100010ddf:	48 89 85 c8 f9 ff ff 	movq	%rax, -1592(%rbp)
100010de6:	ff 15 7c 92 00 00 	callq	*37500(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100010dec:	48 83 f8 00 	cmpq	$0, %rax
100010df0:	48 89 85 c0 f9 ff ff 	movq	%rax, -1600(%rbp)
100010df7:	0f 84 3f 02 00 00 	je	0x10001103c
100010dfd:	31 c0 	xorl	%eax, %eax
100010dff:	89 c1 	movl	%eax, %ecx
100010e01:	48 8d 95 48 fc ff ff 	leaq	-952(%rbp), %rdx
100010e08:	48 83 c2 10 	addq	$16, %rdx
100010e0c:	48 8b b5 58 fc ff ff 	movq	-936(%rbp), %rsi
100010e13:	48 8b 36 	movq	(%rsi), %rsi
100010e16:	48 8b bd c0 f9 ff ff 	movq	-1600(%rbp), %rdi
100010e1d:	48 89 b5 b8 f9 ff ff 	movq	%rsi, -1608(%rbp)
100010e24:	48 89 95 b0 f9 ff ff 	movq	%rdx, -1616(%rbp)
100010e2b:	48 89 8d a8 f9 ff ff 	movq	%rcx, -1624(%rbp)
100010e32:	48 89 bd a0 f9 ff ff 	movq	%rdi, -1632(%rbp)
100010e39:	48 8b 85 a0 f9 ff ff 	movq	-1632(%rbp), %rax
100010e40:	48 8b 8d a8 f9 ff ff 	movq	-1624(%rbp), %rcx
100010e47:	48 8b 95 b0 f9 ff ff 	movq	-1616(%rbp), %rdx
100010e4e:	48 8b 32 	movq	(%rdx), %rsi
100010e51:	48 8b bd b8 f9 ff ff 	movq	-1608(%rbp), %rdi
100010e58:	48 39 3e 	cmpq	%rdi, (%rsi)
100010e5b:	48 89 85 98 f9 ff ff 	movq	%rax, -1640(%rbp)
100010e62:	48 89 8d 90 f9 ff ff 	movq	%rcx, -1648(%rbp)
100010e69:	0f 84 0f 00 00 00 	je	0x100010e7e
100010e6f:	48 8b 85 c8 f9 ff ff 	movq	-1592(%rbp), %rax
100010e76:	48 89 c7 	movq	%rax, %rdi
100010e79:	e8 14 2f 00 00 	callq	0x100013d92 ## symbol stub for: _objc_enumerationMutation
100010e7e:	48 8b 85 50 fc ff ff 	movq	-944(%rbp), %rax
100010e85:	48 8b 8d 90 f9 ff ff 	movq	-1648(%rbp), %rcx
100010e8c:	48 8b 04 c8 	movq	(%rax,%rcx,8), %rax
100010e90:	48 89 85 88 fc ff ff 	movq	%rax, -888(%rbp)
100010e97:	48 8b 85 88 fc ff ff 	movq	-888(%rbp), %rax
100010e9e:	48 8b 95 98 fc ff ff 	movq	-872(%rbp), %rdx
100010ea5:	48 8b 35 5c 07 01 00 	movq	67420(%rip), %rsi ## Objc selector ref: invokeWithInfo:
100010eac:	48 89 c7 	movq	%rax, %rdi
100010eaf:	ff 15 b3 91 00 00 	callq	*37299(%rip) ## Objc message: -[%rdi invokeWithInfo:]
100010eb5:	48 8b 8d 88 fc ff ff 	movq	-888(%rbp), %rcx
100010ebc:	48 8b 35 35 06 01 00 	movq	67125(%rip), %rsi ## Objc selector ref: options
100010ec3:	48 89 cf 	movq	%rcx, %rdi
100010ec6:	88 85 8f f9 ff ff 	movb	%al, -1649(%rbp)
100010ecc:	ff 15 96 91 00 00 	callq	*37270(%rip) ## Objc message: -[%rdi options]
100010ed2:	48 83 e0 08 	andq	$8, %rax
100010ed6:	48 83 f8 00 	cmpq	$0, %rax
100010eda:	0f 84 e6 00 00 00 	je	0x100010fc6
100010ee0:	48 8b 85 90 fc ff ff 	movq	-880(%rbp), %rax
100010ee7:	c6 85 37 fc ff ff 00 	movb	$0, -969(%rbp)
100010eee:	48 83 f8 00 	cmpq	$0, %rax
100010ef2:	48 89 85 80 f9 ff ff 	movq	%rax, -1664(%rbp)
100010ef9:	0f 84 13 00 00 00 	je	0x100010f12
100010eff:	48 8b 85 80 f9 ff ff 	movq	-1664(%rbp), %rax
100010f06:	48 89 85 78 f9 ff ff 	movq	%rax, -1672(%rbp)
100010f0d:	e9 4d 00 00 00 	jmp	0x100010f5f
100010f12:	31 c0 	xorl	%eax, %eax
100010f14:	89 c1 	movl	%eax, %ecx
100010f16:	48 8d 95 40 fc ff ff 	leaq	-960(%rbp), %rdx
100010f1d:	48 8b 35 6c 07 01 00 	movq	67436(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
100010f24:	48 8b 3d f5 05 01 00 	movq	67061(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
100010f2b:	48 89 bd 70 f9 ff ff 	movq	%rdi, -1680(%rbp)
100010f32:	48 89 f7 	movq	%rsi, %rdi
100010f35:	48 8b b5 70 f9 ff ff 	movq	-1680(%rbp), %rsi
100010f3c:	ff 15 26 91 00 00 	callq	*37158(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
100010f42:	48 89 c7 	movq	%rax, %rdi
100010f45:	e8 8a 2e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010f4a:	48 89 85 38 fc ff ff 	movq	%rax, -968(%rbp)
100010f51:	c6 85 37 fc ff ff 01 	movb	$1, -969(%rbp)
100010f58:	48 89 85 78 f9 ff ff 	movq	%rax, -1672(%rbp)
100010f5f:	48 8b 85 78 f9 ff ff 	movq	-1672(%rbp), %rax
100010f66:	48 8b 8d 88 fc ff ff 	movq	-888(%rbp), %rcx
100010f6d:	48 8b 35 b4 05 01 00 	movq	66996(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
100010f74:	48 89 c7 	movq	%rax, %rdi
100010f77:	48 89 ca 	movq	%rcx, %rdx
100010f7a:	ff 15 e8 90 00 00 	callq	*37096(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
100010f80:	48 89 c7 	movq	%rax, %rdi
100010f83:	e8 4c 2e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100010f88:	48 8b 8d 90 fc ff ff 	movq	-880(%rbp), %rcx
100010f8f:	48 89 85 90 fc ff ff 	movq	%rax, -880(%rbp)
100010f96:	48 89 cf 	movq	%rcx, %rdi
100010f99:	ff 15 d1 90 00 00 	callq	*37073(%rip) ## literal pool symbol address: _objc_release
100010f9f:	f6 85 37 fc ff ff 01 	testb	$1, -969(%rbp)
100010fa6:	0f 85 05 00 00 00 	jne	0x100010fb1
100010fac:	e9 10 00 00 00 	jmp	0x100010fc1
100010fb1:	48 8b 85 38 fc ff ff 	movq	-968(%rbp), %rax
100010fb8:	48 89 c7 	movq	%rax, %rdi
100010fbb:	ff 15 af 90 00 00 	callq	*37039(%rip) ## literal pool symbol address: _objc_release
100010fc1:	e9 00 00 00 00 	jmp	0x100010fc6
100010fc6:	e9 00 00 00 00 	jmp	0x100010fcb
100010fcb:	48 8b 85 90 f9 ff ff 	movq	-1648(%rbp), %rax
100010fd2:	48 83 c0 01 	addq	$1, %rax
100010fd6:	48 8b 8d 98 f9 ff ff 	movq	-1640(%rbp), %rcx
100010fdd:	48 39 c8 	cmpq	%rcx, %rax
100010fe0:	48 89 8d a0 f9 ff ff 	movq	%rcx, -1632(%rbp)
100010fe7:	48 89 85 a8 f9 ff ff 	movq	%rax, -1624(%rbp)
100010fee:	0f 82 45 fe ff ff 	jb	0x100010e39
100010ff4:	48 8d 95 48 fc ff ff 	leaq	-952(%rbp), %rdx
100010ffb:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
100011002:	b8 10 00 00 00 	movl	$16, %eax
100011007:	41 89 c0 	movl	%eax, %r8d
10001100a:	48 8b 35 37 05 01 00 	movq	66871(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011011:	48 8b bd c8 f9 ff ff 	movq	-1592(%rbp), %rdi
100011018:	ff 15 4a 90 00 00 	callq	*36938(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
10001101e:	45 31 c9 	xorl	%r9d, %r9d
100011021:	44 89 c9 	movl	%r9d, %ecx
100011024:	48 83 f8 00 	cmpq	$0, %rax
100011028:	48 89 8d a8 f9 ff ff 	movq	%rcx, -1624(%rbp)
10001102f:	48 89 85 a0 f9 ff ff 	movq	%rax, -1632(%rbp)
100011036:	0f 85 fd fd ff ff 	jne	0x100010e39
10001103c:	48 8b 85 c8 f9 ff ff 	movq	-1592(%rbp), %rax
100011043:	48 89 c7 	movq	%rax, %rdi
100011046:	ff 15 24 90 00 00 	callq	*36900(%rip) ## literal pool symbol address: _objc_release
10001104c:	31 f6 	xorl	%esi, %esi
10001104e:	b8 40 00 00 00 	movl	$64, %eax
100011053:	89 c2 	movl	%eax, %edx
100011055:	48 8d 8d e8 fb ff ff 	leaq	-1048(%rbp), %rcx
10001105c:	48 89 cf 	movq	%rcx, %rdi
10001105f:	e8 d4 2c 00 00 	callq	0x100013d38 ## symbol stub for: _memset
100011064:	48 8b 8d a8 fc ff ff 	movq	-856(%rbp), %rcx
10001106b:	48 8b 35 8e 04 01 00 	movq	66702(%rip), %rsi ## Objc selector ref: beforeAspects
100011072:	48 89 cf 	movq	%rcx, %rdi
100011075:	ff 15 ed 8f 00 00 	callq	*36845(%rip) ## Objc message: -[%rdi beforeAspects]
10001107b:	48 89 c7 	movq	%rax, %rdi
10001107e:	e8 51 2d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011083:	48 8d 95 e8 fb ff ff 	leaq	-1048(%rbp), %rdx
10001108a:	48 8d 8d f8 fe ff ff 	leaq	-264(%rbp), %rcx
100011091:	41 b8 10 00 00 00 	movl	$16, %r8d
100011097:	48 8b 35 aa 04 01 00 	movq	66730(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
10001109e:	48 89 c7 	movq	%rax, %rdi
1000110a1:	48 89 85 68 f9 ff ff 	movq	%rax, -1688(%rbp)
1000110a8:	ff 15 ba 8f 00 00 	callq	*36794(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
1000110ae:	48 83 f8 00 	cmpq	$0, %rax
1000110b2:	48 89 85 60 f9 ff ff 	movq	%rax, -1696(%rbp)
1000110b9:	0f 84 3f 02 00 00 	je	0x1000112fe
1000110bf:	31 c0 	xorl	%eax, %eax
1000110c1:	89 c1 	movl	%eax, %ecx
1000110c3:	48 8d 95 e8 fb ff ff 	leaq	-1048(%rbp), %rdx
1000110ca:	48 83 c2 10 	addq	$16, %rdx
1000110ce:	48 8b b5 f8 fb ff ff 	movq	-1032(%rbp), %rsi
1000110d5:	48 8b 36 	movq	(%rsi), %rsi
1000110d8:	48 8b bd 60 f9 ff ff 	movq	-1696(%rbp), %rdi
1000110df:	48 89 b5 58 f9 ff ff 	movq	%rsi, -1704(%rbp)
1000110e6:	48 89 95 50 f9 ff ff 	movq	%rdx, -1712(%rbp)
1000110ed:	48 89 8d 48 f9 ff ff 	movq	%rcx, -1720(%rbp)
1000110f4:	48 89 bd 40 f9 ff ff 	movq	%rdi, -1728(%rbp)
1000110fb:	48 8b 85 40 f9 ff ff 	movq	-1728(%rbp), %rax
100011102:	48 8b 8d 48 f9 ff ff 	movq	-1720(%rbp), %rcx
100011109:	48 8b 95 50 f9 ff ff 	movq	-1712(%rbp), %rdx
100011110:	48 8b 32 	movq	(%rdx), %rsi
100011113:	48 8b bd 58 f9 ff ff 	movq	-1704(%rbp), %rdi
10001111a:	48 39 3e 	cmpq	%rdi, (%rsi)
10001111d:	48 89 85 38 f9 ff ff 	movq	%rax, -1736(%rbp)
100011124:	48 89 8d 30 f9 ff ff 	movq	%rcx, -1744(%rbp)
10001112b:	0f 84 0f 00 00 00 	je	0x100011140
100011131:	48 8b 85 68 f9 ff ff 	movq	-1688(%rbp), %rax
100011138:	48 89 c7 	movq	%rax, %rdi
10001113b:	e8 52 2c 00 00 	callq	0x100013d92 ## symbol stub for: _objc_enumerationMutation
100011140:	48 8b 85 f0 fb ff ff 	movq	-1040(%rbp), %rax
100011147:	48 8b 8d 30 f9 ff ff 	movq	-1744(%rbp), %rcx
10001114e:	48 8b 04 c8 	movq	(%rax,%rcx,8), %rax
100011152:	48 89 85 28 fc ff ff 	movq	%rax, -984(%rbp)
100011159:	48 8b 85 28 fc ff ff 	movq	-984(%rbp), %rax
100011160:	48 8b 95 98 fc ff ff 	movq	-872(%rbp), %rdx
100011167:	48 8b 35 9a 04 01 00 	movq	66714(%rip), %rsi ## Objc selector ref: invokeWithInfo:
10001116e:	48 89 c7 	movq	%rax, %rdi
100011171:	ff 15 f1 8e 00 00 	callq	*36593(%rip) ## Objc message: -[%rdi invokeWithInfo:]
100011177:	48 8b 8d 28 fc ff ff 	movq	-984(%rbp), %rcx
10001117e:	48 8b 35 73 03 01 00 	movq	66419(%rip), %rsi ## Objc selector ref: options
100011185:	48 89 cf 	movq	%rcx, %rdi
100011188:	88 85 2f f9 ff ff 	movb	%al, -1745(%rbp)
10001118e:	ff 15 d4 8e 00 00 	callq	*36564(%rip) ## Objc message: -[%rdi options]
100011194:	48 83 e0 08 	andq	$8, %rax
100011198:	48 83 f8 00 	cmpq	$0, %rax
10001119c:	0f 84 e6 00 00 00 	je	0x100011288
1000111a2:	48 8b 85 90 fc ff ff 	movq	-880(%rbp), %rax
1000111a9:	c6 85 d7 fb ff ff 00 	movb	$0, -1065(%rbp)
1000111b0:	48 83 f8 00 	cmpq	$0, %rax
1000111b4:	48 89 85 20 f9 ff ff 	movq	%rax, -1760(%rbp)
1000111bb:	0f 84 13 00 00 00 	je	0x1000111d4
1000111c1:	48 8b 85 20 f9 ff ff 	movq	-1760(%rbp), %rax
1000111c8:	48 89 85 18 f9 ff ff 	movq	%rax, -1768(%rbp)
1000111cf:	e9 4d 00 00 00 	jmp	0x100011221
1000111d4:	31 c0 	xorl	%eax, %eax
1000111d6:	89 c1 	movl	%eax, %ecx
1000111d8:	48 8d 95 e0 fb ff ff 	leaq	-1056(%rbp), %rdx
1000111df:	48 8b 35 aa 04 01 00 	movq	66730(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
1000111e6:	48 8b 3d 33 03 01 00 	movq	66355(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
1000111ed:	48 89 bd 10 f9 ff ff 	movq	%rdi, -1776(%rbp)
1000111f4:	48 89 f7 	movq	%rsi, %rdi
1000111f7:	48 8b b5 10 f9 ff ff 	movq	-1776(%rbp), %rsi
1000111fe:	ff 15 64 8e 00 00 	callq	*36452(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
100011204:	48 89 c7 	movq	%rax, %rdi
100011207:	e8 c8 2b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001120c:	48 89 85 d8 fb ff ff 	movq	%rax, -1064(%rbp)
100011213:	c6 85 d7 fb ff ff 01 	movb	$1, -1065(%rbp)
10001121a:	48 89 85 18 f9 ff ff 	movq	%rax, -1768(%rbp)
100011221:	48 8b 85 18 f9 ff ff 	movq	-1768(%rbp), %rax
100011228:	48 8b 8d 28 fc ff ff 	movq	-984(%rbp), %rcx
10001122f:	48 8b 35 f2 02 01 00 	movq	66290(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
100011236:	48 89 c7 	movq	%rax, %rdi
100011239:	48 89 ca 	movq	%rcx, %rdx
10001123c:	ff 15 26 8e 00 00 	callq	*36390(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
100011242:	48 89 c7 	movq	%rax, %rdi
100011245:	e8 8a 2b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001124a:	48 8b 8d 90 fc ff ff 	movq	-880(%rbp), %rcx
100011251:	48 89 85 90 fc ff ff 	movq	%rax, -880(%rbp)
100011258:	48 89 cf 	movq	%rcx, %rdi
10001125b:	ff 15 0f 8e 00 00 	callq	*36367(%rip) ## literal pool symbol address: _objc_release
100011261:	f6 85 d7 fb ff ff 01 	testb	$1, -1065(%rbp)
100011268:	0f 85 05 00 00 00 	jne	0x100011273
10001126e:	e9 10 00 00 00 	jmp	0x100011283
100011273:	48 8b 85 d8 fb ff ff 	movq	-1064(%rbp), %rax
10001127a:	48 89 c7 	movq	%rax, %rdi
10001127d:	ff 15 ed 8d 00 00 	callq	*36333(%rip) ## literal pool symbol address: _objc_release
100011283:	e9 00 00 00 00 	jmp	0x100011288
100011288:	e9 00 00 00 00 	jmp	0x10001128d
10001128d:	48 8b 85 30 f9 ff ff 	movq	-1744(%rbp), %rax
100011294:	48 83 c0 01 	addq	$1, %rax
100011298:	48 8b 8d 38 f9 ff ff 	movq	-1736(%rbp), %rcx
10001129f:	48 39 c8 	cmpq	%rcx, %rax
1000112a2:	48 89 8d 40 f9 ff ff 	movq	%rcx, -1728(%rbp)
1000112a9:	48 89 85 48 f9 ff ff 	movq	%rax, -1720(%rbp)
1000112b0:	0f 82 45 fe ff ff 	jb	0x1000110fb
1000112b6:	48 8d 95 e8 fb ff ff 	leaq	-1048(%rbp), %rdx
1000112bd:	48 8d 8d f8 fe ff ff 	leaq	-264(%rbp), %rcx
1000112c4:	b8 10 00 00 00 	movl	$16, %eax
1000112c9:	41 89 c0 	movl	%eax, %r8d
1000112cc:	48 8b 35 75 02 01 00 	movq	66165(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
1000112d3:	48 8b bd 68 f9 ff ff 	movq	-1688(%rbp), %rdi
1000112da:	ff 15 88 8d 00 00 	callq	*36232(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
1000112e0:	45 31 c9 	xorl	%r9d, %r9d
1000112e3:	44 89 c9 	movl	%r9d, %ecx
1000112e6:	48 83 f8 00 	cmpq	$0, %rax
1000112ea:	48 89 8d 48 f9 ff ff 	movq	%rcx, -1720(%rbp)
1000112f1:	48 89 85 40 f9 ff ff 	movq	%rax, -1728(%rbp)
1000112f8:	0f 85 fd fd ff ff 	jne	0x1000110fb
1000112fe:	48 8b 85 68 f9 ff ff 	movq	-1688(%rbp), %rax
100011305:	48 89 c7 	movq	%rax, %rdi
100011308:	ff 15 62 8d 00 00 	callq	*36194(%rip) ## literal pool symbol address: _objc_release
10001130e:	c6 85 d6 fb ff ff 01 	movb	$1, -1066(%rbp)
100011315:	48 8b 85 a8 fc ff ff 	movq	-856(%rbp), %rax
10001131c:	48 8b 35 e5 01 01 00 	movq	66021(%rip), %rsi ## Objc selector ref: insteadAspects
100011323:	48 89 c7 	movq	%rax, %rdi
100011326:	ff 15 3c 8d 00 00 	callq	*36156(%rip) ## Objc message: -[%rdi insteadAspects]
10001132c:	48 89 c7 	movq	%rax, %rdi
10001132f:	e8 a0 2a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011334:	48 8b 35 ed ff 00 00 	movq	65517(%rip), %rsi ## Objc selector ref: count
10001133b:	48 89 c7 	movq	%rax, %rdi
10001133e:	48 89 85 08 f9 ff ff 	movq	%rax, -1784(%rbp)
100011345:	ff 15 1d 8d 00 00 	callq	*36125(%rip) ## Objc message: -[%rdi count]
10001134b:	b1 01 	movb	$1, %cl
10001134d:	c6 85 c7 fb ff ff 00 	movb	$0, -1081(%rbp)
100011354:	48 83 f8 00 	cmpq	$0, %rax
100011358:	88 8d 07 f9 ff ff 	movb	%cl, -1785(%rbp)
10001135e:	0f 85 4a 00 00 00 	jne	0x1000113ae
100011364:	48 8b 85 a0 fc ff ff 	movq	-864(%rbp), %rax
10001136b:	48 8b 35 96 01 01 00 	movq	65942(%rip), %rsi ## Objc selector ref: insteadAspects
100011372:	48 89 c7 	movq	%rax, %rdi
100011375:	ff 15 ed 8c 00 00 	callq	*36077(%rip) ## Objc message: -[%rdi insteadAspects]
10001137b:	48 89 c7 	movq	%rax, %rdi
10001137e:	e8 51 2a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011383:	48 89 85 c8 fb ff ff 	movq	%rax, -1080(%rbp)
10001138a:	c6 85 c7 fb ff ff 01 	movb	$1, -1081(%rbp)
100011391:	48 8b 35 90 ff 00 00 	movq	65424(%rip), %rsi ## Objc selector ref: count
100011398:	48 89 c7 	movq	%rax, %rdi
10001139b:	ff 15 c7 8c 00 00 	callq	*36039(%rip) ## Objc message: -[%rdi count]
1000113a1:	48 83 f8 00 	cmpq	$0, %rax
1000113a5:	0f 95 c1 	setne	%cl
1000113a8:	88 8d 07 f9 ff ff 	movb	%cl, -1785(%rbp)
1000113ae:	8a 85 07 f9 ff ff 	movb	-1785(%rbp), %al
1000113b4:	f6 85 c7 fb ff ff 01 	testb	$1, -1081(%rbp)
1000113bb:	88 85 06 f9 ff ff 	movb	%al, -1786(%rbp)
1000113c1:	0f 85 05 00 00 00 	jne	0x1000113cc
1000113c7:	e9 10 00 00 00 	jmp	0x1000113dc
1000113cc:	48 8b 85 c8 fb ff ff 	movq	-1080(%rbp), %rax
1000113d3:	48 89 c7 	movq	%rax, %rdi
1000113d6:	ff 15 94 8c 00 00 	callq	*35988(%rip) ## literal pool symbol address: _objc_release
1000113dc:	48 8b 85 08 f9 ff ff 	movq	-1784(%rbp), %rax
1000113e3:	48 89 c7 	movq	%rax, %rdi
1000113e6:	ff 15 84 8c 00 00 	callq	*35972(%rip) ## literal pool symbol address: _objc_release
1000113ec:	8a 8d 06 f9 ff ff 	movb	-1786(%rbp), %cl
1000113f2:	f6 c1 01 	testb	$1, %cl
1000113f5:	0f 85 05 00 00 00 	jne	0x100011400
1000113fb:	e9 89 05 00 00 	jmp	0x100011989
100011400:	31 f6 	xorl	%esi, %esi
100011402:	b8 40 00 00 00 	movl	$64, %eax
100011407:	89 c2 	movl	%eax, %edx
100011409:	48 8d 8d 78 fb ff ff 	leaq	-1160(%rbp), %rcx
100011410:	48 89 cf 	movq	%rcx, %rdi
100011413:	e8 20 29 00 00 	callq	0x100013d38 ## symbol stub for: _memset
100011418:	48 8b 8d a0 fc ff ff 	movq	-864(%rbp), %rcx
10001141f:	48 8b 35 e2 00 01 00 	movq	65762(%rip), %rsi ## Objc selector ref: insteadAspects
100011426:	48 89 cf 	movq	%rcx, %rdi
100011429:	ff 15 39 8c 00 00 	callq	*35897(%rip) ## Objc message: -[%rdi insteadAspects]
10001142f:	48 89 c7 	movq	%rax, %rdi
100011432:	e8 9d 29 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011437:	48 8d 95 78 fb ff ff 	leaq	-1160(%rbp), %rdx
10001143e:	48 8d 8d 78 fe ff ff 	leaq	-392(%rbp), %rcx
100011445:	41 b8 10 00 00 00 	movl	$16, %r8d
10001144b:	48 8b 35 f6 00 01 00 	movq	65782(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011452:	48 89 c7 	movq	%rax, %rdi
100011455:	48 89 85 f8 f8 ff ff 	movq	%rax, -1800(%rbp)
10001145c:	ff 15 06 8c 00 00 	callq	*35846(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011462:	48 83 f8 00 	cmpq	$0, %rax
100011466:	48 89 85 f0 f8 ff ff 	movq	%rax, -1808(%rbp)
10001146d:	0f 84 3f 02 00 00 	je	0x1000116b2
100011473:	31 c0 	xorl	%eax, %eax
100011475:	89 c1 	movl	%eax, %ecx
100011477:	48 8d 95 78 fb ff ff 	leaq	-1160(%rbp), %rdx
10001147e:	48 83 c2 10 	addq	$16, %rdx
100011482:	48 8b b5 88 fb ff ff 	movq	-1144(%rbp), %rsi
100011489:	48 8b 36 	movq	(%rsi), %rsi
10001148c:	48 8b bd f0 f8 ff ff 	movq	-1808(%rbp), %rdi
100011493:	48 89 b5 e8 f8 ff ff 	movq	%rsi, -1816(%rbp)
10001149a:	48 89 95 e0 f8 ff ff 	movq	%rdx, -1824(%rbp)
1000114a1:	48 89 8d d8 f8 ff ff 	movq	%rcx, -1832(%rbp)
1000114a8:	48 89 bd d0 f8 ff ff 	movq	%rdi, -1840(%rbp)
1000114af:	48 8b 85 d0 f8 ff ff 	movq	-1840(%rbp), %rax
1000114b6:	48 8b 8d d8 f8 ff ff 	movq	-1832(%rbp), %rcx
1000114bd:	48 8b 95 e0 f8 ff ff 	movq	-1824(%rbp), %rdx
1000114c4:	48 8b 32 	movq	(%rdx), %rsi
1000114c7:	48 8b bd e8 f8 ff ff 	movq	-1816(%rbp), %rdi
1000114ce:	48 39 3e 	cmpq	%rdi, (%rsi)
1000114d1:	48 89 85 c8 f8 ff ff 	movq	%rax, -1848(%rbp)
1000114d8:	48 89 8d c0 f8 ff ff 	movq	%rcx, -1856(%rbp)
1000114df:	0f 84 0f 00 00 00 	je	0x1000114f4
1000114e5:	48 8b 85 f8 f8 ff ff 	movq	-1800(%rbp), %rax
1000114ec:	48 89 c7 	movq	%rax, %rdi
1000114ef:	e8 9e 28 00 00 	callq	0x100013d92 ## symbol stub for: _objc_enumerationMutation
1000114f4:	48 8b 85 80 fb ff ff 	movq	-1152(%rbp), %rax
1000114fb:	48 8b 8d c0 f8 ff ff 	movq	-1856(%rbp), %rcx
100011502:	48 8b 04 c8 	movq	(%rax,%rcx,8), %rax
100011506:	48 89 85 b8 fb ff ff 	movq	%rax, -1096(%rbp)
10001150d:	48 8b 85 b8 fb ff ff 	movq	-1096(%rbp), %rax
100011514:	48 8b 95 98 fc ff ff 	movq	-872(%rbp), %rdx
10001151b:	48 8b 35 e6 00 01 00 	movq	65766(%rip), %rsi ## Objc selector ref: invokeWithInfo:
100011522:	48 89 c7 	movq	%rax, %rdi
100011525:	ff 15 3d 8b 00 00 	callq	*35645(%rip) ## Objc message: -[%rdi invokeWithInfo:]
10001152b:	48 8b 8d b8 fb ff ff 	movq	-1096(%rbp), %rcx
100011532:	48 8b 35 bf ff 00 00 	movq	65471(%rip), %rsi ## Objc selector ref: options
100011539:	48 89 cf 	movq	%rcx, %rdi
10001153c:	88 85 bf f8 ff ff 	movb	%al, -1857(%rbp)
100011542:	ff 15 20 8b 00 00 	callq	*35616(%rip) ## Objc message: -[%rdi options]
100011548:	48 83 e0 08 	andq	$8, %rax
10001154c:	48 83 f8 00 	cmpq	$0, %rax
100011550:	0f 84 e6 00 00 00 	je	0x10001163c
100011556:	48 8b 85 90 fc ff ff 	movq	-880(%rbp), %rax
10001155d:	c6 85 67 fb ff ff 00 	movb	$0, -1177(%rbp)
100011564:	48 83 f8 00 	cmpq	$0, %rax
100011568:	48 89 85 b0 f8 ff ff 	movq	%rax, -1872(%rbp)
10001156f:	0f 84 13 00 00 00 	je	0x100011588
100011575:	48 8b 85 b0 f8 ff ff 	movq	-1872(%rbp), %rax
10001157c:	48 89 85 a8 f8 ff ff 	movq	%rax, -1880(%rbp)
100011583:	e9 4d 00 00 00 	jmp	0x1000115d5
100011588:	31 c0 	xorl	%eax, %eax
10001158a:	89 c1 	movl	%eax, %ecx
10001158c:	48 8d 95 70 fb ff ff 	leaq	-1168(%rbp), %rdx
100011593:	48 8b 35 f6 00 01 00 	movq	65782(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
10001159a:	48 8b 3d 7f ff 00 00 	movq	65407(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
1000115a1:	48 89 bd a0 f8 ff ff 	movq	%rdi, -1888(%rbp)
1000115a8:	48 89 f7 	movq	%rsi, %rdi
1000115ab:	48 8b b5 a0 f8 ff ff 	movq	-1888(%rbp), %rsi
1000115b2:	ff 15 b0 8a 00 00 	callq	*35504(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
1000115b8:	48 89 c7 	movq	%rax, %rdi
1000115bb:	e8 14 28 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000115c0:	48 89 85 68 fb ff ff 	movq	%rax, -1176(%rbp)
1000115c7:	c6 85 67 fb ff ff 01 	movb	$1, -1177(%rbp)
1000115ce:	48 89 85 a8 f8 ff ff 	movq	%rax, -1880(%rbp)
1000115d5:	48 8b 85 a8 f8 ff ff 	movq	-1880(%rbp), %rax
1000115dc:	48 8b 8d b8 fb ff ff 	movq	-1096(%rbp), %rcx
1000115e3:	48 8b 35 3e ff 00 00 	movq	65342(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
1000115ea:	48 89 c7 	movq	%rax, %rdi
1000115ed:	48 89 ca 	movq	%rcx, %rdx
1000115f0:	ff 15 72 8a 00 00 	callq	*35442(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
1000115f6:	48 89 c7 	movq	%rax, %rdi
1000115f9:	e8 d6 27 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000115fe:	48 8b 8d 90 fc ff ff 	movq	-880(%rbp), %rcx
100011605:	48 89 85 90 fc ff ff 	movq	%rax, -880(%rbp)
10001160c:	48 89 cf 	movq	%rcx, %rdi
10001160f:	ff 15 5b 8a 00 00 	callq	*35419(%rip) ## literal pool symbol address: _objc_release
100011615:	f6 85 67 fb ff ff 01 	testb	$1, -1177(%rbp)
10001161c:	0f 85 05 00 00 00 	jne	0x100011627
100011622:	e9 10 00 00 00 	jmp	0x100011637
100011627:	48 8b 85 68 fb ff ff 	movq	-1176(%rbp), %rax
10001162e:	48 89 c7 	movq	%rax, %rdi
100011631:	ff 15 39 8a 00 00 	callq	*35385(%rip) ## literal pool symbol address: _objc_release
100011637:	e9 00 00 00 00 	jmp	0x10001163c
10001163c:	e9 00 00 00 00 	jmp	0x100011641
100011641:	48 8b 85 c0 f8 ff ff 	movq	-1856(%rbp), %rax
100011648:	48 83 c0 01 	addq	$1, %rax
10001164c:	48 8b 8d c8 f8 ff ff 	movq	-1848(%rbp), %rcx
100011653:	48 39 c8 	cmpq	%rcx, %rax
100011656:	48 89 8d d0 f8 ff ff 	movq	%rcx, -1840(%rbp)
10001165d:	48 89 85 d8 f8 ff ff 	movq	%rax, -1832(%rbp)
100011664:	0f 82 45 fe ff ff 	jb	0x1000114af
10001166a:	48 8d 95 78 fb ff ff 	leaq	-1160(%rbp), %rdx
100011671:	48 8d 8d 78 fe ff ff 	leaq	-392(%rbp), %rcx
100011678:	b8 10 00 00 00 	movl	$16, %eax
10001167d:	41 89 c0 	movl	%eax, %r8d
100011680:	48 8b 35 c1 fe 00 00 	movq	65217(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011687:	48 8b bd f8 f8 ff ff 	movq	-1800(%rbp), %rdi
10001168e:	ff 15 d4 89 00 00 	callq	*35284(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011694:	45 31 c9 	xorl	%r9d, %r9d
100011697:	44 89 c9 	movl	%r9d, %ecx
10001169a:	48 83 f8 00 	cmpq	$0, %rax
10001169e:	48 89 8d d8 f8 ff ff 	movq	%rcx, -1832(%rbp)
1000116a5:	48 89 85 d0 f8 ff ff 	movq	%rax, -1840(%rbp)
1000116ac:	0f 85 fd fd ff ff 	jne	0x1000114af
1000116b2:	48 8b 85 f8 f8 ff ff 	movq	-1800(%rbp), %rax
1000116b9:	48 89 c7 	movq	%rax, %rdi
1000116bc:	ff 15 ae 89 00 00 	callq	*35246(%rip) ## literal pool symbol address: _objc_release
1000116c2:	31 f6 	xorl	%esi, %esi
1000116c4:	b8 40 00 00 00 	movl	$64, %eax
1000116c9:	89 c2 	movl	%eax, %edx
1000116cb:	48 8d 8d 18 fb ff ff 	leaq	-1256(%rbp), %rcx
1000116d2:	48 89 cf 	movq	%rcx, %rdi
1000116d5:	e8 5e 26 00 00 	callq	0x100013d38 ## symbol stub for: _memset
1000116da:	48 8b 8d a8 fc ff ff 	movq	-856(%rbp), %rcx
1000116e1:	48 8b 35 20 fe 00 00 	movq	65056(%rip), %rsi ## Objc selector ref: insteadAspects
1000116e8:	48 89 cf 	movq	%rcx, %rdi
1000116eb:	ff 15 77 89 00 00 	callq	*35191(%rip) ## Objc message: -[%rdi insteadAspects]
1000116f1:	48 89 c7 	movq	%rax, %rdi
1000116f4:	e8 db 26 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000116f9:	48 8d 95 18 fb ff ff 	leaq	-1256(%rbp), %rdx
100011700:	48 8d 8d f8 fd ff ff 	leaq	-520(%rbp), %rcx
100011707:	41 b8 10 00 00 00 	movl	$16, %r8d
10001170d:	48 8b 35 34 fe 00 00 	movq	65076(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011714:	48 89 c7 	movq	%rax, %rdi
100011717:	48 89 85 98 f8 ff ff 	movq	%rax, -1896(%rbp)
10001171e:	ff 15 44 89 00 00 	callq	*35140(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011724:	48 83 f8 00 	cmpq	$0, %rax
100011728:	48 89 85 90 f8 ff ff 	movq	%rax, -1904(%rbp)
10001172f:	0f 84 3f 02 00 00 	je	0x100011974
100011735:	31 c0 	xorl	%eax, %eax
100011737:	89 c1 	movl	%eax, %ecx
100011739:	48 8d 95 18 fb ff ff 	leaq	-1256(%rbp), %rdx
100011740:	48 83 c2 10 	addq	$16, %rdx
100011744:	48 8b b5 28 fb ff ff 	movq	-1240(%rbp), %rsi
10001174b:	48 8b 36 	movq	(%rsi), %rsi
10001174e:	48 8b bd 90 f8 ff ff 	movq	-1904(%rbp), %rdi
100011755:	48 89 b5 88 f8 ff ff 	movq	%rsi, -1912(%rbp)
10001175c:	48 89 95 80 f8 ff ff 	movq	%rdx, -1920(%rbp)
100011763:	48 89 8d 78 f8 ff ff 	movq	%rcx, -1928(%rbp)
10001176a:	48 89 bd 70 f8 ff ff 	movq	%rdi, -1936(%rbp)
100011771:	48 8b 85 70 f8 ff ff 	movq	-1936(%rbp), %rax
100011778:	48 8b 8d 78 f8 ff ff 	movq	-1928(%rbp), %rcx
10001177f:	48 8b 95 80 f8 ff ff 	movq	-1920(%rbp), %rdx
100011786:	48 8b 32 	movq	(%rdx), %rsi
100011789:	48 8b bd 88 f8 ff ff 	movq	-1912(%rbp), %rdi
100011790:	48 39 3e 	cmpq	%rdi, (%rsi)
100011793:	48 89 85 68 f8 ff ff 	movq	%rax, -1944(%rbp)
10001179a:	48 89 8d 60 f8 ff ff 	movq	%rcx, -1952(%rbp)
1000117a1:	0f 84 0f 00 00 00 	je	0x1000117b6
1000117a7:	48 8b 85 98 f8 ff ff 	movq	-1896(%rbp), %rax
1000117ae:	48 89 c7 	movq	%rax, %rdi
1000117b1:	e8 dc 25 00 00 	callq	0x100013d92 ## symbol stub for: _objc_enumerationMutation
1000117b6:	48 8b 85 20 fb ff ff 	movq	-1248(%rbp), %rax
1000117bd:	48 8b 8d 60 f8 ff ff 	movq	-1952(%rbp), %rcx
1000117c4:	48 8b 04 c8 	movq	(%rax,%rcx,8), %rax
1000117c8:	48 89 85 58 fb ff ff 	movq	%rax, -1192(%rbp)
1000117cf:	48 8b 85 58 fb ff ff 	movq	-1192(%rbp), %rax
1000117d6:	48 8b 95 98 fc ff ff 	movq	-872(%rbp), %rdx
1000117dd:	48 8b 35 24 fe 00 00 	movq	65060(%rip), %rsi ## Objc selector ref: invokeWithInfo:
1000117e4:	48 89 c7 	movq	%rax, %rdi
1000117e7:	ff 15 7b 88 00 00 	callq	*34939(%rip) ## Objc message: -[%rdi invokeWithInfo:]
1000117ed:	48 8b 8d 58 fb ff ff 	movq	-1192(%rbp), %rcx
1000117f4:	48 8b 35 fd fc 00 00 	movq	64765(%rip), %rsi ## Objc selector ref: options
1000117fb:	48 89 cf 	movq	%rcx, %rdi
1000117fe:	88 85 5f f8 ff ff 	movb	%al, -1953(%rbp)
100011804:	ff 15 5e 88 00 00 	callq	*34910(%rip) ## Objc message: -[%rdi options]
10001180a:	48 83 e0 08 	andq	$8, %rax
10001180e:	48 83 f8 00 	cmpq	$0, %rax
100011812:	0f 84 e6 00 00 00 	je	0x1000118fe
100011818:	48 8b 85 90 fc ff ff 	movq	-880(%rbp), %rax
10001181f:	c6 85 07 fb ff ff 00 	movb	$0, -1273(%rbp)
100011826:	48 83 f8 00 	cmpq	$0, %rax
10001182a:	48 89 85 50 f8 ff ff 	movq	%rax, -1968(%rbp)
100011831:	0f 84 13 00 00 00 	je	0x10001184a
100011837:	48 8b 85 50 f8 ff ff 	movq	-1968(%rbp), %rax
10001183e:	48 89 85 48 f8 ff ff 	movq	%rax, -1976(%rbp)
100011845:	e9 4d 00 00 00 	jmp	0x100011897
10001184a:	31 c0 	xorl	%eax, %eax
10001184c:	89 c1 	movl	%eax, %ecx
10001184e:	48 8d 95 10 fb ff ff 	leaq	-1264(%rbp), %rdx
100011855:	48 8b 35 34 fe 00 00 	movq	65076(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
10001185c:	48 8b 3d bd fc 00 00 	movq	64701(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
100011863:	48 89 bd 40 f8 ff ff 	movq	%rdi, -1984(%rbp)
10001186a:	48 89 f7 	movq	%rsi, %rdi
10001186d:	48 8b b5 40 f8 ff ff 	movq	-1984(%rbp), %rsi
100011874:	ff 15 ee 87 00 00 	callq	*34798(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
10001187a:	48 89 c7 	movq	%rax, %rdi
10001187d:	e8 52 25 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011882:	48 89 85 08 fb ff ff 	movq	%rax, -1272(%rbp)
100011889:	c6 85 07 fb ff ff 01 	movb	$1, -1273(%rbp)
100011890:	48 89 85 48 f8 ff ff 	movq	%rax, -1976(%rbp)
100011897:	48 8b 85 48 f8 ff ff 	movq	-1976(%rbp), %rax
10001189e:	48 8b 8d 58 fb ff ff 	movq	-1192(%rbp), %rcx
1000118a5:	48 8b 35 7c fc 00 00 	movq	64636(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
1000118ac:	48 89 c7 	movq	%rax, %rdi
1000118af:	48 89 ca 	movq	%rcx, %rdx
1000118b2:	ff 15 b0 87 00 00 	callq	*34736(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
1000118b8:	48 89 c7 	movq	%rax, %rdi
1000118bb:	e8 14 25 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000118c0:	48 8b 8d 90 fc ff ff 	movq	-880(%rbp), %rcx
1000118c7:	48 89 85 90 fc ff ff 	movq	%rax, -880(%rbp)
1000118ce:	48 89 cf 	movq	%rcx, %rdi
1000118d1:	ff 15 99 87 00 00 	callq	*34713(%rip) ## literal pool symbol address: _objc_release
1000118d7:	f6 85 07 fb ff ff 01 	testb	$1, -1273(%rbp)
1000118de:	0f 85 05 00 00 00 	jne	0x1000118e9
1000118e4:	e9 10 00 00 00 	jmp	0x1000118f9
1000118e9:	48 8b 85 08 fb ff ff 	movq	-1272(%rbp), %rax
1000118f0:	48 89 c7 	movq	%rax, %rdi
1000118f3:	ff 15 77 87 00 00 	callq	*34679(%rip) ## literal pool symbol address: _objc_release
1000118f9:	e9 00 00 00 00 	jmp	0x1000118fe
1000118fe:	e9 00 00 00 00 	jmp	0x100011903
100011903:	48 8b 85 60 f8 ff ff 	movq	-1952(%rbp), %rax
10001190a:	48 83 c0 01 	addq	$1, %rax
10001190e:	48 8b 8d 68 f8 ff ff 	movq	-1944(%rbp), %rcx
100011915:	48 39 c8 	cmpq	%rcx, %rax
100011918:	48 89 8d 70 f8 ff ff 	movq	%rcx, -1936(%rbp)
10001191f:	48 89 85 78 f8 ff ff 	movq	%rax, -1928(%rbp)
100011926:	0f 82 45 fe ff ff 	jb	0x100011771
10001192c:	48 8d 95 18 fb ff ff 	leaq	-1256(%rbp), %rdx
100011933:	48 8d 8d f8 fd ff ff 	leaq	-520(%rbp), %rcx
10001193a:	b8 10 00 00 00 	movl	$16, %eax
10001193f:	41 89 c0 	movl	%eax, %r8d
100011942:	48 8b 35 ff fb 00 00 	movq	64511(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011949:	48 8b bd 98 f8 ff ff 	movq	-1896(%rbp), %rdi
100011950:	ff 15 12 87 00 00 	callq	*34578(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011956:	45 31 c9 	xorl	%r9d, %r9d
100011959:	44 89 c9 	movl	%r9d, %ecx
10001195c:	48 83 f8 00 	cmpq	$0, %rax
100011960:	48 89 8d 78 f8 ff ff 	movq	%rcx, -1928(%rbp)
100011967:	48 89 85 70 f8 ff ff 	movq	%rax, -1936(%rbp)
10001196e:	0f 85 fd fd ff ff 	jne	0x100011771
100011974:	48 8b 85 98 f8 ff ff 	movq	-1896(%rbp), %rax
10001197b:	48 89 c7 	movq	%rax, %rdi
10001197e:	ff 15 ec 86 00 00 	callq	*34540(%rip) ## literal pool symbol address: _objc_release
100011984:	e9 e0 00 00 00 	jmp	0x100011a69
100011989:	48 8b 85 e0 fc ff ff 	movq	-800(%rbp), %rax
100011990:	48 8b 35 79 fc 00 00 	movq	64633(%rip), %rsi ## Objc selector ref: target
100011997:	48 89 c7 	movq	%rax, %rdi
10001199a:	ff 15 c8 86 00 00 	callq	*34504(%rip) ## Objc message: -[%rdi target]
1000119a0:	48 89 c7 	movq	%rax, %rdi
1000119a3:	e8 2c 24 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000119a8:	48 89 c7 	movq	%rax, %rdi
1000119ab:	48 89 85 38 f8 ff ff 	movq	%rax, -1992(%rbp)
1000119b2:	e8 59 24 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
1000119b7:	48 89 85 f8 fa ff ff 	movq	%rax, -1288(%rbp)
1000119be:	48 8b bd 38 f8 ff ff 	movq	-1992(%rbp), %rdi
1000119c5:	ff 15 a5 86 00 00 	callq	*34469(%rip) ## literal pool symbol address: _objc_release
1000119cb:	48 8b bd f8 fa ff ff 	movq	-1288(%rbp), %rdi
1000119d2:	48 8b 95 b0 fc ff ff 	movq	-848(%rbp), %rdx
1000119d9:	48 8b 35 d8 fb 00 00 	movq	64472(%rip), %rsi ## Objc selector ref: instancesRespondToSelector:
1000119e0:	ff 15 82 86 00 00 	callq	*34434(%rip) ## Objc message: -[%rdi instancesRespondToSelector:]
1000119e6:	88 c1 	movb	%al, %cl
1000119e8:	80 e1 01 	andb	$1, %cl
1000119eb:	88 8d d6 fb ff ff 	movb	%cl, -1066(%rbp)
1000119f1:	a8 01 	testb	$1, %al
1000119f3:	0f 85 05 00 00 00 	jne	0x1000119fe
1000119f9:	e9 1c 00 00 00 	jmp	0x100011a1a
1000119fe:	48 8b 85 e0 fc ff ff 	movq	-800(%rbp), %rax
100011a05:	48 8b 35 0c fc 00 00 	movq	64524(%rip), %rsi ## Objc selector ref: invoke
100011a0c:	48 89 c7 	movq	%rax, %rdi
100011a0f:	ff 15 53 86 00 00 	callq	*34387(%rip) ## Objc message: -[%rdi invoke]
100011a15:	e9 4a 00 00 00 	jmp	0x100011a64
100011a1a:	e9 00 00 00 00 	jmp	0x100011a1f
100011a1f:	31 c0 	xorl	%eax, %eax
100011a21:	88 c1 	movb	%al, %cl
100011a23:	f6 85 d6 fb ff ff 01 	testb	$1, -1066(%rbp)
100011a2a:	88 8d 37 f8 ff ff 	movb	%cl, -1993(%rbp)
100011a30:	0f 85 20 00 00 00 	jne	0x100011a56
100011a36:	48 8b bd f8 fa ff ff 	movq	-1288(%rbp), %rdi
100011a3d:	e8 36 22 00 00 	callq	0x100013c78 ## symbol stub for: _class_getSuperclass
100011a42:	48 89 85 f8 fa ff ff 	movq	%rax, -1288(%rbp)
100011a49:	48 83 f8 00 	cmpq	$0, %rax
100011a4d:	0f 95 c1 	setne	%cl
100011a50:	88 8d 37 f8 ff ff 	movb	%cl, -1993(%rbp)
100011a56:	8a 85 37 f8 ff ff 	movb	-1993(%rbp), %al
100011a5c:	a8 01 	testb	$1, %al
100011a5e:	0f 85 67 ff ff ff 	jne	0x1000119cb
100011a64:	e9 00 00 00 00 	jmp	0x100011a69
100011a69:	31 f6 	xorl	%esi, %esi
100011a6b:	b8 40 00 00 00 	movl	$64, %eax
100011a70:	89 c2 	movl	%eax, %edx
100011a72:	48 8d 8d b0 fa ff ff 	leaq	-1360(%rbp), %rcx
100011a79:	48 89 cf 	movq	%rcx, %rdi
100011a7c:	e8 b7 22 00 00 	callq	0x100013d38 ## symbol stub for: _memset
100011a81:	48 8b 8d a0 fc ff ff 	movq	-864(%rbp), %rcx
100011a88:	48 8b 35 81 fa 00 00 	movq	64129(%rip), %rsi ## Objc selector ref: afterAspects
100011a8f:	48 89 cf 	movq	%rcx, %rdi
100011a92:	ff 15 d0 85 00 00 	callq	*34256(%rip) ## Objc message: -[%rdi afterAspects]
100011a98:	48 89 c7 	movq	%rax, %rdi
100011a9b:	e8 34 23 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011aa0:	48 8d 95 b0 fa ff ff 	leaq	-1360(%rbp), %rdx
100011aa7:	48 8d 8d 78 fd ff ff 	leaq	-648(%rbp), %rcx
100011aae:	41 b8 10 00 00 00 	movl	$16, %r8d
100011ab4:	48 8b 35 8d fa 00 00 	movq	64141(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011abb:	48 89 c7 	movq	%rax, %rdi
100011abe:	48 89 85 28 f8 ff ff 	movq	%rax, -2008(%rbp)
100011ac5:	ff 15 9d 85 00 00 	callq	*34205(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011acb:	48 83 f8 00 	cmpq	$0, %rax
100011acf:	48 89 85 20 f8 ff ff 	movq	%rax, -2016(%rbp)
100011ad6:	0f 84 3f 02 00 00 	je	0x100011d1b
100011adc:	31 c0 	xorl	%eax, %eax
100011ade:	89 c1 	movl	%eax, %ecx
100011ae0:	48 8d 95 b0 fa ff ff 	leaq	-1360(%rbp), %rdx
100011ae7:	48 83 c2 10 	addq	$16, %rdx
100011aeb:	48 8b b5 c0 fa ff ff 	movq	-1344(%rbp), %rsi
100011af2:	48 8b 36 	movq	(%rsi), %rsi
100011af5:	48 8b bd 20 f8 ff ff 	movq	-2016(%rbp), %rdi
100011afc:	48 89 b5 18 f8 ff ff 	movq	%rsi, -2024(%rbp)
100011b03:	48 89 95 10 f8 ff ff 	movq	%rdx, -2032(%rbp)
100011b0a:	48 89 8d 08 f8 ff ff 	movq	%rcx, -2040(%rbp)
100011b11:	48 89 bd 00 f8 ff ff 	movq	%rdi, -2048(%rbp)
100011b18:	48 8b 85 00 f8 ff ff 	movq	-2048(%rbp), %rax
100011b1f:	48 8b 8d 08 f8 ff ff 	movq	-2040(%rbp), %rcx
100011b26:	48 8b 95 10 f8 ff ff 	movq	-2032(%rbp), %rdx
100011b2d:	48 8b 32 	movq	(%rdx), %rsi
100011b30:	48 8b bd 18 f8 ff ff 	movq	-2024(%rbp), %rdi
100011b37:	48 39 3e 	cmpq	%rdi, (%rsi)
100011b3a:	48 89 85 f8 f7 ff ff 	movq	%rax, -2056(%rbp)
100011b41:	48 89 8d f0 f7 ff ff 	movq	%rcx, -2064(%rbp)
100011b48:	0f 84 0f 00 00 00 	je	0x100011b5d
100011b4e:	48 8b 85 28 f8 ff ff 	movq	-2008(%rbp), %rax
100011b55:	48 89 c7 	movq	%rax, %rdi
100011b58:	e8 35 22 00 00 	callq	0x100013d92 ## symbol stub for: _objc_enumerationMutation
100011b5d:	48 8b 85 b8 fa ff ff 	movq	-1352(%rbp), %rax
100011b64:	48 8b 8d f0 f7 ff ff 	movq	-2064(%rbp), %rcx
100011b6b:	48 8b 04 c8 	movq	(%rax,%rcx,8), %rax
100011b6f:	48 89 85 f0 fa ff ff 	movq	%rax, -1296(%rbp)
100011b76:	48 8b 85 f0 fa ff ff 	movq	-1296(%rbp), %rax
100011b7d:	48 8b 95 98 fc ff ff 	movq	-872(%rbp), %rdx
100011b84:	48 8b 35 7d fa 00 00 	movq	64125(%rip), %rsi ## Objc selector ref: invokeWithInfo:
100011b8b:	48 89 c7 	movq	%rax, %rdi
100011b8e:	ff 15 d4 84 00 00 	callq	*34004(%rip) ## Objc message: -[%rdi invokeWithInfo:]
100011b94:	48 8b 8d f0 fa ff ff 	movq	-1296(%rbp), %rcx
100011b9b:	48 8b 35 56 f9 00 00 	movq	63830(%rip), %rsi ## Objc selector ref: options
100011ba2:	48 89 cf 	movq	%rcx, %rdi
100011ba5:	88 85 ef f7 ff ff 	movb	%al, -2065(%rbp)
100011bab:	ff 15 b7 84 00 00 	callq	*33975(%rip) ## Objc message: -[%rdi options]
100011bb1:	48 83 e0 08 	andq	$8, %rax
100011bb5:	48 83 f8 00 	cmpq	$0, %rax
100011bb9:	0f 84 e6 00 00 00 	je	0x100011ca5
100011bbf:	48 8b 85 90 fc ff ff 	movq	-880(%rbp), %rax
100011bc6:	c6 85 9f fa ff ff 00 	movb	$0, -1377(%rbp)
100011bcd:	48 83 f8 00 	cmpq	$0, %rax
100011bd1:	48 89 85 e0 f7 ff ff 	movq	%rax, -2080(%rbp)
100011bd8:	0f 84 13 00 00 00 	je	0x100011bf1
100011bde:	48 8b 85 e0 f7 ff ff 	movq	-2080(%rbp), %rax
100011be5:	48 89 85 d8 f7 ff ff 	movq	%rax, -2088(%rbp)
100011bec:	e9 4d 00 00 00 	jmp	0x100011c3e
100011bf1:	31 c0 	xorl	%eax, %eax
100011bf3:	89 c1 	movl	%eax, %ecx
100011bf5:	48 8d 95 a8 fa ff ff 	leaq	-1368(%rbp), %rdx
100011bfc:	48 8b 35 8d fa 00 00 	movq	64141(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
100011c03:	48 8b 3d 16 f9 00 00 	movq	63766(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
100011c0a:	48 89 bd d0 f7 ff ff 	movq	%rdi, -2096(%rbp)
100011c11:	48 89 f7 	movq	%rsi, %rdi
100011c14:	48 8b b5 d0 f7 ff ff 	movq	-2096(%rbp), %rsi
100011c1b:	ff 15 47 84 00 00 	callq	*33863(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
100011c21:	48 89 c7 	movq	%rax, %rdi
100011c24:	e8 ab 21 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011c29:	48 89 85 a0 fa ff ff 	movq	%rax, -1376(%rbp)
100011c30:	c6 85 9f fa ff ff 01 	movb	$1, -1377(%rbp)
100011c37:	48 89 85 d8 f7 ff ff 	movq	%rax, -2088(%rbp)
100011c3e:	48 8b 85 d8 f7 ff ff 	movq	-2088(%rbp), %rax
100011c45:	48 8b 8d f0 fa ff ff 	movq	-1296(%rbp), %rcx
100011c4c:	48 8b 35 d5 f8 00 00 	movq	63701(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
100011c53:	48 89 c7 	movq	%rax, %rdi
100011c56:	48 89 ca 	movq	%rcx, %rdx
100011c59:	ff 15 09 84 00 00 	callq	*33801(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
100011c5f:	48 89 c7 	movq	%rax, %rdi
100011c62:	e8 6d 21 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011c67:	48 8b 8d 90 fc ff ff 	movq	-880(%rbp), %rcx
100011c6e:	48 89 85 90 fc ff ff 	movq	%rax, -880(%rbp)
100011c75:	48 89 cf 	movq	%rcx, %rdi
100011c78:	ff 15 f2 83 00 00 	callq	*33778(%rip) ## literal pool symbol address: _objc_release
100011c7e:	f6 85 9f fa ff ff 01 	testb	$1, -1377(%rbp)
100011c85:	0f 85 05 00 00 00 	jne	0x100011c90
100011c8b:	e9 10 00 00 00 	jmp	0x100011ca0
100011c90:	48 8b 85 a0 fa ff ff 	movq	-1376(%rbp), %rax
100011c97:	48 89 c7 	movq	%rax, %rdi
100011c9a:	ff 15 d0 83 00 00 	callq	*33744(%rip) ## literal pool symbol address: _objc_release
100011ca0:	e9 00 00 00 00 	jmp	0x100011ca5
100011ca5:	e9 00 00 00 00 	jmp	0x100011caa
100011caa:	48 8b 85 f0 f7 ff ff 	movq	-2064(%rbp), %rax
100011cb1:	48 83 c0 01 	addq	$1, %rax
100011cb5:	48 8b 8d f8 f7 ff ff 	movq	-2056(%rbp), %rcx
100011cbc:	48 39 c8 	cmpq	%rcx, %rax
100011cbf:	48 89 8d 00 f8 ff ff 	movq	%rcx, -2048(%rbp)
100011cc6:	48 89 85 08 f8 ff ff 	movq	%rax, -2040(%rbp)
100011ccd:	0f 82 45 fe ff ff 	jb	0x100011b18
100011cd3:	48 8d 95 b0 fa ff ff 	leaq	-1360(%rbp), %rdx
100011cda:	48 8d 8d 78 fd ff ff 	leaq	-648(%rbp), %rcx
100011ce1:	b8 10 00 00 00 	movl	$16, %eax
100011ce6:	41 89 c0 	movl	%eax, %r8d
100011ce9:	48 8b 35 58 f8 00 00 	movq	63576(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011cf0:	48 8b bd 28 f8 ff ff 	movq	-2008(%rbp), %rdi
100011cf7:	ff 15 6b 83 00 00 	callq	*33643(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011cfd:	45 31 c9 	xorl	%r9d, %r9d
100011d00:	44 89 c9 	movl	%r9d, %ecx
100011d03:	48 83 f8 00 	cmpq	$0, %rax
100011d07:	48 89 8d 08 f8 ff ff 	movq	%rcx, -2040(%rbp)
100011d0e:	48 89 85 00 f8 ff ff 	movq	%rax, -2048(%rbp)
100011d15:	0f 85 fd fd ff ff 	jne	0x100011b18
100011d1b:	48 8b 85 28 f8 ff ff 	movq	-2008(%rbp), %rax
100011d22:	48 89 c7 	movq	%rax, %rdi
100011d25:	ff 15 45 83 00 00 	callq	*33605(%rip) ## literal pool symbol address: _objc_release
100011d2b:	31 f6 	xorl	%esi, %esi
100011d2d:	b8 40 00 00 00 	movl	$64, %eax
100011d32:	89 c2 	movl	%eax, %edx
100011d34:	48 8d 8d 50 fa ff ff 	leaq	-1456(%rbp), %rcx
100011d3b:	48 89 cf 	movq	%rcx, %rdi
100011d3e:	e8 f5 1f 00 00 	callq	0x100013d38 ## symbol stub for: _memset
100011d43:	48 8b 8d a8 fc ff ff 	movq	-856(%rbp), %rcx
100011d4a:	48 8b 35 bf f7 00 00 	movq	63423(%rip), %rsi ## Objc selector ref: afterAspects
100011d51:	48 89 cf 	movq	%rcx, %rdi
100011d54:	ff 15 0e 83 00 00 	callq	*33550(%rip) ## Objc message: -[%rdi afterAspects]
100011d5a:	48 89 c7 	movq	%rax, %rdi
100011d5d:	e8 72 20 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011d62:	48 8d 95 50 fa ff ff 	leaq	-1456(%rbp), %rdx
100011d69:	48 8d 8d f8 fc ff ff 	leaq	-776(%rbp), %rcx
100011d70:	41 b8 10 00 00 00 	movl	$16, %r8d
100011d76:	48 8b 35 cb f7 00 00 	movq	63435(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011d7d:	48 89 c7 	movq	%rax, %rdi
100011d80:	48 89 85 c8 f7 ff ff 	movq	%rax, -2104(%rbp)
100011d87:	ff 15 db 82 00 00 	callq	*33499(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011d8d:	48 83 f8 00 	cmpq	$0, %rax
100011d91:	48 89 85 c0 f7 ff ff 	movq	%rax, -2112(%rbp)
100011d98:	0f 84 3f 02 00 00 	je	0x100011fdd
100011d9e:	31 c0 	xorl	%eax, %eax
100011da0:	89 c1 	movl	%eax, %ecx
100011da2:	48 8d 95 50 fa ff ff 	leaq	-1456(%rbp), %rdx
100011da9:	48 83 c2 10 	addq	$16, %rdx
100011dad:	48 8b b5 60 fa ff ff 	movq	-1440(%rbp), %rsi
100011db4:	48 8b 36 	movq	(%rsi), %rsi
100011db7:	48 8b bd c0 f7 ff ff 	movq	-2112(%rbp), %rdi
100011dbe:	48 89 b5 b8 f7 ff ff 	movq	%rsi, -2120(%rbp)
100011dc5:	48 89 95 b0 f7 ff ff 	movq	%rdx, -2128(%rbp)
100011dcc:	48 89 8d a8 f7 ff ff 	movq	%rcx, -2136(%rbp)
100011dd3:	48 89 bd a0 f7 ff ff 	movq	%rdi, -2144(%rbp)
100011dda:	48 8b 85 a0 f7 ff ff 	movq	-2144(%rbp), %rax
100011de1:	48 8b 8d a8 f7 ff ff 	movq	-2136(%rbp), %rcx
100011de8:	48 8b 95 b0 f7 ff ff 	movq	-2128(%rbp), %rdx
100011def:	48 8b 32 	movq	(%rdx), %rsi
100011df2:	48 8b bd b8 f7 ff ff 	movq	-2120(%rbp), %rdi
100011df9:	48 39 3e 	cmpq	%rdi, (%rsi)
100011dfc:	48 89 85 98 f7 ff ff 	movq	%rax, -2152(%rbp)
100011e03:	48 89 8d 90 f7 ff ff 	movq	%rcx, -2160(%rbp)
100011e0a:	0f 84 0f 00 00 00 	je	0x100011e1f
100011e10:	48 8b 85 c8 f7 ff ff 	movq	-2104(%rbp), %rax
100011e17:	48 89 c7 	movq	%rax, %rdi
100011e1a:	e8 73 1f 00 00 	callq	0x100013d92 ## symbol stub for: _objc_enumerationMutation
100011e1f:	48 8b 85 58 fa ff ff 	movq	-1448(%rbp), %rax
100011e26:	48 8b 8d 90 f7 ff ff 	movq	-2160(%rbp), %rcx
100011e2d:	48 8b 04 c8 	movq	(%rax,%rcx,8), %rax
100011e31:	48 89 85 90 fa ff ff 	movq	%rax, -1392(%rbp)
100011e38:	48 8b 85 90 fa ff ff 	movq	-1392(%rbp), %rax
100011e3f:	48 8b 95 98 fc ff ff 	movq	-872(%rbp), %rdx
100011e46:	48 8b 35 bb f7 00 00 	movq	63419(%rip), %rsi ## Objc selector ref: invokeWithInfo:
100011e4d:	48 89 c7 	movq	%rax, %rdi
100011e50:	ff 15 12 82 00 00 	callq	*33298(%rip) ## Objc message: -[%rdi invokeWithInfo:]
100011e56:	48 8b 8d 90 fa ff ff 	movq	-1392(%rbp), %rcx
100011e5d:	48 8b 35 94 f6 00 00 	movq	63124(%rip), %rsi ## Objc selector ref: options
100011e64:	48 89 cf 	movq	%rcx, %rdi
100011e67:	88 85 8f f7 ff ff 	movb	%al, -2161(%rbp)
100011e6d:	ff 15 f5 81 00 00 	callq	*33269(%rip) ## Objc message: -[%rdi options]
100011e73:	48 83 e0 08 	andq	$8, %rax
100011e77:	48 83 f8 00 	cmpq	$0, %rax
100011e7b:	0f 84 e6 00 00 00 	je	0x100011f67
100011e81:	48 8b 85 90 fc ff ff 	movq	-880(%rbp), %rax
100011e88:	c6 85 3f fa ff ff 00 	movb	$0, -1473(%rbp)
100011e8f:	48 83 f8 00 	cmpq	$0, %rax
100011e93:	48 89 85 80 f7 ff ff 	movq	%rax, -2176(%rbp)
100011e9a:	0f 84 13 00 00 00 	je	0x100011eb3
100011ea0:	48 8b 85 80 f7 ff ff 	movq	-2176(%rbp), %rax
100011ea7:	48 89 85 78 f7 ff ff 	movq	%rax, -2184(%rbp)
100011eae:	e9 4d 00 00 00 	jmp	0x100011f00
100011eb3:	31 c0 	xorl	%eax, %eax
100011eb5:	89 c1 	movl	%eax, %ecx
100011eb7:	48 8d 95 48 fa ff ff 	leaq	-1464(%rbp), %rdx
100011ebe:	48 8b 35 cb f7 00 00 	movq	63435(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSArray
100011ec5:	48 8b 3d 54 f6 00 00 	movq	63060(%rip), %rdi ## Objc selector ref: arrayWithObjects:count:
100011ecc:	48 89 bd 70 f7 ff ff 	movq	%rdi, -2192(%rbp)
100011ed3:	48 89 f7 	movq	%rsi, %rdi
100011ed6:	48 8b b5 70 f7 ff ff 	movq	-2192(%rbp), %rsi
100011edd:	ff 15 85 81 00 00 	callq	*33157(%rip) ## Objc message: +[NSArray arrayWithObjects:count:]
100011ee3:	48 89 c7 	movq	%rax, %rdi
100011ee6:	e8 e9 1e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011eeb:	48 89 85 40 fa ff ff 	movq	%rax, -1472(%rbp)
100011ef2:	c6 85 3f fa ff ff 01 	movb	$1, -1473(%rbp)
100011ef9:	48 89 85 78 f7 ff ff 	movq	%rax, -2184(%rbp)
100011f00:	48 8b 85 78 f7 ff ff 	movq	-2184(%rbp), %rax
100011f07:	48 8b 8d 90 fa ff ff 	movq	-1392(%rbp), %rcx
100011f0e:	48 8b 35 13 f6 00 00 	movq	62995(%rip), %rsi ## Objc selector ref: arrayByAddingObject:
100011f15:	48 89 c7 	movq	%rax, %rdi
100011f18:	48 89 ca 	movq	%rcx, %rdx
100011f1b:	ff 15 47 81 00 00 	callq	*33095(%rip) ## Objc message: -[%rdi arrayByAddingObject:]
100011f21:	48 89 c7 	movq	%rax, %rdi
100011f24:	e8 ab 1e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100011f29:	48 8b 8d 90 fc ff ff 	movq	-880(%rbp), %rcx
100011f30:	48 89 85 90 fc ff ff 	movq	%rax, -880(%rbp)
100011f37:	48 89 cf 	movq	%rcx, %rdi
100011f3a:	ff 15 30 81 00 00 	callq	*33072(%rip) ## literal pool symbol address: _objc_release
100011f40:	f6 85 3f fa ff ff 01 	testb	$1, -1473(%rbp)
100011f47:	0f 85 05 00 00 00 	jne	0x100011f52
100011f4d:	e9 10 00 00 00 	jmp	0x100011f62
100011f52:	48 8b 85 40 fa ff ff 	movq	-1472(%rbp), %rax
100011f59:	48 89 c7 	movq	%rax, %rdi
100011f5c:	ff 15 0e 81 00 00 	callq	*33038(%rip) ## literal pool symbol address: _objc_release
100011f62:	e9 00 00 00 00 	jmp	0x100011f67
100011f67:	e9 00 00 00 00 	jmp	0x100011f6c
100011f6c:	48 8b 85 90 f7 ff ff 	movq	-2160(%rbp), %rax
100011f73:	48 83 c0 01 	addq	$1, %rax
100011f77:	48 8b 8d 98 f7 ff ff 	movq	-2152(%rbp), %rcx
100011f7e:	48 39 c8 	cmpq	%rcx, %rax
100011f81:	48 89 8d a0 f7 ff ff 	movq	%rcx, -2144(%rbp)
100011f88:	48 89 85 a8 f7 ff ff 	movq	%rax, -2136(%rbp)
100011f8f:	0f 82 45 fe ff ff 	jb	0x100011dda
100011f95:	48 8d 95 50 fa ff ff 	leaq	-1456(%rbp), %rdx
100011f9c:	48 8d 8d f8 fc ff ff 	leaq	-776(%rbp), %rcx
100011fa3:	b8 10 00 00 00 	movl	$16, %eax
100011fa8:	41 89 c0 	movl	%eax, %r8d
100011fab:	48 8b 35 96 f5 00 00 	movq	62870(%rip), %rsi ## Objc selector ref: countByEnumeratingWithState:objects:count:
100011fb2:	48 8b bd c8 f7 ff ff 	movq	-2104(%rbp), %rdi
100011fb9:	ff 15 a9 80 00 00 	callq	*32937(%rip) ## Objc message: -[%rdi countByEnumeratingWithState:objects:count:]
100011fbf:	45 31 c9 	xorl	%r9d, %r9d
100011fc2:	44 89 c9 	movl	%r9d, %ecx
100011fc5:	48 83 f8 00 	cmpq	$0, %rax
100011fc9:	48 89 8d a8 f7 ff ff 	movq	%rcx, -2136(%rbp)
100011fd0:	48 89 85 a0 f7 ff ff 	movq	%rax, -2144(%rbp)
100011fd7:	0f 85 fd fd ff ff 	jne	0x100011dda
100011fdd:	48 8b 85 c8 f7 ff ff 	movq	-2104(%rbp), %rax
100011fe4:	48 89 c7 	movq	%rax, %rdi
100011fe7:	ff 15 83 80 00 00 	callq	*32899(%rip) ## literal pool symbol address: _objc_release
100011fed:	f6 85 d6 fb ff ff 01 	testb	$1, -1066(%rbp)
100011ff4:	0f 85 c6 00 00 00 	jne	0x1000120c0
100011ffa:	48 8b 95 b8 fc ff ff 	movq	-840(%rbp), %rdx
100012001:	48 8b 85 e0 fc ff ff 	movq	-800(%rbp), %rax
100012008:	48 8b 35 81 f4 00 00 	movq	62593(%rip), %rsi ## Objc selector ref: setSelector:
10001200f:	48 89 c7 	movq	%rax, %rdi
100012012:	ff 15 50 80 00 00 	callq	*32848(%rip) ## Objc message: -[%rdi setSelector:]
100012018:	48 8d 05 09 a6 00 00 	leaq	42505(%rip), %rax ## Objc cfstring ref: @"__aspects_forwardInvocation:"
10001201f:	48 89 c7 	movq	%rax, %rdi
100012022:	e8 f1 1b 00 00 	callq	0x100013c18 ## symbol stub for: _NSSelectorFromString
100012027:	48 89 85 30 fa ff ff 	movq	%rax, -1488(%rbp)
10001202e:	48 8b 85 f0 fc ff ff 	movq	-784(%rbp), %rax
100012035:	48 8b 95 30 fa ff ff 	movq	-1488(%rbp), %rdx
10001203c:	48 8b 35 6d f5 00 00 	movq	62829(%rip), %rsi ## Objc selector ref: respondsToSelector:
100012043:	48 89 c7 	movq	%rax, %rdi
100012046:	ff 15 1c 80 00 00 	callq	*32796(%rip) ## Objc message: -[%rdi respondsToSelector:]
10001204c:	a8 01 	testb	$1, %al
10001204e:	0f 85 05 00 00 00 	jne	0x100012059
100012054:	e9 23 00 00 00 	jmp	0x10001207c
100012059:	48 8b 85 f0 fc ff ff 	movq	-784(%rbp), %rax
100012060:	48 8b b5 30 fa ff ff 	movq	-1488(%rbp), %rsi
100012067:	48 8b 95 e0 fc ff ff 	movq	-800(%rbp), %rdx
10001206e:	48 89 c7 	movq	%rax, %rdi
100012071:	ff 15 f1 7f 00 00 	callq	*32753(%rip) ## Objc message: -[%rdi respondsToSelector:]
100012077:	e9 3f 00 00 00 	jmp	0x1000120bb
10001207c:	48 8b 85 f0 fc ff ff 	movq	-784(%rbp), %rax
100012083:	48 8b 8d e0 fc ff ff 	movq	-800(%rbp), %rcx
10001208a:	48 8b 35 57 f4 00 00 	movq	62551(%rip), %rsi ## Objc selector ref: selector
100012091:	48 89 cf 	movq	%rcx, %rdi
100012094:	48 89 85 68 f7 ff ff 	movq	%rax, -2200(%rbp)
10001209b:	ff 15 c7 7f 00 00 	callq	*32711(%rip) ## Objc message: -[%rdi selector]
1000120a1:	48 8b 35 78 f5 00 00 	movq	62840(%rip), %rsi ## Objc selector ref: doesNotRecognizeSelector:
1000120a8:	48 8b 8d 68 f7 ff ff 	movq	-2200(%rbp), %rcx
1000120af:	48 89 cf 	movq	%rcx, %rdi
1000120b2:	48 89 c2 	movq	%rax, %rdx
1000120b5:	ff 15 ad 7f 00 00 	callq	*32685(%rip) ## Objc message: -[%rdi doesNotRecognizeSelector:]
1000120bb:	e9 00 00 00 00 	jmp	0x1000120c0
1000120c0:	48 8b 85 90 fc ff ff 	movq	-880(%rbp), %rax
1000120c7:	48 8b 15 5a f5 00 00 	movq	62810(%rip), %rdx ## Objc selector ref: remove
1000120ce:	48 8b 35 5b f5 00 00 	movq	62811(%rip), %rsi ## Objc selector ref: makeObjectsPerformSelector:
1000120d5:	48 89 c7 	movq	%rax, %rdi
1000120d8:	ff 15 8a 7f 00 00 	callq	*32650(%rip) ## Objc message: -[%rdi makeObjectsPerformSelector:]
1000120de:	31 c9 	xorl	%ecx, %ecx
1000120e0:	89 ce 	movl	%ecx, %esi
1000120e2:	48 8d 85 90 fc ff ff 	leaq	-880(%rbp), %rax
1000120e9:	48 89 c7 	movq	%rax, %rdi
1000120ec:	e8 01 1d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000120f1:	31 c9 	xorl	%ecx, %ecx
1000120f3:	89 ce 	movl	%ecx, %esi
1000120f5:	48 8d 85 98 fc ff ff 	leaq	-872(%rbp), %rax
1000120fc:	48 89 c7 	movq	%rax, %rdi
1000120ff:	e8 ee 1c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012104:	31 c9 	xorl	%ecx, %ecx
100012106:	89 ce 	movl	%ecx, %esi
100012108:	48 8d 85 a0 fc ff ff 	leaq	-864(%rbp), %rax
10001210f:	48 89 c7 	movq	%rax, %rdi
100012112:	e8 db 1c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012117:	31 c9 	xorl	%ecx, %ecx
100012119:	89 ce 	movl	%ecx, %esi
10001211b:	48 8d 85 a8 fc ff ff 	leaq	-856(%rbp), %rax
100012122:	48 89 c7 	movq	%rax, %rdi
100012125:	e8 c8 1c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001212a:	31 c9 	xorl	%ecx, %ecx
10001212c:	89 ce 	movl	%ecx, %esi
10001212e:	48 8d 85 e0 fc ff ff 	leaq	-800(%rbp), %rax
100012135:	48 89 c7 	movq	%rax, %rdi
100012138:	e8 b5 1c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001213d:	48 8b 05 f4 7e 00 00 	movq	32500(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100012144:	48 8b 00 	movq	(%rax), %rax
100012147:	48 8b 55 f8 	movq	-8(%rbp), %rdx
10001214b:	48 39 d0 	cmpq	%rdx, %rax
10001214e:	0f 85 09 00 00 00 	jne	0x10001215d
100012154:	48 81 c4 a0 08 00 00 	addq	$2208, %rsp
10001215b:	5d 	popq	%rbp
10001215c:	c3 	retq
10001215d:	e8 e6 1a 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
100012162:	0f 0b 	ud2
100012164:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_getContainerForClass:
100012170:	55 	pushq	%rbp
100012171:	48 89 e5 	movq	%rsp, %rbp
100012174:	48 83 ec 70 	subq	$112, %rsp
100012178:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10001217c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100012180:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
100012185:	0f 95 c0 	setne	%al
100012188:	34 ff 	xorb	$-1, %al
10001218a:	24 01 	andb	$1, %al
10001218c:	0f b6 c8 	movzbl	%al, %ecx
10001218f:	48 63 d1 	movslq	%ecx, %rdx
100012192:	48 83 fa 00 	cmpq	$0, %rdx
100012196:	0f 84 73 01 00 00 	je	0x10001230f
10001219c:	48 8d 15 f2 43 00 00 	leaq	17394(%rip), %rdx ## literal pool for: "AspectsContainer *aspect_getContainerForClass(__unsafe_unretained Class, SEL)"
1000121a3:	48 8b 05 16 f5 00 00 	movq	62742(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000121aa:	48 8b 35 a7 f2 00 00 	movq	62119(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000121b1:	48 89 c7 	movq	%rax, %rdi
1000121b4:	ff 15 ae 7e 00 00 	callq	*32430(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000121ba:	48 89 c7 	movq	%rax, %rdi
1000121bd:	e8 12 1c 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000121c2:	48 89 45 e8 	movq	%rax, -24(%rbp)
1000121c6:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
1000121cb:	0f 84 0d 00 00 00 	je	0x1000121de
1000121d1:	48 8b 45 e8 	movq	-24(%rbp), %rax
1000121d5:	48 89 45 d0 	movq	%rax, -48(%rbp)
1000121d9:	e9 10 00 00 00 	jmp	0x1000121ee
1000121de:	48 8d 05 83 a4 00 00 	leaq	42115(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
1000121e5:	48 89 45 d0 	movq	%rax, -48(%rbp)
1000121e9:	e9 00 00 00 00 	jmp	0x1000121ee
1000121ee:	48 8b 45 d0 	movq	-48(%rbp), %rax
1000121f2:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
1000121f6:	48 89 cf 	movq	%rcx, %rdi
1000121f9:	48 89 c6 	movq	%rax, %rsi
1000121fc:	e8 f1 1b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012201:	48 8d 15 85 3c 00 00 	leaq	15493(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100012208:	48 8b 05 b1 f4 00 00 	movq	62641(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10001220f:	48 8b 35 42 f2 00 00 	movq	62018(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100012216:	48 89 c7 	movq	%rax, %rdi
100012219:	ff 15 49 7e 00 00 	callq	*32329(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10001221f:	48 89 c7 	movq	%rax, %rdi
100012222:	e8 ad 1b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012227:	48 89 45 e0 	movq	%rax, -32(%rbp)
10001222b:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
100012230:	0f 84 0d 00 00 00 	je	0x100012243
100012236:	48 8b 45 e0 	movq	-32(%rbp), %rax
10001223a:	48 89 45 c8 	movq	%rax, -56(%rbp)
10001223e:	e9 10 00 00 00 	jmp	0x100012253
100012243:	48 8d 05 3e a4 00 00 	leaq	42046(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10001224a:	48 89 45 c8 	movq	%rax, -56(%rbp)
10001224e:	e9 00 00 00 00 	jmp	0x100012253
100012253:	48 8b 45 c8 	movq	-56(%rbp), %rax
100012257:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10001225b:	48 89 cf 	movq	%rcx, %rdi
10001225e:	48 89 c6 	movq	%rax, %rsi
100012261:	e8 8c 1b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012266:	48 8b 05 33 f5 00 00 	movq	62771(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10001226d:	48 8b 35 0c f2 00 00 	movq	61964(%rip), %rsi ## Objc selector ref: currentHandler
100012274:	48 89 c7 	movq	%rax, %rdi
100012277:	ff 15 eb 7d 00 00 	callq	*32235(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10001227d:	48 89 c7 	movq	%rax, %rdi
100012280:	e8 4f 1b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012285:	ba 19 02 00 00 	movl	$537, %edx
10001228a:	41 89 d0 	movl	%edx, %r8d
10001228d:	48 8d 0d 14 a4 00 00 	leaq	42004(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100012294:	48 8d 35 0d a7 00 00 	leaq	42765(%rip), %rsi ## Objc cfstring ref: @"klass"
10001229b:	48 8b 55 e8 	movq	-24(%rbp), %rdx
10001229f:	48 8b 7d e0 	movq	-32(%rbp), %rdi
1000122a3:	4c 8b 0d de f1 00 00 	movq	61918(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
1000122aa:	49 89 c2 	movq	%rax, %r10
1000122ad:	48 89 7d c0 	movq	%rdi, -64(%rbp)
1000122b1:	4c 89 d7 	movq	%r10, %rdi
1000122b4:	48 89 75 b8 	movq	%rsi, -72(%rbp)
1000122b8:	4c 89 ce 	movq	%r9, %rsi
1000122bb:	4c 8b 4d c0 	movq	-64(%rbp), %r9
1000122bf:	48 89 4d b0 	movq	%rcx, -80(%rbp)
1000122c3:	4c 89 c9 	movq	%r9, %rcx
1000122c6:	4c 8b 4d b0 	movq	-80(%rbp), %r9
1000122ca:	4c 8b 55 b8 	movq	-72(%rbp), %r10
1000122ce:	4c 89 14 24 	movq	%r10, (%rsp)
1000122d2:	48 89 45 a8 	movq	%rax, -88(%rbp)
1000122d6:	b0 00 	movb	$0, %al
1000122d8:	ff 15 8a 7d 00 00 	callq	*32138(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
1000122de:	48 8b 4d a8 	movq	-88(%rbp), %rcx
1000122e2:	48 89 cf 	movq	%rcx, %rdi
1000122e5:	ff 15 85 7d 00 00 	callq	*32133(%rip) ## literal pool symbol address: _objc_release
1000122eb:	45 31 db 	xorl	%r11d, %r11d
1000122ee:	44 89 de 	movl	%r11d, %esi
1000122f1:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
1000122f5:	48 89 cf 	movq	%rcx, %rdi
1000122f8:	e8 f5 1a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000122fd:	45 31 db 	xorl	%r11d, %r11d
100012300:	44 89 de 	movl	%r11d, %esi
100012303:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
100012307:	48 89 cf 	movq	%rcx, %rdi
10001230a:	e8 e3 1a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001230f:	e9 00 00 00 00 	jmp	0x100012314
100012314:	48 c7 45 d8 00 00 00 00 	movq	$0, -40(%rbp)
10001231c:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100012320:	48 8b 75 f0 	movq	-16(%rbp), %rsi
100012324:	e8 6f 1a 00 00 	callq	0x100013d98 ## symbol stub for: _objc_getAssociatedObject
100012329:	48 89 c7 	movq	%rax, %rdi
10001232c:	e8 a3 1a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012331:	48 8b 75 d8 	movq	-40(%rbp), %rsi
100012335:	48 89 45 d8 	movq	%rax, -40(%rbp)
100012339:	48 89 f7 	movq	%rsi, %rdi
10001233c:	ff 15 2e 7d 00 00 	callq	*32046(%rip) ## literal pool symbol address: _objc_release
100012342:	48 8b 45 d8 	movq	-40(%rbp), %rax
100012346:	48 8b 35 eb f2 00 00 	movq	62187(%rip), %rsi ## Objc selector ref: hasAspects
10001234d:	48 89 c7 	movq	%rax, %rdi
100012350:	ff 15 12 7d 00 00 	callq	*32018(%rip) ## Objc message: -[%rdi hasAspects]
100012356:	a8 01 	testb	$1, %al
100012358:	0f 85 05 00 00 00 	jne	0x100012363
10001235e:	e9 05 00 00 00 	jmp	0x100012368
100012363:	e9 1c 00 00 00 	jmp	0x100012384
100012368:	e9 00 00 00 00 	jmp	0x10001236d
10001236d:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100012371:	e8 02 19 00 00 	callq	0x100013c78 ## symbol stub for: _class_getSuperclass
100012376:	48 89 45 f8 	movq	%rax, -8(%rbp)
10001237a:	48 83 f8 00 	cmpq	$0, %rax
10001237e:	0f 85 98 ff ff ff 	jne	0x10001231c
100012384:	48 8b 7d d8 	movq	-40(%rbp), %rdi
100012388:	48 8b 05 e9 7c 00 00 	movq	31977(%rip), %rax ## literal pool symbol address: _objc_retain
10001238f:	ff d0 	callq	*%rax
100012391:	31 c9 	xorl	%ecx, %ecx
100012393:	89 ce 	movl	%ecx, %esi
100012395:	48 8d 7d d8 	leaq	-40(%rbp), %rdi
100012399:	48 89 45 a0 	movq	%rax, -96(%rbp)
10001239d:	e8 50 1a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000123a2:	48 8b 45 a0 	movq	-96(%rbp), %rax
1000123a6:	48 89 c7 	movq	%rax, %rdi
1000123a9:	48 83 c4 70 	addq	$112, %rsp
1000123ad:	5d 	popq	%rbp
1000123ae:	e9 c1 19 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
1000123b3:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
___aspect_hookedGetClass_block_invoke:
1000123c0:	55 	pushq	%rbp
1000123c1:	48 89 e5 	movq	%rsp, %rbp
1000123c4:	48 83 ec 30 	subq	$48, %rsp
1000123c8:	48 89 7d f8 	movq	%rdi, -8(%rbp)
1000123cc:	48 c7 45 f0 00 00 00 00 	movq	$0, -16(%rbp)
1000123d4:	48 8d 45 f0 	leaq	-16(%rbp), %rax
1000123d8:	48 89 7d e0 	movq	%rdi, -32(%rbp)
1000123dc:	48 89 c7 	movq	%rax, %rdi
1000123df:	48 89 45 d8 	movq	%rax, -40(%rbp)
1000123e3:	e8 0a 1a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000123e8:	48 8b 45 e0 	movq	-32(%rbp), %rax
1000123ec:	48 89 45 e8 	movq	%rax, -24(%rbp)
1000123f0:	48 8b 78 20 	movq	32(%rax), %rdi
1000123f4:	48 8b 35 7d 7c 00 00 	movq	31869(%rip), %rsi ## literal pool symbol address: _objc_retain
1000123fb:	ff d6 	callq	*%rsi
1000123fd:	31 c9 	xorl	%ecx, %ecx
1000123ff:	89 ce 	movl	%ecx, %esi
100012401:	48 8b 7d d8 	movq	-40(%rbp), %rdi
100012405:	48 89 45 d0 	movq	%rax, -48(%rbp)
100012409:	e8 e4 19 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001240e:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100012412:	48 83 c4 30 	addq	$48, %rsp
100012416:	5d 	popq	%rbp
100012417:	e9 58 19 00 00 	jmp	0x100013d74 ## symbol stub for: _objc_autoreleaseReturnValue
10001241c:	0f 1f 40 00 	nopl	(%rax)
___aspect_remove_block_invoke:
100012420:	55 	pushq	%rbp
100012421:	48 89 e5 	movq	%rsp, %rbp
100012424:	48 81 ec 90 00 00 00 	subq	$144, %rsp
10001242b:	48 8b 05 06 7c 00 00 	movq	31750(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100012432:	48 8b 00 	movq	(%rax), %rax
100012435:	48 89 45 f8 	movq	%rax, -8(%rbp)
100012439:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10001243d:	48 89 f8 	movq	%rdi, %rax
100012440:	48 89 45 d8 	movq	%rax, -40(%rbp)
100012444:	48 8b 7f 20 	movq	32(%rdi), %rdi
100012448:	48 8b 35 a1 f0 00 00 	movq	61601(%rip), %rsi ## Objc selector ref: object
10001244f:	48 89 45 b8 	movq	%rax, -72(%rbp)
100012453:	ff 15 0f 7c 00 00 	callq	*31759(%rip) ## Objc message: -[%rdi object]
100012459:	48 89 c7 	movq	%rax, %rdi
10001245c:	e8 73 19 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012461:	48 89 45 d0 	movq	%rax, -48(%rbp)
100012465:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
10001246a:	0f 84 06 01 00 00 	je	0x100012576
100012470:	48 8b 45 d0 	movq	-48(%rbp), %rax
100012474:	48 8b 4d b8 	movq	-72(%rbp), %rcx
100012478:	48 8b 51 20 	movq	32(%rcx), %rdx
10001247c:	48 8b 35 65 f0 00 00 	movq	61541(%rip), %rsi ## Objc selector ref: selector
100012483:	48 89 d7 	movq	%rdx, %rdi
100012486:	48 89 45 b0 	movq	%rax, -80(%rbp)
10001248a:	ff 15 d8 7b 00 00 	callq	*31704(%rip) ## Objc message: -[%rdi selector]
100012490:	48 8b 7d b0 	movq	-80(%rbp), %rdi
100012494:	48 89 c6 	movq	%rax, %rsi
100012497:	e8 74 c4 ff ff 	callq	_aspect_getContainerForObject
10001249c:	48 89 c7 	movq	%rax, %rdi
10001249f:	e8 30 19 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000124a4:	48 89 45 c8 	movq	%rax, -56(%rbp)
1000124a8:	48 8b 45 c8 	movq	-56(%rbp), %rax
1000124ac:	48 8b 4d b8 	movq	-72(%rbp), %rcx
1000124b0:	48 8b 51 20 	movq	32(%rcx), %rdx
1000124b4:	48 8b 35 95 f1 00 00 	movq	61845(%rip), %rsi ## Objc selector ref: removeAspect:
1000124bb:	48 89 c7 	movq	%rax, %rdi
1000124be:	ff 15 a4 7b 00 00 	callq	*31652(%rip) ## Objc message: -[%rdi removeAspect:]
1000124c4:	48 8b 4d b8 	movq	-72(%rbp), %rcx
1000124c8:	48 8b 51 28 	movq	40(%rcx), %rdx
1000124cc:	48 8b 52 08 	movq	8(%rdx), %rdx
1000124d0:	24 01 	andb	$1, %al
1000124d2:	88 42 18 	movb	%al, 24(%rdx)
1000124d5:	48 8b 55 d0 	movq	-48(%rbp), %rdx
1000124d9:	48 8b 71 20 	movq	32(%rcx), %rsi
1000124dd:	48 8b 3d 04 f0 00 00 	movq	61444(%rip), %rdi ## Objc selector ref: selector
1000124e4:	48 89 7d a8 	movq	%rdi, -88(%rbp)
1000124e8:	48 89 f7 	movq	%rsi, %rdi
1000124eb:	48 8b 75 a8 	movq	-88(%rbp), %rsi
1000124ef:	48 89 55 a0 	movq	%rdx, -96(%rbp)
1000124f3:	ff 15 6f 7b 00 00 	callq	*31599(%rip) ## Objc message: -[%rdi selector]
1000124f9:	48 8b 7d a0 	movq	-96(%rbp), %rdi
1000124fd:	48 89 c6 	movq	%rax, %rsi
100012500:	e8 eb 01 00 00 	callq	_aspect_cleanupHookedClassAndSelector
100012505:	45 31 c0 	xorl	%r8d, %r8d
100012508:	44 89 c2 	movl	%r8d, %edx
10001250b:	48 8b 45 b8 	movq	-72(%rbp), %rax
10001250f:	48 8b 48 20 	movq	32(%rax), %rcx
100012513:	48 8b 35 96 ef 00 00 	movq	61334(%rip), %rsi ## Objc selector ref: setObject:
10001251a:	48 89 cf 	movq	%rcx, %rdi
10001251d:	ff 15 45 7b 00 00 	callq	*31557(%rip) ## Objc message: -[%rdi setObject:]
100012523:	45 31 c0 	xorl	%r8d, %r8d
100012526:	44 89 c2 	movl	%r8d, %edx
100012529:	48 8b 45 b8 	movq	-72(%rbp), %rax
10001252d:	48 8b 48 20 	movq	32(%rax), %rcx
100012531:	48 8b 35 60 ef 00 00 	movq	61280(%rip), %rsi ## Objc selector ref: setBlock:
100012538:	48 89 cf 	movq	%rcx, %rdi
10001253b:	ff 15 27 7b 00 00 	callq	*31527(%rip) ## Objc message: -[%rdi setBlock:]
100012541:	45 31 c0 	xorl	%r8d, %r8d
100012544:	44 89 c2 	movl	%r8d, %edx
100012547:	48 8b 45 b8 	movq	-72(%rbp), %rax
10001254b:	48 8b 48 20 	movq	32(%rax), %rcx
10001254f:	48 8b 35 3a ef 00 00 	movq	61242(%rip), %rsi ## Objc selector ref: setSelector:
100012556:	48 89 cf 	movq	%rcx, %rdi
100012559:	ff 15 09 7b 00 00 	callq	*31497(%rip) ## Objc message: -[%rdi setSelector:]
10001255f:	45 31 c0 	xorl	%r8d, %r8d
100012562:	44 89 c6 	movl	%r8d, %esi
100012565:	48 8d 45 c8 	leaq	-56(%rbp), %rax
100012569:	48 89 c7 	movq	%rax, %rdi
10001256c:	e8 81 18 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012571:	e9 46 01 00 00 	jmp	0x1000126bc
100012576:	48 8d 05 4b a5 00 00 	leaq	42315(%rip), %rax ## Objc cfstring ref: @"Unable to deregister hook. Object already deallocated: %@"
10001257d:	48 8b 0d 3c f1 00 00 	movq	61756(%rip), %rcx ## Objc class ref: _OBJC_CLASS_$_NSString
100012584:	48 8b 55 b8 	movq	-72(%rbp), %rdx
100012588:	48 8b 72 20 	movq	32(%rdx), %rsi
10001258c:	48 8b 3d 2d ea 00 00 	movq	59949(%rip), %rdi ## Objc selector ref: stringWithFormat:
100012593:	48 89 7d 98 	movq	%rdi, -104(%rbp)
100012597:	48 89 cf 	movq	%rcx, %rdi
10001259a:	48 8b 4d 98 	movq	-104(%rbp), %rcx
10001259e:	48 89 75 90 	movq	%rsi, -112(%rbp)
1000125a2:	48 89 ce 	movq	%rcx, %rsi
1000125a5:	48 89 c2 	movq	%rax, %rdx
1000125a8:	48 8b 4d 90 	movq	-112(%rbp), %rcx
1000125ac:	b0 00 	movb	$0, %al
1000125ae:	ff 15 b4 7a 00 00 	callq	*31412(%rip) ## Objc message: +[NSString stringWithFormat:]
1000125b4:	48 89 c7 	movq	%rax, %rdi
1000125b7:	e8 18 18 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000125bc:	48 89 45 c0 	movq	%rax, -64(%rbp)
1000125c0:	e9 00 00 00 00 	jmp	0x1000125c5
1000125c5:	48 8d 05 dc a2 00 00 	leaq	41692(%rip), %rax ## Objc cfstring ref: @"Aspects: %@"
1000125cc:	48 8b 75 c0 	movq	-64(%rbp), %rsi
1000125d0:	48 89 c7 	movq	%rax, %rdi
1000125d3:	b0 00 	movb	$0, %al
1000125d5:	e8 38 16 00 00 	callq	0x100013c12 ## symbol stub for: _NSLog
1000125da:	e9 00 00 00 00 	jmp	0x1000125df
1000125df:	48 8b 45 b8 	movq	-72(%rbp), %rax
1000125e3:	48 83 78 30 00 	cmpq	$0, 48(%rax)
1000125e8:	0f 84 b4 00 00 00 	je	0x1000126a2
1000125ee:	b8 01 00 00 00 	movl	$1, %eax
1000125f3:	41 89 c0 	movl	%eax, %r8d
1000125f6:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
1000125fa:	48 8d 55 f0 	leaq	-16(%rbp), %rdx
1000125fe:	48 8b 35 0b 7a 00 00 	movq	31243(%rip), %rsi ## literal pool symbol address: _NSLocalizedDescriptionKey
100012605:	48 8b 3d ac f1 00 00 	movq	61868(%rip), %rdi ## Objc class ref: _OBJC_CLASS_$_NSError
10001260c:	48 8b 36 	movq	(%rsi), %rsi
10001260f:	48 89 75 e8 	movq	%rsi, -24(%rbp)
100012613:	48 8b 75 c0 	movq	-64(%rbp), %rsi
100012617:	48 89 75 f0 	movq	%rsi, -16(%rbp)
10001261b:	48 8b 35 86 f0 00 00 	movq	61574(%rip), %rsi ## Objc class ref: _OBJC_CLASS_$_NSDictionary
100012622:	4c 8b 0d 77 ef 00 00 	movq	61303(%rip), %r9 ## Objc selector ref: dictionaryWithObjects:forKeys:count:
100012629:	48 89 7d 88 	movq	%rdi, -120(%rbp)
10001262d:	48 89 f7 	movq	%rsi, %rdi
100012630:	4c 89 ce 	movq	%r9, %rsi
100012633:	ff 15 2f 7a 00 00 	callq	*31279(%rip) ## Objc message: +[NSDictionary dictionaryWithObjects:forKeys:count:]
100012639:	48 89 c7 	movq	%rax, %rdi
10001263c:	e8 93 17 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012641:	48 8d 0d 80 9f 00 00 	leaq	40832(%rip), %rcx ## Objc cfstring ref: @"AspectErrorDomain"
100012648:	41 ba 64 00 00 00 	movl	$100, %r10d
10001264e:	44 89 d2 	movl	%r10d, %edx
100012651:	48 8b 35 50 ef 00 00 	movq	61264(%rip), %rsi ## Objc selector ref: errorWithDomain:code:userInfo:
100012658:	48 8b 7d 88 	movq	-120(%rbp), %rdi
10001265c:	48 89 55 80 	movq	%rdx, -128(%rbp)
100012660:	48 89 ca 	movq	%rcx, %rdx
100012663:	48 8b 4d 80 	movq	-128(%rbp), %rcx
100012667:	49 89 c0 	movq	%rax, %r8
10001266a:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
100012671:	ff 15 f1 79 00 00 	callq	*31217(%rip) ## Objc message: -[%rdi errorWithDomain:code:userInfo:]
100012677:	48 89 c7 	movq	%rax, %rdi
10001267a:	e8 55 17 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001267f:	48 89 c7 	movq	%rax, %rdi
100012682:	e8 db 16 00 00 	callq	0x100013d62 ## symbol stub for: _objc_autorelease
100012687:	48 8b 4d b8 	movq	-72(%rbp), %rcx
10001268b:	48 8b 51 30 	movq	48(%rcx), %rdx
10001268f:	48 89 02 	movq	%rax, (%rdx)
100012692:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
100012699:	48 89 c7 	movq	%rax, %rdi
10001269c:	ff 15 ce 79 00 00 	callq	*31182(%rip) ## literal pool symbol address: _objc_release
1000126a2:	e9 00 00 00 00 	jmp	0x1000126a7
1000126a7:	e9 00 00 00 00 	jmp	0x1000126ac
1000126ac:	31 c0 	xorl	%eax, %eax
1000126ae:	89 c6 	movl	%eax, %esi
1000126b0:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
1000126b4:	48 89 cf 	movq	%rcx, %rdi
1000126b7:	e8 36 17 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000126bc:	48 8d 7d d0 	leaq	-48(%rbp), %rdi
1000126c0:	31 c0 	xorl	%eax, %eax
1000126c2:	89 c6 	movl	%eax, %esi
1000126c4:	e8 29 17 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000126c9:	48 8b 35 68 79 00 00 	movq	31080(%rip), %rsi ## literal pool symbol address: ___stack_chk_guard
1000126d0:	48 8b 36 	movq	(%rsi), %rsi
1000126d3:	48 8b 7d f8 	movq	-8(%rbp), %rdi
1000126d7:	48 39 fe 	cmpq	%rdi, %rsi
1000126da:	0f 85 09 00 00 00 	jne	0x1000126e9
1000126e0:	48 81 c4 90 00 00 00 	addq	$144, %rsp
1000126e7:	5d 	popq	%rbp
1000126e8:	c3 	retq
1000126e9:	e8 5a 15 00 00 	callq	0x100013c48 ## symbol stub for: ___stack_chk_fail
1000126ee:	0f 0b 	ud2
_aspect_cleanupHookedClassAndSelector:
1000126f0:	55 	pushq	%rbp
1000126f1:	48 89 e5 	movq	%rsp, %rbp
1000126f4:	41 56 	pushq	%r14
1000126f6:	53 	pushq	%rbx
1000126f7:	48 81 ec d0 01 00 00 	subq	$464, %rsp
1000126fe:	48 8d 45 e8 	leaq	-24(%rbp), %rax
100012702:	48 c7 45 e8 00 00 00 00 	movq	$0, -24(%rbp)
10001270a:	48 89 bd 40 ff ff ff 	movq	%rdi, -192(%rbp)
100012711:	48 89 c7 	movq	%rax, %rdi
100012714:	48 8b 85 40 ff ff ff 	movq	-192(%rbp), %rax
10001271b:	48 89 b5 38 ff ff ff 	movq	%rsi, -200(%rbp)
100012722:	48 89 c6 	movq	%rax, %rsi
100012725:	e8 c8 16 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001272a:	48 8b 85 38 ff ff ff 	movq	-200(%rbp), %rax
100012731:	48 89 45 e0 	movq	%rax, -32(%rbp)
100012735:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10001273a:	0f 95 c0 	setne	%al
10001273d:	34 ff 	xorb	$-1, %al
10001273f:	24 01 	andb	$1, %al
100012741:	0f b6 c8 	movzbl	%al, %ecx
100012744:	48 63 d1 	movslq	%ecx, %rdx
100012747:	48 83 fa 00 	cmpq	$0, %rdx
10001274b:	0f 84 9d 01 00 00 	je	0x1000128ee
100012751:	48 8d 15 84 40 00 00 	leaq	16516(%rip), %rdx ## literal pool for: "void aspect_cleanupHookedClassAndSelector(NSObject *__strong, SEL)"
100012758:	48 8b 05 61 ef 00 00 	movq	61281(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10001275f:	48 8b 35 f2 ec 00 00 	movq	60658(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100012766:	48 89 c7 	movq	%rax, %rdi
100012769:	ff 15 f9 78 00 00 	callq	*30969(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10001276f:	48 89 c7 	movq	%rax, %rdi
100012772:	e8 5d 16 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012777:	48 89 45 d8 	movq	%rax, -40(%rbp)
10001277b:	48 83 7d d8 00 	cmpq	$0, -40(%rbp)
100012780:	0f 84 10 00 00 00 	je	0x100012796
100012786:	48 8b 45 d8 	movq	-40(%rbp), %rax
10001278a:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
100012791:	e9 13 00 00 00 	jmp	0x1000127a9
100012796:	48 8d 05 cb 9e 00 00 	leaq	40651(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
10001279d:	48 89 85 30 ff ff ff 	movq	%rax, -208(%rbp)
1000127a4:	e9 00 00 00 00 	jmp	0x1000127a9
1000127a9:	48 8b 85 30 ff ff ff 	movq	-208(%rbp), %rax
1000127b0:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
1000127b4:	48 89 cf 	movq	%rcx, %rdi
1000127b7:	48 89 c6 	movq	%rax, %rsi
1000127ba:	e8 33 16 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000127bf:	48 8d 15 c7 36 00 00 	leaq	14023(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
1000127c6:	48 8b 05 f3 ee 00 00 	movq	61171(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000127cd:	48 8b 35 84 ec 00 00 	movq	60548(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000127d4:	48 89 c7 	movq	%rax, %rdi
1000127d7:	ff 15 8b 78 00 00 	callq	*30859(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000127dd:	48 89 c7 	movq	%rax, %rdi
1000127e0:	e8 ef 15 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000127e5:	48 89 45 d0 	movq	%rax, -48(%rbp)
1000127e9:	48 83 7d d0 00 	cmpq	$0, -48(%rbp)
1000127ee:	0f 84 10 00 00 00 	je	0x100012804
1000127f4:	48 8b 45 d0 	movq	-48(%rbp), %rax
1000127f8:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
1000127ff:	e9 13 00 00 00 	jmp	0x100012817
100012804:	48 8d 05 7d 9e 00 00 	leaq	40573(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
10001280b:	48 89 85 28 ff ff ff 	movq	%rax, -216(%rbp)
100012812:	e9 00 00 00 00 	jmp	0x100012817
100012817:	48 8b 85 28 ff ff ff 	movq	-216(%rbp), %rax
10001281e:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
100012822:	48 89 cf 	movq	%rcx, %rdi
100012825:	48 89 c6 	movq	%rax, %rsi
100012828:	e8 c5 15 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001282d:	48 8b 05 6c ef 00 00 	movq	61292(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100012834:	48 8b 35 45 ec 00 00 	movq	60485(%rip), %rsi ## Objc selector ref: currentHandler
10001283b:	48 89 c7 	movq	%rax, %rdi
10001283e:	ff 15 24 78 00 00 	callq	*30756(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100012844:	48 89 c7 	movq	%rax, %rdi
100012847:	e8 88 15 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001284c:	ba 23 01 00 00 	movl	$291, %edx
100012851:	41 89 d0 	movl	%edx, %r8d
100012854:	48 8d 0d 4d 9e 00 00 	leaq	40525(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
10001285b:	48 8d 35 86 9f 00 00 	leaq	40838(%rip), %rsi ## Objc cfstring ref: @"self"
100012862:	48 8b 55 d8 	movq	-40(%rbp), %rdx
100012866:	48 8b 7d d0 	movq	-48(%rbp), %rdi
10001286a:	4c 8b 0d 17 ec 00 00 	movq	60439(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100012871:	49 89 c2 	movq	%rax, %r10
100012874:	48 89 bd 20 ff ff ff 	movq	%rdi, -224(%rbp)
10001287b:	4c 89 d7 	movq	%r10, %rdi
10001287e:	48 89 b5 18 ff ff ff 	movq	%rsi, -232(%rbp)
100012885:	4c 89 ce 	movq	%r9, %rsi
100012888:	4c 8b 8d 20 ff ff ff 	movq	-224(%rbp), %r9
10001288f:	48 89 8d 10 ff ff ff 	movq	%rcx, -240(%rbp)
100012896:	4c 89 c9 	movq	%r9, %rcx
100012899:	4c 8b 8d 10 ff ff ff 	movq	-240(%rbp), %r9
1000128a0:	4c 8b 95 18 ff ff ff 	movq	-232(%rbp), %r10
1000128a7:	4c 89 14 24 	movq	%r10, (%rsp)
1000128ab:	48 89 85 08 ff ff ff 	movq	%rax, -248(%rbp)
1000128b2:	b0 00 	movb	$0, %al
1000128b4:	ff 15 ae 77 00 00 	callq	*30638(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
1000128ba:	48 8b 8d 08 ff ff ff 	movq	-248(%rbp), %rcx
1000128c1:	48 89 cf 	movq	%rcx, %rdi
1000128c4:	ff 15 a6 77 00 00 	callq	*30630(%rip) ## literal pool symbol address: _objc_release
1000128ca:	45 31 db 	xorl	%r11d, %r11d
1000128cd:	44 89 de 	movl	%r11d, %esi
1000128d0:	48 8d 4d d0 	leaq	-48(%rbp), %rcx
1000128d4:	48 89 cf 	movq	%rcx, %rdi
1000128d7:	e8 16 15 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000128dc:	45 31 db 	xorl	%r11d, %r11d
1000128df:	44 89 de 	movl	%r11d, %esi
1000128e2:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
1000128e6:	48 89 cf 	movq	%rcx, %rdi
1000128e9:	e8 04 15 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000128ee:	e9 00 00 00 00 	jmp	0x1000128f3
1000128f3:	e9 00 00 00 00 	jmp	0x1000128f8
1000128f8:	e9 00 00 00 00 	jmp	0x1000128fd
1000128fd:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
100012902:	0f 95 c0 	setne	%al
100012905:	34 ff 	xorb	$-1, %al
100012907:	24 01 	andb	$1, %al
100012909:	0f b6 c8 	movzbl	%al, %ecx
10001290c:	48 63 d1 	movslq	%ecx, %rdx
10001290f:	48 83 fa 00 	cmpq	$0, %rdx
100012913:	0f 84 9d 01 00 00 	je	0x100012ab6
100012919:	48 8d 15 bc 3e 00 00 	leaq	16060(%rip), %rdx ## literal pool for: "void aspect_cleanupHookedClassAndSelector(NSObject *__strong, SEL)"
100012920:	48 8b 05 99 ed 00 00 	movq	60825(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100012927:	48 8b 35 2a eb 00 00 	movq	60202(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10001292e:	48 89 c7 	movq	%rax, %rdi
100012931:	ff 15 31 77 00 00 	callq	*30513(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100012937:	48 89 c7 	movq	%rax, %rdi
10001293a:	e8 95 14 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001293f:	48 89 45 c8 	movq	%rax, -56(%rbp)
100012943:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
100012948:	0f 84 10 00 00 00 	je	0x10001295e
10001294e:	48 8b 45 c8 	movq	-56(%rbp), %rax
100012952:	48 89 85 00 ff ff ff 	movq	%rax, -256(%rbp)
100012959:	e9 13 00 00 00 	jmp	0x100012971
10001295e:	48 8d 05 03 9d 00 00 	leaq	40195(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100012965:	48 89 85 00 ff ff ff 	movq	%rax, -256(%rbp)
10001296c:	e9 00 00 00 00 	jmp	0x100012971
100012971:	48 8b 85 00 ff ff ff 	movq	-256(%rbp), %rax
100012978:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
10001297c:	48 89 cf 	movq	%rcx, %rdi
10001297f:	48 89 c6 	movq	%rax, %rsi
100012982:	e8 6b 14 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012987:	48 8d 15 ff 34 00 00 	leaq	13567(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
10001298e:	48 8b 05 2b ed 00 00 	movq	60715(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100012995:	48 8b 35 bc ea 00 00 	movq	60092(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
10001299c:	48 89 c7 	movq	%rax, %rdi
10001299f:	ff 15 c3 76 00 00 	callq	*30403(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000129a5:	48 89 c7 	movq	%rax, %rdi
1000129a8:	e8 27 14 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000129ad:	48 89 45 c0 	movq	%rax, -64(%rbp)
1000129b1:	48 83 7d c0 00 	cmpq	$0, -64(%rbp)
1000129b6:	0f 84 10 00 00 00 	je	0x1000129cc
1000129bc:	48 8b 45 c0 	movq	-64(%rbp), %rax
1000129c0:	48 89 85 f8 fe ff ff 	movq	%rax, -264(%rbp)
1000129c7:	e9 13 00 00 00 	jmp	0x1000129df
1000129cc:	48 8d 05 b5 9c 00 00 	leaq	40117(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
1000129d3:	48 89 85 f8 fe ff ff 	movq	%rax, -264(%rbp)
1000129da:	e9 00 00 00 00 	jmp	0x1000129df
1000129df:	48 8b 85 f8 fe ff ff 	movq	-264(%rbp), %rax
1000129e6:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
1000129ea:	48 89 cf 	movq	%rcx, %rdi
1000129ed:	48 89 c6 	movq	%rax, %rsi
1000129f0:	e8 fd 13 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000129f5:	48 8b 05 a4 ed 00 00 	movq	60836(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
1000129fc:	48 8b 35 7d ea 00 00 	movq	60029(%rip), %rsi ## Objc selector ref: currentHandler
100012a03:	48 89 c7 	movq	%rax, %rdi
100012a06:	ff 15 5c 76 00 00 	callq	*30300(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100012a0c:	48 89 c7 	movq	%rax, %rdi
100012a0f:	e8 c0 13 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012a14:	ba 24 01 00 00 	movl	$292, %edx
100012a19:	41 89 d0 	movl	%edx, %r8d
100012a1c:	48 8d 0d 85 9c 00 00 	leaq	40069(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100012a23:	48 8d 35 be 9c 00 00 	leaq	40126(%rip), %rsi ## Objc cfstring ref: @"selector"
100012a2a:	48 8b 55 c8 	movq	-56(%rbp), %rdx
100012a2e:	48 8b 7d c0 	movq	-64(%rbp), %rdi
100012a32:	4c 8b 0d 4f ea 00 00 	movq	59983(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100012a39:	49 89 c2 	movq	%rax, %r10
100012a3c:	48 89 bd f0 fe ff ff 	movq	%rdi, -272(%rbp)
100012a43:	4c 89 d7 	movq	%r10, %rdi
100012a46:	48 89 b5 e8 fe ff ff 	movq	%rsi, -280(%rbp)
100012a4d:	4c 89 ce 	movq	%r9, %rsi
100012a50:	4c 8b 8d f0 fe ff ff 	movq	-272(%rbp), %r9
100012a57:	48 89 8d e0 fe ff ff 	movq	%rcx, -288(%rbp)
100012a5e:	4c 89 c9 	movq	%r9, %rcx
100012a61:	4c 8b 8d e0 fe ff ff 	movq	-288(%rbp), %r9
100012a68:	4c 8b 95 e8 fe ff ff 	movq	-280(%rbp), %r10
100012a6f:	4c 89 14 24 	movq	%r10, (%rsp)
100012a73:	48 89 85 d8 fe ff ff 	movq	%rax, -296(%rbp)
100012a7a:	b0 00 	movb	$0, %al
100012a7c:	ff 15 e6 75 00 00 	callq	*30182(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100012a82:	48 8b 8d d8 fe ff ff 	movq	-296(%rbp), %rcx
100012a89:	48 89 cf 	movq	%rcx, %rdi
100012a8c:	ff 15 de 75 00 00 	callq	*30174(%rip) ## literal pool symbol address: _objc_release
100012a92:	45 31 db 	xorl	%r11d, %r11d
100012a95:	44 89 de 	movl	%r11d, %esi
100012a98:	48 8d 4d c0 	leaq	-64(%rbp), %rcx
100012a9c:	48 89 cf 	movq	%rcx, %rdi
100012a9f:	e8 4e 13 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012aa4:	45 31 db 	xorl	%r11d, %r11d
100012aa7:	44 89 de 	movl	%r11d, %esi
100012aaa:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
100012aae:	48 89 cf 	movq	%rcx, %rdi
100012ab1:	e8 3c 13 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012ab6:	e9 00 00 00 00 	jmp	0x100012abb
100012abb:	e9 00 00 00 00 	jmp	0x100012ac0
100012ac0:	48 8b 45 e8 	movq	-24(%rbp), %rax
100012ac4:	48 89 c7 	movq	%rax, %rdi
100012ac7:	e8 44 13 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
100012acc:	48 89 45 b8 	movq	%rax, -72(%rbp)
100012ad0:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100012ad4:	e8 a5 11 00 00 	callq	0x100013c7e ## symbol stub for: _class_isMetaClass
100012ad9:	24 01 	andb	$1, %al
100012adb:	88 45 b7 	movb	%al, -73(%rbp)
100012ade:	f6 45 b7 01 	testb	$1, -73(%rbp)
100012ae2:	0f 84 08 00 00 00 	je	0x100012af0
100012ae8:	48 8b 45 e8 	movq	-24(%rbp), %rax
100012aec:	48 89 45 b8 	movq	%rax, -72(%rbp)
100012af0:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100012af4:	48 8b 75 e0 	movq	-32(%rbp), %rsi
100012af8:	e8 6f 11 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100012afd:	48 89 45 a8 	movq	%rax, -88(%rbp)
100012b01:	48 8b 7d a8 	movq	-88(%rbp), %rdi
100012b05:	e8 40 12 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100012b0a:	48 89 45 a0 	movq	%rax, -96(%rbp)
100012b0e:	48 8b 7d a0 	movq	-96(%rbp), %rdi
100012b12:	e8 49 d0 ff ff 	callq	_aspect_isMsgForwardIMP
100012b17:	a8 01 	testb	$1, %al
100012b19:	0f 85 05 00 00 00 	jne	0x100012b24
100012b1f:	e9 a6 02 00 00 	jmp	0x100012dca
100012b24:	48 8b 7d a8 	movq	-88(%rbp), %rdi
100012b28:	e8 29 12 00 00 	callq	0x100013d56 ## symbol stub for: _method_getTypeEncoding
100012b2d:	48 89 45 98 	movq	%rax, -104(%rbp)
100012b31:	48 8b 7d e0 	movq	-32(%rbp), %rdi
100012b35:	e8 26 c8 ff ff 	callq	_aspect_aliasForSelector
100012b3a:	48 89 45 90 	movq	%rax, -112(%rbp)
100012b3e:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100012b42:	48 8b 75 90 	movq	-112(%rbp), %rsi
100012b46:	e8 21 11 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100012b4b:	48 89 45 88 	movq	%rax, -120(%rbp)
100012b4f:	48 8b 7d 88 	movq	-120(%rbp), %rdi
100012b53:	e8 f2 11 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100012b58:	48 89 45 80 	movq	%rax, -128(%rbp)
100012b5c:	48 83 7d 88 00 	cmpq	$0, -120(%rbp)
100012b61:	0f 95 c0 	setne	%al
100012b64:	34 ff 	xorb	$-1, %al
100012b66:	24 01 	andb	$1, %al
100012b68:	0f b6 c8 	movzbl	%al, %ecx
100012b6b:	48 63 d1 	movslq	%ecx, %rdx
100012b6e:	48 83 fa 00 	cmpq	$0, %rdx
100012b72:	0f 84 2c 02 00 00 	je	0x100012da4
100012b78:	48 8d 15 5d 3c 00 00 	leaq	15453(%rip), %rdx ## literal pool for: "void aspect_cleanupHookedClassAndSelector(NSObject *__strong, SEL)"
100012b7f:	48 8b 05 3a eb 00 00 	movq	60218(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100012b86:	48 8b 35 cb e8 00 00 	movq	59595(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100012b8d:	48 89 c7 	movq	%rax, %rdi
100012b90:	ff 15 d2 74 00 00 	callq	*29906(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100012b96:	48 89 c7 	movq	%rax, %rdi
100012b99:	e8 36 12 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012b9e:	48 89 85 78 ff ff ff 	movq	%rax, -136(%rbp)
100012ba5:	48 83 bd 78 ff ff ff 00 	cmpq	$0, -136(%rbp)
100012bad:	0f 84 13 00 00 00 	je	0x100012bc6
100012bb3:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
100012bba:	48 89 85 d0 fe ff ff 	movq	%rax, -304(%rbp)
100012bc1:	e9 13 00 00 00 	jmp	0x100012bd9
100012bc6:	48 8d 05 9b 9a 00 00 	leaq	39579(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100012bcd:	48 89 85 d0 fe ff ff 	movq	%rax, -304(%rbp)
100012bd4:	e9 00 00 00 00 	jmp	0x100012bd9
100012bd9:	48 8b 85 d0 fe ff ff 	movq	-304(%rbp), %rax
100012be0:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
100012be7:	48 89 cf 	movq	%rcx, %rdi
100012bea:	48 89 c6 	movq	%rax, %rsi
100012bed:	e8 00 12 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012bf2:	48 8d 15 94 32 00 00 	leaq	12948(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100012bf9:	48 8b 05 c0 ea 00 00 	movq	60096(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100012c00:	48 8b 35 51 e8 00 00 	movq	59473(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100012c07:	48 89 c7 	movq	%rax, %rdi
100012c0a:	ff 15 58 74 00 00 	callq	*29784(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100012c10:	48 89 c7 	movq	%rax, %rdi
100012c13:	e8 bc 11 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012c18:	48 89 85 70 ff ff ff 	movq	%rax, -144(%rbp)
100012c1f:	48 83 bd 70 ff ff ff 00 	cmpq	$0, -144(%rbp)
100012c27:	0f 84 13 00 00 00 	je	0x100012c40
100012c2d:	48 8b 85 70 ff ff ff 	movq	-144(%rbp), %rax
100012c34:	48 89 85 c8 fe ff ff 	movq	%rax, -312(%rbp)
100012c3b:	e9 13 00 00 00 	jmp	0x100012c53
100012c40:	48 8d 05 41 9a 00 00 	leaq	39489(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
100012c47:	48 89 85 c8 fe ff ff 	movq	%rax, -312(%rbp)
100012c4e:	e9 00 00 00 00 	jmp	0x100012c53
100012c53:	48 8b 85 c8 fe ff ff 	movq	-312(%rbp), %rax
100012c5a:	48 8d 8d 70 ff ff ff 	leaq	-144(%rbp), %rcx
100012c61:	48 89 cf 	movq	%rcx, %rdi
100012c64:	48 89 c6 	movq	%rax, %rsi
100012c67:	e8 86 11 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012c6c:	48 8b 05 2d eb 00 00 	movq	60205(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100012c73:	48 8b 35 06 e8 00 00 	movq	59398(%rip), %rsi ## Objc selector ref: currentHandler
100012c7a:	48 89 c7 	movq	%rax, %rdi
100012c7d:	ff 15 e5 73 00 00 	callq	*29669(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100012c83:	48 89 c7 	movq	%rax, %rdi
100012c86:	e8 49 11 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012c8b:	48 8b 95 78 ff ff ff 	movq	-136(%rbp), %rdx
100012c92:	48 8b 8d 70 ff ff ff 	movq	-144(%rbp), %rcx
100012c99:	48 8b 7d e0 	movq	-32(%rbp), %rdi
100012c9d:	48 89 85 c0 fe ff ff 	movq	%rax, -320(%rbp)
100012ca4:	48 89 95 b8 fe ff ff 	movq	%rdx, -328(%rbp)
100012cab:	48 89 8d b0 fe ff ff 	movq	%rcx, -336(%rbp)
100012cb2:	e8 6d 0f 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
100012cb7:	48 89 c7 	movq	%rax, %rdi
100012cba:	e8 15 11 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012cbf:	48 8b 7d 90 	movq	-112(%rbp), %rdi
100012cc3:	48 89 85 a8 fe ff ff 	movq	%rax, -344(%rbp)
100012cca:	e8 55 0f 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
100012ccf:	48 89 c7 	movq	%rax, %rdi
100012cd2:	e8 fd 10 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012cd7:	41 b8 35 01 00 00 	movl	$309, %r8d
100012cdd:	48 8d 0d 04 9e 00 00 	leaq	40452(%rip), %rcx ## Objc cfstring ref: @"Original implementation for %@ not found %@ on %@"
100012ce4:	48 8b 55 b8 	movq	-72(%rbp), %rdx
100012ce8:	48 8b 35 99 e7 00 00 	movq	59289(%rip), %rsi ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100012cef:	48 8b bd c0 fe ff ff 	movq	-320(%rbp), %rdi
100012cf6:	4c 8b 8d b8 fe ff ff 	movq	-328(%rbp), %r9
100012cfd:	48 89 95 a0 fe ff ff 	movq	%rdx, -352(%rbp)
100012d04:	4c 89 ca 	movq	%r9, %rdx
100012d07:	4c 8b 95 b0 fe ff ff 	movq	-336(%rbp), %r10
100012d0e:	48 89 8d 98 fe ff ff 	movq	%rcx, -360(%rbp)
100012d15:	4c 89 d1 	movq	%r10, %rcx
100012d18:	4c 8b 8d 98 fe ff ff 	movq	-360(%rbp), %r9
100012d1f:	4c 8b 9d a8 fe ff ff 	movq	-344(%rbp), %r11
100012d26:	4c 89 1c 24 	movq	%r11, (%rsp)
100012d2a:	48 89 44 24 08 	movq	%rax, 8(%rsp)
100012d2f:	48 8b 9d a0 fe ff ff 	movq	-352(%rbp), %rbx
100012d36:	48 89 5c 24 10 	movq	%rbx, 16(%rsp)
100012d3b:	48 89 85 90 fe ff ff 	movq	%rax, -368(%rbp)
100012d42:	b0 00 	movb	$0, %al
100012d44:	ff 15 1e 73 00 00 	callq	*29470(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100012d4a:	48 8b 8d 90 fe ff ff 	movq	-368(%rbp), %rcx
100012d51:	48 89 cf 	movq	%rcx, %rdi
100012d54:	ff 15 16 73 00 00 	callq	*29462(%rip) ## literal pool symbol address: _objc_release
100012d5a:	48 8b 8d a8 fe ff ff 	movq	-344(%rbp), %rcx
100012d61:	48 89 cf 	movq	%rcx, %rdi
100012d64:	ff 15 06 73 00 00 	callq	*29446(%rip) ## literal pool symbol address: _objc_release
100012d6a:	48 8b 8d c0 fe ff ff 	movq	-320(%rbp), %rcx
100012d71:	48 89 cf 	movq	%rcx, %rdi
100012d74:	ff 15 f6 72 00 00 	callq	*29430(%rip) ## literal pool symbol address: _objc_release
100012d7a:	45 31 f6 	xorl	%r14d, %r14d
100012d7d:	44 89 f6 	movl	%r14d, %esi
100012d80:	48 8d 8d 70 ff ff ff 	leaq	-144(%rbp), %rcx
100012d87:	48 89 cf 	movq	%rcx, %rdi
100012d8a:	e8 63 10 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012d8f:	45 31 f6 	xorl	%r14d, %r14d
100012d92:	44 89 f6 	movl	%r14d, %esi
100012d95:	48 8d 8d 78 ff ff ff 	leaq	-136(%rbp), %rcx
100012d9c:	48 89 cf 	movq	%rcx, %rdi
100012d9f:	e8 4e 10 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012da4:	e9 00 00 00 00 	jmp	0x100012da9
100012da9:	e9 00 00 00 00 	jmp	0x100012dae
100012dae:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100012db2:	48 8b 75 e0 	movq	-32(%rbp), %rsi
100012db6:	48 8b 55 80 	movq	-128(%rbp), %rdx
100012dba:	48 8b 4d 98 	movq	-104(%rbp), %rcx
100012dbe:	e8 c1 0e 00 00 	callq	0x100013c84 ## symbol stub for: _class_replaceMethod
100012dc3:	48 89 85 88 fe ff ff 	movq	%rax, -376(%rbp)
100012dca:	48 8b 45 e8 	movq	-24(%rbp), %rax
100012dce:	48 8b 75 e0 	movq	-32(%rbp), %rsi
100012dd2:	48 89 c7 	movq	%rax, %rdi
100012dd5:	e8 16 04 00 00 	callq	_aspect_deregisterTrackedSelector
100012dda:	48 8b 7d e8 	movq	-24(%rbp), %rdi
100012dde:	48 8b 75 e0 	movq	-32(%rbp), %rsi
100012de2:	e8 29 bb ff ff 	callq	_aspect_getContainerForObject
100012de7:	48 89 c7 	movq	%rax, %rdi
100012dea:	e8 e5 0f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012def:	48 89 85 68 ff ff ff 	movq	%rax, -152(%rbp)
100012df6:	48 8b 85 68 ff ff ff 	movq	-152(%rbp), %rax
100012dfd:	48 8b 35 34 e8 00 00 	movq	59444(%rip), %rsi ## Objc selector ref: hasAspects
100012e04:	48 89 c7 	movq	%rax, %rdi
100012e07:	ff 15 5b 72 00 00 	callq	*29275(%rip) ## Objc message: -[%rdi hasAspects]
100012e0d:	a8 01 	testb	$1, %al
100012e0f:	0f 85 f4 02 00 00 	jne	0x100013109
100012e15:	48 8b 45 e8 	movq	-24(%rbp), %rax
100012e19:	48 8b 75 e0 	movq	-32(%rbp), %rsi
100012e1d:	48 89 c7 	movq	%rax, %rdi
100012e20:	e8 db 05 00 00 	callq	_aspect_destroyContainerForObject
100012e25:	48 8b 7d b8 	movq	-72(%rbp), %rdi
100012e29:	e8 f0 0d 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
100012e2e:	48 89 c7 	movq	%rax, %rdi
100012e31:	e8 9e 0f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012e36:	48 8d 35 ab 97 00 00 	leaq	38827(%rip), %rsi ## Objc cfstring ref: @"_Aspects_"
100012e3d:	48 89 85 60 ff ff ff 	movq	%rax, -160(%rbp)
100012e44:	48 8b 85 60 ff ff ff 	movq	-160(%rbp), %rax
100012e4b:	48 8b 3d 8e e7 00 00 	movq	59278(%rip), %rdi ## Objc selector ref: hasSuffix:
100012e52:	48 89 bd 80 fe ff ff 	movq	%rdi, -384(%rbp)
100012e59:	48 89 c7 	movq	%rax, %rdi
100012e5c:	48 8b 85 80 fe ff ff 	movq	-384(%rbp), %rax
100012e63:	48 89 b5 78 fe ff ff 	movq	%rsi, -392(%rbp)
100012e6a:	48 89 c6 	movq	%rax, %rsi
100012e6d:	48 8b 95 78 fe ff ff 	movq	-392(%rbp), %rdx
100012e74:	ff 15 ee 71 00 00 	callq	*29166(%rip) ## Objc message: -[%rdi hasSuffix:]
100012e7a:	a8 01 	testb	$1, %al
100012e7c:	0f 85 05 00 00 00 	jne	0x100012e87
100012e82:	e9 54 02 00 00 	jmp	0x1000130db
100012e87:	48 8d 05 5a 97 00 00 	leaq	38746(%rip), %rax ## Objc cfstring ref: @"_Aspects_"
100012e8e:	48 8d 0d 13 96 00 00 	leaq	38419(%rip), %rcx ## Objc cfstring ref: @""
100012e95:	48 8b 95 60 ff ff ff 	movq	-160(%rbp), %rdx
100012e9c:	48 8b 35 a5 e4 00 00 	movq	58533(%rip), %rsi ## Objc selector ref: stringByReplacingOccurrencesOfString:withString:
100012ea3:	48 89 d7 	movq	%rdx, %rdi
100012ea6:	48 89 c2 	movq	%rax, %rdx
100012ea9:	ff 15 b9 71 00 00 	callq	*29113(%rip) ## Objc message: -[%rdi stringByReplacingOccurrencesOfString:withString:]
100012eaf:	48 89 c7 	movq	%rax, %rdi
100012eb2:	e8 1d 0f 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012eb7:	48 89 c7 	movq	%rax, %rdi
100012eba:	48 89 85 70 fe ff ff 	movq	%rax, -400(%rbp)
100012ec1:	e8 3a 0d 00 00 	callq	0x100013c00 ## symbol stub for: _NSClassFromString
100012ec6:	48 89 85 58 ff ff ff 	movq	%rax, -168(%rbp)
100012ecd:	48 8b 85 70 fe ff ff 	movq	-400(%rbp), %rax
100012ed4:	48 89 c7 	movq	%rax, %rdi
100012ed7:	ff 15 93 71 00 00 	callq	*29075(%rip) ## literal pool symbol address: _objc_release
100012edd:	48 83 bd 58 ff ff ff 00 	cmpq	$0, -168(%rbp)
100012ee5:	0f 95 c0 	setne	%al
100012ee8:	34 ff 	xorb	$-1, %al
100012eea:	24 01 	andb	$1, %al
100012eec:	0f b6 c8 	movzbl	%al, %ecx
100012eef:	48 63 d1 	movslq	%ecx, %rdx
100012ef2:	48 83 fa 00 	cmpq	$0, %rdx
100012ef6:	0f 84 b6 01 00 00 	je	0x1000130b2
100012efc:	48 8d 15 d9 38 00 00 	leaq	14553(%rip), %rdx ## literal pool for: "void aspect_cleanupHookedClassAndSelector(NSObject *__strong, SEL)"
100012f03:	48 8b 05 b6 e7 00 00 	movq	59318(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100012f0a:	48 8b 35 47 e5 00 00 	movq	58695(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100012f11:	48 89 c7 	movq	%rax, %rdi
100012f14:	ff 15 4e 71 00 00 	callq	*29006(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100012f1a:	48 89 c7 	movq	%rax, %rdi
100012f1d:	e8 b2 0e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012f22:	48 89 85 50 ff ff ff 	movq	%rax, -176(%rbp)
100012f29:	48 83 bd 50 ff ff ff 00 	cmpq	$0, -176(%rbp)
100012f31:	0f 84 13 00 00 00 	je	0x100012f4a
100012f37:	48 8b 85 50 ff ff ff 	movq	-176(%rbp), %rax
100012f3e:	48 89 85 68 fe ff ff 	movq	%rax, -408(%rbp)
100012f45:	e9 13 00 00 00 	jmp	0x100012f5d
100012f4a:	48 8d 05 17 97 00 00 	leaq	38679(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100012f51:	48 89 85 68 fe ff ff 	movq	%rax, -408(%rbp)
100012f58:	e9 00 00 00 00 	jmp	0x100012f5d
100012f5d:	48 8b 85 68 fe ff ff 	movq	-408(%rbp), %rax
100012f64:	48 8d 8d 50 ff ff ff 	leaq	-176(%rbp), %rcx
100012f6b:	48 89 cf 	movq	%rcx, %rdi
100012f6e:	48 89 c6 	movq	%rax, %rsi
100012f71:	e8 7c 0e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012f76:	48 8d 15 10 2f 00 00 	leaq	12048(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
100012f7d:	48 8b 05 3c e7 00 00 	movq	59196(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100012f84:	48 8b 35 cd e4 00 00 	movq	58573(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100012f8b:	48 89 c7 	movq	%rax, %rdi
100012f8e:	ff 15 d4 70 00 00 	callq	*28884(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100012f94:	48 89 c7 	movq	%rax, %rdi
100012f97:	e8 38 0e 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100012f9c:	48 89 85 48 ff ff ff 	movq	%rax, -184(%rbp)
100012fa3:	48 83 bd 48 ff ff ff 00 	cmpq	$0, -184(%rbp)
100012fab:	0f 84 13 00 00 00 	je	0x100012fc4
100012fb1:	48 8b 85 48 ff ff ff 	movq	-184(%rbp), %rax
100012fb8:	48 89 85 60 fe ff ff 	movq	%rax, -416(%rbp)
100012fbf:	e9 13 00 00 00 	jmp	0x100012fd7
100012fc4:	48 8d 05 bd 96 00 00 	leaq	38589(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
100012fcb:	48 89 85 60 fe ff ff 	movq	%rax, -416(%rbp)
100012fd2:	e9 00 00 00 00 	jmp	0x100012fd7
100012fd7:	48 8b 85 60 fe ff ff 	movq	-416(%rbp), %rax
100012fde:	48 8d 8d 48 ff ff ff 	leaq	-184(%rbp), %rcx
100012fe5:	48 89 cf 	movq	%rcx, %rdi
100012fe8:	48 89 c6 	movq	%rax, %rsi
100012feb:	e8 02 0e 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100012ff0:	48 8b 05 a9 e7 00 00 	movq	59305(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100012ff7:	48 8b 35 82 e4 00 00 	movq	58498(%rip), %rsi ## Objc selector ref: currentHandler
100012ffe:	48 89 c7 	movq	%rax, %rdi
100013001:	ff 15 61 70 00 00 	callq	*28769(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100013007:	48 89 c7 	movq	%rax, %rdi
10001300a:	e8 c5 0d 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001300f:	ba 48 01 00 00 	movl	$328, %edx
100013014:	41 89 d0 	movl	%edx, %r8d
100013017:	48 8d 0d ea 9a 00 00 	leaq	39658(%rip), %rcx ## Objc cfstring ref: @"Original class must exist"
10001301e:	48 8b 95 50 ff ff ff 	movq	-176(%rbp), %rdx
100013025:	48 8b b5 48 ff ff ff 	movq	-184(%rbp), %rsi
10001302c:	48 8b 3d 55 e4 00 00 	movq	58453(%rip), %rdi ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100013033:	49 89 c1 	movq	%rax, %r9
100013036:	48 89 bd 58 fe ff ff 	movq	%rdi, -424(%rbp)
10001303d:	4c 89 cf 	movq	%r9, %rdi
100013040:	4c 8b 8d 58 fe ff ff 	movq	-424(%rbp), %r9
100013047:	48 89 b5 50 fe ff ff 	movq	%rsi, -432(%rbp)
10001304e:	4c 89 ce 	movq	%r9, %rsi
100013051:	4c 8b 95 50 fe ff ff 	movq	-432(%rbp), %r10
100013058:	48 89 8d 48 fe ff ff 	movq	%rcx, -440(%rbp)
10001305f:	4c 89 d1 	movq	%r10, %rcx
100013062:	4c 8b 8d 48 fe ff ff 	movq	-440(%rbp), %r9
100013069:	48 89 85 40 fe ff ff 	movq	%rax, -448(%rbp)
100013070:	b0 00 	movb	$0, %al
100013072:	ff 15 f0 6f 00 00 	callq	*28656(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100013078:	48 8b 8d 40 fe ff ff 	movq	-448(%rbp), %rcx
10001307f:	48 89 cf 	movq	%rcx, %rdi
100013082:	ff 15 e8 6f 00 00 	callq	*28648(%rip) ## literal pool symbol address: _objc_release
100013088:	45 31 db 	xorl	%r11d, %r11d
10001308b:	44 89 de 	movl	%r11d, %esi
10001308e:	48 8d 8d 48 ff ff ff 	leaq	-184(%rbp), %rcx
100013095:	48 89 cf 	movq	%rcx, %rdi
100013098:	e8 55 0d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001309d:	45 31 db 	xorl	%r11d, %r11d
1000130a0:	44 89 de 	movl	%r11d, %esi
1000130a3:	48 8d 8d 50 ff ff ff 	leaq	-176(%rbp), %rcx
1000130aa:	48 89 cf 	movq	%rcx, %rdi
1000130ad:	e8 40 0d 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000130b2:	e9 00 00 00 00 	jmp	0x1000130b7
1000130b7:	e9 00 00 00 00 	jmp	0x1000130bc
1000130bc:	48 8b 45 e8 	movq	-24(%rbp), %rax
1000130c0:	48 8b b5 58 ff ff ff 	movq	-168(%rbp), %rsi
1000130c7:	48 89 c7 	movq	%rax, %rdi
1000130ca:	e8 47 0d 00 00 	callq	0x100013e16 ## symbol stub for: _object_setClass
1000130cf:	48 89 85 38 fe ff ff 	movq	%rax, -456(%rbp)
1000130d6:	e9 1b 00 00 00 	jmp	0x1000130f6
1000130db:	f6 45 b7 01 	testb	$1, -73(%rbp)
1000130df:	0f 84 0c 00 00 00 	je	0x1000130f1
1000130e5:	48 8b 45 e8 	movq	-24(%rbp), %rax
1000130e9:	48 89 c7 	movq	%rax, %rdi
1000130ec:	e8 1f 05 00 00 	callq	_aspect_undoSwizzleClassInPlace
1000130f1:	e9 00 00 00 00 	jmp	0x1000130f6
1000130f6:	31 c0 	xorl	%eax, %eax
1000130f8:	89 c6 	movl	%eax, %esi
1000130fa:	48 8d 8d 60 ff ff ff 	leaq	-160(%rbp), %rcx
100013101:	48 89 cf 	movq	%rcx, %rdi
100013104:	e8 e9 0c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013109:	31 c0 	xorl	%eax, %eax
10001310b:	89 c6 	movl	%eax, %esi
10001310d:	48 8d 8d 68 ff ff ff 	leaq	-152(%rbp), %rcx
100013114:	48 89 cf 	movq	%rcx, %rdi
100013117:	e8 d6 0c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001311c:	31 c0 	xorl	%eax, %eax
10001311e:	89 c6 	movl	%eax, %esi
100013120:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
100013124:	48 89 cf 	movq	%rcx, %rdi
100013127:	e8 c6 0c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001312c:	48 81 c4 d0 01 00 00 	addq	$464, %rsp
100013133:	5b 	popq	%rbx
100013134:	41 5e 	popq	%r14
100013136:	5d 	popq	%rbp
100013137:	c3 	retq
100013138:	0f 1f 84 00 00 00 00 00 	nopl	(%rax,%rax)
___copy_helper_block_.436:
100013140:	55 	pushq	%rbp
100013141:	48 89 e5 	movq	%rsp, %rbp
100013144:	48 83 ec 20 	subq	$32, %rsp
100013148:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10001314c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100013150:	48 8b 75 f0 	movq	-16(%rbp), %rsi
100013154:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100013158:	48 89 f8 	movq	%rdi, %rax
10001315b:	48 89 c1 	movq	%rax, %rcx
10001315e:	48 83 c1 20 	addq	$32, %rcx
100013162:	48 8b 56 20 	movq	32(%rsi), %rdx
100013166:	48 c7 47 20 00 00 00 00 	movq	$0, 32(%rdi)
10001316e:	48 89 cf 	movq	%rcx, %rdi
100013171:	48 89 75 e8 	movq	%rsi, -24(%rbp)
100013175:	48 89 d6 	movq	%rdx, %rsi
100013178:	48 89 45 e0 	movq	%rax, -32(%rbp)
10001317c:	e8 71 0c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013181:	ba 08 00 00 00 	movl	$8, %edx
100013186:	48 8b 45 e0 	movq	-32(%rbp), %rax
10001318a:	48 83 c0 28 	addq	$40, %rax
10001318e:	48 8b 4d e8 	movq	-24(%rbp), %rcx
100013192:	48 8b 71 28 	movq	40(%rcx), %rsi
100013196:	48 89 c7 	movq	%rax, %rdi
100013199:	e8 98 0a 00 00 	callq	0x100013c36 ## symbol stub for: __Block_object_assign
10001319e:	48 83 c4 20 	addq	$32, %rsp
1000131a2:	5d 	popq	%rbp
1000131a3:	c3 	retq
1000131a4:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
___destroy_helper_block_.437:
1000131b0:	55 	pushq	%rbp
1000131b1:	48 89 e5 	movq	%rsp, %rbp
1000131b4:	48 83 ec 10 	subq	$16, %rsp
1000131b8:	31 c0 	xorl	%eax, %eax
1000131ba:	89 c6 	movl	%eax, %esi
1000131bc:	48 89 7d f8 	movq	%rdi, -8(%rbp)
1000131c0:	48 8b 7d f8 	movq	-8(%rbp), %rdi
1000131c4:	48 89 f9 	movq	%rdi, %rcx
1000131c7:	48 83 c1 20 	addq	$32, %rcx
1000131cb:	48 89 7d f0 	movq	%rdi, -16(%rbp)
1000131cf:	48 89 cf 	movq	%rcx, %rdi
1000131d2:	e8 1b 0c 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000131d7:	be 08 00 00 00 	movl	$8, %esi
1000131dc:	48 8b 4d f0 	movq	-16(%rbp), %rcx
1000131e0:	48 8b 79 28 	movq	40(%rcx), %rdi
1000131e4:	e8 53 0a 00 00 	callq	0x100013c3c ## symbol stub for: __Block_object_dispose
1000131e9:	48 83 c4 10 	addq	$16, %rsp
1000131ed:	5d 	popq	%rbp
1000131ee:	c3 	retq
1000131ef:	90 	nop
_aspect_deregisterTrackedSelector:
1000131f0:	55 	pushq	%rbp
1000131f1:	48 89 e5 	movq	%rsp, %rbp
1000131f4:	48 81 ec 80 00 00 00 	subq	$128, %rsp
1000131fb:	48 8d 45 f8 	leaq	-8(%rbp), %rax
1000131ff:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
100013207:	48 89 7d c0 	movq	%rdi, -64(%rbp)
10001320b:	48 89 c7 	movq	%rax, %rdi
10001320e:	48 8b 45 c0 	movq	-64(%rbp), %rax
100013212:	48 89 75 b8 	movq	%rsi, -72(%rbp)
100013216:	48 89 c6 	movq	%rax, %rsi
100013219:	e8 d4 0b 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001321e:	48 8b 45 b8 	movq	-72(%rbp), %rax
100013222:	48 89 45 f0 	movq	%rax, -16(%rbp)
100013226:	48 8b 7d f8 	movq	-8(%rbp), %rdi
10001322a:	e8 e1 0b 00 00 	callq	0x100013e10 ## symbol stub for: _object_getClass
10001322f:	48 89 c7 	movq	%rax, %rdi
100013232:	e8 47 0a 00 00 	callq	0x100013c7e ## symbol stub for: _class_isMetaClass
100013237:	a8 01 	testb	$1, %al
100013239:	0f 85 0c 00 00 00 	jne	0x10001324b
10001323f:	c7 45 ec 01 00 00 00 	movl	$1, -20(%rbp)
100013246:	e9 81 01 00 00 	jmp	0x1000133cc
10001324b:	e8 50 c0 ff ff 	callq	_aspect_getSwizzledClassesDict
100013250:	48 89 c7 	movq	%rax, %rdi
100013253:	e8 7c 0b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013258:	48 89 45 e0 	movq	%rax, -32(%rbp)
10001325c:	48 8b 7d f0 	movq	-16(%rbp), %rdi
100013260:	e8 bf 09 00 00 	callq	0x100013c24 ## symbol stub for: _NSStringFromSelector
100013265:	48 89 c7 	movq	%rax, %rdi
100013268:	e8 67 0b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
10001326d:	48 89 45 d8 	movq	%rax, -40(%rbp)
100013271:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100013275:	48 8b 35 24 dc 00 00 	movq	56356(%rip), %rsi ## Objc selector ref: class
10001327c:	ff 15 e6 6d 00 00 	callq	*28134(%rip) ## Objc message: -[%rdi class]
100013282:	48 89 45 d0 	movq	%rax, -48(%rbp)
100013286:	48 8b 45 e0 	movq	-32(%rbp), %rax
10001328a:	48 8b 55 d0 	movq	-48(%rbp), %rdx
10001328e:	48 8b 35 2b e3 00 00 	movq	58155(%rip), %rsi ## Objc selector ref: objectForKeyedSubscript:
100013295:	48 89 c7 	movq	%rax, %rdi
100013298:	ff 15 ca 6d 00 00 	callq	*28106(%rip) ## Objc message: -[%rdi objectForKeyedSubscript:]
10001329e:	48 89 c7 	movq	%rax, %rdi
1000132a1:	e8 2e 0b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000132a6:	48 89 45 c8 	movq	%rax, -56(%rbp)
1000132aa:	48 83 7d c8 00 	cmpq	$0, -56(%rbp)
1000132af:	0f 84 c9 00 00 00 	je	0x10001337e
1000132b5:	48 8b 45 c8 	movq	-56(%rbp), %rax
1000132b9:	48 8b 35 28 e1 00 00 	movq	57640(%rip), %rsi ## Objc selector ref: selectorNames
1000132c0:	48 89 c7 	movq	%rax, %rdi
1000132c3:	ff 15 9f 6d 00 00 	callq	*28063(%rip) ## Objc message: -[%rdi selectorNames]
1000132c9:	48 89 c7 	movq	%rax, %rdi
1000132cc:	e8 03 0b 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000132d1:	48 8b 75 d8 	movq	-40(%rbp), %rsi
1000132d5:	48 8b 3d 7c e3 00 00 	movq	58236(%rip), %rdi ## Objc selector ref: removeObject:
1000132dc:	48 89 c1 	movq	%rax, %rcx
1000132df:	48 89 7d b0 	movq	%rdi, -80(%rbp)
1000132e3:	48 89 cf 	movq	%rcx, %rdi
1000132e6:	48 8b 4d b0 	movq	-80(%rbp), %rcx
1000132ea:	48 89 75 a8 	movq	%rsi, -88(%rbp)
1000132ee:	48 89 ce 	movq	%rcx, %rsi
1000132f1:	48 8b 55 a8 	movq	-88(%rbp), %rdx
1000132f5:	48 89 45 a0 	movq	%rax, -96(%rbp)
1000132f9:	ff 15 69 6d 00 00 	callq	*28009(%rip) ## Objc message: -[%rdi removeObject:]
1000132ff:	48 8b 45 a0 	movq	-96(%rbp), %rax
100013303:	48 89 c7 	movq	%rax, %rdi
100013306:	ff 15 64 6d 00 00 	callq	*28004(%rip) ## literal pool symbol address: _objc_release
10001330c:	48 8b 45 c8 	movq	-56(%rbp), %rax
100013310:	48 8b 35 d1 e0 00 00 	movq	57553(%rip), %rsi ## Objc selector ref: selectorNames
100013317:	48 89 c7 	movq	%rax, %rdi
10001331a:	ff 15 48 6d 00 00 	callq	*27976(%rip) ## Objc message: -[%rdi selectorNames]
100013320:	48 89 c7 	movq	%rax, %rdi
100013323:	e8 ac 0a 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013328:	48 8b 35 f9 df 00 00 	movq	57337(%rip), %rsi ## Objc selector ref: count
10001332f:	48 89 c1 	movq	%rax, %rcx
100013332:	48 89 cf 	movq	%rcx, %rdi
100013335:	48 89 45 98 	movq	%rax, -104(%rbp)
100013339:	ff 15 29 6d 00 00 	callq	*27945(%rip) ## Objc message: -[%rdi count]
10001333f:	48 8b 4d 98 	movq	-104(%rbp), %rcx
100013343:	48 89 cf 	movq	%rcx, %rdi
100013346:	48 89 45 90 	movq	%rax, -112(%rbp)
10001334a:	ff 15 20 6d 00 00 	callq	*27936(%rip) ## literal pool symbol address: _objc_release
100013350:	48 8b 45 90 	movq	-112(%rbp), %rax
100013354:	48 83 f8 00 	cmpq	$0, %rax
100013358:	0f 85 1b 00 00 00 	jne	0x100013379
10001335e:	48 8b 45 e0 	movq	-32(%rbp), %rax
100013362:	48 8b 4d c8 	movq	-56(%rbp), %rcx
100013366:	48 8b 35 f3 e2 00 00 	movq	58099(%rip), %rsi ## Objc selector ref: removeObjectForKey:
10001336d:	48 89 c7 	movq	%rax, %rdi
100013370:	48 89 ca 	movq	%rcx, %rdx
100013373:	ff 15 ef 6c 00 00 	callq	*27887(%rip) ## Objc message: -[%rdi removeObjectForKey:]
100013379:	e9 00 00 00 00 	jmp	0x10001337e
10001337e:	31 c0 	xorl	%eax, %eax
100013380:	89 c6 	movl	%eax, %esi
100013382:	48 8d 4d c8 	leaq	-56(%rbp), %rcx
100013386:	48 89 cf 	movq	%rcx, %rdi
100013389:	e8 64 0a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001338e:	48 8b 7d d0 	movq	-48(%rbp), %rdi
100013392:	e8 e1 08 00 00 	callq	0x100013c78 ## symbol stub for: _class_getSuperclass
100013397:	48 89 45 d0 	movq	%rax, -48(%rbp)
10001339b:	48 83 f8 00 	cmpq	$0, %rax
10001339f:	0f 85 e1 fe ff ff 	jne	0x100013286
1000133a5:	31 c0 	xorl	%eax, %eax
1000133a7:	89 c6 	movl	%eax, %esi
1000133a9:	48 8d 4d d8 	leaq	-40(%rbp), %rcx
1000133ad:	48 89 cf 	movq	%rcx, %rdi
1000133b0:	e8 3d 0a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000133b5:	31 c0 	xorl	%eax, %eax
1000133b7:	89 c6 	movl	%eax, %esi
1000133b9:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
1000133bd:	48 89 cf 	movq	%rcx, %rdi
1000133c0:	e8 2d 0a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000133c5:	c7 45 ec 00 00 00 00 	movl	$0, -20(%rbp)
1000133cc:	31 c0 	xorl	%eax, %eax
1000133ce:	89 c6 	movl	%eax, %esi
1000133d0:	48 8d 7d f8 	leaq	-8(%rbp), %rdi
1000133d4:	e8 19 0a 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000133d9:	8b 45 ec 	movl	-20(%rbp), %eax
1000133dc:	83 e8 01 	subl	$1, %eax
1000133df:	89 45 8c 	movl	%eax, -116(%rbp)
1000133e2:	0f 87 0e 00 00 00 	ja	0x1000133f6
1000133e8:	e9 00 00 00 00 	jmp	0x1000133ed
1000133ed:	48 81 c4 80 00 00 00 	addq	$128, %rsp
1000133f4:	5d 	popq	%rbp
1000133f5:	c3 	retq
1000133f6:	0f 0b 	ud2
1000133f8:	0f 1f 84 00 00 00 00 00 	nopl	(%rax,%rax)
_aspect_destroyContainerForObject:
100013400:	55 	pushq	%rbp
100013401:	48 89 e5 	movq	%rsp, %rbp
100013404:	48 83 ec 70 	subq	$112, %rsp
100013408:	48 8d 45 f8 	leaq	-8(%rbp), %rax
10001340c:	48 c7 45 f8 00 00 00 00 	movq	$0, -8(%rbp)
100013414:	48 89 7d d0 	movq	%rdi, -48(%rbp)
100013418:	48 89 c7 	movq	%rax, %rdi
10001341b:	48 8b 45 d0 	movq	-48(%rbp), %rax
10001341f:	48 89 75 c8 	movq	%rsi, -56(%rbp)
100013423:	48 89 c6 	movq	%rax, %rsi
100013426:	e8 c7 09 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001342b:	48 8b 45 c8 	movq	-56(%rbp), %rax
10001342f:	48 89 45 f0 	movq	%rax, -16(%rbp)
100013433:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
100013438:	0f 95 c0 	setne	%al
10001343b:	34 ff 	xorb	$-1, %al
10001343d:	24 01 	andb	$1, %al
10001343f:	0f b6 c8 	movzbl	%al, %ecx
100013442:	48 63 d1 	movslq	%ecx, %rdx
100013445:	48 83 fa 00 	cmpq	$0, %rdx
100013449:	0f 84 73 01 00 00 	je	0x1000135c2
10001344f:	48 8d 15 15 34 00 00 	leaq	13333(%rip), %rdx ## literal pool for: "void aspect_destroyContainerForObject(__strong id<NSObject>, SEL)"
100013456:	48 8b 05 63 e2 00 00 	movq	57955(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
10001345d:	48 8b 35 f4 df 00 00 	movq	57332(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100013464:	48 89 c7 	movq	%rax, %rdi
100013467:	ff 15 fb 6b 00 00 	callq	*27643(%rip) ## Objc message: +[NSString stringWithUTF8String:]
10001346d:	48 89 c7 	movq	%rax, %rdi
100013470:	e8 5f 09 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013475:	48 89 45 e8 	movq	%rax, -24(%rbp)
100013479:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
10001347e:	0f 84 0d 00 00 00 	je	0x100013491
100013484:	48 8b 45 e8 	movq	-24(%rbp), %rax
100013488:	48 89 45 c0 	movq	%rax, -64(%rbp)
10001348c:	e9 10 00 00 00 	jmp	0x1000134a1
100013491:	48 8d 05 d0 91 00 00 	leaq	37328(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100013498:	48 89 45 c0 	movq	%rax, -64(%rbp)
10001349c:	e9 00 00 00 00 	jmp	0x1000134a1
1000134a1:	48 8b 45 c0 	movq	-64(%rbp), %rax
1000134a5:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
1000134a9:	48 89 cf 	movq	%rcx, %rdi
1000134ac:	48 89 c6 	movq	%rax, %rsi
1000134af:	e8 3e 09 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000134b4:	48 8d 15 d2 29 00 00 	leaq	10706(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
1000134bb:	48 8b 05 fe e1 00 00 	movq	57854(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000134c2:	48 8b 35 8f df 00 00 	movq	57231(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000134c9:	48 89 c7 	movq	%rax, %rdi
1000134cc:	ff 15 96 6b 00 00 	callq	*27542(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000134d2:	48 89 c7 	movq	%rax, %rdi
1000134d5:	e8 fa 08 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000134da:	48 89 45 e0 	movq	%rax, -32(%rbp)
1000134de:	48 83 7d e0 00 	cmpq	$0, -32(%rbp)
1000134e3:	0f 84 0d 00 00 00 	je	0x1000134f6
1000134e9:	48 8b 45 e0 	movq	-32(%rbp), %rax
1000134ed:	48 89 45 b8 	movq	%rax, -72(%rbp)
1000134f1:	e9 10 00 00 00 	jmp	0x100013506
1000134f6:	48 8d 05 8b 91 00 00 	leaq	37259(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
1000134fd:	48 89 45 b8 	movq	%rax, -72(%rbp)
100013501:	e9 00 00 00 00 	jmp	0x100013506
100013506:	48 8b 45 b8 	movq	-72(%rbp), %rax
10001350a:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
10001350e:	48 89 cf 	movq	%rcx, %rdi
100013511:	48 89 c6 	movq	%rax, %rsi
100013514:	e8 d9 08 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013519:	48 8b 05 80 e2 00 00 	movq	57984(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100013520:	48 8b 35 59 df 00 00 	movq	57177(%rip), %rsi ## Objc selector ref: currentHandler
100013527:	48 89 c7 	movq	%rax, %rdi
10001352a:	ff 15 38 6b 00 00 	callq	*27448(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100013530:	48 89 c7 	movq	%rax, %rdi
100013533:	e8 9c 08 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013538:	ba 24 02 00 00 	movl	$548, %edx
10001353d:	41 89 d0 	movl	%edx, %r8d
100013540:	48 8d 0d 61 91 00 00 	leaq	37217(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100013547:	48 8d 35 9a 92 00 00 	leaq	37530(%rip), %rsi ## Objc cfstring ref: @"self"
10001354e:	48 8b 55 e8 	movq	-24(%rbp), %rdx
100013552:	48 8b 7d e0 	movq	-32(%rbp), %rdi
100013556:	4c 8b 0d 2b df 00 00 	movq	57131(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
10001355d:	49 89 c2 	movq	%rax, %r10
100013560:	48 89 7d b0 	movq	%rdi, -80(%rbp)
100013564:	4c 89 d7 	movq	%r10, %rdi
100013567:	48 89 75 a8 	movq	%rsi, -88(%rbp)
10001356b:	4c 89 ce 	movq	%r9, %rsi
10001356e:	4c 8b 4d b0 	movq	-80(%rbp), %r9
100013572:	48 89 4d a0 	movq	%rcx, -96(%rbp)
100013576:	4c 89 c9 	movq	%r9, %rcx
100013579:	4c 8b 4d a0 	movq	-96(%rbp), %r9
10001357d:	4c 8b 55 a8 	movq	-88(%rbp), %r10
100013581:	4c 89 14 24 	movq	%r10, (%rsp)
100013585:	48 89 45 98 	movq	%rax, -104(%rbp)
100013589:	b0 00 	movb	$0, %al
10001358b:	ff 15 d7 6a 00 00 	callq	*27351(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100013591:	48 8b 4d 98 	movq	-104(%rbp), %rcx
100013595:	48 89 cf 	movq	%rcx, %rdi
100013598:	ff 15 d2 6a 00 00 	callq	*27346(%rip) ## literal pool symbol address: _objc_release
10001359e:	45 31 db 	xorl	%r11d, %r11d
1000135a1:	44 89 de 	movl	%r11d, %esi
1000135a4:	48 8d 4d e0 	leaq	-32(%rbp), %rcx
1000135a8:	48 89 cf 	movq	%rcx, %rdi
1000135ab:	e8 42 08 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000135b0:	45 31 db 	xorl	%r11d, %r11d
1000135b3:	44 89 de 	movl	%r11d, %esi
1000135b6:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
1000135ba:	48 89 cf 	movq	%rcx, %rdi
1000135bd:	e8 30 08 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000135c2:	e9 00 00 00 00 	jmp	0x1000135c7
1000135c7:	e9 00 00 00 00 	jmp	0x1000135cc
1000135cc:	48 8b 7d f0 	movq	-16(%rbp), %rdi
1000135d0:	e8 8b bd ff ff 	callq	_aspect_aliasForSelector
1000135d5:	31 c9 	xorl	%ecx, %ecx
1000135d7:	89 ca 	movl	%ecx, %edx
1000135d9:	b9 01 03 00 00 	movl	$769, %ecx
1000135de:	48 89 45 d8 	movq	%rax, -40(%rbp)
1000135e2:	48 8b 7d f8 	movq	-8(%rbp), %rdi
1000135e6:	48 8b 75 d8 	movq	-40(%rbp), %rsi
1000135ea:	e8 f1 07 00 00 	callq	0x100013de0 ## symbol stub for: _objc_setAssociatedObject
1000135ef:	48 8d 7d f8 	leaq	-8(%rbp), %rdi
1000135f3:	45 31 c0 	xorl	%r8d, %r8d
1000135f6:	44 89 c6 	movl	%r8d, %esi
1000135f9:	e8 f4 07 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000135fe:	48 83 c4 70 	addq	$112, %rsp
100013602:	5d 	popq	%rbp
100013603:	c3 	retq
100013604:	66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_undoSwizzleClassInPlace:
100013610:	55 	pushq	%rbp
100013611:	48 89 e5 	movq	%rsp, %rbp
100013614:	48 81 ec 90 00 00 00 	subq	$144, %rsp
10001361b:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10001361f:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
100013624:	0f 95 c0 	setne	%al
100013627:	34 ff 	xorb	$-1, %al
100013629:	24 01 	andb	$1, %al
10001362b:	0f b6 c8 	movzbl	%al, %ecx
10001362e:	48 63 d1 	movslq	%ecx, %rdx
100013631:	48 83 fa 00 	cmpq	$0, %rdx
100013635:	0f 84 73 01 00 00 	je	0x1000137ae
10001363b:	48 8d 15 6b 32 00 00 	leaq	12907(%rip), %rdx ## literal pool for: "void aspect_undoSwizzleClassInPlace(__unsafe_unretained Class)"
100013642:	48 8b 05 77 e0 00 00 	movq	57463(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100013649:	48 8b 35 08 de 00 00 	movq	56840(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100013650:	48 89 c7 	movq	%rax, %rdi
100013653:	ff 15 0f 6a 00 00 	callq	*27151(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100013659:	48 89 c7 	movq	%rax, %rdi
10001365c:	e8 73 07 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013661:	48 89 45 f0 	movq	%rax, -16(%rbp)
100013665:	48 83 7d f0 00 	cmpq	$0, -16(%rbp)
10001366a:	0f 84 0d 00 00 00 	je	0x10001367d
100013670:	48 8b 45 f0 	movq	-16(%rbp), %rax
100013674:	48 89 45 a8 	movq	%rax, -88(%rbp)
100013678:	e9 10 00 00 00 	jmp	0x10001368d
10001367d:	48 8d 05 e4 8f 00 00 	leaq	36836(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100013684:	48 89 45 a8 	movq	%rax, -88(%rbp)
100013688:	e9 00 00 00 00 	jmp	0x10001368d
10001368d:	48 8b 45 a8 	movq	-88(%rbp), %rax
100013691:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
100013695:	48 89 cf 	movq	%rcx, %rdi
100013698:	48 89 c6 	movq	%rax, %rsi
10001369b:	e8 52 07 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000136a0:	48 8d 15 e6 27 00 00 	leaq	10214(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
1000136a7:	48 8b 05 12 e0 00 00 	movq	57362(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000136ae:	48 8b 35 a3 dd 00 00 	movq	56739(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000136b5:	48 89 c7 	movq	%rax, %rdi
1000136b8:	ff 15 aa 69 00 00 	callq	*27050(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000136be:	48 89 c7 	movq	%rax, %rdi
1000136c1:	e8 0e 07 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000136c6:	48 89 45 e8 	movq	%rax, -24(%rbp)
1000136ca:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
1000136cf:	0f 84 0d 00 00 00 	je	0x1000136e2
1000136d5:	48 8b 45 e8 	movq	-24(%rbp), %rax
1000136d9:	48 89 45 a0 	movq	%rax, -96(%rbp)
1000136dd:	e9 10 00 00 00 	jmp	0x1000136f2
1000136e2:	48 8d 05 9f 8f 00 00 	leaq	36767(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
1000136e9:	48 89 45 a0 	movq	%rax, -96(%rbp)
1000136ed:	e9 00 00 00 00 	jmp	0x1000136f2
1000136f2:	48 8b 45 a0 	movq	-96(%rbp), %rax
1000136f6:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
1000136fa:	48 89 cf 	movq	%rcx, %rdi
1000136fd:	48 89 c6 	movq	%rax, %rsi
100013700:	e8 ed 06 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013705:	48 8b 05 94 e0 00 00 	movq	57492(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
10001370c:	48 8b 35 6d dd 00 00 	movq	56685(%rip), %rsi ## Objc selector ref: currentHandler
100013713:	48 89 c7 	movq	%rax, %rdi
100013716:	ff 15 4c 69 00 00 	callq	*26956(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
10001371c:	48 89 c7 	movq	%rax, %rdi
10001371f:	e8 b0 06 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013724:	ba bf 01 00 00 	movl	$447, %edx
100013729:	41 89 d0 	movl	%edx, %r8d
10001372c:	48 8d 0d 75 8f 00 00 	leaq	36725(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100013733:	48 8d 35 6e 92 00 00 	leaq	37486(%rip), %rsi ## Objc cfstring ref: @"klass"
10001373a:	48 8b 55 f0 	movq	-16(%rbp), %rdx
10001373e:	48 8b 7d e8 	movq	-24(%rbp), %rdi
100013742:	4c 8b 0d 3f dd 00 00 	movq	56639(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100013749:	49 89 c2 	movq	%rax, %r10
10001374c:	48 89 7d 98 	movq	%rdi, -104(%rbp)
100013750:	4c 89 d7 	movq	%r10, %rdi
100013753:	48 89 75 90 	movq	%rsi, -112(%rbp)
100013757:	4c 89 ce 	movq	%r9, %rsi
10001375a:	4c 8b 4d 98 	movq	-104(%rbp), %r9
10001375e:	48 89 4d 88 	movq	%rcx, -120(%rbp)
100013762:	4c 89 c9 	movq	%r9, %rcx
100013765:	4c 8b 4d 88 	movq	-120(%rbp), %r9
100013769:	4c 8b 55 90 	movq	-112(%rbp), %r10
10001376d:	4c 89 14 24 	movq	%r10, (%rsp)
100013771:	48 89 45 80 	movq	%rax, -128(%rbp)
100013775:	b0 00 	movb	$0, %al
100013777:	ff 15 eb 68 00 00 	callq	*26859(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
10001377d:	48 8b 4d 80 	movq	-128(%rbp), %rcx
100013781:	48 89 cf 	movq	%rcx, %rdi
100013784:	ff 15 e6 68 00 00 	callq	*26854(%rip) ## literal pool symbol address: _objc_release
10001378a:	45 31 db 	xorl	%r11d, %r11d
10001378d:	44 89 de 	movl	%r11d, %esi
100013790:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
100013794:	48 89 cf 	movq	%rcx, %rdi
100013797:	e8 56 06 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001379c:	45 31 db 	xorl	%r11d, %r11d
10001379f:	44 89 de 	movl	%r11d, %esi
1000137a2:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
1000137a6:	48 89 cf 	movq	%rcx, %rdi
1000137a9:	e8 44 06 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000137ae:	e9 00 00 00 00 	jmp	0x1000137b3
1000137b3:	48 8b 7d f8 	movq	-8(%rbp), %rdi
1000137b7:	e8 62 04 00 00 	callq	0x100013c1e ## symbol stub for: _NSStringFromClass
1000137bc:	48 89 c7 	movq	%rax, %rdi
1000137bf:	e8 10 06 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000137c4:	48 8d 3d 0d 7a 00 00 	leaq	___block_descriptor_tmp.454(%rip), %rdi
1000137cb:	48 8d 0d 8e 00 00 00 	leaq	___aspect_undoSwizzleClassInPlace_block_invoke(%rip), %rcx
1000137d2:	48 8b 15 47 68 00 00 	movq	26695(%rip), %rdx ## literal pool symbol address: __NSConcreteStackBlock
1000137d9:	48 8d 75 b0 	leaq	-80(%rbp), %rsi
1000137dd:	48 89 45 e0 	movq	%rax, -32(%rbp)
1000137e1:	48 83 c6 20 	addq	$32, %rsi
1000137e5:	48 89 55 b0 	movq	%rdx, -80(%rbp)
1000137e9:	c7 45 b8 00 00 00 c2 	movl	$3254779904, -72(%rbp)
1000137f0:	c7 45 bc 00 00 00 00 	movl	$0, -68(%rbp)
1000137f7:	48 89 4d c0 	movq	%rcx, -64(%rbp)
1000137fb:	48 89 7d c8 	movq	%rdi, -56(%rbp)
1000137ff:	48 8b 45 e0 	movq	-32(%rbp), %rax
100013803:	48 89 c7 	movq	%rax, %rdi
100013806:	48 89 b5 78 ff ff ff 	movq	%rsi, -136(%rbp)
10001380d:	ff 15 65 68 00 00 	callq	*26725(%rip) ## literal pool symbol address: _objc_retain
100013813:	48 8d 4d b0 	leaq	-80(%rbp), %rcx
100013817:	48 89 45 d0 	movq	%rax, -48(%rbp)
10001381b:	48 8b 45 f8 	movq	-8(%rbp), %rax
10001381f:	48 89 45 d8 	movq	%rax, -40(%rbp)
100013823:	48 89 cf 	movq	%rcx, %rdi
100013826:	e8 c5 cd ff ff 	callq	__aspect_modifySwizzledClasses
10001382b:	45 31 c0 	xorl	%r8d, %r8d
10001382e:	44 89 c6 	movl	%r8d, %esi
100013831:	48 8b 85 78 ff ff ff 	movq	-136(%rbp), %rax
100013838:	48 89 c7 	movq	%rax, %rdi
10001383b:	e8 b2 05 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013840:	45 31 c0 	xorl	%r8d, %r8d
100013843:	44 89 c6 	movl	%r8d, %esi
100013846:	48 8d 45 e0 	leaq	-32(%rbp), %rax
10001384a:	48 89 c7 	movq	%rax, %rdi
10001384d:	e8 a0 05 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013852:	48 81 c4 90 00 00 00 	addq	$144, %rsp
100013859:	5d 	popq	%rbp
10001385a:	c3 	retq
10001385b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
___aspect_undoSwizzleClassInPlace_block_invoke:
100013860:	55 	pushq	%rbp
100013861:	48 89 e5 	movq	%rsp, %rbp
100013864:	48 83 ec 30 	subq	$48, %rsp
100013868:	48 8d 45 f0 	leaq	-16(%rbp), %rax
10001386c:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100013870:	48 89 f9 	movq	%rdi, %rcx
100013873:	48 c7 45 f0 00 00 00 00 	movq	$0, -16(%rbp)
10001387b:	48 89 7d e0 	movq	%rdi, -32(%rbp)
10001387f:	48 89 c7 	movq	%rax, %rdi
100013882:	48 89 4d d8 	movq	%rcx, -40(%rbp)
100013886:	e8 67 05 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
10001388b:	48 8b 45 d8 	movq	-40(%rbp), %rax
10001388f:	48 89 45 e8 	movq	%rax, -24(%rbp)
100013893:	48 8b 4d f0 	movq	-16(%rbp), %rcx
100013897:	48 8b 75 e0 	movq	-32(%rbp), %rsi
10001389b:	48 8b 7e 20 	movq	32(%rsi), %rdi
10001389f:	48 8b 35 f2 dc 00 00 	movq	56562(%rip), %rsi ## Objc selector ref: containsObject:
1000138a6:	48 89 7d d0 	movq	%rdi, -48(%rbp)
1000138aa:	48 89 cf 	movq	%rcx, %rdi
1000138ad:	48 8b 55 d0 	movq	-48(%rbp), %rdx
1000138b1:	ff 15 b1 67 00 00 	callq	*26545(%rip) ## Objc message: -[%rdi containsObject:]
1000138b7:	a8 01 	testb	$1, %al
1000138b9:	0f 85 05 00 00 00 	jne	0x1000138c4
1000138bf:	e9 2c 00 00 00 	jmp	0x1000138f0
1000138c4:	48 8b 45 d8 	movq	-40(%rbp), %rax
1000138c8:	48 8b 78 28 	movq	40(%rax), %rdi
1000138cc:	e8 3f 00 00 00 	callq	_aspect_undoSwizzleForwardInvocation
1000138d1:	48 8b 45 f0 	movq	-16(%rbp), %rax
1000138d5:	48 8b 7d d8 	movq	-40(%rbp), %rdi
1000138d9:	48 8b 4f 20 	movq	32(%rdi), %rcx
1000138dd:	48 8b 35 74 dd 00 00 	movq	56692(%rip), %rsi ## Objc selector ref: removeObject:
1000138e4:	48 89 c7 	movq	%rax, %rdi
1000138e7:	48 89 ca 	movq	%rcx, %rdx
1000138ea:	ff 15 78 67 00 00 	callq	*26488(%rip) ## Objc message: -[%rdi removeObject:]
1000138f0:	31 c0 	xorl	%eax, %eax
1000138f2:	89 c6 	movl	%eax, %esi
1000138f4:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
1000138f8:	48 89 cf 	movq	%rcx, %rdi
1000138fb:	e8 f2 04 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013900:	48 83 c4 30 	addq	$48, %rsp
100013904:	5d 	popq	%rbp
100013905:	c3 	retq
100013906:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
_aspect_undoSwizzleForwardInvocation:
100013910:	55 	pushq	%rbp
100013911:	48 89 e5 	movq	%rsp, %rbp
100013914:	48 81 ec 90 00 00 00 	subq	$144, %rsp
10001391b:	48 89 7d f8 	movq	%rdi, -8(%rbp)
10001391f:	48 83 7d f8 00 	cmpq	$0, -8(%rbp)
100013924:	0f 95 c0 	setne	%al
100013927:	34 ff 	xorb	$-1, %al
100013929:	24 01 	andb	$1, %al
10001392b:	0f b6 c8 	movzbl	%al, %ecx
10001392e:	48 63 d1 	movslq	%ecx, %rdx
100013931:	48 83 fa 00 	cmpq	$0, %rdx
100013935:	0f 84 73 01 00 00 	je	0x100013aae
10001393b:	48 8d 15 aa 2f 00 00 	leaq	12202(%rip), %rdx ## literal pool for: "void aspect_undoSwizzleForwardInvocation(__unsafe_unretained Class)"
100013942:	48 8b 05 77 dd 00 00 	movq	56695(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
100013949:	48 8b 35 08 db 00 00 	movq	56072(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
100013950:	48 89 c7 	movq	%rax, %rdi
100013953:	ff 15 0f 67 00 00 	callq	*26383(%rip) ## Objc message: +[NSString stringWithUTF8String:]
100013959:	48 89 c7 	movq	%rax, %rdi
10001395c:	e8 73 04 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013961:	48 89 45 f0 	movq	%rax, -16(%rbp)
100013965:	48 83 7d f0 00 	cmpq	$0, -16(%rbp)
10001396a:	0f 84 0d 00 00 00 	je	0x10001397d
100013970:	48 8b 45 f0 	movq	-16(%rbp), %rax
100013974:	48 89 45 c8 	movq	%rax, -56(%rbp)
100013978:	e9 10 00 00 00 	jmp	0x10001398d
10001397d:	48 8d 05 e4 8c 00 00 	leaq	36068(%rip), %rax ## Objc cfstring ref: @"<Unknown Function>"
100013984:	48 89 45 c8 	movq	%rax, -56(%rbp)
100013988:	e9 00 00 00 00 	jmp	0x10001398d
10001398d:	48 8b 45 c8 	movq	-56(%rbp), %rax
100013991:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
100013995:	48 89 cf 	movq	%rcx, %rdi
100013998:	48 89 c6 	movq	%rax, %rsi
10001399b:	e8 52 04 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
1000139a0:	48 8d 15 e6 24 00 00 	leaq	9446(%rip), %rdx ## literal pool for: "/Users/hechao/Documents/Demos/RuntimeLearning/Pods/Aspects/Aspects.m"
1000139a7:	48 8b 05 12 dd 00 00 	movq	56594(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSString
1000139ae:	48 8b 35 a3 da 00 00 	movq	55971(%rip), %rsi ## Objc selector ref: stringWithUTF8String:
1000139b5:	48 89 c7 	movq	%rax, %rdi
1000139b8:	ff 15 aa 66 00 00 	callq	*26282(%rip) ## Objc message: +[NSString stringWithUTF8String:]
1000139be:	48 89 c7 	movq	%rax, %rdi
1000139c1:	e8 0e 04 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
1000139c6:	48 89 45 e8 	movq	%rax, -24(%rbp)
1000139ca:	48 83 7d e8 00 	cmpq	$0, -24(%rbp)
1000139cf:	0f 84 0d 00 00 00 	je	0x1000139e2
1000139d5:	48 8b 45 e8 	movq	-24(%rbp), %rax
1000139d9:	48 89 45 c0 	movq	%rax, -64(%rbp)
1000139dd:	e9 10 00 00 00 	jmp	0x1000139f2
1000139e2:	48 8d 05 9f 8c 00 00 	leaq	35999(%rip), %rax ## Objc cfstring ref: @"<Unknown File>"
1000139e9:	48 89 45 c0 	movq	%rax, -64(%rbp)
1000139ed:	e9 00 00 00 00 	jmp	0x1000139f2
1000139f2:	48 8b 45 c0 	movq	-64(%rbp), %rax
1000139f6:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
1000139fa:	48 89 cf 	movq	%rcx, %rdi
1000139fd:	48 89 c6 	movq	%rax, %rsi
100013a00:	e8 ed 03 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013a05:	48 8b 05 94 dd 00 00 	movq	56724(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSAssertionHandler
100013a0c:	48 8b 35 6d da 00 00 	movq	55917(%rip), %rsi ## Objc selector ref: currentHandler
100013a13:	48 89 c7 	movq	%rax, %rdi
100013a16:	ff 15 4c 66 00 00 	callq	*26188(%rip) ## Objc message: +[NSAssertionHandler currentHandler]
100013a1c:	48 89 c7 	movq	%rax, %rdi
100013a1f:	e8 b0 03 00 00 	callq	0x100013dd4 ## symbol stub for: _objc_retainAutoreleasedReturnValue
100013a24:	ba 8f 01 00 00 	movl	$399, %edx
100013a29:	41 89 d0 	movl	%edx, %r8d
100013a2c:	48 8d 0d 75 8c 00 00 	leaq	35957(%rip), %rcx ## Objc cfstring ref: @"Invalid parameter not satisfying: %@"
100013a33:	48 8d 35 6e 8f 00 00 	leaq	36718(%rip), %rsi ## Objc cfstring ref: @"klass"
100013a3a:	48 8b 55 f0 	movq	-16(%rbp), %rdx
100013a3e:	48 8b 7d e8 	movq	-24(%rbp), %rdi
100013a42:	4c 8b 0d 3f da 00 00 	movq	55871(%rip), %r9 ## Objc selector ref: handleFailureInFunction:file:lineNumber:description:
100013a49:	49 89 c2 	movq	%rax, %r10
100013a4c:	48 89 7d b8 	movq	%rdi, -72(%rbp)
100013a50:	4c 89 d7 	movq	%r10, %rdi
100013a53:	48 89 75 b0 	movq	%rsi, -80(%rbp)
100013a57:	4c 89 ce 	movq	%r9, %rsi
100013a5a:	4c 8b 4d b8 	movq	-72(%rbp), %r9
100013a5e:	48 89 4d a8 	movq	%rcx, -88(%rbp)
100013a62:	4c 89 c9 	movq	%r9, %rcx
100013a65:	4c 8b 4d a8 	movq	-88(%rbp), %r9
100013a69:	4c 8b 55 b0 	movq	-80(%rbp), %r10
100013a6d:	4c 89 14 24 	movq	%r10, (%rsp)
100013a71:	48 89 45 a0 	movq	%rax, -96(%rbp)
100013a75:	b0 00 	movb	$0, %al
100013a77:	ff 15 eb 65 00 00 	callq	*26091(%rip) ## Objc message: -[%rdi handleFailureInFunction:file:lineNumber:description:]
100013a7d:	48 8b 4d a0 	movq	-96(%rbp), %rcx
100013a81:	48 89 cf 	movq	%rcx, %rdi
100013a84:	ff 15 e6 65 00 00 	callq	*26086(%rip) ## literal pool symbol address: _objc_release
100013a8a:	45 31 db 	xorl	%r11d, %r11d
100013a8d:	44 89 de 	movl	%r11d, %esi
100013a90:	48 8d 4d e8 	leaq	-24(%rbp), %rcx
100013a94:	48 89 cf 	movq	%rcx, %rdi
100013a97:	e8 56 03 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013a9c:	45 31 db 	xorl	%r11d, %r11d
100013a9f:	44 89 de 	movl	%r11d, %esi
100013aa2:	48 8d 4d f0 	leaq	-16(%rbp), %rcx
100013aa6:	48 89 cf 	movq	%rcx, %rdi
100013aa9:	e8 44 03 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013aae:	e9 00 00 00 00 	jmp	0x100013ab3
100013ab3:	48 8d 05 6e 8b 00 00 	leaq	35694(%rip), %rax ## Objc cfstring ref: @"__aspects_forwardInvocation:"
100013aba:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100013abe:	48 89 7d 98 	movq	%rdi, -104(%rbp)
100013ac2:	48 89 c7 	movq	%rax, %rdi
100013ac5:	e8 4e 01 00 00 	callq	0x100013c18 ## symbol stub for: _NSSelectorFromString
100013aca:	48 8b 7d 98 	movq	-104(%rbp), %rdi
100013ace:	48 89 c6 	movq	%rax, %rsi
100013ad1:	e8 96 01 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100013ad6:	48 89 45 e0 	movq	%rax, -32(%rbp)
100013ada:	48 8b 05 b7 db 00 00 	movq	56247(%rip), %rax ## Objc class ref: _OBJC_CLASS_$_NSObject
100013ae1:	48 8b 35 b8 d3 00 00 	movq	54200(%rip), %rsi ## Objc selector ref: class
100013ae8:	48 89 c7 	movq	%rax, %rdi
100013aeb:	ff 15 77 65 00 00 	callq	*25975(%rip) ## Objc message: +[NSObject class]
100013af1:	48 8b 35 00 db 00 00 	movq	56064(%rip), %rsi ## Objc selector ref: forwardInvocation:
100013af8:	48 89 c7 	movq	%rax, %rdi
100013afb:	e8 6c 01 00 00 	callq	0x100013c6c ## symbol stub for: _class_getInstanceMethod
100013b00:	48 89 45 d8 	movq	%rax, -40(%rbp)
100013b04:	48 8b 45 e0 	movq	-32(%rbp), %rax
100013b08:	48 83 f8 00 	cmpq	$0, %rax
100013b0c:	48 89 45 90 	movq	%rax, -112(%rbp)
100013b10:	0f 84 0d 00 00 00 	je	0x100013b23
100013b16:	48 8b 45 90 	movq	-112(%rbp), %rax
100013b1a:	48 89 45 88 	movq	%rax, -120(%rbp)
100013b1e:	e9 08 00 00 00 	jmp	0x100013b2b
100013b23:	48 8b 45 d8 	movq	-40(%rbp), %rax
100013b27:	48 89 45 88 	movq	%rax, -120(%rbp)
100013b2b:	48 8b 45 88 	movq	-120(%rbp), %rax
100013b2f:	48 89 c7 	movq	%rax, %rdi
100013b32:	e8 13 02 00 00 	callq	0x100013d4a ## symbol stub for: _method_getImplementation
100013b37:	48 8d 0d f4 29 00 00 	leaq	10740(%rip), %rcx ## literal pool for: "v@:@"
100013b3e:	48 89 45 d0 	movq	%rax, -48(%rbp)
100013b42:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100013b46:	48 8b 35 ab da 00 00 	movq	55979(%rip), %rsi ## Objc selector ref: forwardInvocation:
100013b4d:	48 8b 55 d0 	movq	-48(%rbp), %rdx
100013b51:	e8 2e 01 00 00 	callq	0x100013c84 ## symbol stub for: _class_replaceMethod
100013b56:	48 89 45 80 	movq	%rax, -128(%rbp)
100013b5a:	48 81 c4 90 00 00 00 	addq	$144, %rsp
100013b61:	5d 	popq	%rbp
100013b62:	c3 	retq
100013b63:	66 66 66 66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
___copy_helper_block_.451:
100013b70:	55 	pushq	%rbp
100013b71:	48 89 e5 	movq	%rsp, %rbp
100013b74:	48 83 ec 10 	subq	$16, %rsp
100013b78:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100013b7c:	48 89 75 f0 	movq	%rsi, -16(%rbp)
100013b80:	48 8b 75 f0 	movq	-16(%rbp), %rsi
100013b84:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100013b88:	48 89 f8 	movq	%rdi, %rax
100013b8b:	48 83 c0 20 	addq	$32, %rax
100013b8f:	48 8b 76 20 	movq	32(%rsi), %rsi
100013b93:	48 c7 47 20 00 00 00 00 	movq	$0, 32(%rdi)
100013b9b:	48 89 c7 	movq	%rax, %rdi
100013b9e:	e8 4f 02 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013ba3:	48 83 c4 10 	addq	$16, %rsp
100013ba7:	5d 	popq	%rbp
100013ba8:	c3 	retq
100013ba9:	0f 1f 80 00 00 00 00 	nopl	(%rax)
___destroy_helper_block_.452:
100013bb0:	55 	pushq	%rbp
100013bb1:	48 89 e5 	movq	%rsp, %rbp
100013bb4:	48 83 ec 10 	subq	$16, %rsp
100013bb8:	31 c0 	xorl	%eax, %eax
100013bba:	89 c6 	movl	%eax, %esi
100013bbc:	48 89 7d f8 	movq	%rdi, -8(%rbp)
100013bc0:	48 8b 7d f8 	movq	-8(%rbp), %rdi
100013bc4:	48 83 c7 20 	addq	$32, %rdi
100013bc8:	e8 25 02 00 00 	callq	0x100013df2 ## symbol stub for: _objc_storeStrong
100013bcd:	48 83 c4 10 	addq	$16, %rsp
100013bd1:	5d 	popq	%rbp
100013bd2:	c3 	retq
100013bd3:	90 	nop
100013bd4:	90 	nop
100013bd5:	90 	nop
100013bd6:	90 	nop
100013bd7:	90 	nop
100013bd8:	90 	nop
100013bd9:	90 	nop
100013bda:	90 	nop
100013bdb:	90 	nop
100013bdc:	90 	nop
100013bdd:	90 	nop
100013bde:	90 	nop
100013bdf:	90 	nop
_static_calculate_add:
100013be0:	55 	pushq	%rbp
100013be1:	48 89 e5 	movq	%rsp, %rbp
100013be4:	89 7d fc 	movl	%edi, -4(%rbp)
100013be7:	89 75 f8 	movl	%esi, -8(%rbp)
100013bea:	8b 75 fc 	movl	-4(%rbp), %esi
100013bed:	03 75 f8 	addl	-8(%rbp), %esi
100013bf0:	89 f0 	movl	%esi, %eax
100013bf2:	5d 	popq	%rbp
100013bf3:	c3 	retq
